[
  {
    "description": "",
    "tags": [
      {
        "title": "module",
        "description": null,
        "type": null,
        "name": "Jss"
      },
      {
        "title": "author",
        "description": "Jeffrey Arts <sjeffff@gmail.com>"
      },
      {
        "title": "copyright",
        "description": "2015"
      },
      {
        "title": "name",
        "name": "Jss"
      },
      {
        "title": "kind",
        "kind": "module"
      }
    ],
    "context": {
      "loc": {
        "start": {
          "line": 254,
          "column": 0
        },
        "end": {
          "line": 254,
          "column": 19
        }
      },
      "file": "/Users/jeffreyarts/Documents/DEV/jss/lib/jss.js",
      "code": "JssService = {};\n\n// Edit this array to enable or disable default modules\nJssService.activeModules   = []\n\n// Set this to false in a live environment\nJssService.dev             = true;\n\n/**************************\n*\n*   Below are core properties defined, becarefull when you think of changing these...\n*\n**************************/\n\n\nJssService.actions = {\n    hover:      ['hover',    'mouseover',   'onmouseover'                       ], // Fixed\n    click:      ['click',    'onclick'                                          ], // Fixed\n    mouseIn:    ['mousein',  'onmousein', 'mouseenter', 'onmouseenter'          ], // Fixed\n    mouseOut:   ['mouseout', 'onmouseout', 'mouseleave', 'onmouseleave'         ], // Fixed\n    resize:     ['resize',   'onresize'                                         ], // Fixed\n    focus:      ['focus',    'onfocus'                                          ],\n    keyDown:    ['keydown',  'keypress'                                         ],\n    keyUp:      ['keyup',    'keyrelease'                                       ],\n    change:     ['change',   'onchange'                                         ],\n};\n\nJssService.enterDelay = 1000;                                                   // Amount of miliseconds which is used to remove the entered state. (see core.actions) JssService.enterDelay setTimeout\n\nJssService.forbiddenProperties = [\n    'type',\n    'triggers',\n    'configureTrigger',\n    'findTriggers'\n];\n\n/**\n * -----------------------------------------------------------------------------\n * Is Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isModule = function(element, moduleName) {\n    var arr = element.className.split(\" \");\n    var found = false;\n\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i].indexOf(moduleName)        > -1 &&\n            arr[i].indexOf(moduleName + \"_\") == -1 &&\n            arr[i].indexOf(moduleName + \"-\") == -1)\n        {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.addModule = function(moduleName) {\n    this.activeModules.push(this.toKebabCase(moduleName))\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To CamelCase\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toCamelCase = function(input) {\n    var arr, res;\n    res = \"\";\n    if (typeof input === \"string\") {\n        input = input.replace(/\\-/g,\" \");                                       // Replace all dashes with spaces\n        arr = input.split(\" \");\n    } else {\n        arr = input;                                                            // Assume it is an array\n    }\n\n\n\n    var i = 0;\n    for (var i in arr) {\n        if (typeof i != \"undefined\") {\n            res += arr[i][0].toUpperCase()+ arr[i].slice(1); // Capitalize first letter\n        }\n    }\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To kebab-case\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toKebabCase = function(input) {\n    var res, str;\n    res = \"\";\n\n    if (typeof input === \"string\") {\n        str = input;\n    } else {                                                                    // Assume it is an array\n        str = input.join(\" \");\n    }\n\n    // First change it to camelcase\n    str = this.toCamelCase(str);\n\n    var max = str.length;\n    for (var i=0; i < max; i++) {\n        // Check if character is uppercase\n        if (str[i] != str[i].toLowerCase()) {\n            if (i!==0) {\n                str = str.substr(0, i) + \"-\" + str.substr(i);\n                i++;\n            }\n        }\n    }\n\n    return res = str.toLowerCase();\n}\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get option\n * -----------------------------------------------------------------------------\n * @param  {string} name                                                        Keyname in optionList\n * @param  {array} optionList                                                   Array with all possible options\n * @return {}                                                                   Copy of the value (optionsList[name])\n */\nJssService.getOption = function(name, optionList) {\n    if (typeof optionList !== \"object\") {\n        return false;\n    }\n\n    var res;\n\n    switch (name) {\n\n        // Only set `addDefaults` to false when it is explicitly set.\n        case \"addDefaults\":\n            if (optionList[name] !== false || typeof optionList[name] === \"undefined\") {\n                res = true;\n            } else {\n                res = false;\n            }\n        break;\n        case \"fallback\":\n            if ( Array.isArray(optionList[name]) ) {\n                res = optionList[name];\n                if (res.length===0) {\n                    res = false;\n                }\n            } else if (typeof optionList[name] === \"string\"){\n                res = [optionList[name]];\n            }\n        break;\n        default:\n        res = optionList[name]\n    }\n\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Is Trigger\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isTrigger = function(element, moduleName) {\n    if (element.className.indexOf(moduleName + \"--\") > -1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get trigger name\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {string} Name of the trigger.\n */\nJssService.getTriggerName = function(element, moduleName) {\n    if (typeof element != \"object\") {\n        console.error('Required first argument `element` needs to be a domElement.');\n        return false;\n    }\n    if (typeof moduleName != \"string\") {\n        console.error('Required second argument `moduleName` needs to be a string.');\n        return false;\n    }\n\n    // As an example we assume that the value of element.className equals 'b module--triggerName'\n    var startPos = element.className.indexOf(moduleName + \"--\");                    // 2\n    var sliced = element.className.slice(startPos, element.className.length )       // 'module--triggerName'\n    var endPos = sliced.indexOf(\" \");                                               // -1       // not found\n    if (endPos != -1) {                                                             // 19\n        sliced = sliced.slice(0,endPos);                                            // if there is more after the string, this will remove it\n    }\n    return sliced.replace(moduleName + \"--\",\"\")\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger name is allowed\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} True if the triggername is allowed, otherwise false.\n */\nJssService.triggerNameIsAllowed = function(element, moduleName) {\n    if (JssService.forbiddenProperties.indexOf(this.getTriggerName(element, moduleName)) > -1) {      // This triggerName is a core property, throw error\n        console.error('Triggername `' + getTriggerName(element,moduleName) + '` is not allowed. Change the trigger so it does not corresponds any of these: ' + JssService.forbiddenProperties)\n        return false;\n    }\n    return true;\n}\n/**\n * @module Jss\n * @author      Jeffrey Arts <sjeffff@gmail.com>\n * @copyright   2015\n */\nJss = function(){};\n\nJss.prototype.type      = \"Jss\"\nJss.prototype.triggers  = false;\nJss.prototype.element   = undefined;                                              // {obj} domElement\nJss.prototype.state     = undefined;                                              // {str} State of module, is reflected by the css class __isState\n\n/**\n * -----------------------------------------------------------------------------\n * Find Triggers\n * -----------------------------------------------------------------------------\n *\n * @param {domElement} element\n * @return {undefined}\n */\nJss.prototype.findTriggers = function(element) {\n    this.triggers = [];                                                         // If this is not set, all modules will have the same reference point to this.triggers.\n    // Module is created, now look for any module triggers\n    this.searchTriggersRecursiveInnerFunction(this.element)\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger\n * -----------------------------------------------------------------------------\n */\nJss.prototype.trigger = function(which, fn) {\n    if (typeof this.triggers !== \"object\") {\n        console.info(\"No triggers are found, please specify them in the css as `module-name--trigger-name`.\");\n        return false;\n    }\n\n    if (typeof this.triggers[which] !== \"object\") {\n        console.info(\"You are trying to execute a function on a non existing trigger `\" + which + \"`\");\n        return false;\n    }\n\n    for (var i = 0; i < this.triggers[which].length; i++) {\n        fn(this.triggers[which][i])\n    }\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Search triggers recursive inner function\n * -----------------------------------------------------------------------------\n * Recursive function which is executed bij findTriggers;\n *\n * @return {undefined}\n */\nJss.prototype.searchTriggersRecursiveInnerFunction = function(element) {\n    var self = this;\n    if (typeof element == \"undefined\" ) {\n        element = this.element;\n    }\n    if ( element.hasChildNodes() ) {\n        for (var i=0; i < element.childNodes.length; i++) {\n\n            var childElement = element.childNodes[i];                           // Improve readability\n\n            if (childElement.nodeType == 1) {                                   // NodeType 1 == domElement\n\n                if (JssService.isTrigger(childElement, this.moduleName)) {\n\n                    // Add a child element\n                    if (JssService.triggerNameIsAllowed(childElement, this.moduleName)) {\n                        var triggerName = JssService.getTriggerName(childElement, this.moduleName)\n\n                        if (typeof self.triggers[triggerName] !== \"object\") {\n                            self.triggers[triggerName] = [];\n                        }\n\n                        var tmp = new JssTrigger(childElement, {\n                            module: self,\n                            moduleName: this.moduleName,\n                            triggerName: triggerName,\n                        });\n\n                        self.triggers[triggerName].push(tmp);\n                    }\n                }\n                if (childElement.hasChildNodes()) {\n                    self.searchTriggersRecursiveInnerFunction(childElement)\n                }\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Configure Trigger\n * -----------------------------------------------------------------------------\n *\n * @return {undefined}\n */\nJss.prototype.configureTrigger = function(trigger, fn) {\n    if ( typeof this.triggers[trigger] == \"object\") {\n\n        for (var i = 0; i < this.triggers[trigger].length; i++) {\n            //self.triggers[trigger][i]\n            fn(this.triggers[trigger][i]);\n        }\n\n    } else if (JssService.dev) {\n        console.error(\"You are trying to configure a trigger which has no attached domElement\")\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n *   Init\n * -----------------------------------------------------------------------------\n * Notice the user that a init function needs to be added for controlling the triggers\n *\n * @return {undefined}\n */\nJss.prototype.init = function(func) {\n    if (JssService.dev) {\n        console.info(this.moduleName + \": Add a prototype.init function to add triggers and stuff\")\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set element\n * -----------------------------------------------------------------------------\n * Add a domElement to `this`\n *\n * @return {undefined}\n */\nJss.prototype.setElement = function(element) {\n    if (typeof element == \"undefined\") {\n        if (JssService.dev) {\n            return console.error(\"First parameter of setElement needs to be a domElement\");\n        }\n    }\n    this.element = element;\n}\n/*******************************************************************************\n   *\n   *\tActions\n   *\n   *  \t@author      Jeffrey Arts <sjeffff@gmail.com>\n   *    @copyright   2015\n   *\n*******************************************************************************/\n/**\n * -----------------------------------------------------------------------------\n *   Validate action\n * -----------------------------------------------------------------------------\n * Checks if parameter is a valid action, and logs an error when not.\n *\n * @param {string} request                                                      The name of the request\n * @return {boolean} true if a action is valid, otherwise false.\n */\nJss.prototype.validateAction = function(request) {\n    var result;\n    request = this.getActionElement(request).request\n    for (var action in JssService.actions) {\n        if (JssService.actions[action].indexOf(request.toLowerCase()) > -1) {\n            result = action;\n            break;\n        }\n    }\n    if (result) {\n        return result;\n    } else {\n        console.error(\"validateAction: unknown request\", request);\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * \t Add Action\n * -----------------------------------------------------------------------------\n * Adds an action to the object, list of possible requests can be found in Jss.actions\n *\n * | Options\n * \t\t- addDefaults {boolean}                                                 True: add default classes, false: don't\n *\n *\n *\n * @param {string} request                                                      The name of the request\n * @param {function} fn                                                         The function which should be triggered\n * @param {object} options                                                      Object with option parameters\n * @return {boolean} true if a action is succesfully added, otherwise false.\n */\nJss.prototype.addAction = function(request, fn, options) {\n\n    var self        = this;\n    var action      = self.validateAction(request)\n    var actions     = [];\n    var t = self.getActionElement(request);\n    var element     = t.element;\n    var request     = t.request;\n    t = undefined;\n\n    // Options\n    var addDefaults = JssService.getOption(\"addDefaults\", options);\n\n\n\n    switch (action) {\n\n        case \"resize\":\n\n            actions.push(element.addEventListener(\"resize\", fn));\n\n        break;\n\n\n        case \"click\":\n            actions.push(element.addEventListener(\"click\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"click\", function(){\n                    self.setState(\"Clicked\")\n                }));\n                actions.push(window.addEventListener( \"click\", function(event) {\n                    if (event.target != self.element && self.hasState(\"Clicked\")) {\n                        self.removeState(\"Clicked\")\n                    }\n                }));\n            } // End addDefaults\n        break;\n\n\n        case \"change\":\n            actions.push(element.addEventListener(\"change\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"change\", function(){\n                    self.setState(\"Changed\")\n                    setTimeout(function(){self.removeState(\"Changed\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"hover\":\n            actions.push(element.addEventListener(\"mouseover\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseover\", function(){\n                    self.setState(\"Hover\")\n                }));\n                actions.push(element.addEventListener(\"mouseout\",  function(){\n                    self.removeState(\"Hover\")\n                }));\n            }\n        break;\n\n\n        case \"mouseIn\":\n\n            actions.push(element.addEventListener(\"mouseenter\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseenter\", function(){\n                    self.setState(\"MouseIn\")\n                    setTimeout(function(){self.removeState(\"MouseIn\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"mouseOut\":\n\n            actions.push(element.addEventListener(\"mouseleave\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseleave\", function(){\n                    self.setState(\"MouseOut\")\n                    setTimeout(function(){self.removeState(\"MouseOut\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n    }\n\n\n    if (actions.length > 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get action element\n * -----------------------------------------------------------------------------\n * @param  {string} request                                                     The request\n * @return {object}                                                             An object with 2 properties: request && element\n */\nJss.prototype.getActionElement = function(request) {\n    var self = this;\n    var prefix = false;\n    var newRequest  = request;\n    var element = self.element;\n    // Set prefix if it exists\n    if (request.indexOf(\".\") > 0) {\n        var t       = request.split(\".\"),\n        newRequest  = t[1];\n        prefix      = t[0];\n        t = undefined;\n    }\n\n    // Update element according the prefix (or skip it, if not set)\n    if (prefix !== false) {\n        switch (prefix) {\n            case \"screen\":\n            case \"window\":\n                element = window;\n            break;\n        }\n    }\n\n    // Return object\n    return {\n        request: newRequest,\n        element: element\n    }\n}\n/**\n * -----------------------------------------------------------------------------\n * Class name prefix\n * -----------------------------------------------------------------------------\n * The prefix equals the modulename, or - when it's a trigger object - modulename--triggername\n *\n * @return {string} The classname\n */\nJss.prototype.classNamePrefix = function() {\n    if (this.type == \"JssTrigger\") {\n        return this.moduleName + \"--\" + this.triggerName;\n    } else {\n        return this.moduleName;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Remove class name\n * -----------------------------------------------------------------------------\n * Removes the `this.element` classname\n * \t- \"all\" || undefined        > Removes ALL classnames\n *  - \"allStates\" || \"states\"   > Remove all STATES\n *  - all other strings remove that specific string from the className\n *\n * @param {string} input                                                        The classname (case-sensitive) which needs to be removed\n * @return {undefined}\n */\nJss.prototype.removeClassName = function(input) {\n\n    var classList  = [];\n\n    if (input == \"all\" || typeof input == \"undefined\") {\n\n        this.element.className = \"\";\n\n    } else if (input == \"states\" || input == \"allStates\") {\n\n        classList = this.element.className.split(\" \");\n        for (var i in classList) {\n            className = classList[i];\n            if (className.indexOf(\"__is\") > -1) {\n                delete classList[i];\n            }\n        }\n        this.element.className = classList.join(\" \");\n\n    } else if(typeof input == \"string\") {\n        this.element.className = this.element.className.replace(input,\"\");\n    } else {\n        console.error(\"removeClassName: parameter should be a string\");\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Add class name\n * -----------------------------------------------------------------------------\n * Adds a class name by string or array.\n * Does NOT check for duplicates\n *\n * @param  {string} The classname to be added\n * @return {undefined}\n */\nJss.prototype.addClassName = function(data) {\n    this.element.className += \" \";\n    if (typeof data == \"string\") {\n        this.element.className += data;\n    } else {\n        this.element.className += data.join(\" \")\n    }\n}\n\n/**\n * List where the keys corresponds with this[key], and where the value is the function to be executed when the var is changed.\n */\nJss.prototype.setterWatchList = {};\nJss.prototype.getterWatchList = {};\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add data\n * -----------------------------------------------------------------------------\n * Add a (default) value for the given attribute.\n *\n * @param {string} attribute                                                    The name of the attribute (this[attribute])\n * @param {*} value                                                             The value of this[attribute], could be anything...\n * @param {object} options\n *           \t\t- setterWatchFunction {function}\n *           \t\t- getterWatchFunction {function}\n */\nJss.prototype.addData = function(attribute, value, options) {\n\n\n    // watchList[key] = fn;\n    var setterWatchFunction = JssService.getOption('setterWatchFunction', options); // Function\n    var getterWatchFunction = JssService.getOption('getterWatchFunction', options); // Function\n\n    if (typeof setterWatchFunction === \"function\") {\n        this.setterWatchList[attribute] = setterWatchFunction;\n    }\n\n    if (typeof getterWatchFunction === \"function\") {\n        this.getterWatchList[attribute] = getterWatchFunction;\n    }\n\n    // Set the default value\n    return this[attribute] = value;\n}\n\n\n\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- ajax {string} url\n */\nJss.prototype.setData = function(attribute, value, options) {\n\n    this[attribute] = value;\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n\n    if (Array.isArray(fallback)) {\n\n        for (var i = 0; i < fallback.length; i++) {\n            var type = fallback[i];\n\n            if (value && value.length > 0) {\n                this['setData' + JssService.toCamelCase(type)](attribute, value); // Call this.addDataAttribute(value) || this.addDataCookie(value) etc...\n                this[attribute] = value;\n            }\n        }\n    }\n\n    // Call the setter watch function, if defined;\n    if (typeof this.setterWatchList[attribute] === \"function\") { // Use the watchlist to add functionality whenever a data attribute is updated\n        this.setterWatchList[attribute]();\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataDefault {boolean}\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- dataAjax {string} url\n */\nJss.prototype.getData = function(attribute, options) {\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n    var value = false;\n\n\n    if (!fallback) {\n        fallback = ['attribute'];\n    }\n\n\n    for (var i = 0; i < fallback.length; i++) {\n        var type = JssService.toCamelCase(fallback[i]);\n        var customOptions = false;\n\n        if (typeof options == \"object\") {\n            customOptions = options[fallback[i].toLowerCase()];\n        }\n\n        if (!value || value.length < 0) {\n            if (typeof this['getData' + type] !== \"function\") {\n                console.error('this.getData' + type + ' is not a function. Probably ' + type + ' is not a available data option');\n                continue;\n            }\n            value = this['getData' + type]( attribute, customOptions ); // Call this.getDataAttribute(value) || this.getDataCookie(value) || this.getDataAjax(value) etc...\n        }\n    }\n    console.log(this.getterWatchList);\n    // Call the getter watch function, if defined;\n    if (typeof this.getterWatchList[attribute] == \"function\") {\n        this.getterWatchList[attribute]();\n    }\n\n    return this[attribute] = value;\n}\n/**\n * -----------------------------------------------------------------------------\n * Get data: Ajax\n * -----------------------------------------------------------------------------\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n *\n * @param {string} attribute                                                    The NAME of the inner variable (this.NAME), is also used as the key for the GET Request {NAME: value}\n * @param {object} options                                                      Object with parameters used to make a GET request\n * @return {string}                                                             The value of the given attribute, or false if an erro occured.\n */\nJss.prototype.getDataAjax = function(attribute, options) {\n    var url = JssService.getOption(\"url\", options);\n    var jsonKey = JssService.getOption(\"jsonKey\", options) || attribute;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('GET', url);\n\n        return ajaxReturn.success(function(result){\n            if (typeof result === \"object\") {\n                if (result[jsonKey]) {\n                    return result[jsonKey];\n                }\n            }\n        }).error(function(errorObject){\n            console.log(errorObject);\n        });\n    }\n\n    return false;\n};\n\n/**\n * -----------------------------------------------------------------------------\n * Set data: Ajax\n * -----------------------------------------------------------------------------\n * Makes a post request to the options.url in a object {attribute: value}\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n */\nJss.prototype.setDataAjax = function(attribute, value, options) {\n    var url = JssService.getOption(\"url\", options);\n    var requestObject = {}\n        requestObject[attribute] = value;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('POST', url, requestObject);\n\n        return ajaxReturn.success(function(result){\n            return true;\n        }).error(function(errorObject){\n            console.log(errorObject);\n            return false;\n        });\n    }\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Ajax (helper function)\n * -----------------------------------------------------------------------------\n * Based on Atom.js by Todd Motto\n * http://toddmotto.com/writing-a-standalone-ajax-xhr-javascript-micro-library/\n */\nJss.prototype.ajaxHelper = {\n    // Parses json if possible, otherwise just return text\n    parse: function(req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return [result, req];\n    },\n\n    xhr: function(type, url, data) {\n        var ajaxHelper = this;\n\n        var methods = {\n            success: function() {},\n            error: function() {}\n        };\n        var XHR = XMLHttpRequest || ActiveXObject;\n        var request = new XHR('MSXML2.XMLHTTP.3.0');\n        request.open(type, url, true);\n        request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n\n        request.onreadystatechange = function() {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    methods.success.apply(methods, ajaxHelper.parse(request));\n                } else {\n                    methods.error.apply(methods, ajaxHelper.parse(request));\n                }\n            }\n        };\n        request.send(data);\n        return {\n            success: function(callback) {\n                methods.success = callback;\n                return methods;\n            },\n            error: function(callback) {\n                methods.error = callback;\n                return methods;\n            }\n        };\n    }\n};\n\nJss.prototype.ajax = {\n    // Get\n    get: function(src) {\n        console.log(this);\n    },\n\n    // Set\n    put: function(url, data) {\n        return this.ajaxHelper.xhr('PUT', url, data);\n    },\n\n    // Add\n    post: function(url, data) {\n        return this.ajaxHelper.xhr('POST', url, data);\n    }\n\n};\n/**\n * -----------------------------------------------------------------------------\n * Get data attribute value\n * -----------------------------------------------------------------------------\n * Returns the value of the requested attribute. Search first for a data-[ATTRIBUTE] value\n * If not found, it checks for the attribute in the default object. When that is not being\n * found neither, the normal this[attribute] value is being returned.\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME)\n * @return {string}                                                             The value of the given attribute\n */\nJss.prototype.getDataAttribute = function(attribute) {\n\n    return this.element.dataset[attribute];\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Update data attribute\n * -----------------------------------------------------------------------------\n * Set the value to the given attribute. And updates the data-[ATTRIBUTE] value\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME=\"value\")\n * @param {string} value                                                        The VALUE of the data attribute (data-name=\"VALUE\")\n * @return {undefined}\n */\n\nJss.prototype.setDataAttribute = function(attribute, value) {\n\n    // Update data attribute\n    if (typeof value !== \"undefined\") {\n        this.element.dataset[attribute] = this[attribute];\n    } else {\n        delete this.element.dataset[attribute];\n    }\n\n    return true;\n}\nJss.prototype.dataDefaultsCookie = {\n    'expireData': undefined\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get cookie value\n * -----------------------------------------------------------------------------\n * Returns cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @return {string}                                                             The VALUE of the given attribute\n */\nJss.prototype.getDataCookie = function(attribute) {\n\n    if (!attribute) { return null; }\n    return decodeURIComponent(document.cookie.replace(new RegExp(\"(?:(?:^|.*;)\\\\s*\" + encodeURIComponent(attribute).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"), \"$1\")) || null;\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data cookie\n * -----------------------------------------------------------------------------\n * Updates the cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @param {string} value                                                        The VALUE of the cookie\n * @return {undefined}\n */\n\nJss.prototype.setDataCookie = function(attribute, value, options) {\n    var endDate, path, domain, secureConnection;\n\n    if (typeof options === \"object\") {\n        endDate = JssService.getOption('endDate', options);\n        path    = JssService.getOption('path', options);\n        domain  = JssService.getOption('domain', options);\n        secureConnection = JssService.getOption('secureConnection', options);\n    }\n\n    if (!attribute || /^(?:expires|max\\-age|path|domain|secure)$/i.test(attribute)) { return false; }\n    var sExpires = \"\";\n    if (endDate) {\n      switch (endDate.constructor) {\n        case Number:\n          sExpires = endDate === Infinity ? \"; expires=Fri, 31 Dec 9999 23:59:59 GMT\" : \"; max-age=\" + endDate;\n          break;\n        case String:\n          sExpires = \"; expires=\" + endDate;\n          break;\n        case Date:\n          sExpires = \"; expires=\" + endDate.toUTCString();\n          break;\n      }\n    }\n\n    document.cookie = encodeURIComponent(attribute) + \"=\" + encodeURIComponent(value) + sExpires + (domain ? \"; domain=\" + domain : \"\") + (path ? \"; path=\" + path : \"\") + (secureConnection ? \"; secure\" : \"\");\n    return true;\n}\n/*******************************************************************************\n\n    Styles\n\n*******************************************************************************/\n\n/**\n * -----------------------------------------------------------------------------\n * Set height\n * -----------------------------------------------------------------------------\n * Sets the height of the `this.element` by the given input (height)\n *\n * @param  {number} height                                                      The height in pixels or percentage. Where numbers will be calculated to pixels so giving a height of 50 will result in a height of \"50px\". If you want percentages pass the variable with a percentage sign 50 + \"%\"\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setHeight = function(height) {\n    if (typeof height === \"number\") {\n        height += \"px\";\n    }\n\n    if (typeof height !== \"string\") {\n        throw(\"parameter height needs to be a string or integer\");\n    }\n\n    this.element.style.height = height;\n    return true;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get height\n * -----------------------------------------------------------------------------\n * Returns the height of the `this.element`\n *\n * @return {number}                                                             The height of the element in pixels\n */\nJss.prototype.getHeight = function() {\n    return this.element.offsetHeight;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set width\n * -----------------------------------------------------------------------------\n * Sets the width of the `this.element` by the given input (width)\n *\n * @param  {number} width                                                       The width in pixels or percentage. Where numbers will be calculated to pixels so giving a width of 50 will result in a width of \"50px\". If you want to set a percentage, just pass the variable with a percentage sign (\"50%\")\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setWidth = function(width) {\n    if (typeof width == \"number\") {\n        width += \"px\";\n    }\n\n    if (typeof width !== \"string\") {\n        throw(\"parameter width needs to be a string or integer\");\n    }\n    this.element.style.width = width;\n    return true;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get width\n * -----------------------------------------------------------------------------\n * Returns the width of the `this.element`\n *\n * @return {number}                                                             The width of the element in pixels\n */\nJss.prototype.getWidth = function() {\n    return this.element.offsetWidth;\n}\n/**\n * -----------------------------------------------------------------------------\n * Set State\n * -----------------------------------------------------------------------------\n * This updates the state of the object. States are being added to the class name prefix with a double underscore.\n * If you would have the module `envelope` and give it the state `open`. The class name `envelope__open` will be added.\n * Whenever you remove the state `open`, the according class name will be removed as well.\n *\n * @param  {string} str                                                         The name of the state which should be set (this is transformed to CamelCase)\n * @return {boolean}                                                            True on success, otherwise false (might already have the state)\n */\nJss.prototype.setState = function(str) {\n    var element, verifiedState, state, className;\n\n    element         = this.element;\n    state           = JssService.toCamelCase(str);\n    className       = this.classNamePrefix() + \"__is\" + state;\n\n    // Check if this.state is an array, and make it one if not.\n    if (Array.isArray(this.state) == false ) {\n        this.state = [];\n    }\n\n    // This if statement prevents that the same state is being set multiple times\n    if ( !this.hasState(str) ) {\n        this.addClassName(className)\n        this.state.push(state);\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Has state\n * -----------------------------------------------------------------------------\n * Checks if the parameter is already a state and returns true if so. Otherwise false.\n *\n * @param  {string} str                                                         The state which will be checked for\n * @return {boolean}                                                            True if it has the given state, otherwise false\n */\nJss.prototype.hasState = function(str) {\n    if (typeof this.state == \"object\" && this.state.indexOf(str) >= 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Remove state\n * -----------------------------------------------------------------------------\n * Removes the state from the states array, and from the element.className\n *\n * @param  {string} str                                                         The name of the state which should be removed\n * @return {undefined}\n */\nJss.prototype.removeState = function(str) {\n\n    var state      = JssService.toCamelCase(str);\n    var stateIndex = this.state.indexOf(state);\n\n    if (str == \"all\" || typeof str == \"undefined\") {\n        this.removeClassName(\"states\");\n    } else {\n        this.state.splice(stateIndex, 1);\n        if (typeof this.moduleAction != \"undefined\" && this.moduleAction.length > -1) {\n            this.removeClassName(this.classNamePrefix() + \"\" + this.moduleAction + \"__is\" + state);\n        } else {\n            this.removeClassName(this.classNamePrefix() + \"__is\" + state);\n        }\n    }\n}\n\n\n// A simple way to watch variables\n\n// addVar(keyName, value, watch_function)\n// setVar(keyName, value)\n// getVar(keyName)\n// Add -> new\n// Set -> update\n// Get -> return\nvar JssModule = function(){};\n\nJssModule.prototype.type               = \"JssModule\";\nJssModule.prototype.init               = Jss.prototype.init;\nJssModule.prototype.setElement         = Jss.prototype.setElement;\n\n// Triggers\nJssModule.prototype.findTriggers       = Jss.prototype.findTriggers;\nJssModule.prototype.configureTrigger      = Jss.prototype.configureTrigger;\n\n// Actions\n//JssModule.prototype.actions            = Object.create(Jss.prototype.actions);\nJssModule.prototype.validateAction     = Jss.prototype.validateAction;\nJssModule.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssModule.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssModule.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssModule.prototype.setState           = Jss.prototype.setState;\nJssModule.prototype.hasState           = Jss.prototype.hasState;\nJssModule.prototype.removeState        = Jss.prototype.removeState;\n\n// Data attributes\nJssModule.prototype.addData            = Jss.prototype.addData;\nJssModule.prototype.getData            = Jss.prototype.getData;\nJssModule.prototype.setData            = Jss.prototype.setData;\nvar JssTrigger = function(element, options) {\n    this.setElement(element);\n\n    if (typeof options === \"object\") {\n        if (typeof options.module === \"object\") {\n            this.module = options.module;\n        }\n        if (typeof options.moduleName === \"string\") {\n            this.moduleName = options.moduleName;\n        }\n        if (typeof options.triggerName === \"string\") {\n            this.triggerName = options.triggerName;\n        }\n    }\n}\n\n\nJssTrigger.prototype                    = Object.create(Jss.prototype);\nJssTrigger.prototype.type               = \"JssTrigger\";\nJssTrigger.prototype.setElement         = Jss.prototype.setElement;\n\n// Actions\n//JssTrigger.prototype.actions            = Object.create(Jss.prototype.actions);\nJssTrigger.prototype.validateAction     = Jss.prototype.validateAction;\nJssTrigger.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssTrigger.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssTrigger.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssTrigger.prototype.setState           = Jss.prototype.setState;\nJssTrigger.prototype.hasState           = Jss.prototype.hasState;\nJssTrigger.prototype.removeState        = Jss.prototype.removeState;\n\n\n\nvar  JssController = {};\nJssController.modules \t\t= []; // Result array with objects of all the found modules\nJssController.activeModules \t= JssService.activeModules;\n\nJssController.findModules = function() {\n    var allElements = document.getElementsByTagName(\"*\");                       // Array with all domElements\n    var test = [];\n    var self = this;\n    for (var i=0; i < allElements.length; i++) {\n\n        // Set default vars //\n        var element = allElements[i];                                           // Specific domElement\n        var tmp = false;\n\n        // Loop through the (active) modules array and add/instantiate them\n        self.activeModules.forEach(function(module){\n            if (JssService.isModule(element, module)) {\n                tmp = eval(\"new \" + JssService.toCamelCase(module) + \"(element)\"); // Dynamicly load modules\n\n                tmp.setElement(element);                                        // Add the domElement to the module\n                tmp.findTriggers();\t\t\t                                    // Search for module triggers\n\n                tmp.init();\t\t\t\t\t                                    // Executes everything within the init function\n                self.modules.push(tmp);\n\n            }\n        }); // End forEach\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    JssController.findModules();\n    console.log(JssController);\n});"
    },
    "name": "Jss",
    "kind": "module",
    "members": {
      "instance": [
        {
          "description": "-----------------------------------------------------------------------------\n\t Add Action\n-----------------------------------------------------------------------------\nAdds an action to the object, list of possible requests can be found in Jss.actions\n\n| Options\n\t\t- addDefaults {boolean}                                                 True: add default classes, false: don't",
          "tags": [
            {
              "title": "param",
              "description": "The name of the request",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "request"
            },
            {
              "title": "param",
              "description": "The function which should be triggered",
              "type": {
                "type": "NameExpression",
                "name": "function"
              },
              "name": "fn"
            },
            {
              "title": "param",
              "description": "Object with option parameters",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "options"
            },
            {
              "title": "returns",
              "description": "true if a action is succesfully added, otherwise false.",
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            },
            {
              "title": "name",
              "name": "addAction"
            },
            {
              "title": "kind",
              "kind": "function"
            },
            {
              "title": "memberof",
              "description": "Jss"
            },
            {
              "title": "instance"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 447,
                "column": 0
              },
              "end": {
                "line": 552,
                "column": 0
              }
            },
            "file": "/Users/jeffreyarts/Documents/DEV/jss/lib/jss.js",
            "code": "JssService = {};\n\n// Edit this array to enable or disable default modules\nJssService.activeModules   = []\n\n// Set this to false in a live environment\nJssService.dev             = true;\n\n/**************************\n*\n*   Below are core properties defined, becarefull when you think of changing these...\n*\n**************************/\n\n\nJssService.actions = {\n    hover:      ['hover',    'mouseover',   'onmouseover'                       ], // Fixed\n    click:      ['click',    'onclick'                                          ], // Fixed\n    mouseIn:    ['mousein',  'onmousein', 'mouseenter', 'onmouseenter'          ], // Fixed\n    mouseOut:   ['mouseout', 'onmouseout', 'mouseleave', 'onmouseleave'         ], // Fixed\n    resize:     ['resize',   'onresize'                                         ], // Fixed\n    focus:      ['focus',    'onfocus'                                          ],\n    keyDown:    ['keydown',  'keypress'                                         ],\n    keyUp:      ['keyup',    'keyrelease'                                       ],\n    change:     ['change',   'onchange'                                         ],\n};\n\nJssService.enterDelay = 1000;                                                   // Amount of miliseconds which is used to remove the entered state. (see core.actions) JssService.enterDelay setTimeout\n\nJssService.forbiddenProperties = [\n    'type',\n    'triggers',\n    'configureTrigger',\n    'findTriggers'\n];\n\n/**\n * -----------------------------------------------------------------------------\n * Is Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isModule = function(element, moduleName) {\n    var arr = element.className.split(\" \");\n    var found = false;\n\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i].indexOf(moduleName)        > -1 &&\n            arr[i].indexOf(moduleName + \"_\") == -1 &&\n            arr[i].indexOf(moduleName + \"-\") == -1)\n        {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.addModule = function(moduleName) {\n    this.activeModules.push(this.toKebabCase(moduleName))\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To CamelCase\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toCamelCase = function(input) {\n    var arr, res;\n    res = \"\";\n    if (typeof input === \"string\") {\n        input = input.replace(/\\-/g,\" \");                                       // Replace all dashes with spaces\n        arr = input.split(\" \");\n    } else {\n        arr = input;                                                            // Assume it is an array\n    }\n\n\n\n    var i = 0;\n    for (var i in arr) {\n        if (typeof i != \"undefined\") {\n            res += arr[i][0].toUpperCase()+ arr[i].slice(1); // Capitalize first letter\n        }\n    }\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To kebab-case\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toKebabCase = function(input) {\n    var res, str;\n    res = \"\";\n\n    if (typeof input === \"string\") {\n        str = input;\n    } else {                                                                    // Assume it is an array\n        str = input.join(\" \");\n    }\n\n    // First change it to camelcase\n    str = this.toCamelCase(str);\n\n    var max = str.length;\n    for (var i=0; i < max; i++) {\n        // Check if character is uppercase\n        if (str[i] != str[i].toLowerCase()) {\n            if (i!==0) {\n                str = str.substr(0, i) + \"-\" + str.substr(i);\n                i++;\n            }\n        }\n    }\n\n    return res = str.toLowerCase();\n}\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get option\n * -----------------------------------------------------------------------------\n * @param  {string} name                                                        Keyname in optionList\n * @param  {array} optionList                                                   Array with all possible options\n * @return {}                                                                   Copy of the value (optionsList[name])\n */\nJssService.getOption = function(name, optionList) {\n    if (typeof optionList !== \"object\") {\n        return false;\n    }\n\n    var res;\n\n    switch (name) {\n\n        // Only set `addDefaults` to false when it is explicitly set.\n        case \"addDefaults\":\n            if (optionList[name] !== false || typeof optionList[name] === \"undefined\") {\n                res = true;\n            } else {\n                res = false;\n            }\n        break;\n        case \"fallback\":\n            if ( Array.isArray(optionList[name]) ) {\n                res = optionList[name];\n                if (res.length===0) {\n                    res = false;\n                }\n            } else if (typeof optionList[name] === \"string\"){\n                res = [optionList[name]];\n            }\n        break;\n        default:\n        res = optionList[name]\n    }\n\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Is Trigger\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isTrigger = function(element, moduleName) {\n    if (element.className.indexOf(moduleName + \"--\") > -1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get trigger name\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {string} Name of the trigger.\n */\nJssService.getTriggerName = function(element, moduleName) {\n    if (typeof element != \"object\") {\n        console.error('Required first argument `element` needs to be a domElement.');\n        return false;\n    }\n    if (typeof moduleName != \"string\") {\n        console.error('Required second argument `moduleName` needs to be a string.');\n        return false;\n    }\n\n    // As an example we assume that the value of element.className equals 'b module--triggerName'\n    var startPos = element.className.indexOf(moduleName + \"--\");                    // 2\n    var sliced = element.className.slice(startPos, element.className.length )       // 'module--triggerName'\n    var endPos = sliced.indexOf(\" \");                                               // -1       // not found\n    if (endPos != -1) {                                                             // 19\n        sliced = sliced.slice(0,endPos);                                            // if there is more after the string, this will remove it\n    }\n    return sliced.replace(moduleName + \"--\",\"\")\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger name is allowed\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} True if the triggername is allowed, otherwise false.\n */\nJssService.triggerNameIsAllowed = function(element, moduleName) {\n    if (JssService.forbiddenProperties.indexOf(this.getTriggerName(element, moduleName)) > -1) {      // This triggerName is a core property, throw error\n        console.error('Triggername `' + getTriggerName(element,moduleName) + '` is not allowed. Change the trigger so it does not corresponds any of these: ' + JssService.forbiddenProperties)\n        return false;\n    }\n    return true;\n}\n/**\n * @module Jss\n * @author      Jeffrey Arts <sjeffff@gmail.com>\n * @copyright   2015\n */\nJss = function(){};\n\nJss.prototype.type      = \"Jss\"\nJss.prototype.triggers  = false;\nJss.prototype.element   = undefined;                                              // {obj} domElement\nJss.prototype.state     = undefined;                                              // {str} State of module, is reflected by the css class __isState\n\n/**\n * -----------------------------------------------------------------------------\n * Find Triggers\n * -----------------------------------------------------------------------------\n *\n * @param {domElement} element\n * @return {undefined}\n */\nJss.prototype.findTriggers = function(element) {\n    this.triggers = [];                                                         // If this is not set, all modules will have the same reference point to this.triggers.\n    // Module is created, now look for any module triggers\n    this.searchTriggersRecursiveInnerFunction(this.element)\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger\n * -----------------------------------------------------------------------------\n */\nJss.prototype.trigger = function(which, fn) {\n    if (typeof this.triggers !== \"object\") {\n        console.info(\"No triggers are found, please specify them in the css as `module-name--trigger-name`.\");\n        return false;\n    }\n\n    if (typeof this.triggers[which] !== \"object\") {\n        console.info(\"You are trying to execute a function on a non existing trigger `\" + which + \"`\");\n        return false;\n    }\n\n    for (var i = 0; i < this.triggers[which].length; i++) {\n        fn(this.triggers[which][i])\n    }\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Search triggers recursive inner function\n * -----------------------------------------------------------------------------\n * Recursive function which is executed bij findTriggers;\n *\n * @return {undefined}\n */\nJss.prototype.searchTriggersRecursiveInnerFunction = function(element) {\n    var self = this;\n    if (typeof element == \"undefined\" ) {\n        element = this.element;\n    }\n    if ( element.hasChildNodes() ) {\n        for (var i=0; i < element.childNodes.length; i++) {\n\n            var childElement = element.childNodes[i];                           // Improve readability\n\n            if (childElement.nodeType == 1) {                                   // NodeType 1 == domElement\n\n                if (JssService.isTrigger(childElement, this.moduleName)) {\n\n                    // Add a child element\n                    if (JssService.triggerNameIsAllowed(childElement, this.moduleName)) {\n                        var triggerName = JssService.getTriggerName(childElement, this.moduleName)\n\n                        if (typeof self.triggers[triggerName] !== \"object\") {\n                            self.triggers[triggerName] = [];\n                        }\n\n                        var tmp = new JssTrigger(childElement, {\n                            module: self,\n                            moduleName: this.moduleName,\n                            triggerName: triggerName,\n                        });\n\n                        self.triggers[triggerName].push(tmp);\n                    }\n                }\n                if (childElement.hasChildNodes()) {\n                    self.searchTriggersRecursiveInnerFunction(childElement)\n                }\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Configure Trigger\n * -----------------------------------------------------------------------------\n *\n * @return {undefined}\n */\nJss.prototype.configureTrigger = function(trigger, fn) {\n    if ( typeof this.triggers[trigger] == \"object\") {\n\n        for (var i = 0; i < this.triggers[trigger].length; i++) {\n            //self.triggers[trigger][i]\n            fn(this.triggers[trigger][i]);\n        }\n\n    } else if (JssService.dev) {\n        console.error(\"You are trying to configure a trigger which has no attached domElement\")\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n *   Init\n * -----------------------------------------------------------------------------\n * Notice the user that a init function needs to be added for controlling the triggers\n *\n * @return {undefined}\n */\nJss.prototype.init = function(func) {\n    if (JssService.dev) {\n        console.info(this.moduleName + \": Add a prototype.init function to add triggers and stuff\")\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set element\n * -----------------------------------------------------------------------------\n * Add a domElement to `this`\n *\n * @return {undefined}\n */\nJss.prototype.setElement = function(element) {\n    if (typeof element == \"undefined\") {\n        if (JssService.dev) {\n            return console.error(\"First parameter of setElement needs to be a domElement\");\n        }\n    }\n    this.element = element;\n}\n/*******************************************************************************\n   *\n   *\tActions\n   *\n   *  \t@author      Jeffrey Arts <sjeffff@gmail.com>\n   *    @copyright   2015\n   *\n*******************************************************************************/\n/**\n * -----------------------------------------------------------------------------\n *   Validate action\n * -----------------------------------------------------------------------------\n * Checks if parameter is a valid action, and logs an error when not.\n *\n * @param {string} request                                                      The name of the request\n * @return {boolean} true if a action is valid, otherwise false.\n */\nJss.prototype.validateAction = function(request) {\n    var result;\n    request = this.getActionElement(request).request\n    for (var action in JssService.actions) {\n        if (JssService.actions[action].indexOf(request.toLowerCase()) > -1) {\n            result = action;\n            break;\n        }\n    }\n    if (result) {\n        return result;\n    } else {\n        console.error(\"validateAction: unknown request\", request);\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * \t Add Action\n * -----------------------------------------------------------------------------\n * Adds an action to the object, list of possible requests can be found in Jss.actions\n *\n * | Options\n * \t\t- addDefaults {boolean}                                                 True: add default classes, false: don't\n *\n *\n *\n * @param {string} request                                                      The name of the request\n * @param {function} fn                                                         The function which should be triggered\n * @param {object} options                                                      Object with option parameters\n * @return {boolean} true if a action is succesfully added, otherwise false.\n */\nJss.prototype.addAction = function(request, fn, options) {\n\n    var self        = this;\n    var action      = self.validateAction(request)\n    var actions     = [];\n    var t = self.getActionElement(request);\n    var element     = t.element;\n    var request     = t.request;\n    t = undefined;\n\n    // Options\n    var addDefaults = JssService.getOption(\"addDefaults\", options);\n\n\n\n    switch (action) {\n\n        case \"resize\":\n\n            actions.push(element.addEventListener(\"resize\", fn));\n\n        break;\n\n\n        case \"click\":\n            actions.push(element.addEventListener(\"click\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"click\", function(){\n                    self.setState(\"Clicked\")\n                }));\n                actions.push(window.addEventListener( \"click\", function(event) {\n                    if (event.target != self.element && self.hasState(\"Clicked\")) {\n                        self.removeState(\"Clicked\")\n                    }\n                }));\n            } // End addDefaults\n        break;\n\n\n        case \"change\":\n            actions.push(element.addEventListener(\"change\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"change\", function(){\n                    self.setState(\"Changed\")\n                    setTimeout(function(){self.removeState(\"Changed\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"hover\":\n            actions.push(element.addEventListener(\"mouseover\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseover\", function(){\n                    self.setState(\"Hover\")\n                }));\n                actions.push(element.addEventListener(\"mouseout\",  function(){\n                    self.removeState(\"Hover\")\n                }));\n            }\n        break;\n\n\n        case \"mouseIn\":\n\n            actions.push(element.addEventListener(\"mouseenter\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseenter\", function(){\n                    self.setState(\"MouseIn\")\n                    setTimeout(function(){self.removeState(\"MouseIn\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"mouseOut\":\n\n            actions.push(element.addEventListener(\"mouseleave\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseleave\", function(){\n                    self.setState(\"MouseOut\")\n                    setTimeout(function(){self.removeState(\"MouseOut\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n    }\n\n\n    if (actions.length > 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get action element\n * -----------------------------------------------------------------------------\n * @param  {string} request                                                     The request\n * @return {object}                                                             An object with 2 properties: request && element\n */\nJss.prototype.getActionElement = function(request) {\n    var self = this;\n    var prefix = false;\n    var newRequest  = request;\n    var element = self.element;\n    // Set prefix if it exists\n    if (request.indexOf(\".\") > 0) {\n        var t       = request.split(\".\"),\n        newRequest  = t[1];\n        prefix      = t[0];\n        t = undefined;\n    }\n\n    // Update element according the prefix (or skip it, if not set)\n    if (prefix !== false) {\n        switch (prefix) {\n            case \"screen\":\n            case \"window\":\n                element = window;\n            break;\n        }\n    }\n\n    // Return object\n    return {\n        request: newRequest,\n        element: element\n    }\n}\n/**\n * -----------------------------------------------------------------------------\n * Class name prefix\n * -----------------------------------------------------------------------------\n * The prefix equals the modulename, or - when it's a trigger object - modulename--triggername\n *\n * @return {string} The classname\n */\nJss.prototype.classNamePrefix = function() {\n    if (this.type == \"JssTrigger\") {\n        return this.moduleName + \"--\" + this.triggerName;\n    } else {\n        return this.moduleName;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Remove class name\n * -----------------------------------------------------------------------------\n * Removes the `this.element` classname\n * \t- \"all\" || undefined        > Removes ALL classnames\n *  - \"allStates\" || \"states\"   > Remove all STATES\n *  - all other strings remove that specific string from the className\n *\n * @param {string} input                                                        The classname (case-sensitive) which needs to be removed\n * @return {undefined}\n */\nJss.prototype.removeClassName = function(input) {\n\n    var classList  = [];\n\n    if (input == \"all\" || typeof input == \"undefined\") {\n\n        this.element.className = \"\";\n\n    } else if (input == \"states\" || input == \"allStates\") {\n\n        classList = this.element.className.split(\" \");\n        for (var i in classList) {\n            className = classList[i];\n            if (className.indexOf(\"__is\") > -1) {\n                delete classList[i];\n            }\n        }\n        this.element.className = classList.join(\" \");\n\n    } else if(typeof input == \"string\") {\n        this.element.className = this.element.className.replace(input,\"\");\n    } else {\n        console.error(\"removeClassName: parameter should be a string\");\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Add class name\n * -----------------------------------------------------------------------------\n * Adds a class name by string or array.\n * Does NOT check for duplicates\n *\n * @param  {string} The classname to be added\n * @return {undefined}\n */\nJss.prototype.addClassName = function(data) {\n    this.element.className += \" \";\n    if (typeof data == \"string\") {\n        this.element.className += data;\n    } else {\n        this.element.className += data.join(\" \")\n    }\n}\n\n/**\n * List where the keys corresponds with this[key], and where the value is the function to be executed when the var is changed.\n */\nJss.prototype.setterWatchList = {};\nJss.prototype.getterWatchList = {};\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add data\n * -----------------------------------------------------------------------------\n * Add a (default) value for the given attribute.\n *\n * @param {string} attribute                                                    The name of the attribute (this[attribute])\n * @param {*} value                                                             The value of this[attribute], could be anything...\n * @param {object} options\n *           \t\t- setterWatchFunction {function}\n *           \t\t- getterWatchFunction {function}\n */\nJss.prototype.addData = function(attribute, value, options) {\n\n\n    // watchList[key] = fn;\n    var setterWatchFunction = JssService.getOption('setterWatchFunction', options); // Function\n    var getterWatchFunction = JssService.getOption('getterWatchFunction', options); // Function\n\n    if (typeof setterWatchFunction === \"function\") {\n        this.setterWatchList[attribute] = setterWatchFunction;\n    }\n\n    if (typeof getterWatchFunction === \"function\") {\n        this.getterWatchList[attribute] = getterWatchFunction;\n    }\n\n    // Set the default value\n    return this[attribute] = value;\n}\n\n\n\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- ajax {string} url\n */\nJss.prototype.setData = function(attribute, value, options) {\n\n    this[attribute] = value;\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n\n    if (Array.isArray(fallback)) {\n\n        for (var i = 0; i < fallback.length; i++) {\n            var type = fallback[i];\n\n            if (value && value.length > 0) {\n                this['setData' + JssService.toCamelCase(type)](attribute, value); // Call this.addDataAttribute(value) || this.addDataCookie(value) etc...\n                this[attribute] = value;\n            }\n        }\n    }\n\n    // Call the setter watch function, if defined;\n    if (typeof this.setterWatchList[attribute] === \"function\") { // Use the watchlist to add functionality whenever a data attribute is updated\n        this.setterWatchList[attribute]();\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataDefault {boolean}\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- dataAjax {string} url\n */\nJss.prototype.getData = function(attribute, options) {\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n    var value = false;\n\n\n    if (!fallback) {\n        fallback = ['attribute'];\n    }\n\n\n    for (var i = 0; i < fallback.length; i++) {\n        var type = JssService.toCamelCase(fallback[i]);\n        var customOptions = false;\n\n        if (typeof options == \"object\") {\n            customOptions = options[fallback[i].toLowerCase()];\n        }\n\n        if (!value || value.length < 0) {\n            if (typeof this['getData' + type] !== \"function\") {\n                console.error('this.getData' + type + ' is not a function. Probably ' + type + ' is not a available data option');\n                continue;\n            }\n            value = this['getData' + type]( attribute, customOptions ); // Call this.getDataAttribute(value) || this.getDataCookie(value) || this.getDataAjax(value) etc...\n        }\n    }\n    console.log(this.getterWatchList);\n    // Call the getter watch function, if defined;\n    if (typeof this.getterWatchList[attribute] == \"function\") {\n        this.getterWatchList[attribute]();\n    }\n\n    return this[attribute] = value;\n}\n/**\n * -----------------------------------------------------------------------------\n * Get data: Ajax\n * -----------------------------------------------------------------------------\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n *\n * @param {string} attribute                                                    The NAME of the inner variable (this.NAME), is also used as the key for the GET Request {NAME: value}\n * @param {object} options                                                      Object with parameters used to make a GET request\n * @return {string}                                                             The value of the given attribute, or false if an erro occured.\n */\nJss.prototype.getDataAjax = function(attribute, options) {\n    var url = JssService.getOption(\"url\", options);\n    var jsonKey = JssService.getOption(\"jsonKey\", options) || attribute;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('GET', url);\n\n        return ajaxReturn.success(function(result){\n            if (typeof result === \"object\") {\n                if (result[jsonKey]) {\n                    return result[jsonKey];\n                }\n            }\n        }).error(function(errorObject){\n            console.log(errorObject);\n        });\n    }\n\n    return false;\n};\n\n/**\n * -----------------------------------------------------------------------------\n * Set data: Ajax\n * -----------------------------------------------------------------------------\n * Makes a post request to the options.url in a object {attribute: value}\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n */\nJss.prototype.setDataAjax = function(attribute, value, options) {\n    var url = JssService.getOption(\"url\", options);\n    var requestObject = {}\n        requestObject[attribute] = value;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('POST', url, requestObject);\n\n        return ajaxReturn.success(function(result){\n            return true;\n        }).error(function(errorObject){\n            console.log(errorObject);\n            return false;\n        });\n    }\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Ajax (helper function)\n * -----------------------------------------------------------------------------\n * Based on Atom.js by Todd Motto\n * http://toddmotto.com/writing-a-standalone-ajax-xhr-javascript-micro-library/\n */\nJss.prototype.ajaxHelper = {\n    // Parses json if possible, otherwise just return text\n    parse: function(req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return [result, req];\n    },\n\n    xhr: function(type, url, data) {\n        var ajaxHelper = this;\n\n        var methods = {\n            success: function() {},\n            error: function() {}\n        };\n        var XHR = XMLHttpRequest || ActiveXObject;\n        var request = new XHR('MSXML2.XMLHTTP.3.0');\n        request.open(type, url, true);\n        request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n\n        request.onreadystatechange = function() {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    methods.success.apply(methods, ajaxHelper.parse(request));\n                } else {\n                    methods.error.apply(methods, ajaxHelper.parse(request));\n                }\n            }\n        };\n        request.send(data);\n        return {\n            success: function(callback) {\n                methods.success = callback;\n                return methods;\n            },\n            error: function(callback) {\n                methods.error = callback;\n                return methods;\n            }\n        };\n    }\n};\n\nJss.prototype.ajax = {\n    // Get\n    get: function(src) {\n        console.log(this);\n    },\n\n    // Set\n    put: function(url, data) {\n        return this.ajaxHelper.xhr('PUT', url, data);\n    },\n\n    // Add\n    post: function(url, data) {\n        return this.ajaxHelper.xhr('POST', url, data);\n    }\n\n};\n/**\n * -----------------------------------------------------------------------------\n * Get data attribute value\n * -----------------------------------------------------------------------------\n * Returns the value of the requested attribute. Search first for a data-[ATTRIBUTE] value\n * If not found, it checks for the attribute in the default object. When that is not being\n * found neither, the normal this[attribute] value is being returned.\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME)\n * @return {string}                                                             The value of the given attribute\n */\nJss.prototype.getDataAttribute = function(attribute) {\n\n    return this.element.dataset[attribute];\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Update data attribute\n * -----------------------------------------------------------------------------\n * Set the value to the given attribute. And updates the data-[ATTRIBUTE] value\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME=\"value\")\n * @param {string} value                                                        The VALUE of the data attribute (data-name=\"VALUE\")\n * @return {undefined}\n */\n\nJss.prototype.setDataAttribute = function(attribute, value) {\n\n    // Update data attribute\n    if (typeof value !== \"undefined\") {\n        this.element.dataset[attribute] = this[attribute];\n    } else {\n        delete this.element.dataset[attribute];\n    }\n\n    return true;\n}\nJss.prototype.dataDefaultsCookie = {\n    'expireData': undefined\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get cookie value\n * -----------------------------------------------------------------------------\n * Returns cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @return {string}                                                             The VALUE of the given attribute\n */\nJss.prototype.getDataCookie = function(attribute) {\n\n    if (!attribute) { return null; }\n    return decodeURIComponent(document.cookie.replace(new RegExp(\"(?:(?:^|.*;)\\\\s*\" + encodeURIComponent(attribute).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"), \"$1\")) || null;\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data cookie\n * -----------------------------------------------------------------------------\n * Updates the cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @param {string} value                                                        The VALUE of the cookie\n * @return {undefined}\n */\n\nJss.prototype.setDataCookie = function(attribute, value, options) {\n    var endDate, path, domain, secureConnection;\n\n    if (typeof options === \"object\") {\n        endDate = JssService.getOption('endDate', options);\n        path    = JssService.getOption('path', options);\n        domain  = JssService.getOption('domain', options);\n        secureConnection = JssService.getOption('secureConnection', options);\n    }\n\n    if (!attribute || /^(?:expires|max\\-age|path|domain|secure)$/i.test(attribute)) { return false; }\n    var sExpires = \"\";\n    if (endDate) {\n      switch (endDate.constructor) {\n        case Number:\n          sExpires = endDate === Infinity ? \"; expires=Fri, 31 Dec 9999 23:59:59 GMT\" : \"; max-age=\" + endDate;\n          break;\n        case String:\n          sExpires = \"; expires=\" + endDate;\n          break;\n        case Date:\n          sExpires = \"; expires=\" + endDate.toUTCString();\n          break;\n      }\n    }\n\n    document.cookie = encodeURIComponent(attribute) + \"=\" + encodeURIComponent(value) + sExpires + (domain ? \"; domain=\" + domain : \"\") + (path ? \"; path=\" + path : \"\") + (secureConnection ? \"; secure\" : \"\");\n    return true;\n}\n/*******************************************************************************\n\n    Styles\n\n*******************************************************************************/\n\n/**\n * -----------------------------------------------------------------------------\n * Set height\n * -----------------------------------------------------------------------------\n * Sets the height of the `this.element` by the given input (height)\n *\n * @param  {number} height                                                      The height in pixels or percentage. Where numbers will be calculated to pixels so giving a height of 50 will result in a height of \"50px\". If you want percentages pass the variable with a percentage sign 50 + \"%\"\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setHeight = function(height) {\n    if (typeof height === \"number\") {\n        height += \"px\";\n    }\n\n    if (typeof height !== \"string\") {\n        throw(\"parameter height needs to be a string or integer\");\n    }\n\n    this.element.style.height = height;\n    return true;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get height\n * -----------------------------------------------------------------------------\n * Returns the height of the `this.element`\n *\n * @return {number}                                                             The height of the element in pixels\n */\nJss.prototype.getHeight = function() {\n    return this.element.offsetHeight;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set width\n * -----------------------------------------------------------------------------\n * Sets the width of the `this.element` by the given input (width)\n *\n * @param  {number} width                                                       The width in pixels or percentage. Where numbers will be calculated to pixels so giving a width of 50 will result in a width of \"50px\". If you want to set a percentage, just pass the variable with a percentage sign (\"50%\")\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setWidth = function(width) {\n    if (typeof width == \"number\") {\n        width += \"px\";\n    }\n\n    if (typeof width !== \"string\") {\n        throw(\"parameter width needs to be a string or integer\");\n    }\n    this.element.style.width = width;\n    return true;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get width\n * -----------------------------------------------------------------------------\n * Returns the width of the `this.element`\n *\n * @return {number}                                                             The width of the element in pixels\n */\nJss.prototype.getWidth = function() {\n    return this.element.offsetWidth;\n}\n/**\n * -----------------------------------------------------------------------------\n * Set State\n * -----------------------------------------------------------------------------\n * This updates the state of the object. States are being added to the class name prefix with a double underscore.\n * If you would have the module `envelope` and give it the state `open`. The class name `envelope__open` will be added.\n * Whenever you remove the state `open`, the according class name will be removed as well.\n *\n * @param  {string} str                                                         The name of the state which should be set (this is transformed to CamelCase)\n * @return {boolean}                                                            True on success, otherwise false (might already have the state)\n */\nJss.prototype.setState = function(str) {\n    var element, verifiedState, state, className;\n\n    element         = this.element;\n    state           = JssService.toCamelCase(str);\n    className       = this.classNamePrefix() + \"__is\" + state;\n\n    // Check if this.state is an array, and make it one if not.\n    if (Array.isArray(this.state) == false ) {\n        this.state = [];\n    }\n\n    // This if statement prevents that the same state is being set multiple times\n    if ( !this.hasState(str) ) {\n        this.addClassName(className)\n        this.state.push(state);\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Has state\n * -----------------------------------------------------------------------------\n * Checks if the parameter is already a state and returns true if so. Otherwise false.\n *\n * @param  {string} str                                                         The state which will be checked for\n * @return {boolean}                                                            True if it has the given state, otherwise false\n */\nJss.prototype.hasState = function(str) {\n    if (typeof this.state == \"object\" && this.state.indexOf(str) >= 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Remove state\n * -----------------------------------------------------------------------------\n * Removes the state from the states array, and from the element.className\n *\n * @param  {string} str                                                         The name of the state which should be removed\n * @return {undefined}\n */\nJss.prototype.removeState = function(str) {\n\n    var state      = JssService.toCamelCase(str);\n    var stateIndex = this.state.indexOf(state);\n\n    if (str == \"all\" || typeof str == \"undefined\") {\n        this.removeClassName(\"states\");\n    } else {\n        this.state.splice(stateIndex, 1);\n        if (typeof this.moduleAction != \"undefined\" && this.moduleAction.length > -1) {\n            this.removeClassName(this.classNamePrefix() + \"\" + this.moduleAction + \"__is\" + state);\n        } else {\n            this.removeClassName(this.classNamePrefix() + \"__is\" + state);\n        }\n    }\n}\n\n\n// A simple way to watch variables\n\n// addVar(keyName, value, watch_function)\n// setVar(keyName, value)\n// getVar(keyName)\n// Add -> new\n// Set -> update\n// Get -> return\nvar JssModule = function(){};\n\nJssModule.prototype.type               = \"JssModule\";\nJssModule.prototype.init               = Jss.prototype.init;\nJssModule.prototype.setElement         = Jss.prototype.setElement;\n\n// Triggers\nJssModule.prototype.findTriggers       = Jss.prototype.findTriggers;\nJssModule.prototype.configureTrigger      = Jss.prototype.configureTrigger;\n\n// Actions\n//JssModule.prototype.actions            = Object.create(Jss.prototype.actions);\nJssModule.prototype.validateAction     = Jss.prototype.validateAction;\nJssModule.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssModule.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssModule.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssModule.prototype.setState           = Jss.prototype.setState;\nJssModule.prototype.hasState           = Jss.prototype.hasState;\nJssModule.prototype.removeState        = Jss.prototype.removeState;\n\n// Data attributes\nJssModule.prototype.addData            = Jss.prototype.addData;\nJssModule.prototype.getData            = Jss.prototype.getData;\nJssModule.prototype.setData            = Jss.prototype.setData;\nvar JssTrigger = function(element, options) {\n    this.setElement(element);\n\n    if (typeof options === \"object\") {\n        if (typeof options.module === \"object\") {\n            this.module = options.module;\n        }\n        if (typeof options.moduleName === \"string\") {\n            this.moduleName = options.moduleName;\n        }\n        if (typeof options.triggerName === \"string\") {\n            this.triggerName = options.triggerName;\n        }\n    }\n}\n\n\nJssTrigger.prototype                    = Object.create(Jss.prototype);\nJssTrigger.prototype.type               = \"JssTrigger\";\nJssTrigger.prototype.setElement         = Jss.prototype.setElement;\n\n// Actions\n//JssTrigger.prototype.actions            = Object.create(Jss.prototype.actions);\nJssTrigger.prototype.validateAction     = Jss.prototype.validateAction;\nJssTrigger.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssTrigger.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssTrigger.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssTrigger.prototype.setState           = Jss.prototype.setState;\nJssTrigger.prototype.hasState           = Jss.prototype.hasState;\nJssTrigger.prototype.removeState        = Jss.prototype.removeState;\n\n\n\nvar  JssController = {};\nJssController.modules \t\t= []; // Result array with objects of all the found modules\nJssController.activeModules \t= JssService.activeModules;\n\nJssController.findModules = function() {\n    var allElements = document.getElementsByTagName(\"*\");                       // Array with all domElements\n    var test = [];\n    var self = this;\n    for (var i=0; i < allElements.length; i++) {\n\n        // Set default vars //\n        var element = allElements[i];                                           // Specific domElement\n        var tmp = false;\n\n        // Loop through the (active) modules array and add/instantiate them\n        self.activeModules.forEach(function(module){\n            if (JssService.isModule(element, module)) {\n                tmp = eval(\"new \" + JssService.toCamelCase(module) + \"(element)\"); // Dynamicly load modules\n\n                tmp.setElement(element);                                        // Add the domElement to the module\n                tmp.findTriggers();\t\t\t                                    // Search for module triggers\n\n                tmp.init();\t\t\t\t\t                                    // Executes everything within the init function\n                self.modules.push(tmp);\n\n            }\n        }); // End forEach\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    JssController.findModules();\n    console.log(JssController);\n});"
          },
          "params": [
            {
              "title": "param",
              "description": "The name of the request",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "request"
            },
            {
              "title": "param",
              "description": "The function which should be triggered",
              "type": {
                "type": "NameExpression",
                "name": "function"
              },
              "name": "fn"
            },
            {
              "title": "param",
              "description": "Object with option parameters",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "options"
            }
          ],
          "returns": [
            {
              "title": "returns",
              "description": "true if a action is succesfully added, otherwise false.",
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          ],
          "name": "addAction",
          "kind": "function",
          "memberof": "Jss",
          "scope": "instance",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            "Jss",
            "addAction"
          ]
        },
        {
          "description": "-----------------------------------------------------------------------------\nAdd class name\n-----------------------------------------------------------------------------\nAdds a class name by string or array.\nDoes NOT check for duplicates",
          "tags": [
            {
              "title": "param",
              "description": "classname to be added",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "The"
            },
            {
              "title": "returns",
              "description": null,
              "type": {
                "type": "UndefinedLiteral"
              }
            },
            {
              "title": "name",
              "name": "addClassName"
            },
            {
              "title": "kind",
              "kind": "function"
            },
            {
              "title": "memberof",
              "description": "Jss"
            },
            {
              "title": "instance"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 645,
                "column": 0
              },
              "end": {
                "line": 657,
                "column": 0
              }
            },
            "file": "/Users/jeffreyarts/Documents/DEV/jss/lib/jss.js",
            "code": "JssService = {};\n\n// Edit this array to enable or disable default modules\nJssService.activeModules   = []\n\n// Set this to false in a live environment\nJssService.dev             = true;\n\n/**************************\n*\n*   Below are core properties defined, becarefull when you think of changing these...\n*\n**************************/\n\n\nJssService.actions = {\n    hover:      ['hover',    'mouseover',   'onmouseover'                       ], // Fixed\n    click:      ['click',    'onclick'                                          ], // Fixed\n    mouseIn:    ['mousein',  'onmousein', 'mouseenter', 'onmouseenter'          ], // Fixed\n    mouseOut:   ['mouseout', 'onmouseout', 'mouseleave', 'onmouseleave'         ], // Fixed\n    resize:     ['resize',   'onresize'                                         ], // Fixed\n    focus:      ['focus',    'onfocus'                                          ],\n    keyDown:    ['keydown',  'keypress'                                         ],\n    keyUp:      ['keyup',    'keyrelease'                                       ],\n    change:     ['change',   'onchange'                                         ],\n};\n\nJssService.enterDelay = 1000;                                                   // Amount of miliseconds which is used to remove the entered state. (see core.actions) JssService.enterDelay setTimeout\n\nJssService.forbiddenProperties = [\n    'type',\n    'triggers',\n    'configureTrigger',\n    'findTriggers'\n];\n\n/**\n * -----------------------------------------------------------------------------\n * Is Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isModule = function(element, moduleName) {\n    var arr = element.className.split(\" \");\n    var found = false;\n\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i].indexOf(moduleName)        > -1 &&\n            arr[i].indexOf(moduleName + \"_\") == -1 &&\n            arr[i].indexOf(moduleName + \"-\") == -1)\n        {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.addModule = function(moduleName) {\n    this.activeModules.push(this.toKebabCase(moduleName))\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To CamelCase\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toCamelCase = function(input) {\n    var arr, res;\n    res = \"\";\n    if (typeof input === \"string\") {\n        input = input.replace(/\\-/g,\" \");                                       // Replace all dashes with spaces\n        arr = input.split(\" \");\n    } else {\n        arr = input;                                                            // Assume it is an array\n    }\n\n\n\n    var i = 0;\n    for (var i in arr) {\n        if (typeof i != \"undefined\") {\n            res += arr[i][0].toUpperCase()+ arr[i].slice(1); // Capitalize first letter\n        }\n    }\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To kebab-case\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toKebabCase = function(input) {\n    var res, str;\n    res = \"\";\n\n    if (typeof input === \"string\") {\n        str = input;\n    } else {                                                                    // Assume it is an array\n        str = input.join(\" \");\n    }\n\n    // First change it to camelcase\n    str = this.toCamelCase(str);\n\n    var max = str.length;\n    for (var i=0; i < max; i++) {\n        // Check if character is uppercase\n        if (str[i] != str[i].toLowerCase()) {\n            if (i!==0) {\n                str = str.substr(0, i) + \"-\" + str.substr(i);\n                i++;\n            }\n        }\n    }\n\n    return res = str.toLowerCase();\n}\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get option\n * -----------------------------------------------------------------------------\n * @param  {string} name                                                        Keyname in optionList\n * @param  {array} optionList                                                   Array with all possible options\n * @return {}                                                                   Copy of the value (optionsList[name])\n */\nJssService.getOption = function(name, optionList) {\n    if (typeof optionList !== \"object\") {\n        return false;\n    }\n\n    var res;\n\n    switch (name) {\n\n        // Only set `addDefaults` to false when it is explicitly set.\n        case \"addDefaults\":\n            if (optionList[name] !== false || typeof optionList[name] === \"undefined\") {\n                res = true;\n            } else {\n                res = false;\n            }\n        break;\n        case \"fallback\":\n            if ( Array.isArray(optionList[name]) ) {\n                res = optionList[name];\n                if (res.length===0) {\n                    res = false;\n                }\n            } else if (typeof optionList[name] === \"string\"){\n                res = [optionList[name]];\n            }\n        break;\n        default:\n        res = optionList[name]\n    }\n\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Is Trigger\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isTrigger = function(element, moduleName) {\n    if (element.className.indexOf(moduleName + \"--\") > -1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get trigger name\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {string} Name of the trigger.\n */\nJssService.getTriggerName = function(element, moduleName) {\n    if (typeof element != \"object\") {\n        console.error('Required first argument `element` needs to be a domElement.');\n        return false;\n    }\n    if (typeof moduleName != \"string\") {\n        console.error('Required second argument `moduleName` needs to be a string.');\n        return false;\n    }\n\n    // As an example we assume that the value of element.className equals 'b module--triggerName'\n    var startPos = element.className.indexOf(moduleName + \"--\");                    // 2\n    var sliced = element.className.slice(startPos, element.className.length )       // 'module--triggerName'\n    var endPos = sliced.indexOf(\" \");                                               // -1       // not found\n    if (endPos != -1) {                                                             // 19\n        sliced = sliced.slice(0,endPos);                                            // if there is more after the string, this will remove it\n    }\n    return sliced.replace(moduleName + \"--\",\"\")\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger name is allowed\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} True if the triggername is allowed, otherwise false.\n */\nJssService.triggerNameIsAllowed = function(element, moduleName) {\n    if (JssService.forbiddenProperties.indexOf(this.getTriggerName(element, moduleName)) > -1) {      // This triggerName is a core property, throw error\n        console.error('Triggername `' + getTriggerName(element,moduleName) + '` is not allowed. Change the trigger so it does not corresponds any of these: ' + JssService.forbiddenProperties)\n        return false;\n    }\n    return true;\n}\n/**\n * @module Jss\n * @author      Jeffrey Arts <sjeffff@gmail.com>\n * @copyright   2015\n */\nJss = function(){};\n\nJss.prototype.type      = \"Jss\"\nJss.prototype.triggers  = false;\nJss.prototype.element   = undefined;                                              // {obj} domElement\nJss.prototype.state     = undefined;                                              // {str} State of module, is reflected by the css class __isState\n\n/**\n * -----------------------------------------------------------------------------\n * Find Triggers\n * -----------------------------------------------------------------------------\n *\n * @param {domElement} element\n * @return {undefined}\n */\nJss.prototype.findTriggers = function(element) {\n    this.triggers = [];                                                         // If this is not set, all modules will have the same reference point to this.triggers.\n    // Module is created, now look for any module triggers\n    this.searchTriggersRecursiveInnerFunction(this.element)\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger\n * -----------------------------------------------------------------------------\n */\nJss.prototype.trigger = function(which, fn) {\n    if (typeof this.triggers !== \"object\") {\n        console.info(\"No triggers are found, please specify them in the css as `module-name--trigger-name`.\");\n        return false;\n    }\n\n    if (typeof this.triggers[which] !== \"object\") {\n        console.info(\"You are trying to execute a function on a non existing trigger `\" + which + \"`\");\n        return false;\n    }\n\n    for (var i = 0; i < this.triggers[which].length; i++) {\n        fn(this.triggers[which][i])\n    }\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Search triggers recursive inner function\n * -----------------------------------------------------------------------------\n * Recursive function which is executed bij findTriggers;\n *\n * @return {undefined}\n */\nJss.prototype.searchTriggersRecursiveInnerFunction = function(element) {\n    var self = this;\n    if (typeof element == \"undefined\" ) {\n        element = this.element;\n    }\n    if ( element.hasChildNodes() ) {\n        for (var i=0; i < element.childNodes.length; i++) {\n\n            var childElement = element.childNodes[i];                           // Improve readability\n\n            if (childElement.nodeType == 1) {                                   // NodeType 1 == domElement\n\n                if (JssService.isTrigger(childElement, this.moduleName)) {\n\n                    // Add a child element\n                    if (JssService.triggerNameIsAllowed(childElement, this.moduleName)) {\n                        var triggerName = JssService.getTriggerName(childElement, this.moduleName)\n\n                        if (typeof self.triggers[triggerName] !== \"object\") {\n                            self.triggers[triggerName] = [];\n                        }\n\n                        var tmp = new JssTrigger(childElement, {\n                            module: self,\n                            moduleName: this.moduleName,\n                            triggerName: triggerName,\n                        });\n\n                        self.triggers[triggerName].push(tmp);\n                    }\n                }\n                if (childElement.hasChildNodes()) {\n                    self.searchTriggersRecursiveInnerFunction(childElement)\n                }\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Configure Trigger\n * -----------------------------------------------------------------------------\n *\n * @return {undefined}\n */\nJss.prototype.configureTrigger = function(trigger, fn) {\n    if ( typeof this.triggers[trigger] == \"object\") {\n\n        for (var i = 0; i < this.triggers[trigger].length; i++) {\n            //self.triggers[trigger][i]\n            fn(this.triggers[trigger][i]);\n        }\n\n    } else if (JssService.dev) {\n        console.error(\"You are trying to configure a trigger which has no attached domElement\")\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n *   Init\n * -----------------------------------------------------------------------------\n * Notice the user that a init function needs to be added for controlling the triggers\n *\n * @return {undefined}\n */\nJss.prototype.init = function(func) {\n    if (JssService.dev) {\n        console.info(this.moduleName + \": Add a prototype.init function to add triggers and stuff\")\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set element\n * -----------------------------------------------------------------------------\n * Add a domElement to `this`\n *\n * @return {undefined}\n */\nJss.prototype.setElement = function(element) {\n    if (typeof element == \"undefined\") {\n        if (JssService.dev) {\n            return console.error(\"First parameter of setElement needs to be a domElement\");\n        }\n    }\n    this.element = element;\n}\n/*******************************************************************************\n   *\n   *\tActions\n   *\n   *  \t@author      Jeffrey Arts <sjeffff@gmail.com>\n   *    @copyright   2015\n   *\n*******************************************************************************/\n/**\n * -----------------------------------------------------------------------------\n *   Validate action\n * -----------------------------------------------------------------------------\n * Checks if parameter is a valid action, and logs an error when not.\n *\n * @param {string} request                                                      The name of the request\n * @return {boolean} true if a action is valid, otherwise false.\n */\nJss.prototype.validateAction = function(request) {\n    var result;\n    request = this.getActionElement(request).request\n    for (var action in JssService.actions) {\n        if (JssService.actions[action].indexOf(request.toLowerCase()) > -1) {\n            result = action;\n            break;\n        }\n    }\n    if (result) {\n        return result;\n    } else {\n        console.error(\"validateAction: unknown request\", request);\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * \t Add Action\n * -----------------------------------------------------------------------------\n * Adds an action to the object, list of possible requests can be found in Jss.actions\n *\n * | Options\n * \t\t- addDefaults {boolean}                                                 True: add default classes, false: don't\n *\n *\n *\n * @param {string} request                                                      The name of the request\n * @param {function} fn                                                         The function which should be triggered\n * @param {object} options                                                      Object with option parameters\n * @return {boolean} true if a action is succesfully added, otherwise false.\n */\nJss.prototype.addAction = function(request, fn, options) {\n\n    var self        = this;\n    var action      = self.validateAction(request)\n    var actions     = [];\n    var t = self.getActionElement(request);\n    var element     = t.element;\n    var request     = t.request;\n    t = undefined;\n\n    // Options\n    var addDefaults = JssService.getOption(\"addDefaults\", options);\n\n\n\n    switch (action) {\n\n        case \"resize\":\n\n            actions.push(element.addEventListener(\"resize\", fn));\n\n        break;\n\n\n        case \"click\":\n            actions.push(element.addEventListener(\"click\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"click\", function(){\n                    self.setState(\"Clicked\")\n                }));\n                actions.push(window.addEventListener( \"click\", function(event) {\n                    if (event.target != self.element && self.hasState(\"Clicked\")) {\n                        self.removeState(\"Clicked\")\n                    }\n                }));\n            } // End addDefaults\n        break;\n\n\n        case \"change\":\n            actions.push(element.addEventListener(\"change\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"change\", function(){\n                    self.setState(\"Changed\")\n                    setTimeout(function(){self.removeState(\"Changed\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"hover\":\n            actions.push(element.addEventListener(\"mouseover\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseover\", function(){\n                    self.setState(\"Hover\")\n                }));\n                actions.push(element.addEventListener(\"mouseout\",  function(){\n                    self.removeState(\"Hover\")\n                }));\n            }\n        break;\n\n\n        case \"mouseIn\":\n\n            actions.push(element.addEventListener(\"mouseenter\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseenter\", function(){\n                    self.setState(\"MouseIn\")\n                    setTimeout(function(){self.removeState(\"MouseIn\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"mouseOut\":\n\n            actions.push(element.addEventListener(\"mouseleave\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseleave\", function(){\n                    self.setState(\"MouseOut\")\n                    setTimeout(function(){self.removeState(\"MouseOut\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n    }\n\n\n    if (actions.length > 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get action element\n * -----------------------------------------------------------------------------\n * @param  {string} request                                                     The request\n * @return {object}                                                             An object with 2 properties: request && element\n */\nJss.prototype.getActionElement = function(request) {\n    var self = this;\n    var prefix = false;\n    var newRequest  = request;\n    var element = self.element;\n    // Set prefix if it exists\n    if (request.indexOf(\".\") > 0) {\n        var t       = request.split(\".\"),\n        newRequest  = t[1];\n        prefix      = t[0];\n        t = undefined;\n    }\n\n    // Update element according the prefix (or skip it, if not set)\n    if (prefix !== false) {\n        switch (prefix) {\n            case \"screen\":\n            case \"window\":\n                element = window;\n            break;\n        }\n    }\n\n    // Return object\n    return {\n        request: newRequest,\n        element: element\n    }\n}\n/**\n * -----------------------------------------------------------------------------\n * Class name prefix\n * -----------------------------------------------------------------------------\n * The prefix equals the modulename, or - when it's a trigger object - modulename--triggername\n *\n * @return {string} The classname\n */\nJss.prototype.classNamePrefix = function() {\n    if (this.type == \"JssTrigger\") {\n        return this.moduleName + \"--\" + this.triggerName;\n    } else {\n        return this.moduleName;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Remove class name\n * -----------------------------------------------------------------------------\n * Removes the `this.element` classname\n * \t- \"all\" || undefined        > Removes ALL classnames\n *  - \"allStates\" || \"states\"   > Remove all STATES\n *  - all other strings remove that specific string from the className\n *\n * @param {string} input                                                        The classname (case-sensitive) which needs to be removed\n * @return {undefined}\n */\nJss.prototype.removeClassName = function(input) {\n\n    var classList  = [];\n\n    if (input == \"all\" || typeof input == \"undefined\") {\n\n        this.element.className = \"\";\n\n    } else if (input == \"states\" || input == \"allStates\") {\n\n        classList = this.element.className.split(\" \");\n        for (var i in classList) {\n            className = classList[i];\n            if (className.indexOf(\"__is\") > -1) {\n                delete classList[i];\n            }\n        }\n        this.element.className = classList.join(\" \");\n\n    } else if(typeof input == \"string\") {\n        this.element.className = this.element.className.replace(input,\"\");\n    } else {\n        console.error(\"removeClassName: parameter should be a string\");\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Add class name\n * -----------------------------------------------------------------------------\n * Adds a class name by string or array.\n * Does NOT check for duplicates\n *\n * @param  {string} The classname to be added\n * @return {undefined}\n */\nJss.prototype.addClassName = function(data) {\n    this.element.className += \" \";\n    if (typeof data == \"string\") {\n        this.element.className += data;\n    } else {\n        this.element.className += data.join(\" \")\n    }\n}\n\n/**\n * List where the keys corresponds with this[key], and where the value is the function to be executed when the var is changed.\n */\nJss.prototype.setterWatchList = {};\nJss.prototype.getterWatchList = {};\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add data\n * -----------------------------------------------------------------------------\n * Add a (default) value for the given attribute.\n *\n * @param {string} attribute                                                    The name of the attribute (this[attribute])\n * @param {*} value                                                             The value of this[attribute], could be anything...\n * @param {object} options\n *           \t\t- setterWatchFunction {function}\n *           \t\t- getterWatchFunction {function}\n */\nJss.prototype.addData = function(attribute, value, options) {\n\n\n    // watchList[key] = fn;\n    var setterWatchFunction = JssService.getOption('setterWatchFunction', options); // Function\n    var getterWatchFunction = JssService.getOption('getterWatchFunction', options); // Function\n\n    if (typeof setterWatchFunction === \"function\") {\n        this.setterWatchList[attribute] = setterWatchFunction;\n    }\n\n    if (typeof getterWatchFunction === \"function\") {\n        this.getterWatchList[attribute] = getterWatchFunction;\n    }\n\n    // Set the default value\n    return this[attribute] = value;\n}\n\n\n\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- ajax {string} url\n */\nJss.prototype.setData = function(attribute, value, options) {\n\n    this[attribute] = value;\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n\n    if (Array.isArray(fallback)) {\n\n        for (var i = 0; i < fallback.length; i++) {\n            var type = fallback[i];\n\n            if (value && value.length > 0) {\n                this['setData' + JssService.toCamelCase(type)](attribute, value); // Call this.addDataAttribute(value) || this.addDataCookie(value) etc...\n                this[attribute] = value;\n            }\n        }\n    }\n\n    // Call the setter watch function, if defined;\n    if (typeof this.setterWatchList[attribute] === \"function\") { // Use the watchlist to add functionality whenever a data attribute is updated\n        this.setterWatchList[attribute]();\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataDefault {boolean}\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- dataAjax {string} url\n */\nJss.prototype.getData = function(attribute, options) {\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n    var value = false;\n\n\n    if (!fallback) {\n        fallback = ['attribute'];\n    }\n\n\n    for (var i = 0; i < fallback.length; i++) {\n        var type = JssService.toCamelCase(fallback[i]);\n        var customOptions = false;\n\n        if (typeof options == \"object\") {\n            customOptions = options[fallback[i].toLowerCase()];\n        }\n\n        if (!value || value.length < 0) {\n            if (typeof this['getData' + type] !== \"function\") {\n                console.error('this.getData' + type + ' is not a function. Probably ' + type + ' is not a available data option');\n                continue;\n            }\n            value = this['getData' + type]( attribute, customOptions ); // Call this.getDataAttribute(value) || this.getDataCookie(value) || this.getDataAjax(value) etc...\n        }\n    }\n    console.log(this.getterWatchList);\n    // Call the getter watch function, if defined;\n    if (typeof this.getterWatchList[attribute] == \"function\") {\n        this.getterWatchList[attribute]();\n    }\n\n    return this[attribute] = value;\n}\n/**\n * -----------------------------------------------------------------------------\n * Get data: Ajax\n * -----------------------------------------------------------------------------\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n *\n * @param {string} attribute                                                    The NAME of the inner variable (this.NAME), is also used as the key for the GET Request {NAME: value}\n * @param {object} options                                                      Object with parameters used to make a GET request\n * @return {string}                                                             The value of the given attribute, or false if an erro occured.\n */\nJss.prototype.getDataAjax = function(attribute, options) {\n    var url = JssService.getOption(\"url\", options);\n    var jsonKey = JssService.getOption(\"jsonKey\", options) || attribute;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('GET', url);\n\n        return ajaxReturn.success(function(result){\n            if (typeof result === \"object\") {\n                if (result[jsonKey]) {\n                    return result[jsonKey];\n                }\n            }\n        }).error(function(errorObject){\n            console.log(errorObject);\n        });\n    }\n\n    return false;\n};\n\n/**\n * -----------------------------------------------------------------------------\n * Set data: Ajax\n * -----------------------------------------------------------------------------\n * Makes a post request to the options.url in a object {attribute: value}\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n */\nJss.prototype.setDataAjax = function(attribute, value, options) {\n    var url = JssService.getOption(\"url\", options);\n    var requestObject = {}\n        requestObject[attribute] = value;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('POST', url, requestObject);\n\n        return ajaxReturn.success(function(result){\n            return true;\n        }).error(function(errorObject){\n            console.log(errorObject);\n            return false;\n        });\n    }\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Ajax (helper function)\n * -----------------------------------------------------------------------------\n * Based on Atom.js by Todd Motto\n * http://toddmotto.com/writing-a-standalone-ajax-xhr-javascript-micro-library/\n */\nJss.prototype.ajaxHelper = {\n    // Parses json if possible, otherwise just return text\n    parse: function(req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return [result, req];\n    },\n\n    xhr: function(type, url, data) {\n        var ajaxHelper = this;\n\n        var methods = {\n            success: function() {},\n            error: function() {}\n        };\n        var XHR = XMLHttpRequest || ActiveXObject;\n        var request = new XHR('MSXML2.XMLHTTP.3.0');\n        request.open(type, url, true);\n        request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n\n        request.onreadystatechange = function() {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    methods.success.apply(methods, ajaxHelper.parse(request));\n                } else {\n                    methods.error.apply(methods, ajaxHelper.parse(request));\n                }\n            }\n        };\n        request.send(data);\n        return {\n            success: function(callback) {\n                methods.success = callback;\n                return methods;\n            },\n            error: function(callback) {\n                methods.error = callback;\n                return methods;\n            }\n        };\n    }\n};\n\nJss.prototype.ajax = {\n    // Get\n    get: function(src) {\n        console.log(this);\n    },\n\n    // Set\n    put: function(url, data) {\n        return this.ajaxHelper.xhr('PUT', url, data);\n    },\n\n    // Add\n    post: function(url, data) {\n        return this.ajaxHelper.xhr('POST', url, data);\n    }\n\n};\n/**\n * -----------------------------------------------------------------------------\n * Get data attribute value\n * -----------------------------------------------------------------------------\n * Returns the value of the requested attribute. Search first for a data-[ATTRIBUTE] value\n * If not found, it checks for the attribute in the default object. When that is not being\n * found neither, the normal this[attribute] value is being returned.\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME)\n * @return {string}                                                             The value of the given attribute\n */\nJss.prototype.getDataAttribute = function(attribute) {\n\n    return this.element.dataset[attribute];\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Update data attribute\n * -----------------------------------------------------------------------------\n * Set the value to the given attribute. And updates the data-[ATTRIBUTE] value\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME=\"value\")\n * @param {string} value                                                        The VALUE of the data attribute (data-name=\"VALUE\")\n * @return {undefined}\n */\n\nJss.prototype.setDataAttribute = function(attribute, value) {\n\n    // Update data attribute\n    if (typeof value !== \"undefined\") {\n        this.element.dataset[attribute] = this[attribute];\n    } else {\n        delete this.element.dataset[attribute];\n    }\n\n    return true;\n}\nJss.prototype.dataDefaultsCookie = {\n    'expireData': undefined\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get cookie value\n * -----------------------------------------------------------------------------\n * Returns cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @return {string}                                                             The VALUE of the given attribute\n */\nJss.prototype.getDataCookie = function(attribute) {\n\n    if (!attribute) { return null; }\n    return decodeURIComponent(document.cookie.replace(new RegExp(\"(?:(?:^|.*;)\\\\s*\" + encodeURIComponent(attribute).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"), \"$1\")) || null;\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data cookie\n * -----------------------------------------------------------------------------\n * Updates the cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @param {string} value                                                        The VALUE of the cookie\n * @return {undefined}\n */\n\nJss.prototype.setDataCookie = function(attribute, value, options) {\n    var endDate, path, domain, secureConnection;\n\n    if (typeof options === \"object\") {\n        endDate = JssService.getOption('endDate', options);\n        path    = JssService.getOption('path', options);\n        domain  = JssService.getOption('domain', options);\n        secureConnection = JssService.getOption('secureConnection', options);\n    }\n\n    if (!attribute || /^(?:expires|max\\-age|path|domain|secure)$/i.test(attribute)) { return false; }\n    var sExpires = \"\";\n    if (endDate) {\n      switch (endDate.constructor) {\n        case Number:\n          sExpires = endDate === Infinity ? \"; expires=Fri, 31 Dec 9999 23:59:59 GMT\" : \"; max-age=\" + endDate;\n          break;\n        case String:\n          sExpires = \"; expires=\" + endDate;\n          break;\n        case Date:\n          sExpires = \"; expires=\" + endDate.toUTCString();\n          break;\n      }\n    }\n\n    document.cookie = encodeURIComponent(attribute) + \"=\" + encodeURIComponent(value) + sExpires + (domain ? \"; domain=\" + domain : \"\") + (path ? \"; path=\" + path : \"\") + (secureConnection ? \"; secure\" : \"\");\n    return true;\n}\n/*******************************************************************************\n\n    Styles\n\n*******************************************************************************/\n\n/**\n * -----------------------------------------------------------------------------\n * Set height\n * -----------------------------------------------------------------------------\n * Sets the height of the `this.element` by the given input (height)\n *\n * @param  {number} height                                                      The height in pixels or percentage. Where numbers will be calculated to pixels so giving a height of 50 will result in a height of \"50px\". If you want percentages pass the variable with a percentage sign 50 + \"%\"\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setHeight = function(height) {\n    if (typeof height === \"number\") {\n        height += \"px\";\n    }\n\n    if (typeof height !== \"string\") {\n        throw(\"parameter height needs to be a string or integer\");\n    }\n\n    this.element.style.height = height;\n    return true;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get height\n * -----------------------------------------------------------------------------\n * Returns the height of the `this.element`\n *\n * @return {number}                                                             The height of the element in pixels\n */\nJss.prototype.getHeight = function() {\n    return this.element.offsetHeight;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set width\n * -----------------------------------------------------------------------------\n * Sets the width of the `this.element` by the given input (width)\n *\n * @param  {number} width                                                       The width in pixels or percentage. Where numbers will be calculated to pixels so giving a width of 50 will result in a width of \"50px\". If you want to set a percentage, just pass the variable with a percentage sign (\"50%\")\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setWidth = function(width) {\n    if (typeof width == \"number\") {\n        width += \"px\";\n    }\n\n    if (typeof width !== \"string\") {\n        throw(\"parameter width needs to be a string or integer\");\n    }\n    this.element.style.width = width;\n    return true;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get width\n * -----------------------------------------------------------------------------\n * Returns the width of the `this.element`\n *\n * @return {number}                                                             The width of the element in pixels\n */\nJss.prototype.getWidth = function() {\n    return this.element.offsetWidth;\n}\n/**\n * -----------------------------------------------------------------------------\n * Set State\n * -----------------------------------------------------------------------------\n * This updates the state of the object. States are being added to the class name prefix with a double underscore.\n * If you would have the module `envelope` and give it the state `open`. The class name `envelope__open` will be added.\n * Whenever you remove the state `open`, the according class name will be removed as well.\n *\n * @param  {string} str                                                         The name of the state which should be set (this is transformed to CamelCase)\n * @return {boolean}                                                            True on success, otherwise false (might already have the state)\n */\nJss.prototype.setState = function(str) {\n    var element, verifiedState, state, className;\n\n    element         = this.element;\n    state           = JssService.toCamelCase(str);\n    className       = this.classNamePrefix() + \"__is\" + state;\n\n    // Check if this.state is an array, and make it one if not.\n    if (Array.isArray(this.state) == false ) {\n        this.state = [];\n    }\n\n    // This if statement prevents that the same state is being set multiple times\n    if ( !this.hasState(str) ) {\n        this.addClassName(className)\n        this.state.push(state);\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Has state\n * -----------------------------------------------------------------------------\n * Checks if the parameter is already a state and returns true if so. Otherwise false.\n *\n * @param  {string} str                                                         The state which will be checked for\n * @return {boolean}                                                            True if it has the given state, otherwise false\n */\nJss.prototype.hasState = function(str) {\n    if (typeof this.state == \"object\" && this.state.indexOf(str) >= 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Remove state\n * -----------------------------------------------------------------------------\n * Removes the state from the states array, and from the element.className\n *\n * @param  {string} str                                                         The name of the state which should be removed\n * @return {undefined}\n */\nJss.prototype.removeState = function(str) {\n\n    var state      = JssService.toCamelCase(str);\n    var stateIndex = this.state.indexOf(state);\n\n    if (str == \"all\" || typeof str == \"undefined\") {\n        this.removeClassName(\"states\");\n    } else {\n        this.state.splice(stateIndex, 1);\n        if (typeof this.moduleAction != \"undefined\" && this.moduleAction.length > -1) {\n            this.removeClassName(this.classNamePrefix() + \"\" + this.moduleAction + \"__is\" + state);\n        } else {\n            this.removeClassName(this.classNamePrefix() + \"__is\" + state);\n        }\n    }\n}\n\n\n// A simple way to watch variables\n\n// addVar(keyName, value, watch_function)\n// setVar(keyName, value)\n// getVar(keyName)\n// Add -> new\n// Set -> update\n// Get -> return\nvar JssModule = function(){};\n\nJssModule.prototype.type               = \"JssModule\";\nJssModule.prototype.init               = Jss.prototype.init;\nJssModule.prototype.setElement         = Jss.prototype.setElement;\n\n// Triggers\nJssModule.prototype.findTriggers       = Jss.prototype.findTriggers;\nJssModule.prototype.configureTrigger      = Jss.prototype.configureTrigger;\n\n// Actions\n//JssModule.prototype.actions            = Object.create(Jss.prototype.actions);\nJssModule.prototype.validateAction     = Jss.prototype.validateAction;\nJssModule.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssModule.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssModule.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssModule.prototype.setState           = Jss.prototype.setState;\nJssModule.prototype.hasState           = Jss.prototype.hasState;\nJssModule.prototype.removeState        = Jss.prototype.removeState;\n\n// Data attributes\nJssModule.prototype.addData            = Jss.prototype.addData;\nJssModule.prototype.getData            = Jss.prototype.getData;\nJssModule.prototype.setData            = Jss.prototype.setData;\nvar JssTrigger = function(element, options) {\n    this.setElement(element);\n\n    if (typeof options === \"object\") {\n        if (typeof options.module === \"object\") {\n            this.module = options.module;\n        }\n        if (typeof options.moduleName === \"string\") {\n            this.moduleName = options.moduleName;\n        }\n        if (typeof options.triggerName === \"string\") {\n            this.triggerName = options.triggerName;\n        }\n    }\n}\n\n\nJssTrigger.prototype                    = Object.create(Jss.prototype);\nJssTrigger.prototype.type               = \"JssTrigger\";\nJssTrigger.prototype.setElement         = Jss.prototype.setElement;\n\n// Actions\n//JssTrigger.prototype.actions            = Object.create(Jss.prototype.actions);\nJssTrigger.prototype.validateAction     = Jss.prototype.validateAction;\nJssTrigger.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssTrigger.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssTrigger.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssTrigger.prototype.setState           = Jss.prototype.setState;\nJssTrigger.prototype.hasState           = Jss.prototype.hasState;\nJssTrigger.prototype.removeState        = Jss.prototype.removeState;\n\n\n\nvar  JssController = {};\nJssController.modules \t\t= []; // Result array with objects of all the found modules\nJssController.activeModules \t= JssService.activeModules;\n\nJssController.findModules = function() {\n    var allElements = document.getElementsByTagName(\"*\");                       // Array with all domElements\n    var test = [];\n    var self = this;\n    for (var i=0; i < allElements.length; i++) {\n\n        // Set default vars //\n        var element = allElements[i];                                           // Specific domElement\n        var tmp = false;\n\n        // Loop through the (active) modules array and add/instantiate them\n        self.activeModules.forEach(function(module){\n            if (JssService.isModule(element, module)) {\n                tmp = eval(\"new \" + JssService.toCamelCase(module) + \"(element)\"); // Dynamicly load modules\n\n                tmp.setElement(element);                                        // Add the domElement to the module\n                tmp.findTriggers();\t\t\t                                    // Search for module triggers\n\n                tmp.init();\t\t\t\t\t                                    // Executes everything within the init function\n                self.modules.push(tmp);\n\n            }\n        }); // End forEach\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    JssController.findModules();\n    console.log(JssController);\n});"
          },
          "params": [
            {
              "title": "param",
              "description": "classname to be added",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "The"
            }
          ],
          "returns": [
            {
              "title": "returns",
              "description": null,
              "type": {
                "type": "UndefinedLiteral"
              }
            }
          ],
          "name": "addClassName",
          "kind": "function",
          "memberof": "Jss",
          "scope": "instance",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            "Jss",
            "addClassName"
          ]
        },
        {
          "description": "-----------------------------------------------------------------------------\nAdd data\n-----------------------------------------------------------------------------\nAdd a (default) value for the given attribute.",
          "tags": [
            {
              "title": "param",
              "description": "The name of the attribute (this[attribute])",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "attribute"
            },
            {
              "title": "param",
              "description": "The value of this[attribute], could be anything...",
              "type": {
                "type": "AllLiteral"
              },
              "name": "value"
            },
            {
              "title": "param",
              "description": "setterWatchFunction {function}\n          \t\t- getterWatchFunction {function}",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "options"
            },
            {
              "title": "name",
              "name": "addData"
            },
            {
              "title": "kind",
              "kind": "function"
            },
            {
              "title": "memberof",
              "description": "Jss"
            },
            {
              "title": "instance"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 673,
                "column": 0
              },
              "end": {
                "line": 708,
                "column": 0
              }
            },
            "file": "/Users/jeffreyarts/Documents/DEV/jss/lib/jss.js",
            "code": "JssService = {};\n\n// Edit this array to enable or disable default modules\nJssService.activeModules   = []\n\n// Set this to false in a live environment\nJssService.dev             = true;\n\n/**************************\n*\n*   Below are core properties defined, becarefull when you think of changing these...\n*\n**************************/\n\n\nJssService.actions = {\n    hover:      ['hover',    'mouseover',   'onmouseover'                       ], // Fixed\n    click:      ['click',    'onclick'                                          ], // Fixed\n    mouseIn:    ['mousein',  'onmousein', 'mouseenter', 'onmouseenter'          ], // Fixed\n    mouseOut:   ['mouseout', 'onmouseout', 'mouseleave', 'onmouseleave'         ], // Fixed\n    resize:     ['resize',   'onresize'                                         ], // Fixed\n    focus:      ['focus',    'onfocus'                                          ],\n    keyDown:    ['keydown',  'keypress'                                         ],\n    keyUp:      ['keyup',    'keyrelease'                                       ],\n    change:     ['change',   'onchange'                                         ],\n};\n\nJssService.enterDelay = 1000;                                                   // Amount of miliseconds which is used to remove the entered state. (see core.actions) JssService.enterDelay setTimeout\n\nJssService.forbiddenProperties = [\n    'type',\n    'triggers',\n    'configureTrigger',\n    'findTriggers'\n];\n\n/**\n * -----------------------------------------------------------------------------\n * Is Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isModule = function(element, moduleName) {\n    var arr = element.className.split(\" \");\n    var found = false;\n\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i].indexOf(moduleName)        > -1 &&\n            arr[i].indexOf(moduleName + \"_\") == -1 &&\n            arr[i].indexOf(moduleName + \"-\") == -1)\n        {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.addModule = function(moduleName) {\n    this.activeModules.push(this.toKebabCase(moduleName))\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To CamelCase\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toCamelCase = function(input) {\n    var arr, res;\n    res = \"\";\n    if (typeof input === \"string\") {\n        input = input.replace(/\\-/g,\" \");                                       // Replace all dashes with spaces\n        arr = input.split(\" \");\n    } else {\n        arr = input;                                                            // Assume it is an array\n    }\n\n\n\n    var i = 0;\n    for (var i in arr) {\n        if (typeof i != \"undefined\") {\n            res += arr[i][0].toUpperCase()+ arr[i].slice(1); // Capitalize first letter\n        }\n    }\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To kebab-case\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toKebabCase = function(input) {\n    var res, str;\n    res = \"\";\n\n    if (typeof input === \"string\") {\n        str = input;\n    } else {                                                                    // Assume it is an array\n        str = input.join(\" \");\n    }\n\n    // First change it to camelcase\n    str = this.toCamelCase(str);\n\n    var max = str.length;\n    for (var i=0; i < max; i++) {\n        // Check if character is uppercase\n        if (str[i] != str[i].toLowerCase()) {\n            if (i!==0) {\n                str = str.substr(0, i) + \"-\" + str.substr(i);\n                i++;\n            }\n        }\n    }\n\n    return res = str.toLowerCase();\n}\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get option\n * -----------------------------------------------------------------------------\n * @param  {string} name                                                        Keyname in optionList\n * @param  {array} optionList                                                   Array with all possible options\n * @return {}                                                                   Copy of the value (optionsList[name])\n */\nJssService.getOption = function(name, optionList) {\n    if (typeof optionList !== \"object\") {\n        return false;\n    }\n\n    var res;\n\n    switch (name) {\n\n        // Only set `addDefaults` to false when it is explicitly set.\n        case \"addDefaults\":\n            if (optionList[name] !== false || typeof optionList[name] === \"undefined\") {\n                res = true;\n            } else {\n                res = false;\n            }\n        break;\n        case \"fallback\":\n            if ( Array.isArray(optionList[name]) ) {\n                res = optionList[name];\n                if (res.length===0) {\n                    res = false;\n                }\n            } else if (typeof optionList[name] === \"string\"){\n                res = [optionList[name]];\n            }\n        break;\n        default:\n        res = optionList[name]\n    }\n\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Is Trigger\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isTrigger = function(element, moduleName) {\n    if (element.className.indexOf(moduleName + \"--\") > -1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get trigger name\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {string} Name of the trigger.\n */\nJssService.getTriggerName = function(element, moduleName) {\n    if (typeof element != \"object\") {\n        console.error('Required first argument `element` needs to be a domElement.');\n        return false;\n    }\n    if (typeof moduleName != \"string\") {\n        console.error('Required second argument `moduleName` needs to be a string.');\n        return false;\n    }\n\n    // As an example we assume that the value of element.className equals 'b module--triggerName'\n    var startPos = element.className.indexOf(moduleName + \"--\");                    // 2\n    var sliced = element.className.slice(startPos, element.className.length )       // 'module--triggerName'\n    var endPos = sliced.indexOf(\" \");                                               // -1       // not found\n    if (endPos != -1) {                                                             // 19\n        sliced = sliced.slice(0,endPos);                                            // if there is more after the string, this will remove it\n    }\n    return sliced.replace(moduleName + \"--\",\"\")\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger name is allowed\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} True if the triggername is allowed, otherwise false.\n */\nJssService.triggerNameIsAllowed = function(element, moduleName) {\n    if (JssService.forbiddenProperties.indexOf(this.getTriggerName(element, moduleName)) > -1) {      // This triggerName is a core property, throw error\n        console.error('Triggername `' + getTriggerName(element,moduleName) + '` is not allowed. Change the trigger so it does not corresponds any of these: ' + JssService.forbiddenProperties)\n        return false;\n    }\n    return true;\n}\n/**\n * @module Jss\n * @author      Jeffrey Arts <sjeffff@gmail.com>\n * @copyright   2015\n */\nJss = function(){};\n\nJss.prototype.type      = \"Jss\"\nJss.prototype.triggers  = false;\nJss.prototype.element   = undefined;                                              // {obj} domElement\nJss.prototype.state     = undefined;                                              // {str} State of module, is reflected by the css class __isState\n\n/**\n * -----------------------------------------------------------------------------\n * Find Triggers\n * -----------------------------------------------------------------------------\n *\n * @param {domElement} element\n * @return {undefined}\n */\nJss.prototype.findTriggers = function(element) {\n    this.triggers = [];                                                         // If this is not set, all modules will have the same reference point to this.triggers.\n    // Module is created, now look for any module triggers\n    this.searchTriggersRecursiveInnerFunction(this.element)\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger\n * -----------------------------------------------------------------------------\n */\nJss.prototype.trigger = function(which, fn) {\n    if (typeof this.triggers !== \"object\") {\n        console.info(\"No triggers are found, please specify them in the css as `module-name--trigger-name`.\");\n        return false;\n    }\n\n    if (typeof this.triggers[which] !== \"object\") {\n        console.info(\"You are trying to execute a function on a non existing trigger `\" + which + \"`\");\n        return false;\n    }\n\n    for (var i = 0; i < this.triggers[which].length; i++) {\n        fn(this.triggers[which][i])\n    }\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Search triggers recursive inner function\n * -----------------------------------------------------------------------------\n * Recursive function which is executed bij findTriggers;\n *\n * @return {undefined}\n */\nJss.prototype.searchTriggersRecursiveInnerFunction = function(element) {\n    var self = this;\n    if (typeof element == \"undefined\" ) {\n        element = this.element;\n    }\n    if ( element.hasChildNodes() ) {\n        for (var i=0; i < element.childNodes.length; i++) {\n\n            var childElement = element.childNodes[i];                           // Improve readability\n\n            if (childElement.nodeType == 1) {                                   // NodeType 1 == domElement\n\n                if (JssService.isTrigger(childElement, this.moduleName)) {\n\n                    // Add a child element\n                    if (JssService.triggerNameIsAllowed(childElement, this.moduleName)) {\n                        var triggerName = JssService.getTriggerName(childElement, this.moduleName)\n\n                        if (typeof self.triggers[triggerName] !== \"object\") {\n                            self.triggers[triggerName] = [];\n                        }\n\n                        var tmp = new JssTrigger(childElement, {\n                            module: self,\n                            moduleName: this.moduleName,\n                            triggerName: triggerName,\n                        });\n\n                        self.triggers[triggerName].push(tmp);\n                    }\n                }\n                if (childElement.hasChildNodes()) {\n                    self.searchTriggersRecursiveInnerFunction(childElement)\n                }\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Configure Trigger\n * -----------------------------------------------------------------------------\n *\n * @return {undefined}\n */\nJss.prototype.configureTrigger = function(trigger, fn) {\n    if ( typeof this.triggers[trigger] == \"object\") {\n\n        for (var i = 0; i < this.triggers[trigger].length; i++) {\n            //self.triggers[trigger][i]\n            fn(this.triggers[trigger][i]);\n        }\n\n    } else if (JssService.dev) {\n        console.error(\"You are trying to configure a trigger which has no attached domElement\")\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n *   Init\n * -----------------------------------------------------------------------------\n * Notice the user that a init function needs to be added for controlling the triggers\n *\n * @return {undefined}\n */\nJss.prototype.init = function(func) {\n    if (JssService.dev) {\n        console.info(this.moduleName + \": Add a prototype.init function to add triggers and stuff\")\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set element\n * -----------------------------------------------------------------------------\n * Add a domElement to `this`\n *\n * @return {undefined}\n */\nJss.prototype.setElement = function(element) {\n    if (typeof element == \"undefined\") {\n        if (JssService.dev) {\n            return console.error(\"First parameter of setElement needs to be a domElement\");\n        }\n    }\n    this.element = element;\n}\n/*******************************************************************************\n   *\n   *\tActions\n   *\n   *  \t@author      Jeffrey Arts <sjeffff@gmail.com>\n   *    @copyright   2015\n   *\n*******************************************************************************/\n/**\n * -----------------------------------------------------------------------------\n *   Validate action\n * -----------------------------------------------------------------------------\n * Checks if parameter is a valid action, and logs an error when not.\n *\n * @param {string} request                                                      The name of the request\n * @return {boolean} true if a action is valid, otherwise false.\n */\nJss.prototype.validateAction = function(request) {\n    var result;\n    request = this.getActionElement(request).request\n    for (var action in JssService.actions) {\n        if (JssService.actions[action].indexOf(request.toLowerCase()) > -1) {\n            result = action;\n            break;\n        }\n    }\n    if (result) {\n        return result;\n    } else {\n        console.error(\"validateAction: unknown request\", request);\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * \t Add Action\n * -----------------------------------------------------------------------------\n * Adds an action to the object, list of possible requests can be found in Jss.actions\n *\n * | Options\n * \t\t- addDefaults {boolean}                                                 True: add default classes, false: don't\n *\n *\n *\n * @param {string} request                                                      The name of the request\n * @param {function} fn                                                         The function which should be triggered\n * @param {object} options                                                      Object with option parameters\n * @return {boolean} true if a action is succesfully added, otherwise false.\n */\nJss.prototype.addAction = function(request, fn, options) {\n\n    var self        = this;\n    var action      = self.validateAction(request)\n    var actions     = [];\n    var t = self.getActionElement(request);\n    var element     = t.element;\n    var request     = t.request;\n    t = undefined;\n\n    // Options\n    var addDefaults = JssService.getOption(\"addDefaults\", options);\n\n\n\n    switch (action) {\n\n        case \"resize\":\n\n            actions.push(element.addEventListener(\"resize\", fn));\n\n        break;\n\n\n        case \"click\":\n            actions.push(element.addEventListener(\"click\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"click\", function(){\n                    self.setState(\"Clicked\")\n                }));\n                actions.push(window.addEventListener( \"click\", function(event) {\n                    if (event.target != self.element && self.hasState(\"Clicked\")) {\n                        self.removeState(\"Clicked\")\n                    }\n                }));\n            } // End addDefaults\n        break;\n\n\n        case \"change\":\n            actions.push(element.addEventListener(\"change\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"change\", function(){\n                    self.setState(\"Changed\")\n                    setTimeout(function(){self.removeState(\"Changed\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"hover\":\n            actions.push(element.addEventListener(\"mouseover\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseover\", function(){\n                    self.setState(\"Hover\")\n                }));\n                actions.push(element.addEventListener(\"mouseout\",  function(){\n                    self.removeState(\"Hover\")\n                }));\n            }\n        break;\n\n\n        case \"mouseIn\":\n\n            actions.push(element.addEventListener(\"mouseenter\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseenter\", function(){\n                    self.setState(\"MouseIn\")\n                    setTimeout(function(){self.removeState(\"MouseIn\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"mouseOut\":\n\n            actions.push(element.addEventListener(\"mouseleave\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseleave\", function(){\n                    self.setState(\"MouseOut\")\n                    setTimeout(function(){self.removeState(\"MouseOut\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n    }\n\n\n    if (actions.length > 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get action element\n * -----------------------------------------------------------------------------\n * @param  {string} request                                                     The request\n * @return {object}                                                             An object with 2 properties: request && element\n */\nJss.prototype.getActionElement = function(request) {\n    var self = this;\n    var prefix = false;\n    var newRequest  = request;\n    var element = self.element;\n    // Set prefix if it exists\n    if (request.indexOf(\".\") > 0) {\n        var t       = request.split(\".\"),\n        newRequest  = t[1];\n        prefix      = t[0];\n        t = undefined;\n    }\n\n    // Update element according the prefix (or skip it, if not set)\n    if (prefix !== false) {\n        switch (prefix) {\n            case \"screen\":\n            case \"window\":\n                element = window;\n            break;\n        }\n    }\n\n    // Return object\n    return {\n        request: newRequest,\n        element: element\n    }\n}\n/**\n * -----------------------------------------------------------------------------\n * Class name prefix\n * -----------------------------------------------------------------------------\n * The prefix equals the modulename, or - when it's a trigger object - modulename--triggername\n *\n * @return {string} The classname\n */\nJss.prototype.classNamePrefix = function() {\n    if (this.type == \"JssTrigger\") {\n        return this.moduleName + \"--\" + this.triggerName;\n    } else {\n        return this.moduleName;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Remove class name\n * -----------------------------------------------------------------------------\n * Removes the `this.element` classname\n * \t- \"all\" || undefined        > Removes ALL classnames\n *  - \"allStates\" || \"states\"   > Remove all STATES\n *  - all other strings remove that specific string from the className\n *\n * @param {string} input                                                        The classname (case-sensitive) which needs to be removed\n * @return {undefined}\n */\nJss.prototype.removeClassName = function(input) {\n\n    var classList  = [];\n\n    if (input == \"all\" || typeof input == \"undefined\") {\n\n        this.element.className = \"\";\n\n    } else if (input == \"states\" || input == \"allStates\") {\n\n        classList = this.element.className.split(\" \");\n        for (var i in classList) {\n            className = classList[i];\n            if (className.indexOf(\"__is\") > -1) {\n                delete classList[i];\n            }\n        }\n        this.element.className = classList.join(\" \");\n\n    } else if(typeof input == \"string\") {\n        this.element.className = this.element.className.replace(input,\"\");\n    } else {\n        console.error(\"removeClassName: parameter should be a string\");\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Add class name\n * -----------------------------------------------------------------------------\n * Adds a class name by string or array.\n * Does NOT check for duplicates\n *\n * @param  {string} The classname to be added\n * @return {undefined}\n */\nJss.prototype.addClassName = function(data) {\n    this.element.className += \" \";\n    if (typeof data == \"string\") {\n        this.element.className += data;\n    } else {\n        this.element.className += data.join(\" \")\n    }\n}\n\n/**\n * List where the keys corresponds with this[key], and where the value is the function to be executed when the var is changed.\n */\nJss.prototype.setterWatchList = {};\nJss.prototype.getterWatchList = {};\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add data\n * -----------------------------------------------------------------------------\n * Add a (default) value for the given attribute.\n *\n * @param {string} attribute                                                    The name of the attribute (this[attribute])\n * @param {*} value                                                             The value of this[attribute], could be anything...\n * @param {object} options\n *           \t\t- setterWatchFunction {function}\n *           \t\t- getterWatchFunction {function}\n */\nJss.prototype.addData = function(attribute, value, options) {\n\n\n    // watchList[key] = fn;\n    var setterWatchFunction = JssService.getOption('setterWatchFunction', options); // Function\n    var getterWatchFunction = JssService.getOption('getterWatchFunction', options); // Function\n\n    if (typeof setterWatchFunction === \"function\") {\n        this.setterWatchList[attribute] = setterWatchFunction;\n    }\n\n    if (typeof getterWatchFunction === \"function\") {\n        this.getterWatchList[attribute] = getterWatchFunction;\n    }\n\n    // Set the default value\n    return this[attribute] = value;\n}\n\n\n\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- ajax {string} url\n */\nJss.prototype.setData = function(attribute, value, options) {\n\n    this[attribute] = value;\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n\n    if (Array.isArray(fallback)) {\n\n        for (var i = 0; i < fallback.length; i++) {\n            var type = fallback[i];\n\n            if (value && value.length > 0) {\n                this['setData' + JssService.toCamelCase(type)](attribute, value); // Call this.addDataAttribute(value) || this.addDataCookie(value) etc...\n                this[attribute] = value;\n            }\n        }\n    }\n\n    // Call the setter watch function, if defined;\n    if (typeof this.setterWatchList[attribute] === \"function\") { // Use the watchlist to add functionality whenever a data attribute is updated\n        this.setterWatchList[attribute]();\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataDefault {boolean}\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- dataAjax {string} url\n */\nJss.prototype.getData = function(attribute, options) {\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n    var value = false;\n\n\n    if (!fallback) {\n        fallback = ['attribute'];\n    }\n\n\n    for (var i = 0; i < fallback.length; i++) {\n        var type = JssService.toCamelCase(fallback[i]);\n        var customOptions = false;\n\n        if (typeof options == \"object\") {\n            customOptions = options[fallback[i].toLowerCase()];\n        }\n\n        if (!value || value.length < 0) {\n            if (typeof this['getData' + type] !== \"function\") {\n                console.error('this.getData' + type + ' is not a function. Probably ' + type + ' is not a available data option');\n                continue;\n            }\n            value = this['getData' + type]( attribute, customOptions ); // Call this.getDataAttribute(value) || this.getDataCookie(value) || this.getDataAjax(value) etc...\n        }\n    }\n    console.log(this.getterWatchList);\n    // Call the getter watch function, if defined;\n    if (typeof this.getterWatchList[attribute] == \"function\") {\n        this.getterWatchList[attribute]();\n    }\n\n    return this[attribute] = value;\n}\n/**\n * -----------------------------------------------------------------------------\n * Get data: Ajax\n * -----------------------------------------------------------------------------\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n *\n * @param {string} attribute                                                    The NAME of the inner variable (this.NAME), is also used as the key for the GET Request {NAME: value}\n * @param {object} options                                                      Object with parameters used to make a GET request\n * @return {string}                                                             The value of the given attribute, or false if an erro occured.\n */\nJss.prototype.getDataAjax = function(attribute, options) {\n    var url = JssService.getOption(\"url\", options);\n    var jsonKey = JssService.getOption(\"jsonKey\", options) || attribute;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('GET', url);\n\n        return ajaxReturn.success(function(result){\n            if (typeof result === \"object\") {\n                if (result[jsonKey]) {\n                    return result[jsonKey];\n                }\n            }\n        }).error(function(errorObject){\n            console.log(errorObject);\n        });\n    }\n\n    return false;\n};\n\n/**\n * -----------------------------------------------------------------------------\n * Set data: Ajax\n * -----------------------------------------------------------------------------\n * Makes a post request to the options.url in a object {attribute: value}\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n */\nJss.prototype.setDataAjax = function(attribute, value, options) {\n    var url = JssService.getOption(\"url\", options);\n    var requestObject = {}\n        requestObject[attribute] = value;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('POST', url, requestObject);\n\n        return ajaxReturn.success(function(result){\n            return true;\n        }).error(function(errorObject){\n            console.log(errorObject);\n            return false;\n        });\n    }\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Ajax (helper function)\n * -----------------------------------------------------------------------------\n * Based on Atom.js by Todd Motto\n * http://toddmotto.com/writing-a-standalone-ajax-xhr-javascript-micro-library/\n */\nJss.prototype.ajaxHelper = {\n    // Parses json if possible, otherwise just return text\n    parse: function(req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return [result, req];\n    },\n\n    xhr: function(type, url, data) {\n        var ajaxHelper = this;\n\n        var methods = {\n            success: function() {},\n            error: function() {}\n        };\n        var XHR = XMLHttpRequest || ActiveXObject;\n        var request = new XHR('MSXML2.XMLHTTP.3.0');\n        request.open(type, url, true);\n        request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n\n        request.onreadystatechange = function() {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    methods.success.apply(methods, ajaxHelper.parse(request));\n                } else {\n                    methods.error.apply(methods, ajaxHelper.parse(request));\n                }\n            }\n        };\n        request.send(data);\n        return {\n            success: function(callback) {\n                methods.success = callback;\n                return methods;\n            },\n            error: function(callback) {\n                methods.error = callback;\n                return methods;\n            }\n        };\n    }\n};\n\nJss.prototype.ajax = {\n    // Get\n    get: function(src) {\n        console.log(this);\n    },\n\n    // Set\n    put: function(url, data) {\n        return this.ajaxHelper.xhr('PUT', url, data);\n    },\n\n    // Add\n    post: function(url, data) {\n        return this.ajaxHelper.xhr('POST', url, data);\n    }\n\n};\n/**\n * -----------------------------------------------------------------------------\n * Get data attribute value\n * -----------------------------------------------------------------------------\n * Returns the value of the requested attribute. Search first for a data-[ATTRIBUTE] value\n * If not found, it checks for the attribute in the default object. When that is not being\n * found neither, the normal this[attribute] value is being returned.\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME)\n * @return {string}                                                             The value of the given attribute\n */\nJss.prototype.getDataAttribute = function(attribute) {\n\n    return this.element.dataset[attribute];\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Update data attribute\n * -----------------------------------------------------------------------------\n * Set the value to the given attribute. And updates the data-[ATTRIBUTE] value\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME=\"value\")\n * @param {string} value                                                        The VALUE of the data attribute (data-name=\"VALUE\")\n * @return {undefined}\n */\n\nJss.prototype.setDataAttribute = function(attribute, value) {\n\n    // Update data attribute\n    if (typeof value !== \"undefined\") {\n        this.element.dataset[attribute] = this[attribute];\n    } else {\n        delete this.element.dataset[attribute];\n    }\n\n    return true;\n}\nJss.prototype.dataDefaultsCookie = {\n    'expireData': undefined\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get cookie value\n * -----------------------------------------------------------------------------\n * Returns cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @return {string}                                                             The VALUE of the given attribute\n */\nJss.prototype.getDataCookie = function(attribute) {\n\n    if (!attribute) { return null; }\n    return decodeURIComponent(document.cookie.replace(new RegExp(\"(?:(?:^|.*;)\\\\s*\" + encodeURIComponent(attribute).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"), \"$1\")) || null;\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data cookie\n * -----------------------------------------------------------------------------\n * Updates the cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @param {string} value                                                        The VALUE of the cookie\n * @return {undefined}\n */\n\nJss.prototype.setDataCookie = function(attribute, value, options) {\n    var endDate, path, domain, secureConnection;\n\n    if (typeof options === \"object\") {\n        endDate = JssService.getOption('endDate', options);\n        path    = JssService.getOption('path', options);\n        domain  = JssService.getOption('domain', options);\n        secureConnection = JssService.getOption('secureConnection', options);\n    }\n\n    if (!attribute || /^(?:expires|max\\-age|path|domain|secure)$/i.test(attribute)) { return false; }\n    var sExpires = \"\";\n    if (endDate) {\n      switch (endDate.constructor) {\n        case Number:\n          sExpires = endDate === Infinity ? \"; expires=Fri, 31 Dec 9999 23:59:59 GMT\" : \"; max-age=\" + endDate;\n          break;\n        case String:\n          sExpires = \"; expires=\" + endDate;\n          break;\n        case Date:\n          sExpires = \"; expires=\" + endDate.toUTCString();\n          break;\n      }\n    }\n\n    document.cookie = encodeURIComponent(attribute) + \"=\" + encodeURIComponent(value) + sExpires + (domain ? \"; domain=\" + domain : \"\") + (path ? \"; path=\" + path : \"\") + (secureConnection ? \"; secure\" : \"\");\n    return true;\n}\n/*******************************************************************************\n\n    Styles\n\n*******************************************************************************/\n\n/**\n * -----------------------------------------------------------------------------\n * Set height\n * -----------------------------------------------------------------------------\n * Sets the height of the `this.element` by the given input (height)\n *\n * @param  {number} height                                                      The height in pixels or percentage. Where numbers will be calculated to pixels so giving a height of 50 will result in a height of \"50px\". If you want percentages pass the variable with a percentage sign 50 + \"%\"\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setHeight = function(height) {\n    if (typeof height === \"number\") {\n        height += \"px\";\n    }\n\n    if (typeof height !== \"string\") {\n        throw(\"parameter height needs to be a string or integer\");\n    }\n\n    this.element.style.height = height;\n    return true;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get height\n * -----------------------------------------------------------------------------\n * Returns the height of the `this.element`\n *\n * @return {number}                                                             The height of the element in pixels\n */\nJss.prototype.getHeight = function() {\n    return this.element.offsetHeight;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set width\n * -----------------------------------------------------------------------------\n * Sets the width of the `this.element` by the given input (width)\n *\n * @param  {number} width                                                       The width in pixels or percentage. Where numbers will be calculated to pixels so giving a width of 50 will result in a width of \"50px\". If you want to set a percentage, just pass the variable with a percentage sign (\"50%\")\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setWidth = function(width) {\n    if (typeof width == \"number\") {\n        width += \"px\";\n    }\n\n    if (typeof width !== \"string\") {\n        throw(\"parameter width needs to be a string or integer\");\n    }\n    this.element.style.width = width;\n    return true;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get width\n * -----------------------------------------------------------------------------\n * Returns the width of the `this.element`\n *\n * @return {number}                                                             The width of the element in pixels\n */\nJss.prototype.getWidth = function() {\n    return this.element.offsetWidth;\n}\n/**\n * -----------------------------------------------------------------------------\n * Set State\n * -----------------------------------------------------------------------------\n * This updates the state of the object. States are being added to the class name prefix with a double underscore.\n * If you would have the module `envelope` and give it the state `open`. The class name `envelope__open` will be added.\n * Whenever you remove the state `open`, the according class name will be removed as well.\n *\n * @param  {string} str                                                         The name of the state which should be set (this is transformed to CamelCase)\n * @return {boolean}                                                            True on success, otherwise false (might already have the state)\n */\nJss.prototype.setState = function(str) {\n    var element, verifiedState, state, className;\n\n    element         = this.element;\n    state           = JssService.toCamelCase(str);\n    className       = this.classNamePrefix() + \"__is\" + state;\n\n    // Check if this.state is an array, and make it one if not.\n    if (Array.isArray(this.state) == false ) {\n        this.state = [];\n    }\n\n    // This if statement prevents that the same state is being set multiple times\n    if ( !this.hasState(str) ) {\n        this.addClassName(className)\n        this.state.push(state);\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Has state\n * -----------------------------------------------------------------------------\n * Checks if the parameter is already a state and returns true if so. Otherwise false.\n *\n * @param  {string} str                                                         The state which will be checked for\n * @return {boolean}                                                            True if it has the given state, otherwise false\n */\nJss.prototype.hasState = function(str) {\n    if (typeof this.state == \"object\" && this.state.indexOf(str) >= 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Remove state\n * -----------------------------------------------------------------------------\n * Removes the state from the states array, and from the element.className\n *\n * @param  {string} str                                                         The name of the state which should be removed\n * @return {undefined}\n */\nJss.prototype.removeState = function(str) {\n\n    var state      = JssService.toCamelCase(str);\n    var stateIndex = this.state.indexOf(state);\n\n    if (str == \"all\" || typeof str == \"undefined\") {\n        this.removeClassName(\"states\");\n    } else {\n        this.state.splice(stateIndex, 1);\n        if (typeof this.moduleAction != \"undefined\" && this.moduleAction.length > -1) {\n            this.removeClassName(this.classNamePrefix() + \"\" + this.moduleAction + \"__is\" + state);\n        } else {\n            this.removeClassName(this.classNamePrefix() + \"__is\" + state);\n        }\n    }\n}\n\n\n// A simple way to watch variables\n\n// addVar(keyName, value, watch_function)\n// setVar(keyName, value)\n// getVar(keyName)\n// Add -> new\n// Set -> update\n// Get -> return\nvar JssModule = function(){};\n\nJssModule.prototype.type               = \"JssModule\";\nJssModule.prototype.init               = Jss.prototype.init;\nJssModule.prototype.setElement         = Jss.prototype.setElement;\n\n// Triggers\nJssModule.prototype.findTriggers       = Jss.prototype.findTriggers;\nJssModule.prototype.configureTrigger      = Jss.prototype.configureTrigger;\n\n// Actions\n//JssModule.prototype.actions            = Object.create(Jss.prototype.actions);\nJssModule.prototype.validateAction     = Jss.prototype.validateAction;\nJssModule.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssModule.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssModule.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssModule.prototype.setState           = Jss.prototype.setState;\nJssModule.prototype.hasState           = Jss.prototype.hasState;\nJssModule.prototype.removeState        = Jss.prototype.removeState;\n\n// Data attributes\nJssModule.prototype.addData            = Jss.prototype.addData;\nJssModule.prototype.getData            = Jss.prototype.getData;\nJssModule.prototype.setData            = Jss.prototype.setData;\nvar JssTrigger = function(element, options) {\n    this.setElement(element);\n\n    if (typeof options === \"object\") {\n        if (typeof options.module === \"object\") {\n            this.module = options.module;\n        }\n        if (typeof options.moduleName === \"string\") {\n            this.moduleName = options.moduleName;\n        }\n        if (typeof options.triggerName === \"string\") {\n            this.triggerName = options.triggerName;\n        }\n    }\n}\n\n\nJssTrigger.prototype                    = Object.create(Jss.prototype);\nJssTrigger.prototype.type               = \"JssTrigger\";\nJssTrigger.prototype.setElement         = Jss.prototype.setElement;\n\n// Actions\n//JssTrigger.prototype.actions            = Object.create(Jss.prototype.actions);\nJssTrigger.prototype.validateAction     = Jss.prototype.validateAction;\nJssTrigger.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssTrigger.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssTrigger.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssTrigger.prototype.setState           = Jss.prototype.setState;\nJssTrigger.prototype.hasState           = Jss.prototype.hasState;\nJssTrigger.prototype.removeState        = Jss.prototype.removeState;\n\n\n\nvar  JssController = {};\nJssController.modules \t\t= []; // Result array with objects of all the found modules\nJssController.activeModules \t= JssService.activeModules;\n\nJssController.findModules = function() {\n    var allElements = document.getElementsByTagName(\"*\");                       // Array with all domElements\n    var test = [];\n    var self = this;\n    for (var i=0; i < allElements.length; i++) {\n\n        // Set default vars //\n        var element = allElements[i];                                           // Specific domElement\n        var tmp = false;\n\n        // Loop through the (active) modules array and add/instantiate them\n        self.activeModules.forEach(function(module){\n            if (JssService.isModule(element, module)) {\n                tmp = eval(\"new \" + JssService.toCamelCase(module) + \"(element)\"); // Dynamicly load modules\n\n                tmp.setElement(element);                                        // Add the domElement to the module\n                tmp.findTriggers();\t\t\t                                    // Search for module triggers\n\n                tmp.init();\t\t\t\t\t                                    // Executes everything within the init function\n                self.modules.push(tmp);\n\n            }\n        }); // End forEach\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    JssController.findModules();\n    console.log(JssController);\n});"
          },
          "params": [
            {
              "title": "param",
              "description": "The name of the attribute (this[attribute])",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "attribute"
            },
            {
              "title": "param",
              "description": "The value of this[attribute], could be anything...",
              "type": {
                "type": "AllLiteral"
              },
              "name": "value"
            },
            {
              "title": "param",
              "description": "setterWatchFunction {function}\n          \t\t- getterWatchFunction {function}",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "options"
            }
          ],
          "name": "addData",
          "kind": "function",
          "memberof": "Jss",
          "scope": "instance",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            "Jss",
            "addData"
          ]
        },
        {
          "description": "-----------------------------------------------------------------------------\nAjax (helper function)\n-----------------------------------------------------------------------------\nBased on Atom.js by Todd Motto\nhttp://toddmotto.com/writing-a-standalone-ajax-xhr-javascript-micro-library/",
          "tags": [
            {
              "title": "name",
              "name": "ajaxHelper"
            },
            {
              "title": "kind",
              "kind": "function"
            },
            {
              "title": "memberof",
              "description": "Jss"
            },
            {
              "title": "instance"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 850,
                "column": 0
              },
              "end": {
                "line": 895,
                "column": 2
              }
            },
            "file": "/Users/jeffreyarts/Documents/DEV/jss/lib/jss.js",
            "code": "JssService = {};\n\n// Edit this array to enable or disable default modules\nJssService.activeModules   = []\n\n// Set this to false in a live environment\nJssService.dev             = true;\n\n/**************************\n*\n*   Below are core properties defined, becarefull when you think of changing these...\n*\n**************************/\n\n\nJssService.actions = {\n    hover:      ['hover',    'mouseover',   'onmouseover'                       ], // Fixed\n    click:      ['click',    'onclick'                                          ], // Fixed\n    mouseIn:    ['mousein',  'onmousein', 'mouseenter', 'onmouseenter'          ], // Fixed\n    mouseOut:   ['mouseout', 'onmouseout', 'mouseleave', 'onmouseleave'         ], // Fixed\n    resize:     ['resize',   'onresize'                                         ], // Fixed\n    focus:      ['focus',    'onfocus'                                          ],\n    keyDown:    ['keydown',  'keypress'                                         ],\n    keyUp:      ['keyup',    'keyrelease'                                       ],\n    change:     ['change',   'onchange'                                         ],\n};\n\nJssService.enterDelay = 1000;                                                   // Amount of miliseconds which is used to remove the entered state. (see core.actions) JssService.enterDelay setTimeout\n\nJssService.forbiddenProperties = [\n    'type',\n    'triggers',\n    'configureTrigger',\n    'findTriggers'\n];\n\n/**\n * -----------------------------------------------------------------------------\n * Is Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isModule = function(element, moduleName) {\n    var arr = element.className.split(\" \");\n    var found = false;\n\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i].indexOf(moduleName)        > -1 &&\n            arr[i].indexOf(moduleName + \"_\") == -1 &&\n            arr[i].indexOf(moduleName + \"-\") == -1)\n        {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.addModule = function(moduleName) {\n    this.activeModules.push(this.toKebabCase(moduleName))\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To CamelCase\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toCamelCase = function(input) {\n    var arr, res;\n    res = \"\";\n    if (typeof input === \"string\") {\n        input = input.replace(/\\-/g,\" \");                                       // Replace all dashes with spaces\n        arr = input.split(\" \");\n    } else {\n        arr = input;                                                            // Assume it is an array\n    }\n\n\n\n    var i = 0;\n    for (var i in arr) {\n        if (typeof i != \"undefined\") {\n            res += arr[i][0].toUpperCase()+ arr[i].slice(1); // Capitalize first letter\n        }\n    }\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To kebab-case\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toKebabCase = function(input) {\n    var res, str;\n    res = \"\";\n\n    if (typeof input === \"string\") {\n        str = input;\n    } else {                                                                    // Assume it is an array\n        str = input.join(\" \");\n    }\n\n    // First change it to camelcase\n    str = this.toCamelCase(str);\n\n    var max = str.length;\n    for (var i=0; i < max; i++) {\n        // Check if character is uppercase\n        if (str[i] != str[i].toLowerCase()) {\n            if (i!==0) {\n                str = str.substr(0, i) + \"-\" + str.substr(i);\n                i++;\n            }\n        }\n    }\n\n    return res = str.toLowerCase();\n}\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get option\n * -----------------------------------------------------------------------------\n * @param  {string} name                                                        Keyname in optionList\n * @param  {array} optionList                                                   Array with all possible options\n * @return {}                                                                   Copy of the value (optionsList[name])\n */\nJssService.getOption = function(name, optionList) {\n    if (typeof optionList !== \"object\") {\n        return false;\n    }\n\n    var res;\n\n    switch (name) {\n\n        // Only set `addDefaults` to false when it is explicitly set.\n        case \"addDefaults\":\n            if (optionList[name] !== false || typeof optionList[name] === \"undefined\") {\n                res = true;\n            } else {\n                res = false;\n            }\n        break;\n        case \"fallback\":\n            if ( Array.isArray(optionList[name]) ) {\n                res = optionList[name];\n                if (res.length===0) {\n                    res = false;\n                }\n            } else if (typeof optionList[name] === \"string\"){\n                res = [optionList[name]];\n            }\n        break;\n        default:\n        res = optionList[name]\n    }\n\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Is Trigger\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isTrigger = function(element, moduleName) {\n    if (element.className.indexOf(moduleName + \"--\") > -1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get trigger name\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {string} Name of the trigger.\n */\nJssService.getTriggerName = function(element, moduleName) {\n    if (typeof element != \"object\") {\n        console.error('Required first argument `element` needs to be a domElement.');\n        return false;\n    }\n    if (typeof moduleName != \"string\") {\n        console.error('Required second argument `moduleName` needs to be a string.');\n        return false;\n    }\n\n    // As an example we assume that the value of element.className equals 'b module--triggerName'\n    var startPos = element.className.indexOf(moduleName + \"--\");                    // 2\n    var sliced = element.className.slice(startPos, element.className.length )       // 'module--triggerName'\n    var endPos = sliced.indexOf(\" \");                                               // -1       // not found\n    if (endPos != -1) {                                                             // 19\n        sliced = sliced.slice(0,endPos);                                            // if there is more after the string, this will remove it\n    }\n    return sliced.replace(moduleName + \"--\",\"\")\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger name is allowed\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} True if the triggername is allowed, otherwise false.\n */\nJssService.triggerNameIsAllowed = function(element, moduleName) {\n    if (JssService.forbiddenProperties.indexOf(this.getTriggerName(element, moduleName)) > -1) {      // This triggerName is a core property, throw error\n        console.error('Triggername `' + getTriggerName(element,moduleName) + '` is not allowed. Change the trigger so it does not corresponds any of these: ' + JssService.forbiddenProperties)\n        return false;\n    }\n    return true;\n}\n/**\n * @module Jss\n * @author      Jeffrey Arts <sjeffff@gmail.com>\n * @copyright   2015\n */\nJss = function(){};\n\nJss.prototype.type      = \"Jss\"\nJss.prototype.triggers  = false;\nJss.prototype.element   = undefined;                                              // {obj} domElement\nJss.prototype.state     = undefined;                                              // {str} State of module, is reflected by the css class __isState\n\n/**\n * -----------------------------------------------------------------------------\n * Find Triggers\n * -----------------------------------------------------------------------------\n *\n * @param {domElement} element\n * @return {undefined}\n */\nJss.prototype.findTriggers = function(element) {\n    this.triggers = [];                                                         // If this is not set, all modules will have the same reference point to this.triggers.\n    // Module is created, now look for any module triggers\n    this.searchTriggersRecursiveInnerFunction(this.element)\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger\n * -----------------------------------------------------------------------------\n */\nJss.prototype.trigger = function(which, fn) {\n    if (typeof this.triggers !== \"object\") {\n        console.info(\"No triggers are found, please specify them in the css as `module-name--trigger-name`.\");\n        return false;\n    }\n\n    if (typeof this.triggers[which] !== \"object\") {\n        console.info(\"You are trying to execute a function on a non existing trigger `\" + which + \"`\");\n        return false;\n    }\n\n    for (var i = 0; i < this.triggers[which].length; i++) {\n        fn(this.triggers[which][i])\n    }\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Search triggers recursive inner function\n * -----------------------------------------------------------------------------\n * Recursive function which is executed bij findTriggers;\n *\n * @return {undefined}\n */\nJss.prototype.searchTriggersRecursiveInnerFunction = function(element) {\n    var self = this;\n    if (typeof element == \"undefined\" ) {\n        element = this.element;\n    }\n    if ( element.hasChildNodes() ) {\n        for (var i=0; i < element.childNodes.length; i++) {\n\n            var childElement = element.childNodes[i];                           // Improve readability\n\n            if (childElement.nodeType == 1) {                                   // NodeType 1 == domElement\n\n                if (JssService.isTrigger(childElement, this.moduleName)) {\n\n                    // Add a child element\n                    if (JssService.triggerNameIsAllowed(childElement, this.moduleName)) {\n                        var triggerName = JssService.getTriggerName(childElement, this.moduleName)\n\n                        if (typeof self.triggers[triggerName] !== \"object\") {\n                            self.triggers[triggerName] = [];\n                        }\n\n                        var tmp = new JssTrigger(childElement, {\n                            module: self,\n                            moduleName: this.moduleName,\n                            triggerName: triggerName,\n                        });\n\n                        self.triggers[triggerName].push(tmp);\n                    }\n                }\n                if (childElement.hasChildNodes()) {\n                    self.searchTriggersRecursiveInnerFunction(childElement)\n                }\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Configure Trigger\n * -----------------------------------------------------------------------------\n *\n * @return {undefined}\n */\nJss.prototype.configureTrigger = function(trigger, fn) {\n    if ( typeof this.triggers[trigger] == \"object\") {\n\n        for (var i = 0; i < this.triggers[trigger].length; i++) {\n            //self.triggers[trigger][i]\n            fn(this.triggers[trigger][i]);\n        }\n\n    } else if (JssService.dev) {\n        console.error(\"You are trying to configure a trigger which has no attached domElement\")\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n *   Init\n * -----------------------------------------------------------------------------\n * Notice the user that a init function needs to be added for controlling the triggers\n *\n * @return {undefined}\n */\nJss.prototype.init = function(func) {\n    if (JssService.dev) {\n        console.info(this.moduleName + \": Add a prototype.init function to add triggers and stuff\")\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set element\n * -----------------------------------------------------------------------------\n * Add a domElement to `this`\n *\n * @return {undefined}\n */\nJss.prototype.setElement = function(element) {\n    if (typeof element == \"undefined\") {\n        if (JssService.dev) {\n            return console.error(\"First parameter of setElement needs to be a domElement\");\n        }\n    }\n    this.element = element;\n}\n/*******************************************************************************\n   *\n   *\tActions\n   *\n   *  \t@author      Jeffrey Arts <sjeffff@gmail.com>\n   *    @copyright   2015\n   *\n*******************************************************************************/\n/**\n * -----------------------------------------------------------------------------\n *   Validate action\n * -----------------------------------------------------------------------------\n * Checks if parameter is a valid action, and logs an error when not.\n *\n * @param {string} request                                                      The name of the request\n * @return {boolean} true if a action is valid, otherwise false.\n */\nJss.prototype.validateAction = function(request) {\n    var result;\n    request = this.getActionElement(request).request\n    for (var action in JssService.actions) {\n        if (JssService.actions[action].indexOf(request.toLowerCase()) > -1) {\n            result = action;\n            break;\n        }\n    }\n    if (result) {\n        return result;\n    } else {\n        console.error(\"validateAction: unknown request\", request);\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * \t Add Action\n * -----------------------------------------------------------------------------\n * Adds an action to the object, list of possible requests can be found in Jss.actions\n *\n * | Options\n * \t\t- addDefaults {boolean}                                                 True: add default classes, false: don't\n *\n *\n *\n * @param {string} request                                                      The name of the request\n * @param {function} fn                                                         The function which should be triggered\n * @param {object} options                                                      Object with option parameters\n * @return {boolean} true if a action is succesfully added, otherwise false.\n */\nJss.prototype.addAction = function(request, fn, options) {\n\n    var self        = this;\n    var action      = self.validateAction(request)\n    var actions     = [];\n    var t = self.getActionElement(request);\n    var element     = t.element;\n    var request     = t.request;\n    t = undefined;\n\n    // Options\n    var addDefaults = JssService.getOption(\"addDefaults\", options);\n\n\n\n    switch (action) {\n\n        case \"resize\":\n\n            actions.push(element.addEventListener(\"resize\", fn));\n\n        break;\n\n\n        case \"click\":\n            actions.push(element.addEventListener(\"click\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"click\", function(){\n                    self.setState(\"Clicked\")\n                }));\n                actions.push(window.addEventListener( \"click\", function(event) {\n                    if (event.target != self.element && self.hasState(\"Clicked\")) {\n                        self.removeState(\"Clicked\")\n                    }\n                }));\n            } // End addDefaults\n        break;\n\n\n        case \"change\":\n            actions.push(element.addEventListener(\"change\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"change\", function(){\n                    self.setState(\"Changed\")\n                    setTimeout(function(){self.removeState(\"Changed\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"hover\":\n            actions.push(element.addEventListener(\"mouseover\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseover\", function(){\n                    self.setState(\"Hover\")\n                }));\n                actions.push(element.addEventListener(\"mouseout\",  function(){\n                    self.removeState(\"Hover\")\n                }));\n            }\n        break;\n\n\n        case \"mouseIn\":\n\n            actions.push(element.addEventListener(\"mouseenter\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseenter\", function(){\n                    self.setState(\"MouseIn\")\n                    setTimeout(function(){self.removeState(\"MouseIn\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"mouseOut\":\n\n            actions.push(element.addEventListener(\"mouseleave\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseleave\", function(){\n                    self.setState(\"MouseOut\")\n                    setTimeout(function(){self.removeState(\"MouseOut\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n    }\n\n\n    if (actions.length > 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get action element\n * -----------------------------------------------------------------------------\n * @param  {string} request                                                     The request\n * @return {object}                                                             An object with 2 properties: request && element\n */\nJss.prototype.getActionElement = function(request) {\n    var self = this;\n    var prefix = false;\n    var newRequest  = request;\n    var element = self.element;\n    // Set prefix if it exists\n    if (request.indexOf(\".\") > 0) {\n        var t       = request.split(\".\"),\n        newRequest  = t[1];\n        prefix      = t[0];\n        t = undefined;\n    }\n\n    // Update element according the prefix (or skip it, if not set)\n    if (prefix !== false) {\n        switch (prefix) {\n            case \"screen\":\n            case \"window\":\n                element = window;\n            break;\n        }\n    }\n\n    // Return object\n    return {\n        request: newRequest,\n        element: element\n    }\n}\n/**\n * -----------------------------------------------------------------------------\n * Class name prefix\n * -----------------------------------------------------------------------------\n * The prefix equals the modulename, or - when it's a trigger object - modulename--triggername\n *\n * @return {string} The classname\n */\nJss.prototype.classNamePrefix = function() {\n    if (this.type == \"JssTrigger\") {\n        return this.moduleName + \"--\" + this.triggerName;\n    } else {\n        return this.moduleName;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Remove class name\n * -----------------------------------------------------------------------------\n * Removes the `this.element` classname\n * \t- \"all\" || undefined        > Removes ALL classnames\n *  - \"allStates\" || \"states\"   > Remove all STATES\n *  - all other strings remove that specific string from the className\n *\n * @param {string} input                                                        The classname (case-sensitive) which needs to be removed\n * @return {undefined}\n */\nJss.prototype.removeClassName = function(input) {\n\n    var classList  = [];\n\n    if (input == \"all\" || typeof input == \"undefined\") {\n\n        this.element.className = \"\";\n\n    } else if (input == \"states\" || input == \"allStates\") {\n\n        classList = this.element.className.split(\" \");\n        for (var i in classList) {\n            className = classList[i];\n            if (className.indexOf(\"__is\") > -1) {\n                delete classList[i];\n            }\n        }\n        this.element.className = classList.join(\" \");\n\n    } else if(typeof input == \"string\") {\n        this.element.className = this.element.className.replace(input,\"\");\n    } else {\n        console.error(\"removeClassName: parameter should be a string\");\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Add class name\n * -----------------------------------------------------------------------------\n * Adds a class name by string or array.\n * Does NOT check for duplicates\n *\n * @param  {string} The classname to be added\n * @return {undefined}\n */\nJss.prototype.addClassName = function(data) {\n    this.element.className += \" \";\n    if (typeof data == \"string\") {\n        this.element.className += data;\n    } else {\n        this.element.className += data.join(\" \")\n    }\n}\n\n/**\n * List where the keys corresponds with this[key], and where the value is the function to be executed when the var is changed.\n */\nJss.prototype.setterWatchList = {};\nJss.prototype.getterWatchList = {};\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add data\n * -----------------------------------------------------------------------------\n * Add a (default) value for the given attribute.\n *\n * @param {string} attribute                                                    The name of the attribute (this[attribute])\n * @param {*} value                                                             The value of this[attribute], could be anything...\n * @param {object} options\n *           \t\t- setterWatchFunction {function}\n *           \t\t- getterWatchFunction {function}\n */\nJss.prototype.addData = function(attribute, value, options) {\n\n\n    // watchList[key] = fn;\n    var setterWatchFunction = JssService.getOption('setterWatchFunction', options); // Function\n    var getterWatchFunction = JssService.getOption('getterWatchFunction', options); // Function\n\n    if (typeof setterWatchFunction === \"function\") {\n        this.setterWatchList[attribute] = setterWatchFunction;\n    }\n\n    if (typeof getterWatchFunction === \"function\") {\n        this.getterWatchList[attribute] = getterWatchFunction;\n    }\n\n    // Set the default value\n    return this[attribute] = value;\n}\n\n\n\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- ajax {string} url\n */\nJss.prototype.setData = function(attribute, value, options) {\n\n    this[attribute] = value;\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n\n    if (Array.isArray(fallback)) {\n\n        for (var i = 0; i < fallback.length; i++) {\n            var type = fallback[i];\n\n            if (value && value.length > 0) {\n                this['setData' + JssService.toCamelCase(type)](attribute, value); // Call this.addDataAttribute(value) || this.addDataCookie(value) etc...\n                this[attribute] = value;\n            }\n        }\n    }\n\n    // Call the setter watch function, if defined;\n    if (typeof this.setterWatchList[attribute] === \"function\") { // Use the watchlist to add functionality whenever a data attribute is updated\n        this.setterWatchList[attribute]();\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataDefault {boolean}\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- dataAjax {string} url\n */\nJss.prototype.getData = function(attribute, options) {\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n    var value = false;\n\n\n    if (!fallback) {\n        fallback = ['attribute'];\n    }\n\n\n    for (var i = 0; i < fallback.length; i++) {\n        var type = JssService.toCamelCase(fallback[i]);\n        var customOptions = false;\n\n        if (typeof options == \"object\") {\n            customOptions = options[fallback[i].toLowerCase()];\n        }\n\n        if (!value || value.length < 0) {\n            if (typeof this['getData' + type] !== \"function\") {\n                console.error('this.getData' + type + ' is not a function. Probably ' + type + ' is not a available data option');\n                continue;\n            }\n            value = this['getData' + type]( attribute, customOptions ); // Call this.getDataAttribute(value) || this.getDataCookie(value) || this.getDataAjax(value) etc...\n        }\n    }\n    console.log(this.getterWatchList);\n    // Call the getter watch function, if defined;\n    if (typeof this.getterWatchList[attribute] == \"function\") {\n        this.getterWatchList[attribute]();\n    }\n\n    return this[attribute] = value;\n}\n/**\n * -----------------------------------------------------------------------------\n * Get data: Ajax\n * -----------------------------------------------------------------------------\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n *\n * @param {string} attribute                                                    The NAME of the inner variable (this.NAME), is also used as the key for the GET Request {NAME: value}\n * @param {object} options                                                      Object with parameters used to make a GET request\n * @return {string}                                                             The value of the given attribute, or false if an erro occured.\n */\nJss.prototype.getDataAjax = function(attribute, options) {\n    var url = JssService.getOption(\"url\", options);\n    var jsonKey = JssService.getOption(\"jsonKey\", options) || attribute;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('GET', url);\n\n        return ajaxReturn.success(function(result){\n            if (typeof result === \"object\") {\n                if (result[jsonKey]) {\n                    return result[jsonKey];\n                }\n            }\n        }).error(function(errorObject){\n            console.log(errorObject);\n        });\n    }\n\n    return false;\n};\n\n/**\n * -----------------------------------------------------------------------------\n * Set data: Ajax\n * -----------------------------------------------------------------------------\n * Makes a post request to the options.url in a object {attribute: value}\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n */\nJss.prototype.setDataAjax = function(attribute, value, options) {\n    var url = JssService.getOption(\"url\", options);\n    var requestObject = {}\n        requestObject[attribute] = value;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('POST', url, requestObject);\n\n        return ajaxReturn.success(function(result){\n            return true;\n        }).error(function(errorObject){\n            console.log(errorObject);\n            return false;\n        });\n    }\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Ajax (helper function)\n * -----------------------------------------------------------------------------\n * Based on Atom.js by Todd Motto\n * http://toddmotto.com/writing-a-standalone-ajax-xhr-javascript-micro-library/\n */\nJss.prototype.ajaxHelper = {\n    // Parses json if possible, otherwise just return text\n    parse: function(req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return [result, req];\n    },\n\n    xhr: function(type, url, data) {\n        var ajaxHelper = this;\n\n        var methods = {\n            success: function() {},\n            error: function() {}\n        };\n        var XHR = XMLHttpRequest || ActiveXObject;\n        var request = new XHR('MSXML2.XMLHTTP.3.0');\n        request.open(type, url, true);\n        request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n\n        request.onreadystatechange = function() {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    methods.success.apply(methods, ajaxHelper.parse(request));\n                } else {\n                    methods.error.apply(methods, ajaxHelper.parse(request));\n                }\n            }\n        };\n        request.send(data);\n        return {\n            success: function(callback) {\n                methods.success = callback;\n                return methods;\n            },\n            error: function(callback) {\n                methods.error = callback;\n                return methods;\n            }\n        };\n    }\n};\n\nJss.prototype.ajax = {\n    // Get\n    get: function(src) {\n        console.log(this);\n    },\n\n    // Set\n    put: function(url, data) {\n        return this.ajaxHelper.xhr('PUT', url, data);\n    },\n\n    // Add\n    post: function(url, data) {\n        return this.ajaxHelper.xhr('POST', url, data);\n    }\n\n};\n/**\n * -----------------------------------------------------------------------------\n * Get data attribute value\n * -----------------------------------------------------------------------------\n * Returns the value of the requested attribute. Search first for a data-[ATTRIBUTE] value\n * If not found, it checks for the attribute in the default object. When that is not being\n * found neither, the normal this[attribute] value is being returned.\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME)\n * @return {string}                                                             The value of the given attribute\n */\nJss.prototype.getDataAttribute = function(attribute) {\n\n    return this.element.dataset[attribute];\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Update data attribute\n * -----------------------------------------------------------------------------\n * Set the value to the given attribute. And updates the data-[ATTRIBUTE] value\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME=\"value\")\n * @param {string} value                                                        The VALUE of the data attribute (data-name=\"VALUE\")\n * @return {undefined}\n */\n\nJss.prototype.setDataAttribute = function(attribute, value) {\n\n    // Update data attribute\n    if (typeof value !== \"undefined\") {\n        this.element.dataset[attribute] = this[attribute];\n    } else {\n        delete this.element.dataset[attribute];\n    }\n\n    return true;\n}\nJss.prototype.dataDefaultsCookie = {\n    'expireData': undefined\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get cookie value\n * -----------------------------------------------------------------------------\n * Returns cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @return {string}                                                             The VALUE of the given attribute\n */\nJss.prototype.getDataCookie = function(attribute) {\n\n    if (!attribute) { return null; }\n    return decodeURIComponent(document.cookie.replace(new RegExp(\"(?:(?:^|.*;)\\\\s*\" + encodeURIComponent(attribute).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"), \"$1\")) || null;\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data cookie\n * -----------------------------------------------------------------------------\n * Updates the cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @param {string} value                                                        The VALUE of the cookie\n * @return {undefined}\n */\n\nJss.prototype.setDataCookie = function(attribute, value, options) {\n    var endDate, path, domain, secureConnection;\n\n    if (typeof options === \"object\") {\n        endDate = JssService.getOption('endDate', options);\n        path    = JssService.getOption('path', options);\n        domain  = JssService.getOption('domain', options);\n        secureConnection = JssService.getOption('secureConnection', options);\n    }\n\n    if (!attribute || /^(?:expires|max\\-age|path|domain|secure)$/i.test(attribute)) { return false; }\n    var sExpires = \"\";\n    if (endDate) {\n      switch (endDate.constructor) {\n        case Number:\n          sExpires = endDate === Infinity ? \"; expires=Fri, 31 Dec 9999 23:59:59 GMT\" : \"; max-age=\" + endDate;\n          break;\n        case String:\n          sExpires = \"; expires=\" + endDate;\n          break;\n        case Date:\n          sExpires = \"; expires=\" + endDate.toUTCString();\n          break;\n      }\n    }\n\n    document.cookie = encodeURIComponent(attribute) + \"=\" + encodeURIComponent(value) + sExpires + (domain ? \"; domain=\" + domain : \"\") + (path ? \"; path=\" + path : \"\") + (secureConnection ? \"; secure\" : \"\");\n    return true;\n}\n/*******************************************************************************\n\n    Styles\n\n*******************************************************************************/\n\n/**\n * -----------------------------------------------------------------------------\n * Set height\n * -----------------------------------------------------------------------------\n * Sets the height of the `this.element` by the given input (height)\n *\n * @param  {number} height                                                      The height in pixels or percentage. Where numbers will be calculated to pixels so giving a height of 50 will result in a height of \"50px\". If you want percentages pass the variable with a percentage sign 50 + \"%\"\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setHeight = function(height) {\n    if (typeof height === \"number\") {\n        height += \"px\";\n    }\n\n    if (typeof height !== \"string\") {\n        throw(\"parameter height needs to be a string or integer\");\n    }\n\n    this.element.style.height = height;\n    return true;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get height\n * -----------------------------------------------------------------------------\n * Returns the height of the `this.element`\n *\n * @return {number}                                                             The height of the element in pixels\n */\nJss.prototype.getHeight = function() {\n    return this.element.offsetHeight;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set width\n * -----------------------------------------------------------------------------\n * Sets the width of the `this.element` by the given input (width)\n *\n * @param  {number} width                                                       The width in pixels or percentage. Where numbers will be calculated to pixels so giving a width of 50 will result in a width of \"50px\". If you want to set a percentage, just pass the variable with a percentage sign (\"50%\")\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setWidth = function(width) {\n    if (typeof width == \"number\") {\n        width += \"px\";\n    }\n\n    if (typeof width !== \"string\") {\n        throw(\"parameter width needs to be a string or integer\");\n    }\n    this.element.style.width = width;\n    return true;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get width\n * -----------------------------------------------------------------------------\n * Returns the width of the `this.element`\n *\n * @return {number}                                                             The width of the element in pixels\n */\nJss.prototype.getWidth = function() {\n    return this.element.offsetWidth;\n}\n/**\n * -----------------------------------------------------------------------------\n * Set State\n * -----------------------------------------------------------------------------\n * This updates the state of the object. States are being added to the class name prefix with a double underscore.\n * If you would have the module `envelope` and give it the state `open`. The class name `envelope__open` will be added.\n * Whenever you remove the state `open`, the according class name will be removed as well.\n *\n * @param  {string} str                                                         The name of the state which should be set (this is transformed to CamelCase)\n * @return {boolean}                                                            True on success, otherwise false (might already have the state)\n */\nJss.prototype.setState = function(str) {\n    var element, verifiedState, state, className;\n\n    element         = this.element;\n    state           = JssService.toCamelCase(str);\n    className       = this.classNamePrefix() + \"__is\" + state;\n\n    // Check if this.state is an array, and make it one if not.\n    if (Array.isArray(this.state) == false ) {\n        this.state = [];\n    }\n\n    // This if statement prevents that the same state is being set multiple times\n    if ( !this.hasState(str) ) {\n        this.addClassName(className)\n        this.state.push(state);\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Has state\n * -----------------------------------------------------------------------------\n * Checks if the parameter is already a state and returns true if so. Otherwise false.\n *\n * @param  {string} str                                                         The state which will be checked for\n * @return {boolean}                                                            True if it has the given state, otherwise false\n */\nJss.prototype.hasState = function(str) {\n    if (typeof this.state == \"object\" && this.state.indexOf(str) >= 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Remove state\n * -----------------------------------------------------------------------------\n * Removes the state from the states array, and from the element.className\n *\n * @param  {string} str                                                         The name of the state which should be removed\n * @return {undefined}\n */\nJss.prototype.removeState = function(str) {\n\n    var state      = JssService.toCamelCase(str);\n    var stateIndex = this.state.indexOf(state);\n\n    if (str == \"all\" || typeof str == \"undefined\") {\n        this.removeClassName(\"states\");\n    } else {\n        this.state.splice(stateIndex, 1);\n        if (typeof this.moduleAction != \"undefined\" && this.moduleAction.length > -1) {\n            this.removeClassName(this.classNamePrefix() + \"\" + this.moduleAction + \"__is\" + state);\n        } else {\n            this.removeClassName(this.classNamePrefix() + \"__is\" + state);\n        }\n    }\n}\n\n\n// A simple way to watch variables\n\n// addVar(keyName, value, watch_function)\n// setVar(keyName, value)\n// getVar(keyName)\n// Add -> new\n// Set -> update\n// Get -> return\nvar JssModule = function(){};\n\nJssModule.prototype.type               = \"JssModule\";\nJssModule.prototype.init               = Jss.prototype.init;\nJssModule.prototype.setElement         = Jss.prototype.setElement;\n\n// Triggers\nJssModule.prototype.findTriggers       = Jss.prototype.findTriggers;\nJssModule.prototype.configureTrigger      = Jss.prototype.configureTrigger;\n\n// Actions\n//JssModule.prototype.actions            = Object.create(Jss.prototype.actions);\nJssModule.prototype.validateAction     = Jss.prototype.validateAction;\nJssModule.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssModule.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssModule.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssModule.prototype.setState           = Jss.prototype.setState;\nJssModule.prototype.hasState           = Jss.prototype.hasState;\nJssModule.prototype.removeState        = Jss.prototype.removeState;\n\n// Data attributes\nJssModule.prototype.addData            = Jss.prototype.addData;\nJssModule.prototype.getData            = Jss.prototype.getData;\nJssModule.prototype.setData            = Jss.prototype.setData;\nvar JssTrigger = function(element, options) {\n    this.setElement(element);\n\n    if (typeof options === \"object\") {\n        if (typeof options.module === \"object\") {\n            this.module = options.module;\n        }\n        if (typeof options.moduleName === \"string\") {\n            this.moduleName = options.moduleName;\n        }\n        if (typeof options.triggerName === \"string\") {\n            this.triggerName = options.triggerName;\n        }\n    }\n}\n\n\nJssTrigger.prototype                    = Object.create(Jss.prototype);\nJssTrigger.prototype.type               = \"JssTrigger\";\nJssTrigger.prototype.setElement         = Jss.prototype.setElement;\n\n// Actions\n//JssTrigger.prototype.actions            = Object.create(Jss.prototype.actions);\nJssTrigger.prototype.validateAction     = Jss.prototype.validateAction;\nJssTrigger.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssTrigger.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssTrigger.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssTrigger.prototype.setState           = Jss.prototype.setState;\nJssTrigger.prototype.hasState           = Jss.prototype.hasState;\nJssTrigger.prototype.removeState        = Jss.prototype.removeState;\n\n\n\nvar  JssController = {};\nJssController.modules \t\t= []; // Result array with objects of all the found modules\nJssController.activeModules \t= JssService.activeModules;\n\nJssController.findModules = function() {\n    var allElements = document.getElementsByTagName(\"*\");                       // Array with all domElements\n    var test = [];\n    var self = this;\n    for (var i=0; i < allElements.length; i++) {\n\n        // Set default vars //\n        var element = allElements[i];                                           // Specific domElement\n        var tmp = false;\n\n        // Loop through the (active) modules array and add/instantiate them\n        self.activeModules.forEach(function(module){\n            if (JssService.isModule(element, module)) {\n                tmp = eval(\"new \" + JssService.toCamelCase(module) + \"(element)\"); // Dynamicly load modules\n\n                tmp.setElement(element);                                        // Add the domElement to the module\n                tmp.findTriggers();\t\t\t                                    // Search for module triggers\n\n                tmp.init();\t\t\t\t\t                                    // Executes everything within the init function\n                self.modules.push(tmp);\n\n            }\n        }); // End forEach\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    JssController.findModules();\n    console.log(JssController);\n});"
          },
          "name": "ajaxHelper",
          "kind": "function",
          "memberof": "Jss",
          "scope": "instance",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            "Jss",
            "ajaxHelper"
          ]
        },
        {
          "description": "-----------------------------------------------------------------------------\nClass name prefix\n-----------------------------------------------------------------------------\nThe prefix equals the modulename, or - when it's a trigger object - modulename--triggername",
          "tags": [
            {
              "title": "returns",
              "description": "The classname",
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "name",
              "name": "classNamePrefix"
            },
            {
              "title": "kind",
              "kind": "function"
            },
            {
              "title": "memberof",
              "description": "Jss"
            },
            {
              "title": "instance"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 589,
                "column": 0
              },
              "end": {
                "line": 609,
                "column": 0
              }
            },
            "file": "/Users/jeffreyarts/Documents/DEV/jss/lib/jss.js",
            "code": "JssService = {};\n\n// Edit this array to enable or disable default modules\nJssService.activeModules   = []\n\n// Set this to false in a live environment\nJssService.dev             = true;\n\n/**************************\n*\n*   Below are core properties defined, becarefull when you think of changing these...\n*\n**************************/\n\n\nJssService.actions = {\n    hover:      ['hover',    'mouseover',   'onmouseover'                       ], // Fixed\n    click:      ['click',    'onclick'                                          ], // Fixed\n    mouseIn:    ['mousein',  'onmousein', 'mouseenter', 'onmouseenter'          ], // Fixed\n    mouseOut:   ['mouseout', 'onmouseout', 'mouseleave', 'onmouseleave'         ], // Fixed\n    resize:     ['resize',   'onresize'                                         ], // Fixed\n    focus:      ['focus',    'onfocus'                                          ],\n    keyDown:    ['keydown',  'keypress'                                         ],\n    keyUp:      ['keyup',    'keyrelease'                                       ],\n    change:     ['change',   'onchange'                                         ],\n};\n\nJssService.enterDelay = 1000;                                                   // Amount of miliseconds which is used to remove the entered state. (see core.actions) JssService.enterDelay setTimeout\n\nJssService.forbiddenProperties = [\n    'type',\n    'triggers',\n    'configureTrigger',\n    'findTriggers'\n];\n\n/**\n * -----------------------------------------------------------------------------\n * Is Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isModule = function(element, moduleName) {\n    var arr = element.className.split(\" \");\n    var found = false;\n\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i].indexOf(moduleName)        > -1 &&\n            arr[i].indexOf(moduleName + \"_\") == -1 &&\n            arr[i].indexOf(moduleName + \"-\") == -1)\n        {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.addModule = function(moduleName) {\n    this.activeModules.push(this.toKebabCase(moduleName))\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To CamelCase\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toCamelCase = function(input) {\n    var arr, res;\n    res = \"\";\n    if (typeof input === \"string\") {\n        input = input.replace(/\\-/g,\" \");                                       // Replace all dashes with spaces\n        arr = input.split(\" \");\n    } else {\n        arr = input;                                                            // Assume it is an array\n    }\n\n\n\n    var i = 0;\n    for (var i in arr) {\n        if (typeof i != \"undefined\") {\n            res += arr[i][0].toUpperCase()+ arr[i].slice(1); // Capitalize first letter\n        }\n    }\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To kebab-case\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toKebabCase = function(input) {\n    var res, str;\n    res = \"\";\n\n    if (typeof input === \"string\") {\n        str = input;\n    } else {                                                                    // Assume it is an array\n        str = input.join(\" \");\n    }\n\n    // First change it to camelcase\n    str = this.toCamelCase(str);\n\n    var max = str.length;\n    for (var i=0; i < max; i++) {\n        // Check if character is uppercase\n        if (str[i] != str[i].toLowerCase()) {\n            if (i!==0) {\n                str = str.substr(0, i) + \"-\" + str.substr(i);\n                i++;\n            }\n        }\n    }\n\n    return res = str.toLowerCase();\n}\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get option\n * -----------------------------------------------------------------------------\n * @param  {string} name                                                        Keyname in optionList\n * @param  {array} optionList                                                   Array with all possible options\n * @return {}                                                                   Copy of the value (optionsList[name])\n */\nJssService.getOption = function(name, optionList) {\n    if (typeof optionList !== \"object\") {\n        return false;\n    }\n\n    var res;\n\n    switch (name) {\n\n        // Only set `addDefaults` to false when it is explicitly set.\n        case \"addDefaults\":\n            if (optionList[name] !== false || typeof optionList[name] === \"undefined\") {\n                res = true;\n            } else {\n                res = false;\n            }\n        break;\n        case \"fallback\":\n            if ( Array.isArray(optionList[name]) ) {\n                res = optionList[name];\n                if (res.length===0) {\n                    res = false;\n                }\n            } else if (typeof optionList[name] === \"string\"){\n                res = [optionList[name]];\n            }\n        break;\n        default:\n        res = optionList[name]\n    }\n\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Is Trigger\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isTrigger = function(element, moduleName) {\n    if (element.className.indexOf(moduleName + \"--\") > -1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get trigger name\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {string} Name of the trigger.\n */\nJssService.getTriggerName = function(element, moduleName) {\n    if (typeof element != \"object\") {\n        console.error('Required first argument `element` needs to be a domElement.');\n        return false;\n    }\n    if (typeof moduleName != \"string\") {\n        console.error('Required second argument `moduleName` needs to be a string.');\n        return false;\n    }\n\n    // As an example we assume that the value of element.className equals 'b module--triggerName'\n    var startPos = element.className.indexOf(moduleName + \"--\");                    // 2\n    var sliced = element.className.slice(startPos, element.className.length )       // 'module--triggerName'\n    var endPos = sliced.indexOf(\" \");                                               // -1       // not found\n    if (endPos != -1) {                                                             // 19\n        sliced = sliced.slice(0,endPos);                                            // if there is more after the string, this will remove it\n    }\n    return sliced.replace(moduleName + \"--\",\"\")\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger name is allowed\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} True if the triggername is allowed, otherwise false.\n */\nJssService.triggerNameIsAllowed = function(element, moduleName) {\n    if (JssService.forbiddenProperties.indexOf(this.getTriggerName(element, moduleName)) > -1) {      // This triggerName is a core property, throw error\n        console.error('Triggername `' + getTriggerName(element,moduleName) + '` is not allowed. Change the trigger so it does not corresponds any of these: ' + JssService.forbiddenProperties)\n        return false;\n    }\n    return true;\n}\n/**\n * @module Jss\n * @author      Jeffrey Arts <sjeffff@gmail.com>\n * @copyright   2015\n */\nJss = function(){};\n\nJss.prototype.type      = \"Jss\"\nJss.prototype.triggers  = false;\nJss.prototype.element   = undefined;                                              // {obj} domElement\nJss.prototype.state     = undefined;                                              // {str} State of module, is reflected by the css class __isState\n\n/**\n * -----------------------------------------------------------------------------\n * Find Triggers\n * -----------------------------------------------------------------------------\n *\n * @param {domElement} element\n * @return {undefined}\n */\nJss.prototype.findTriggers = function(element) {\n    this.triggers = [];                                                         // If this is not set, all modules will have the same reference point to this.triggers.\n    // Module is created, now look for any module triggers\n    this.searchTriggersRecursiveInnerFunction(this.element)\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger\n * -----------------------------------------------------------------------------\n */\nJss.prototype.trigger = function(which, fn) {\n    if (typeof this.triggers !== \"object\") {\n        console.info(\"No triggers are found, please specify them in the css as `module-name--trigger-name`.\");\n        return false;\n    }\n\n    if (typeof this.triggers[which] !== \"object\") {\n        console.info(\"You are trying to execute a function on a non existing trigger `\" + which + \"`\");\n        return false;\n    }\n\n    for (var i = 0; i < this.triggers[which].length; i++) {\n        fn(this.triggers[which][i])\n    }\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Search triggers recursive inner function\n * -----------------------------------------------------------------------------\n * Recursive function which is executed bij findTriggers;\n *\n * @return {undefined}\n */\nJss.prototype.searchTriggersRecursiveInnerFunction = function(element) {\n    var self = this;\n    if (typeof element == \"undefined\" ) {\n        element = this.element;\n    }\n    if ( element.hasChildNodes() ) {\n        for (var i=0; i < element.childNodes.length; i++) {\n\n            var childElement = element.childNodes[i];                           // Improve readability\n\n            if (childElement.nodeType == 1) {                                   // NodeType 1 == domElement\n\n                if (JssService.isTrigger(childElement, this.moduleName)) {\n\n                    // Add a child element\n                    if (JssService.triggerNameIsAllowed(childElement, this.moduleName)) {\n                        var triggerName = JssService.getTriggerName(childElement, this.moduleName)\n\n                        if (typeof self.triggers[triggerName] !== \"object\") {\n                            self.triggers[triggerName] = [];\n                        }\n\n                        var tmp = new JssTrigger(childElement, {\n                            module: self,\n                            moduleName: this.moduleName,\n                            triggerName: triggerName,\n                        });\n\n                        self.triggers[triggerName].push(tmp);\n                    }\n                }\n                if (childElement.hasChildNodes()) {\n                    self.searchTriggersRecursiveInnerFunction(childElement)\n                }\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Configure Trigger\n * -----------------------------------------------------------------------------\n *\n * @return {undefined}\n */\nJss.prototype.configureTrigger = function(trigger, fn) {\n    if ( typeof this.triggers[trigger] == \"object\") {\n\n        for (var i = 0; i < this.triggers[trigger].length; i++) {\n            //self.triggers[trigger][i]\n            fn(this.triggers[trigger][i]);\n        }\n\n    } else if (JssService.dev) {\n        console.error(\"You are trying to configure a trigger which has no attached domElement\")\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n *   Init\n * -----------------------------------------------------------------------------\n * Notice the user that a init function needs to be added for controlling the triggers\n *\n * @return {undefined}\n */\nJss.prototype.init = function(func) {\n    if (JssService.dev) {\n        console.info(this.moduleName + \": Add a prototype.init function to add triggers and stuff\")\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set element\n * -----------------------------------------------------------------------------\n * Add a domElement to `this`\n *\n * @return {undefined}\n */\nJss.prototype.setElement = function(element) {\n    if (typeof element == \"undefined\") {\n        if (JssService.dev) {\n            return console.error(\"First parameter of setElement needs to be a domElement\");\n        }\n    }\n    this.element = element;\n}\n/*******************************************************************************\n   *\n   *\tActions\n   *\n   *  \t@author      Jeffrey Arts <sjeffff@gmail.com>\n   *    @copyright   2015\n   *\n*******************************************************************************/\n/**\n * -----------------------------------------------------------------------------\n *   Validate action\n * -----------------------------------------------------------------------------\n * Checks if parameter is a valid action, and logs an error when not.\n *\n * @param {string} request                                                      The name of the request\n * @return {boolean} true if a action is valid, otherwise false.\n */\nJss.prototype.validateAction = function(request) {\n    var result;\n    request = this.getActionElement(request).request\n    for (var action in JssService.actions) {\n        if (JssService.actions[action].indexOf(request.toLowerCase()) > -1) {\n            result = action;\n            break;\n        }\n    }\n    if (result) {\n        return result;\n    } else {\n        console.error(\"validateAction: unknown request\", request);\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * \t Add Action\n * -----------------------------------------------------------------------------\n * Adds an action to the object, list of possible requests can be found in Jss.actions\n *\n * | Options\n * \t\t- addDefaults {boolean}                                                 True: add default classes, false: don't\n *\n *\n *\n * @param {string} request                                                      The name of the request\n * @param {function} fn                                                         The function which should be triggered\n * @param {object} options                                                      Object with option parameters\n * @return {boolean} true if a action is succesfully added, otherwise false.\n */\nJss.prototype.addAction = function(request, fn, options) {\n\n    var self        = this;\n    var action      = self.validateAction(request)\n    var actions     = [];\n    var t = self.getActionElement(request);\n    var element     = t.element;\n    var request     = t.request;\n    t = undefined;\n\n    // Options\n    var addDefaults = JssService.getOption(\"addDefaults\", options);\n\n\n\n    switch (action) {\n\n        case \"resize\":\n\n            actions.push(element.addEventListener(\"resize\", fn));\n\n        break;\n\n\n        case \"click\":\n            actions.push(element.addEventListener(\"click\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"click\", function(){\n                    self.setState(\"Clicked\")\n                }));\n                actions.push(window.addEventListener( \"click\", function(event) {\n                    if (event.target != self.element && self.hasState(\"Clicked\")) {\n                        self.removeState(\"Clicked\")\n                    }\n                }));\n            } // End addDefaults\n        break;\n\n\n        case \"change\":\n            actions.push(element.addEventListener(\"change\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"change\", function(){\n                    self.setState(\"Changed\")\n                    setTimeout(function(){self.removeState(\"Changed\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"hover\":\n            actions.push(element.addEventListener(\"mouseover\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseover\", function(){\n                    self.setState(\"Hover\")\n                }));\n                actions.push(element.addEventListener(\"mouseout\",  function(){\n                    self.removeState(\"Hover\")\n                }));\n            }\n        break;\n\n\n        case \"mouseIn\":\n\n            actions.push(element.addEventListener(\"mouseenter\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseenter\", function(){\n                    self.setState(\"MouseIn\")\n                    setTimeout(function(){self.removeState(\"MouseIn\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"mouseOut\":\n\n            actions.push(element.addEventListener(\"mouseleave\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseleave\", function(){\n                    self.setState(\"MouseOut\")\n                    setTimeout(function(){self.removeState(\"MouseOut\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n    }\n\n\n    if (actions.length > 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get action element\n * -----------------------------------------------------------------------------\n * @param  {string} request                                                     The request\n * @return {object}                                                             An object with 2 properties: request && element\n */\nJss.prototype.getActionElement = function(request) {\n    var self = this;\n    var prefix = false;\n    var newRequest  = request;\n    var element = self.element;\n    // Set prefix if it exists\n    if (request.indexOf(\".\") > 0) {\n        var t       = request.split(\".\"),\n        newRequest  = t[1];\n        prefix      = t[0];\n        t = undefined;\n    }\n\n    // Update element according the prefix (or skip it, if not set)\n    if (prefix !== false) {\n        switch (prefix) {\n            case \"screen\":\n            case \"window\":\n                element = window;\n            break;\n        }\n    }\n\n    // Return object\n    return {\n        request: newRequest,\n        element: element\n    }\n}\n/**\n * -----------------------------------------------------------------------------\n * Class name prefix\n * -----------------------------------------------------------------------------\n * The prefix equals the modulename, or - when it's a trigger object - modulename--triggername\n *\n * @return {string} The classname\n */\nJss.prototype.classNamePrefix = function() {\n    if (this.type == \"JssTrigger\") {\n        return this.moduleName + \"--\" + this.triggerName;\n    } else {\n        return this.moduleName;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Remove class name\n * -----------------------------------------------------------------------------\n * Removes the `this.element` classname\n * \t- \"all\" || undefined        > Removes ALL classnames\n *  - \"allStates\" || \"states\"   > Remove all STATES\n *  - all other strings remove that specific string from the className\n *\n * @param {string} input                                                        The classname (case-sensitive) which needs to be removed\n * @return {undefined}\n */\nJss.prototype.removeClassName = function(input) {\n\n    var classList  = [];\n\n    if (input == \"all\" || typeof input == \"undefined\") {\n\n        this.element.className = \"\";\n\n    } else if (input == \"states\" || input == \"allStates\") {\n\n        classList = this.element.className.split(\" \");\n        for (var i in classList) {\n            className = classList[i];\n            if (className.indexOf(\"__is\") > -1) {\n                delete classList[i];\n            }\n        }\n        this.element.className = classList.join(\" \");\n\n    } else if(typeof input == \"string\") {\n        this.element.className = this.element.className.replace(input,\"\");\n    } else {\n        console.error(\"removeClassName: parameter should be a string\");\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Add class name\n * -----------------------------------------------------------------------------\n * Adds a class name by string or array.\n * Does NOT check for duplicates\n *\n * @param  {string} The classname to be added\n * @return {undefined}\n */\nJss.prototype.addClassName = function(data) {\n    this.element.className += \" \";\n    if (typeof data == \"string\") {\n        this.element.className += data;\n    } else {\n        this.element.className += data.join(\" \")\n    }\n}\n\n/**\n * List where the keys corresponds with this[key], and where the value is the function to be executed when the var is changed.\n */\nJss.prototype.setterWatchList = {};\nJss.prototype.getterWatchList = {};\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add data\n * -----------------------------------------------------------------------------\n * Add a (default) value for the given attribute.\n *\n * @param {string} attribute                                                    The name of the attribute (this[attribute])\n * @param {*} value                                                             The value of this[attribute], could be anything...\n * @param {object} options\n *           \t\t- setterWatchFunction {function}\n *           \t\t- getterWatchFunction {function}\n */\nJss.prototype.addData = function(attribute, value, options) {\n\n\n    // watchList[key] = fn;\n    var setterWatchFunction = JssService.getOption('setterWatchFunction', options); // Function\n    var getterWatchFunction = JssService.getOption('getterWatchFunction', options); // Function\n\n    if (typeof setterWatchFunction === \"function\") {\n        this.setterWatchList[attribute] = setterWatchFunction;\n    }\n\n    if (typeof getterWatchFunction === \"function\") {\n        this.getterWatchList[attribute] = getterWatchFunction;\n    }\n\n    // Set the default value\n    return this[attribute] = value;\n}\n\n\n\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- ajax {string} url\n */\nJss.prototype.setData = function(attribute, value, options) {\n\n    this[attribute] = value;\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n\n    if (Array.isArray(fallback)) {\n\n        for (var i = 0; i < fallback.length; i++) {\n            var type = fallback[i];\n\n            if (value && value.length > 0) {\n                this['setData' + JssService.toCamelCase(type)](attribute, value); // Call this.addDataAttribute(value) || this.addDataCookie(value) etc...\n                this[attribute] = value;\n            }\n        }\n    }\n\n    // Call the setter watch function, if defined;\n    if (typeof this.setterWatchList[attribute] === \"function\") { // Use the watchlist to add functionality whenever a data attribute is updated\n        this.setterWatchList[attribute]();\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataDefault {boolean}\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- dataAjax {string} url\n */\nJss.prototype.getData = function(attribute, options) {\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n    var value = false;\n\n\n    if (!fallback) {\n        fallback = ['attribute'];\n    }\n\n\n    for (var i = 0; i < fallback.length; i++) {\n        var type = JssService.toCamelCase(fallback[i]);\n        var customOptions = false;\n\n        if (typeof options == \"object\") {\n            customOptions = options[fallback[i].toLowerCase()];\n        }\n\n        if (!value || value.length < 0) {\n            if (typeof this['getData' + type] !== \"function\") {\n                console.error('this.getData' + type + ' is not a function. Probably ' + type + ' is not a available data option');\n                continue;\n            }\n            value = this['getData' + type]( attribute, customOptions ); // Call this.getDataAttribute(value) || this.getDataCookie(value) || this.getDataAjax(value) etc...\n        }\n    }\n    console.log(this.getterWatchList);\n    // Call the getter watch function, if defined;\n    if (typeof this.getterWatchList[attribute] == \"function\") {\n        this.getterWatchList[attribute]();\n    }\n\n    return this[attribute] = value;\n}\n/**\n * -----------------------------------------------------------------------------\n * Get data: Ajax\n * -----------------------------------------------------------------------------\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n *\n * @param {string} attribute                                                    The NAME of the inner variable (this.NAME), is also used as the key for the GET Request {NAME: value}\n * @param {object} options                                                      Object with parameters used to make a GET request\n * @return {string}                                                             The value of the given attribute, or false if an erro occured.\n */\nJss.prototype.getDataAjax = function(attribute, options) {\n    var url = JssService.getOption(\"url\", options);\n    var jsonKey = JssService.getOption(\"jsonKey\", options) || attribute;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('GET', url);\n\n        return ajaxReturn.success(function(result){\n            if (typeof result === \"object\") {\n                if (result[jsonKey]) {\n                    return result[jsonKey];\n                }\n            }\n        }).error(function(errorObject){\n            console.log(errorObject);\n        });\n    }\n\n    return false;\n};\n\n/**\n * -----------------------------------------------------------------------------\n * Set data: Ajax\n * -----------------------------------------------------------------------------\n * Makes a post request to the options.url in a object {attribute: value}\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n */\nJss.prototype.setDataAjax = function(attribute, value, options) {\n    var url = JssService.getOption(\"url\", options);\n    var requestObject = {}\n        requestObject[attribute] = value;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('POST', url, requestObject);\n\n        return ajaxReturn.success(function(result){\n            return true;\n        }).error(function(errorObject){\n            console.log(errorObject);\n            return false;\n        });\n    }\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Ajax (helper function)\n * -----------------------------------------------------------------------------\n * Based on Atom.js by Todd Motto\n * http://toddmotto.com/writing-a-standalone-ajax-xhr-javascript-micro-library/\n */\nJss.prototype.ajaxHelper = {\n    // Parses json if possible, otherwise just return text\n    parse: function(req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return [result, req];\n    },\n\n    xhr: function(type, url, data) {\n        var ajaxHelper = this;\n\n        var methods = {\n            success: function() {},\n            error: function() {}\n        };\n        var XHR = XMLHttpRequest || ActiveXObject;\n        var request = new XHR('MSXML2.XMLHTTP.3.0');\n        request.open(type, url, true);\n        request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n\n        request.onreadystatechange = function() {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    methods.success.apply(methods, ajaxHelper.parse(request));\n                } else {\n                    methods.error.apply(methods, ajaxHelper.parse(request));\n                }\n            }\n        };\n        request.send(data);\n        return {\n            success: function(callback) {\n                methods.success = callback;\n                return methods;\n            },\n            error: function(callback) {\n                methods.error = callback;\n                return methods;\n            }\n        };\n    }\n};\n\nJss.prototype.ajax = {\n    // Get\n    get: function(src) {\n        console.log(this);\n    },\n\n    // Set\n    put: function(url, data) {\n        return this.ajaxHelper.xhr('PUT', url, data);\n    },\n\n    // Add\n    post: function(url, data) {\n        return this.ajaxHelper.xhr('POST', url, data);\n    }\n\n};\n/**\n * -----------------------------------------------------------------------------\n * Get data attribute value\n * -----------------------------------------------------------------------------\n * Returns the value of the requested attribute. Search first for a data-[ATTRIBUTE] value\n * If not found, it checks for the attribute in the default object. When that is not being\n * found neither, the normal this[attribute] value is being returned.\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME)\n * @return {string}                                                             The value of the given attribute\n */\nJss.prototype.getDataAttribute = function(attribute) {\n\n    return this.element.dataset[attribute];\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Update data attribute\n * -----------------------------------------------------------------------------\n * Set the value to the given attribute. And updates the data-[ATTRIBUTE] value\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME=\"value\")\n * @param {string} value                                                        The VALUE of the data attribute (data-name=\"VALUE\")\n * @return {undefined}\n */\n\nJss.prototype.setDataAttribute = function(attribute, value) {\n\n    // Update data attribute\n    if (typeof value !== \"undefined\") {\n        this.element.dataset[attribute] = this[attribute];\n    } else {\n        delete this.element.dataset[attribute];\n    }\n\n    return true;\n}\nJss.prototype.dataDefaultsCookie = {\n    'expireData': undefined\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get cookie value\n * -----------------------------------------------------------------------------\n * Returns cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @return {string}                                                             The VALUE of the given attribute\n */\nJss.prototype.getDataCookie = function(attribute) {\n\n    if (!attribute) { return null; }\n    return decodeURIComponent(document.cookie.replace(new RegExp(\"(?:(?:^|.*;)\\\\s*\" + encodeURIComponent(attribute).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"), \"$1\")) || null;\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data cookie\n * -----------------------------------------------------------------------------\n * Updates the cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @param {string} value                                                        The VALUE of the cookie\n * @return {undefined}\n */\n\nJss.prototype.setDataCookie = function(attribute, value, options) {\n    var endDate, path, domain, secureConnection;\n\n    if (typeof options === \"object\") {\n        endDate = JssService.getOption('endDate', options);\n        path    = JssService.getOption('path', options);\n        domain  = JssService.getOption('domain', options);\n        secureConnection = JssService.getOption('secureConnection', options);\n    }\n\n    if (!attribute || /^(?:expires|max\\-age|path|domain|secure)$/i.test(attribute)) { return false; }\n    var sExpires = \"\";\n    if (endDate) {\n      switch (endDate.constructor) {\n        case Number:\n          sExpires = endDate === Infinity ? \"; expires=Fri, 31 Dec 9999 23:59:59 GMT\" : \"; max-age=\" + endDate;\n          break;\n        case String:\n          sExpires = \"; expires=\" + endDate;\n          break;\n        case Date:\n          sExpires = \"; expires=\" + endDate.toUTCString();\n          break;\n      }\n    }\n\n    document.cookie = encodeURIComponent(attribute) + \"=\" + encodeURIComponent(value) + sExpires + (domain ? \"; domain=\" + domain : \"\") + (path ? \"; path=\" + path : \"\") + (secureConnection ? \"; secure\" : \"\");\n    return true;\n}\n/*******************************************************************************\n\n    Styles\n\n*******************************************************************************/\n\n/**\n * -----------------------------------------------------------------------------\n * Set height\n * -----------------------------------------------------------------------------\n * Sets the height of the `this.element` by the given input (height)\n *\n * @param  {number} height                                                      The height in pixels or percentage. Where numbers will be calculated to pixels so giving a height of 50 will result in a height of \"50px\". If you want percentages pass the variable with a percentage sign 50 + \"%\"\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setHeight = function(height) {\n    if (typeof height === \"number\") {\n        height += \"px\";\n    }\n\n    if (typeof height !== \"string\") {\n        throw(\"parameter height needs to be a string or integer\");\n    }\n\n    this.element.style.height = height;\n    return true;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get height\n * -----------------------------------------------------------------------------\n * Returns the height of the `this.element`\n *\n * @return {number}                                                             The height of the element in pixels\n */\nJss.prototype.getHeight = function() {\n    return this.element.offsetHeight;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set width\n * -----------------------------------------------------------------------------\n * Sets the width of the `this.element` by the given input (width)\n *\n * @param  {number} width                                                       The width in pixels or percentage. Where numbers will be calculated to pixels so giving a width of 50 will result in a width of \"50px\". If you want to set a percentage, just pass the variable with a percentage sign (\"50%\")\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setWidth = function(width) {\n    if (typeof width == \"number\") {\n        width += \"px\";\n    }\n\n    if (typeof width !== \"string\") {\n        throw(\"parameter width needs to be a string or integer\");\n    }\n    this.element.style.width = width;\n    return true;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get width\n * -----------------------------------------------------------------------------\n * Returns the width of the `this.element`\n *\n * @return {number}                                                             The width of the element in pixels\n */\nJss.prototype.getWidth = function() {\n    return this.element.offsetWidth;\n}\n/**\n * -----------------------------------------------------------------------------\n * Set State\n * -----------------------------------------------------------------------------\n * This updates the state of the object. States are being added to the class name prefix with a double underscore.\n * If you would have the module `envelope` and give it the state `open`. The class name `envelope__open` will be added.\n * Whenever you remove the state `open`, the according class name will be removed as well.\n *\n * @param  {string} str                                                         The name of the state which should be set (this is transformed to CamelCase)\n * @return {boolean}                                                            True on success, otherwise false (might already have the state)\n */\nJss.prototype.setState = function(str) {\n    var element, verifiedState, state, className;\n\n    element         = this.element;\n    state           = JssService.toCamelCase(str);\n    className       = this.classNamePrefix() + \"__is\" + state;\n\n    // Check if this.state is an array, and make it one if not.\n    if (Array.isArray(this.state) == false ) {\n        this.state = [];\n    }\n\n    // This if statement prevents that the same state is being set multiple times\n    if ( !this.hasState(str) ) {\n        this.addClassName(className)\n        this.state.push(state);\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Has state\n * -----------------------------------------------------------------------------\n * Checks if the parameter is already a state and returns true if so. Otherwise false.\n *\n * @param  {string} str                                                         The state which will be checked for\n * @return {boolean}                                                            True if it has the given state, otherwise false\n */\nJss.prototype.hasState = function(str) {\n    if (typeof this.state == \"object\" && this.state.indexOf(str) >= 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Remove state\n * -----------------------------------------------------------------------------\n * Removes the state from the states array, and from the element.className\n *\n * @param  {string} str                                                         The name of the state which should be removed\n * @return {undefined}\n */\nJss.prototype.removeState = function(str) {\n\n    var state      = JssService.toCamelCase(str);\n    var stateIndex = this.state.indexOf(state);\n\n    if (str == \"all\" || typeof str == \"undefined\") {\n        this.removeClassName(\"states\");\n    } else {\n        this.state.splice(stateIndex, 1);\n        if (typeof this.moduleAction != \"undefined\" && this.moduleAction.length > -1) {\n            this.removeClassName(this.classNamePrefix() + \"\" + this.moduleAction + \"__is\" + state);\n        } else {\n            this.removeClassName(this.classNamePrefix() + \"__is\" + state);\n        }\n    }\n}\n\n\n// A simple way to watch variables\n\n// addVar(keyName, value, watch_function)\n// setVar(keyName, value)\n// getVar(keyName)\n// Add -> new\n// Set -> update\n// Get -> return\nvar JssModule = function(){};\n\nJssModule.prototype.type               = \"JssModule\";\nJssModule.prototype.init               = Jss.prototype.init;\nJssModule.prototype.setElement         = Jss.prototype.setElement;\n\n// Triggers\nJssModule.prototype.findTriggers       = Jss.prototype.findTriggers;\nJssModule.prototype.configureTrigger      = Jss.prototype.configureTrigger;\n\n// Actions\n//JssModule.prototype.actions            = Object.create(Jss.prototype.actions);\nJssModule.prototype.validateAction     = Jss.prototype.validateAction;\nJssModule.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssModule.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssModule.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssModule.prototype.setState           = Jss.prototype.setState;\nJssModule.prototype.hasState           = Jss.prototype.hasState;\nJssModule.prototype.removeState        = Jss.prototype.removeState;\n\n// Data attributes\nJssModule.prototype.addData            = Jss.prototype.addData;\nJssModule.prototype.getData            = Jss.prototype.getData;\nJssModule.prototype.setData            = Jss.prototype.setData;\nvar JssTrigger = function(element, options) {\n    this.setElement(element);\n\n    if (typeof options === \"object\") {\n        if (typeof options.module === \"object\") {\n            this.module = options.module;\n        }\n        if (typeof options.moduleName === \"string\") {\n            this.moduleName = options.moduleName;\n        }\n        if (typeof options.triggerName === \"string\") {\n            this.triggerName = options.triggerName;\n        }\n    }\n}\n\n\nJssTrigger.prototype                    = Object.create(Jss.prototype);\nJssTrigger.prototype.type               = \"JssTrigger\";\nJssTrigger.prototype.setElement         = Jss.prototype.setElement;\n\n// Actions\n//JssTrigger.prototype.actions            = Object.create(Jss.prototype.actions);\nJssTrigger.prototype.validateAction     = Jss.prototype.validateAction;\nJssTrigger.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssTrigger.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssTrigger.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssTrigger.prototype.setState           = Jss.prototype.setState;\nJssTrigger.prototype.hasState           = Jss.prototype.hasState;\nJssTrigger.prototype.removeState        = Jss.prototype.removeState;\n\n\n\nvar  JssController = {};\nJssController.modules \t\t= []; // Result array with objects of all the found modules\nJssController.activeModules \t= JssService.activeModules;\n\nJssController.findModules = function() {\n    var allElements = document.getElementsByTagName(\"*\");                       // Array with all domElements\n    var test = [];\n    var self = this;\n    for (var i=0; i < allElements.length; i++) {\n\n        // Set default vars //\n        var element = allElements[i];                                           // Specific domElement\n        var tmp = false;\n\n        // Loop through the (active) modules array and add/instantiate them\n        self.activeModules.forEach(function(module){\n            if (JssService.isModule(element, module)) {\n                tmp = eval(\"new \" + JssService.toCamelCase(module) + \"(element)\"); // Dynamicly load modules\n\n                tmp.setElement(element);                                        // Add the domElement to the module\n                tmp.findTriggers();\t\t\t                                    // Search for module triggers\n\n                tmp.init();\t\t\t\t\t                                    // Executes everything within the init function\n                self.modules.push(tmp);\n\n            }\n        }); // End forEach\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    JssController.findModules();\n    console.log(JssController);\n});"
          },
          "returns": [
            {
              "title": "returns",
              "description": "The classname",
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ],
          "name": "classNamePrefix",
          "kind": "function",
          "memberof": "Jss",
          "scope": "instance",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            "Jss",
            "classNamePrefix"
          ]
        },
        {
          "description": "-----------------------------------------------------------------------------\nConfigure Trigger\n-----------------------------------------------------------------------------",
          "tags": [
            {
              "title": "returns",
              "description": null,
              "type": {
                "type": "UndefinedLiteral"
              }
            },
            {
              "title": "name",
              "name": "configureTrigger"
            },
            {
              "title": "kind",
              "kind": "function"
            },
            {
              "title": "memberof",
              "description": "Jss"
            },
            {
              "title": "instance"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 353,
                "column": 0
              },
              "end": {
                "line": 375,
                "column": 0
              }
            },
            "file": "/Users/jeffreyarts/Documents/DEV/jss/lib/jss.js",
            "code": "JssService = {};\n\n// Edit this array to enable or disable default modules\nJssService.activeModules   = []\n\n// Set this to false in a live environment\nJssService.dev             = true;\n\n/**************************\n*\n*   Below are core properties defined, becarefull when you think of changing these...\n*\n**************************/\n\n\nJssService.actions = {\n    hover:      ['hover',    'mouseover',   'onmouseover'                       ], // Fixed\n    click:      ['click',    'onclick'                                          ], // Fixed\n    mouseIn:    ['mousein',  'onmousein', 'mouseenter', 'onmouseenter'          ], // Fixed\n    mouseOut:   ['mouseout', 'onmouseout', 'mouseleave', 'onmouseleave'         ], // Fixed\n    resize:     ['resize',   'onresize'                                         ], // Fixed\n    focus:      ['focus',    'onfocus'                                          ],\n    keyDown:    ['keydown',  'keypress'                                         ],\n    keyUp:      ['keyup',    'keyrelease'                                       ],\n    change:     ['change',   'onchange'                                         ],\n};\n\nJssService.enterDelay = 1000;                                                   // Amount of miliseconds which is used to remove the entered state. (see core.actions) JssService.enterDelay setTimeout\n\nJssService.forbiddenProperties = [\n    'type',\n    'triggers',\n    'configureTrigger',\n    'findTriggers'\n];\n\n/**\n * -----------------------------------------------------------------------------\n * Is Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isModule = function(element, moduleName) {\n    var arr = element.className.split(\" \");\n    var found = false;\n\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i].indexOf(moduleName)        > -1 &&\n            arr[i].indexOf(moduleName + \"_\") == -1 &&\n            arr[i].indexOf(moduleName + \"-\") == -1)\n        {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.addModule = function(moduleName) {\n    this.activeModules.push(this.toKebabCase(moduleName))\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To CamelCase\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toCamelCase = function(input) {\n    var arr, res;\n    res = \"\";\n    if (typeof input === \"string\") {\n        input = input.replace(/\\-/g,\" \");                                       // Replace all dashes with spaces\n        arr = input.split(\" \");\n    } else {\n        arr = input;                                                            // Assume it is an array\n    }\n\n\n\n    var i = 0;\n    for (var i in arr) {\n        if (typeof i != \"undefined\") {\n            res += arr[i][0].toUpperCase()+ arr[i].slice(1); // Capitalize first letter\n        }\n    }\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To kebab-case\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toKebabCase = function(input) {\n    var res, str;\n    res = \"\";\n\n    if (typeof input === \"string\") {\n        str = input;\n    } else {                                                                    // Assume it is an array\n        str = input.join(\" \");\n    }\n\n    // First change it to camelcase\n    str = this.toCamelCase(str);\n\n    var max = str.length;\n    for (var i=0; i < max; i++) {\n        // Check if character is uppercase\n        if (str[i] != str[i].toLowerCase()) {\n            if (i!==0) {\n                str = str.substr(0, i) + \"-\" + str.substr(i);\n                i++;\n            }\n        }\n    }\n\n    return res = str.toLowerCase();\n}\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get option\n * -----------------------------------------------------------------------------\n * @param  {string} name                                                        Keyname in optionList\n * @param  {array} optionList                                                   Array with all possible options\n * @return {}                                                                   Copy of the value (optionsList[name])\n */\nJssService.getOption = function(name, optionList) {\n    if (typeof optionList !== \"object\") {\n        return false;\n    }\n\n    var res;\n\n    switch (name) {\n\n        // Only set `addDefaults` to false when it is explicitly set.\n        case \"addDefaults\":\n            if (optionList[name] !== false || typeof optionList[name] === \"undefined\") {\n                res = true;\n            } else {\n                res = false;\n            }\n        break;\n        case \"fallback\":\n            if ( Array.isArray(optionList[name]) ) {\n                res = optionList[name];\n                if (res.length===0) {\n                    res = false;\n                }\n            } else if (typeof optionList[name] === \"string\"){\n                res = [optionList[name]];\n            }\n        break;\n        default:\n        res = optionList[name]\n    }\n\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Is Trigger\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isTrigger = function(element, moduleName) {\n    if (element.className.indexOf(moduleName + \"--\") > -1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get trigger name\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {string} Name of the trigger.\n */\nJssService.getTriggerName = function(element, moduleName) {\n    if (typeof element != \"object\") {\n        console.error('Required first argument `element` needs to be a domElement.');\n        return false;\n    }\n    if (typeof moduleName != \"string\") {\n        console.error('Required second argument `moduleName` needs to be a string.');\n        return false;\n    }\n\n    // As an example we assume that the value of element.className equals 'b module--triggerName'\n    var startPos = element.className.indexOf(moduleName + \"--\");                    // 2\n    var sliced = element.className.slice(startPos, element.className.length )       // 'module--triggerName'\n    var endPos = sliced.indexOf(\" \");                                               // -1       // not found\n    if (endPos != -1) {                                                             // 19\n        sliced = sliced.slice(0,endPos);                                            // if there is more after the string, this will remove it\n    }\n    return sliced.replace(moduleName + \"--\",\"\")\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger name is allowed\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} True if the triggername is allowed, otherwise false.\n */\nJssService.triggerNameIsAllowed = function(element, moduleName) {\n    if (JssService.forbiddenProperties.indexOf(this.getTriggerName(element, moduleName)) > -1) {      // This triggerName is a core property, throw error\n        console.error('Triggername `' + getTriggerName(element,moduleName) + '` is not allowed. Change the trigger so it does not corresponds any of these: ' + JssService.forbiddenProperties)\n        return false;\n    }\n    return true;\n}\n/**\n * @module Jss\n * @author      Jeffrey Arts <sjeffff@gmail.com>\n * @copyright   2015\n */\nJss = function(){};\n\nJss.prototype.type      = \"Jss\"\nJss.prototype.triggers  = false;\nJss.prototype.element   = undefined;                                              // {obj} domElement\nJss.prototype.state     = undefined;                                              // {str} State of module, is reflected by the css class __isState\n\n/**\n * -----------------------------------------------------------------------------\n * Find Triggers\n * -----------------------------------------------------------------------------\n *\n * @param {domElement} element\n * @return {undefined}\n */\nJss.prototype.findTriggers = function(element) {\n    this.triggers = [];                                                         // If this is not set, all modules will have the same reference point to this.triggers.\n    // Module is created, now look for any module triggers\n    this.searchTriggersRecursiveInnerFunction(this.element)\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger\n * -----------------------------------------------------------------------------\n */\nJss.prototype.trigger = function(which, fn) {\n    if (typeof this.triggers !== \"object\") {\n        console.info(\"No triggers are found, please specify them in the css as `module-name--trigger-name`.\");\n        return false;\n    }\n\n    if (typeof this.triggers[which] !== \"object\") {\n        console.info(\"You are trying to execute a function on a non existing trigger `\" + which + \"`\");\n        return false;\n    }\n\n    for (var i = 0; i < this.triggers[which].length; i++) {\n        fn(this.triggers[which][i])\n    }\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Search triggers recursive inner function\n * -----------------------------------------------------------------------------\n * Recursive function which is executed bij findTriggers;\n *\n * @return {undefined}\n */\nJss.prototype.searchTriggersRecursiveInnerFunction = function(element) {\n    var self = this;\n    if (typeof element == \"undefined\" ) {\n        element = this.element;\n    }\n    if ( element.hasChildNodes() ) {\n        for (var i=0; i < element.childNodes.length; i++) {\n\n            var childElement = element.childNodes[i];                           // Improve readability\n\n            if (childElement.nodeType == 1) {                                   // NodeType 1 == domElement\n\n                if (JssService.isTrigger(childElement, this.moduleName)) {\n\n                    // Add a child element\n                    if (JssService.triggerNameIsAllowed(childElement, this.moduleName)) {\n                        var triggerName = JssService.getTriggerName(childElement, this.moduleName)\n\n                        if (typeof self.triggers[triggerName] !== \"object\") {\n                            self.triggers[triggerName] = [];\n                        }\n\n                        var tmp = new JssTrigger(childElement, {\n                            module: self,\n                            moduleName: this.moduleName,\n                            triggerName: triggerName,\n                        });\n\n                        self.triggers[triggerName].push(tmp);\n                    }\n                }\n                if (childElement.hasChildNodes()) {\n                    self.searchTriggersRecursiveInnerFunction(childElement)\n                }\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Configure Trigger\n * -----------------------------------------------------------------------------\n *\n * @return {undefined}\n */\nJss.prototype.configureTrigger = function(trigger, fn) {\n    if ( typeof this.triggers[trigger] == \"object\") {\n\n        for (var i = 0; i < this.triggers[trigger].length; i++) {\n            //self.triggers[trigger][i]\n            fn(this.triggers[trigger][i]);\n        }\n\n    } else if (JssService.dev) {\n        console.error(\"You are trying to configure a trigger which has no attached domElement\")\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n *   Init\n * -----------------------------------------------------------------------------\n * Notice the user that a init function needs to be added for controlling the triggers\n *\n * @return {undefined}\n */\nJss.prototype.init = function(func) {\n    if (JssService.dev) {\n        console.info(this.moduleName + \": Add a prototype.init function to add triggers and stuff\")\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set element\n * -----------------------------------------------------------------------------\n * Add a domElement to `this`\n *\n * @return {undefined}\n */\nJss.prototype.setElement = function(element) {\n    if (typeof element == \"undefined\") {\n        if (JssService.dev) {\n            return console.error(\"First parameter of setElement needs to be a domElement\");\n        }\n    }\n    this.element = element;\n}\n/*******************************************************************************\n   *\n   *\tActions\n   *\n   *  \t@author      Jeffrey Arts <sjeffff@gmail.com>\n   *    @copyright   2015\n   *\n*******************************************************************************/\n/**\n * -----------------------------------------------------------------------------\n *   Validate action\n * -----------------------------------------------------------------------------\n * Checks if parameter is a valid action, and logs an error when not.\n *\n * @param {string} request                                                      The name of the request\n * @return {boolean} true if a action is valid, otherwise false.\n */\nJss.prototype.validateAction = function(request) {\n    var result;\n    request = this.getActionElement(request).request\n    for (var action in JssService.actions) {\n        if (JssService.actions[action].indexOf(request.toLowerCase()) > -1) {\n            result = action;\n            break;\n        }\n    }\n    if (result) {\n        return result;\n    } else {\n        console.error(\"validateAction: unknown request\", request);\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * \t Add Action\n * -----------------------------------------------------------------------------\n * Adds an action to the object, list of possible requests can be found in Jss.actions\n *\n * | Options\n * \t\t- addDefaults {boolean}                                                 True: add default classes, false: don't\n *\n *\n *\n * @param {string} request                                                      The name of the request\n * @param {function} fn                                                         The function which should be triggered\n * @param {object} options                                                      Object with option parameters\n * @return {boolean} true if a action is succesfully added, otherwise false.\n */\nJss.prototype.addAction = function(request, fn, options) {\n\n    var self        = this;\n    var action      = self.validateAction(request)\n    var actions     = [];\n    var t = self.getActionElement(request);\n    var element     = t.element;\n    var request     = t.request;\n    t = undefined;\n\n    // Options\n    var addDefaults = JssService.getOption(\"addDefaults\", options);\n\n\n\n    switch (action) {\n\n        case \"resize\":\n\n            actions.push(element.addEventListener(\"resize\", fn));\n\n        break;\n\n\n        case \"click\":\n            actions.push(element.addEventListener(\"click\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"click\", function(){\n                    self.setState(\"Clicked\")\n                }));\n                actions.push(window.addEventListener( \"click\", function(event) {\n                    if (event.target != self.element && self.hasState(\"Clicked\")) {\n                        self.removeState(\"Clicked\")\n                    }\n                }));\n            } // End addDefaults\n        break;\n\n\n        case \"change\":\n            actions.push(element.addEventListener(\"change\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"change\", function(){\n                    self.setState(\"Changed\")\n                    setTimeout(function(){self.removeState(\"Changed\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"hover\":\n            actions.push(element.addEventListener(\"mouseover\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseover\", function(){\n                    self.setState(\"Hover\")\n                }));\n                actions.push(element.addEventListener(\"mouseout\",  function(){\n                    self.removeState(\"Hover\")\n                }));\n            }\n        break;\n\n\n        case \"mouseIn\":\n\n            actions.push(element.addEventListener(\"mouseenter\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseenter\", function(){\n                    self.setState(\"MouseIn\")\n                    setTimeout(function(){self.removeState(\"MouseIn\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"mouseOut\":\n\n            actions.push(element.addEventListener(\"mouseleave\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseleave\", function(){\n                    self.setState(\"MouseOut\")\n                    setTimeout(function(){self.removeState(\"MouseOut\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n    }\n\n\n    if (actions.length > 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get action element\n * -----------------------------------------------------------------------------\n * @param  {string} request                                                     The request\n * @return {object}                                                             An object with 2 properties: request && element\n */\nJss.prototype.getActionElement = function(request) {\n    var self = this;\n    var prefix = false;\n    var newRequest  = request;\n    var element = self.element;\n    // Set prefix if it exists\n    if (request.indexOf(\".\") > 0) {\n        var t       = request.split(\".\"),\n        newRequest  = t[1];\n        prefix      = t[0];\n        t = undefined;\n    }\n\n    // Update element according the prefix (or skip it, if not set)\n    if (prefix !== false) {\n        switch (prefix) {\n            case \"screen\":\n            case \"window\":\n                element = window;\n            break;\n        }\n    }\n\n    // Return object\n    return {\n        request: newRequest,\n        element: element\n    }\n}\n/**\n * -----------------------------------------------------------------------------\n * Class name prefix\n * -----------------------------------------------------------------------------\n * The prefix equals the modulename, or - when it's a trigger object - modulename--triggername\n *\n * @return {string} The classname\n */\nJss.prototype.classNamePrefix = function() {\n    if (this.type == \"JssTrigger\") {\n        return this.moduleName + \"--\" + this.triggerName;\n    } else {\n        return this.moduleName;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Remove class name\n * -----------------------------------------------------------------------------\n * Removes the `this.element` classname\n * \t- \"all\" || undefined        > Removes ALL classnames\n *  - \"allStates\" || \"states\"   > Remove all STATES\n *  - all other strings remove that specific string from the className\n *\n * @param {string} input                                                        The classname (case-sensitive) which needs to be removed\n * @return {undefined}\n */\nJss.prototype.removeClassName = function(input) {\n\n    var classList  = [];\n\n    if (input == \"all\" || typeof input == \"undefined\") {\n\n        this.element.className = \"\";\n\n    } else if (input == \"states\" || input == \"allStates\") {\n\n        classList = this.element.className.split(\" \");\n        for (var i in classList) {\n            className = classList[i];\n            if (className.indexOf(\"__is\") > -1) {\n                delete classList[i];\n            }\n        }\n        this.element.className = classList.join(\" \");\n\n    } else if(typeof input == \"string\") {\n        this.element.className = this.element.className.replace(input,\"\");\n    } else {\n        console.error(\"removeClassName: parameter should be a string\");\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Add class name\n * -----------------------------------------------------------------------------\n * Adds a class name by string or array.\n * Does NOT check for duplicates\n *\n * @param  {string} The classname to be added\n * @return {undefined}\n */\nJss.prototype.addClassName = function(data) {\n    this.element.className += \" \";\n    if (typeof data == \"string\") {\n        this.element.className += data;\n    } else {\n        this.element.className += data.join(\" \")\n    }\n}\n\n/**\n * List where the keys corresponds with this[key], and where the value is the function to be executed when the var is changed.\n */\nJss.prototype.setterWatchList = {};\nJss.prototype.getterWatchList = {};\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add data\n * -----------------------------------------------------------------------------\n * Add a (default) value for the given attribute.\n *\n * @param {string} attribute                                                    The name of the attribute (this[attribute])\n * @param {*} value                                                             The value of this[attribute], could be anything...\n * @param {object} options\n *           \t\t- setterWatchFunction {function}\n *           \t\t- getterWatchFunction {function}\n */\nJss.prototype.addData = function(attribute, value, options) {\n\n\n    // watchList[key] = fn;\n    var setterWatchFunction = JssService.getOption('setterWatchFunction', options); // Function\n    var getterWatchFunction = JssService.getOption('getterWatchFunction', options); // Function\n\n    if (typeof setterWatchFunction === \"function\") {\n        this.setterWatchList[attribute] = setterWatchFunction;\n    }\n\n    if (typeof getterWatchFunction === \"function\") {\n        this.getterWatchList[attribute] = getterWatchFunction;\n    }\n\n    // Set the default value\n    return this[attribute] = value;\n}\n\n\n\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- ajax {string} url\n */\nJss.prototype.setData = function(attribute, value, options) {\n\n    this[attribute] = value;\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n\n    if (Array.isArray(fallback)) {\n\n        for (var i = 0; i < fallback.length; i++) {\n            var type = fallback[i];\n\n            if (value && value.length > 0) {\n                this['setData' + JssService.toCamelCase(type)](attribute, value); // Call this.addDataAttribute(value) || this.addDataCookie(value) etc...\n                this[attribute] = value;\n            }\n        }\n    }\n\n    // Call the setter watch function, if defined;\n    if (typeof this.setterWatchList[attribute] === \"function\") { // Use the watchlist to add functionality whenever a data attribute is updated\n        this.setterWatchList[attribute]();\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataDefault {boolean}\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- dataAjax {string} url\n */\nJss.prototype.getData = function(attribute, options) {\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n    var value = false;\n\n\n    if (!fallback) {\n        fallback = ['attribute'];\n    }\n\n\n    for (var i = 0; i < fallback.length; i++) {\n        var type = JssService.toCamelCase(fallback[i]);\n        var customOptions = false;\n\n        if (typeof options == \"object\") {\n            customOptions = options[fallback[i].toLowerCase()];\n        }\n\n        if (!value || value.length < 0) {\n            if (typeof this['getData' + type] !== \"function\") {\n                console.error('this.getData' + type + ' is not a function. Probably ' + type + ' is not a available data option');\n                continue;\n            }\n            value = this['getData' + type]( attribute, customOptions ); // Call this.getDataAttribute(value) || this.getDataCookie(value) || this.getDataAjax(value) etc...\n        }\n    }\n    console.log(this.getterWatchList);\n    // Call the getter watch function, if defined;\n    if (typeof this.getterWatchList[attribute] == \"function\") {\n        this.getterWatchList[attribute]();\n    }\n\n    return this[attribute] = value;\n}\n/**\n * -----------------------------------------------------------------------------\n * Get data: Ajax\n * -----------------------------------------------------------------------------\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n *\n * @param {string} attribute                                                    The NAME of the inner variable (this.NAME), is also used as the key for the GET Request {NAME: value}\n * @param {object} options                                                      Object with parameters used to make a GET request\n * @return {string}                                                             The value of the given attribute, or false if an erro occured.\n */\nJss.prototype.getDataAjax = function(attribute, options) {\n    var url = JssService.getOption(\"url\", options);\n    var jsonKey = JssService.getOption(\"jsonKey\", options) || attribute;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('GET', url);\n\n        return ajaxReturn.success(function(result){\n            if (typeof result === \"object\") {\n                if (result[jsonKey]) {\n                    return result[jsonKey];\n                }\n            }\n        }).error(function(errorObject){\n            console.log(errorObject);\n        });\n    }\n\n    return false;\n};\n\n/**\n * -----------------------------------------------------------------------------\n * Set data: Ajax\n * -----------------------------------------------------------------------------\n * Makes a post request to the options.url in a object {attribute: value}\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n */\nJss.prototype.setDataAjax = function(attribute, value, options) {\n    var url = JssService.getOption(\"url\", options);\n    var requestObject = {}\n        requestObject[attribute] = value;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('POST', url, requestObject);\n\n        return ajaxReturn.success(function(result){\n            return true;\n        }).error(function(errorObject){\n            console.log(errorObject);\n            return false;\n        });\n    }\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Ajax (helper function)\n * -----------------------------------------------------------------------------\n * Based on Atom.js by Todd Motto\n * http://toddmotto.com/writing-a-standalone-ajax-xhr-javascript-micro-library/\n */\nJss.prototype.ajaxHelper = {\n    // Parses json if possible, otherwise just return text\n    parse: function(req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return [result, req];\n    },\n\n    xhr: function(type, url, data) {\n        var ajaxHelper = this;\n\n        var methods = {\n            success: function() {},\n            error: function() {}\n        };\n        var XHR = XMLHttpRequest || ActiveXObject;\n        var request = new XHR('MSXML2.XMLHTTP.3.0');\n        request.open(type, url, true);\n        request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n\n        request.onreadystatechange = function() {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    methods.success.apply(methods, ajaxHelper.parse(request));\n                } else {\n                    methods.error.apply(methods, ajaxHelper.parse(request));\n                }\n            }\n        };\n        request.send(data);\n        return {\n            success: function(callback) {\n                methods.success = callback;\n                return methods;\n            },\n            error: function(callback) {\n                methods.error = callback;\n                return methods;\n            }\n        };\n    }\n};\n\nJss.prototype.ajax = {\n    // Get\n    get: function(src) {\n        console.log(this);\n    },\n\n    // Set\n    put: function(url, data) {\n        return this.ajaxHelper.xhr('PUT', url, data);\n    },\n\n    // Add\n    post: function(url, data) {\n        return this.ajaxHelper.xhr('POST', url, data);\n    }\n\n};\n/**\n * -----------------------------------------------------------------------------\n * Get data attribute value\n * -----------------------------------------------------------------------------\n * Returns the value of the requested attribute. Search first for a data-[ATTRIBUTE] value\n * If not found, it checks for the attribute in the default object. When that is not being\n * found neither, the normal this[attribute] value is being returned.\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME)\n * @return {string}                                                             The value of the given attribute\n */\nJss.prototype.getDataAttribute = function(attribute) {\n\n    return this.element.dataset[attribute];\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Update data attribute\n * -----------------------------------------------------------------------------\n * Set the value to the given attribute. And updates the data-[ATTRIBUTE] value\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME=\"value\")\n * @param {string} value                                                        The VALUE of the data attribute (data-name=\"VALUE\")\n * @return {undefined}\n */\n\nJss.prototype.setDataAttribute = function(attribute, value) {\n\n    // Update data attribute\n    if (typeof value !== \"undefined\") {\n        this.element.dataset[attribute] = this[attribute];\n    } else {\n        delete this.element.dataset[attribute];\n    }\n\n    return true;\n}\nJss.prototype.dataDefaultsCookie = {\n    'expireData': undefined\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get cookie value\n * -----------------------------------------------------------------------------\n * Returns cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @return {string}                                                             The VALUE of the given attribute\n */\nJss.prototype.getDataCookie = function(attribute) {\n\n    if (!attribute) { return null; }\n    return decodeURIComponent(document.cookie.replace(new RegExp(\"(?:(?:^|.*;)\\\\s*\" + encodeURIComponent(attribute).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"), \"$1\")) || null;\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data cookie\n * -----------------------------------------------------------------------------\n * Updates the cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @param {string} value                                                        The VALUE of the cookie\n * @return {undefined}\n */\n\nJss.prototype.setDataCookie = function(attribute, value, options) {\n    var endDate, path, domain, secureConnection;\n\n    if (typeof options === \"object\") {\n        endDate = JssService.getOption('endDate', options);\n        path    = JssService.getOption('path', options);\n        domain  = JssService.getOption('domain', options);\n        secureConnection = JssService.getOption('secureConnection', options);\n    }\n\n    if (!attribute || /^(?:expires|max\\-age|path|domain|secure)$/i.test(attribute)) { return false; }\n    var sExpires = \"\";\n    if (endDate) {\n      switch (endDate.constructor) {\n        case Number:\n          sExpires = endDate === Infinity ? \"; expires=Fri, 31 Dec 9999 23:59:59 GMT\" : \"; max-age=\" + endDate;\n          break;\n        case String:\n          sExpires = \"; expires=\" + endDate;\n          break;\n        case Date:\n          sExpires = \"; expires=\" + endDate.toUTCString();\n          break;\n      }\n    }\n\n    document.cookie = encodeURIComponent(attribute) + \"=\" + encodeURIComponent(value) + sExpires + (domain ? \"; domain=\" + domain : \"\") + (path ? \"; path=\" + path : \"\") + (secureConnection ? \"; secure\" : \"\");\n    return true;\n}\n/*******************************************************************************\n\n    Styles\n\n*******************************************************************************/\n\n/**\n * -----------------------------------------------------------------------------\n * Set height\n * -----------------------------------------------------------------------------\n * Sets the height of the `this.element` by the given input (height)\n *\n * @param  {number} height                                                      The height in pixels or percentage. Where numbers will be calculated to pixels so giving a height of 50 will result in a height of \"50px\". If you want percentages pass the variable with a percentage sign 50 + \"%\"\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setHeight = function(height) {\n    if (typeof height === \"number\") {\n        height += \"px\";\n    }\n\n    if (typeof height !== \"string\") {\n        throw(\"parameter height needs to be a string or integer\");\n    }\n\n    this.element.style.height = height;\n    return true;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get height\n * -----------------------------------------------------------------------------\n * Returns the height of the `this.element`\n *\n * @return {number}                                                             The height of the element in pixels\n */\nJss.prototype.getHeight = function() {\n    return this.element.offsetHeight;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set width\n * -----------------------------------------------------------------------------\n * Sets the width of the `this.element` by the given input (width)\n *\n * @param  {number} width                                                       The width in pixels or percentage. Where numbers will be calculated to pixels so giving a width of 50 will result in a width of \"50px\". If you want to set a percentage, just pass the variable with a percentage sign (\"50%\")\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setWidth = function(width) {\n    if (typeof width == \"number\") {\n        width += \"px\";\n    }\n\n    if (typeof width !== \"string\") {\n        throw(\"parameter width needs to be a string or integer\");\n    }\n    this.element.style.width = width;\n    return true;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get width\n * -----------------------------------------------------------------------------\n * Returns the width of the `this.element`\n *\n * @return {number}                                                             The width of the element in pixels\n */\nJss.prototype.getWidth = function() {\n    return this.element.offsetWidth;\n}\n/**\n * -----------------------------------------------------------------------------\n * Set State\n * -----------------------------------------------------------------------------\n * This updates the state of the object. States are being added to the class name prefix with a double underscore.\n * If you would have the module `envelope` and give it the state `open`. The class name `envelope__open` will be added.\n * Whenever you remove the state `open`, the according class name will be removed as well.\n *\n * @param  {string} str                                                         The name of the state which should be set (this is transformed to CamelCase)\n * @return {boolean}                                                            True on success, otherwise false (might already have the state)\n */\nJss.prototype.setState = function(str) {\n    var element, verifiedState, state, className;\n\n    element         = this.element;\n    state           = JssService.toCamelCase(str);\n    className       = this.classNamePrefix() + \"__is\" + state;\n\n    // Check if this.state is an array, and make it one if not.\n    if (Array.isArray(this.state) == false ) {\n        this.state = [];\n    }\n\n    // This if statement prevents that the same state is being set multiple times\n    if ( !this.hasState(str) ) {\n        this.addClassName(className)\n        this.state.push(state);\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Has state\n * -----------------------------------------------------------------------------\n * Checks if the parameter is already a state and returns true if so. Otherwise false.\n *\n * @param  {string} str                                                         The state which will be checked for\n * @return {boolean}                                                            True if it has the given state, otherwise false\n */\nJss.prototype.hasState = function(str) {\n    if (typeof this.state == \"object\" && this.state.indexOf(str) >= 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Remove state\n * -----------------------------------------------------------------------------\n * Removes the state from the states array, and from the element.className\n *\n * @param  {string} str                                                         The name of the state which should be removed\n * @return {undefined}\n */\nJss.prototype.removeState = function(str) {\n\n    var state      = JssService.toCamelCase(str);\n    var stateIndex = this.state.indexOf(state);\n\n    if (str == \"all\" || typeof str == \"undefined\") {\n        this.removeClassName(\"states\");\n    } else {\n        this.state.splice(stateIndex, 1);\n        if (typeof this.moduleAction != \"undefined\" && this.moduleAction.length > -1) {\n            this.removeClassName(this.classNamePrefix() + \"\" + this.moduleAction + \"__is\" + state);\n        } else {\n            this.removeClassName(this.classNamePrefix() + \"__is\" + state);\n        }\n    }\n}\n\n\n// A simple way to watch variables\n\n// addVar(keyName, value, watch_function)\n// setVar(keyName, value)\n// getVar(keyName)\n// Add -> new\n// Set -> update\n// Get -> return\nvar JssModule = function(){};\n\nJssModule.prototype.type               = \"JssModule\";\nJssModule.prototype.init               = Jss.prototype.init;\nJssModule.prototype.setElement         = Jss.prototype.setElement;\n\n// Triggers\nJssModule.prototype.findTriggers       = Jss.prototype.findTriggers;\nJssModule.prototype.configureTrigger      = Jss.prototype.configureTrigger;\n\n// Actions\n//JssModule.prototype.actions            = Object.create(Jss.prototype.actions);\nJssModule.prototype.validateAction     = Jss.prototype.validateAction;\nJssModule.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssModule.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssModule.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssModule.prototype.setState           = Jss.prototype.setState;\nJssModule.prototype.hasState           = Jss.prototype.hasState;\nJssModule.prototype.removeState        = Jss.prototype.removeState;\n\n// Data attributes\nJssModule.prototype.addData            = Jss.prototype.addData;\nJssModule.prototype.getData            = Jss.prototype.getData;\nJssModule.prototype.setData            = Jss.prototype.setData;\nvar JssTrigger = function(element, options) {\n    this.setElement(element);\n\n    if (typeof options === \"object\") {\n        if (typeof options.module === \"object\") {\n            this.module = options.module;\n        }\n        if (typeof options.moduleName === \"string\") {\n            this.moduleName = options.moduleName;\n        }\n        if (typeof options.triggerName === \"string\") {\n            this.triggerName = options.triggerName;\n        }\n    }\n}\n\n\nJssTrigger.prototype                    = Object.create(Jss.prototype);\nJssTrigger.prototype.type               = \"JssTrigger\";\nJssTrigger.prototype.setElement         = Jss.prototype.setElement;\n\n// Actions\n//JssTrigger.prototype.actions            = Object.create(Jss.prototype.actions);\nJssTrigger.prototype.validateAction     = Jss.prototype.validateAction;\nJssTrigger.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssTrigger.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssTrigger.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssTrigger.prototype.setState           = Jss.prototype.setState;\nJssTrigger.prototype.hasState           = Jss.prototype.hasState;\nJssTrigger.prototype.removeState        = Jss.prototype.removeState;\n\n\n\nvar  JssController = {};\nJssController.modules \t\t= []; // Result array with objects of all the found modules\nJssController.activeModules \t= JssService.activeModules;\n\nJssController.findModules = function() {\n    var allElements = document.getElementsByTagName(\"*\");                       // Array with all domElements\n    var test = [];\n    var self = this;\n    for (var i=0; i < allElements.length; i++) {\n\n        // Set default vars //\n        var element = allElements[i];                                           // Specific domElement\n        var tmp = false;\n\n        // Loop through the (active) modules array and add/instantiate them\n        self.activeModules.forEach(function(module){\n            if (JssService.isModule(element, module)) {\n                tmp = eval(\"new \" + JssService.toCamelCase(module) + \"(element)\"); // Dynamicly load modules\n\n                tmp.setElement(element);                                        // Add the domElement to the module\n                tmp.findTriggers();\t\t\t                                    // Search for module triggers\n\n                tmp.init();\t\t\t\t\t                                    // Executes everything within the init function\n                self.modules.push(tmp);\n\n            }\n        }); // End forEach\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    JssController.findModules();\n    console.log(JssController);\n});"
          },
          "returns": [
            {
              "title": "returns",
              "description": null,
              "type": {
                "type": "UndefinedLiteral"
              }
            }
          ],
          "name": "configureTrigger",
          "kind": "function",
          "memberof": "Jss",
          "scope": "instance",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            "Jss",
            "configureTrigger"
          ]
        },
        {
          "description": "-----------------------------------------------------------------------------\nFind Triggers\n-----------------------------------------------------------------------------",
          "tags": [
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "domElement"
              },
              "name": "element"
            },
            {
              "title": "returns",
              "description": null,
              "type": {
                "type": "UndefinedLiteral"
              }
            },
            {
              "title": "name",
              "name": "findTriggers"
            },
            {
              "title": "kind",
              "kind": "function"
            },
            {
              "title": "memberof",
              "description": "Jss"
            },
            {
              "title": "instance"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 269,
                "column": 0
              },
              "end": {
                "line": 281,
                "column": 0
              }
            },
            "file": "/Users/jeffreyarts/Documents/DEV/jss/lib/jss.js",
            "code": "JssService = {};\n\n// Edit this array to enable or disable default modules\nJssService.activeModules   = []\n\n// Set this to false in a live environment\nJssService.dev             = true;\n\n/**************************\n*\n*   Below are core properties defined, becarefull when you think of changing these...\n*\n**************************/\n\n\nJssService.actions = {\n    hover:      ['hover',    'mouseover',   'onmouseover'                       ], // Fixed\n    click:      ['click',    'onclick'                                          ], // Fixed\n    mouseIn:    ['mousein',  'onmousein', 'mouseenter', 'onmouseenter'          ], // Fixed\n    mouseOut:   ['mouseout', 'onmouseout', 'mouseleave', 'onmouseleave'         ], // Fixed\n    resize:     ['resize',   'onresize'                                         ], // Fixed\n    focus:      ['focus',    'onfocus'                                          ],\n    keyDown:    ['keydown',  'keypress'                                         ],\n    keyUp:      ['keyup',    'keyrelease'                                       ],\n    change:     ['change',   'onchange'                                         ],\n};\n\nJssService.enterDelay = 1000;                                                   // Amount of miliseconds which is used to remove the entered state. (see core.actions) JssService.enterDelay setTimeout\n\nJssService.forbiddenProperties = [\n    'type',\n    'triggers',\n    'configureTrigger',\n    'findTriggers'\n];\n\n/**\n * -----------------------------------------------------------------------------\n * Is Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isModule = function(element, moduleName) {\n    var arr = element.className.split(\" \");\n    var found = false;\n\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i].indexOf(moduleName)        > -1 &&\n            arr[i].indexOf(moduleName + \"_\") == -1 &&\n            arr[i].indexOf(moduleName + \"-\") == -1)\n        {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.addModule = function(moduleName) {\n    this.activeModules.push(this.toKebabCase(moduleName))\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To CamelCase\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toCamelCase = function(input) {\n    var arr, res;\n    res = \"\";\n    if (typeof input === \"string\") {\n        input = input.replace(/\\-/g,\" \");                                       // Replace all dashes with spaces\n        arr = input.split(\" \");\n    } else {\n        arr = input;                                                            // Assume it is an array\n    }\n\n\n\n    var i = 0;\n    for (var i in arr) {\n        if (typeof i != \"undefined\") {\n            res += arr[i][0].toUpperCase()+ arr[i].slice(1); // Capitalize first letter\n        }\n    }\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To kebab-case\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toKebabCase = function(input) {\n    var res, str;\n    res = \"\";\n\n    if (typeof input === \"string\") {\n        str = input;\n    } else {                                                                    // Assume it is an array\n        str = input.join(\" \");\n    }\n\n    // First change it to camelcase\n    str = this.toCamelCase(str);\n\n    var max = str.length;\n    for (var i=0; i < max; i++) {\n        // Check if character is uppercase\n        if (str[i] != str[i].toLowerCase()) {\n            if (i!==0) {\n                str = str.substr(0, i) + \"-\" + str.substr(i);\n                i++;\n            }\n        }\n    }\n\n    return res = str.toLowerCase();\n}\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get option\n * -----------------------------------------------------------------------------\n * @param  {string} name                                                        Keyname in optionList\n * @param  {array} optionList                                                   Array with all possible options\n * @return {}                                                                   Copy of the value (optionsList[name])\n */\nJssService.getOption = function(name, optionList) {\n    if (typeof optionList !== \"object\") {\n        return false;\n    }\n\n    var res;\n\n    switch (name) {\n\n        // Only set `addDefaults` to false when it is explicitly set.\n        case \"addDefaults\":\n            if (optionList[name] !== false || typeof optionList[name] === \"undefined\") {\n                res = true;\n            } else {\n                res = false;\n            }\n        break;\n        case \"fallback\":\n            if ( Array.isArray(optionList[name]) ) {\n                res = optionList[name];\n                if (res.length===0) {\n                    res = false;\n                }\n            } else if (typeof optionList[name] === \"string\"){\n                res = [optionList[name]];\n            }\n        break;\n        default:\n        res = optionList[name]\n    }\n\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Is Trigger\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isTrigger = function(element, moduleName) {\n    if (element.className.indexOf(moduleName + \"--\") > -1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get trigger name\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {string} Name of the trigger.\n */\nJssService.getTriggerName = function(element, moduleName) {\n    if (typeof element != \"object\") {\n        console.error('Required first argument `element` needs to be a domElement.');\n        return false;\n    }\n    if (typeof moduleName != \"string\") {\n        console.error('Required second argument `moduleName` needs to be a string.');\n        return false;\n    }\n\n    // As an example we assume that the value of element.className equals 'b module--triggerName'\n    var startPos = element.className.indexOf(moduleName + \"--\");                    // 2\n    var sliced = element.className.slice(startPos, element.className.length )       // 'module--triggerName'\n    var endPos = sliced.indexOf(\" \");                                               // -1       // not found\n    if (endPos != -1) {                                                             // 19\n        sliced = sliced.slice(0,endPos);                                            // if there is more after the string, this will remove it\n    }\n    return sliced.replace(moduleName + \"--\",\"\")\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger name is allowed\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} True if the triggername is allowed, otherwise false.\n */\nJssService.triggerNameIsAllowed = function(element, moduleName) {\n    if (JssService.forbiddenProperties.indexOf(this.getTriggerName(element, moduleName)) > -1) {      // This triggerName is a core property, throw error\n        console.error('Triggername `' + getTriggerName(element,moduleName) + '` is not allowed. Change the trigger so it does not corresponds any of these: ' + JssService.forbiddenProperties)\n        return false;\n    }\n    return true;\n}\n/**\n * @module Jss\n * @author      Jeffrey Arts <sjeffff@gmail.com>\n * @copyright   2015\n */\nJss = function(){};\n\nJss.prototype.type      = \"Jss\"\nJss.prototype.triggers  = false;\nJss.prototype.element   = undefined;                                              // {obj} domElement\nJss.prototype.state     = undefined;                                              // {str} State of module, is reflected by the css class __isState\n\n/**\n * -----------------------------------------------------------------------------\n * Find Triggers\n * -----------------------------------------------------------------------------\n *\n * @param {domElement} element\n * @return {undefined}\n */\nJss.prototype.findTriggers = function(element) {\n    this.triggers = [];                                                         // If this is not set, all modules will have the same reference point to this.triggers.\n    // Module is created, now look for any module triggers\n    this.searchTriggersRecursiveInnerFunction(this.element)\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger\n * -----------------------------------------------------------------------------\n */\nJss.prototype.trigger = function(which, fn) {\n    if (typeof this.triggers !== \"object\") {\n        console.info(\"No triggers are found, please specify them in the css as `module-name--trigger-name`.\");\n        return false;\n    }\n\n    if (typeof this.triggers[which] !== \"object\") {\n        console.info(\"You are trying to execute a function on a non existing trigger `\" + which + \"`\");\n        return false;\n    }\n\n    for (var i = 0; i < this.triggers[which].length; i++) {\n        fn(this.triggers[which][i])\n    }\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Search triggers recursive inner function\n * -----------------------------------------------------------------------------\n * Recursive function which is executed bij findTriggers;\n *\n * @return {undefined}\n */\nJss.prototype.searchTriggersRecursiveInnerFunction = function(element) {\n    var self = this;\n    if (typeof element == \"undefined\" ) {\n        element = this.element;\n    }\n    if ( element.hasChildNodes() ) {\n        for (var i=0; i < element.childNodes.length; i++) {\n\n            var childElement = element.childNodes[i];                           // Improve readability\n\n            if (childElement.nodeType == 1) {                                   // NodeType 1 == domElement\n\n                if (JssService.isTrigger(childElement, this.moduleName)) {\n\n                    // Add a child element\n                    if (JssService.triggerNameIsAllowed(childElement, this.moduleName)) {\n                        var triggerName = JssService.getTriggerName(childElement, this.moduleName)\n\n                        if (typeof self.triggers[triggerName] !== \"object\") {\n                            self.triggers[triggerName] = [];\n                        }\n\n                        var tmp = new JssTrigger(childElement, {\n                            module: self,\n                            moduleName: this.moduleName,\n                            triggerName: triggerName,\n                        });\n\n                        self.triggers[triggerName].push(tmp);\n                    }\n                }\n                if (childElement.hasChildNodes()) {\n                    self.searchTriggersRecursiveInnerFunction(childElement)\n                }\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Configure Trigger\n * -----------------------------------------------------------------------------\n *\n * @return {undefined}\n */\nJss.prototype.configureTrigger = function(trigger, fn) {\n    if ( typeof this.triggers[trigger] == \"object\") {\n\n        for (var i = 0; i < this.triggers[trigger].length; i++) {\n            //self.triggers[trigger][i]\n            fn(this.triggers[trigger][i]);\n        }\n\n    } else if (JssService.dev) {\n        console.error(\"You are trying to configure a trigger which has no attached domElement\")\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n *   Init\n * -----------------------------------------------------------------------------\n * Notice the user that a init function needs to be added for controlling the triggers\n *\n * @return {undefined}\n */\nJss.prototype.init = function(func) {\n    if (JssService.dev) {\n        console.info(this.moduleName + \": Add a prototype.init function to add triggers and stuff\")\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set element\n * -----------------------------------------------------------------------------\n * Add a domElement to `this`\n *\n * @return {undefined}\n */\nJss.prototype.setElement = function(element) {\n    if (typeof element == \"undefined\") {\n        if (JssService.dev) {\n            return console.error(\"First parameter of setElement needs to be a domElement\");\n        }\n    }\n    this.element = element;\n}\n/*******************************************************************************\n   *\n   *\tActions\n   *\n   *  \t@author      Jeffrey Arts <sjeffff@gmail.com>\n   *    @copyright   2015\n   *\n*******************************************************************************/\n/**\n * -----------------------------------------------------------------------------\n *   Validate action\n * -----------------------------------------------------------------------------\n * Checks if parameter is a valid action, and logs an error when not.\n *\n * @param {string} request                                                      The name of the request\n * @return {boolean} true if a action is valid, otherwise false.\n */\nJss.prototype.validateAction = function(request) {\n    var result;\n    request = this.getActionElement(request).request\n    for (var action in JssService.actions) {\n        if (JssService.actions[action].indexOf(request.toLowerCase()) > -1) {\n            result = action;\n            break;\n        }\n    }\n    if (result) {\n        return result;\n    } else {\n        console.error(\"validateAction: unknown request\", request);\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * \t Add Action\n * -----------------------------------------------------------------------------\n * Adds an action to the object, list of possible requests can be found in Jss.actions\n *\n * | Options\n * \t\t- addDefaults {boolean}                                                 True: add default classes, false: don't\n *\n *\n *\n * @param {string} request                                                      The name of the request\n * @param {function} fn                                                         The function which should be triggered\n * @param {object} options                                                      Object with option parameters\n * @return {boolean} true if a action is succesfully added, otherwise false.\n */\nJss.prototype.addAction = function(request, fn, options) {\n\n    var self        = this;\n    var action      = self.validateAction(request)\n    var actions     = [];\n    var t = self.getActionElement(request);\n    var element     = t.element;\n    var request     = t.request;\n    t = undefined;\n\n    // Options\n    var addDefaults = JssService.getOption(\"addDefaults\", options);\n\n\n\n    switch (action) {\n\n        case \"resize\":\n\n            actions.push(element.addEventListener(\"resize\", fn));\n\n        break;\n\n\n        case \"click\":\n            actions.push(element.addEventListener(\"click\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"click\", function(){\n                    self.setState(\"Clicked\")\n                }));\n                actions.push(window.addEventListener( \"click\", function(event) {\n                    if (event.target != self.element && self.hasState(\"Clicked\")) {\n                        self.removeState(\"Clicked\")\n                    }\n                }));\n            } // End addDefaults\n        break;\n\n\n        case \"change\":\n            actions.push(element.addEventListener(\"change\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"change\", function(){\n                    self.setState(\"Changed\")\n                    setTimeout(function(){self.removeState(\"Changed\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"hover\":\n            actions.push(element.addEventListener(\"mouseover\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseover\", function(){\n                    self.setState(\"Hover\")\n                }));\n                actions.push(element.addEventListener(\"mouseout\",  function(){\n                    self.removeState(\"Hover\")\n                }));\n            }\n        break;\n\n\n        case \"mouseIn\":\n\n            actions.push(element.addEventListener(\"mouseenter\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseenter\", function(){\n                    self.setState(\"MouseIn\")\n                    setTimeout(function(){self.removeState(\"MouseIn\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"mouseOut\":\n\n            actions.push(element.addEventListener(\"mouseleave\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseleave\", function(){\n                    self.setState(\"MouseOut\")\n                    setTimeout(function(){self.removeState(\"MouseOut\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n    }\n\n\n    if (actions.length > 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get action element\n * -----------------------------------------------------------------------------\n * @param  {string} request                                                     The request\n * @return {object}                                                             An object with 2 properties: request && element\n */\nJss.prototype.getActionElement = function(request) {\n    var self = this;\n    var prefix = false;\n    var newRequest  = request;\n    var element = self.element;\n    // Set prefix if it exists\n    if (request.indexOf(\".\") > 0) {\n        var t       = request.split(\".\"),\n        newRequest  = t[1];\n        prefix      = t[0];\n        t = undefined;\n    }\n\n    // Update element according the prefix (or skip it, if not set)\n    if (prefix !== false) {\n        switch (prefix) {\n            case \"screen\":\n            case \"window\":\n                element = window;\n            break;\n        }\n    }\n\n    // Return object\n    return {\n        request: newRequest,\n        element: element\n    }\n}\n/**\n * -----------------------------------------------------------------------------\n * Class name prefix\n * -----------------------------------------------------------------------------\n * The prefix equals the modulename, or - when it's a trigger object - modulename--triggername\n *\n * @return {string} The classname\n */\nJss.prototype.classNamePrefix = function() {\n    if (this.type == \"JssTrigger\") {\n        return this.moduleName + \"--\" + this.triggerName;\n    } else {\n        return this.moduleName;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Remove class name\n * -----------------------------------------------------------------------------\n * Removes the `this.element` classname\n * \t- \"all\" || undefined        > Removes ALL classnames\n *  - \"allStates\" || \"states\"   > Remove all STATES\n *  - all other strings remove that specific string from the className\n *\n * @param {string} input                                                        The classname (case-sensitive) which needs to be removed\n * @return {undefined}\n */\nJss.prototype.removeClassName = function(input) {\n\n    var classList  = [];\n\n    if (input == \"all\" || typeof input == \"undefined\") {\n\n        this.element.className = \"\";\n\n    } else if (input == \"states\" || input == \"allStates\") {\n\n        classList = this.element.className.split(\" \");\n        for (var i in classList) {\n            className = classList[i];\n            if (className.indexOf(\"__is\") > -1) {\n                delete classList[i];\n            }\n        }\n        this.element.className = classList.join(\" \");\n\n    } else if(typeof input == \"string\") {\n        this.element.className = this.element.className.replace(input,\"\");\n    } else {\n        console.error(\"removeClassName: parameter should be a string\");\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Add class name\n * -----------------------------------------------------------------------------\n * Adds a class name by string or array.\n * Does NOT check for duplicates\n *\n * @param  {string} The classname to be added\n * @return {undefined}\n */\nJss.prototype.addClassName = function(data) {\n    this.element.className += \" \";\n    if (typeof data == \"string\") {\n        this.element.className += data;\n    } else {\n        this.element.className += data.join(\" \")\n    }\n}\n\n/**\n * List where the keys corresponds with this[key], and where the value is the function to be executed when the var is changed.\n */\nJss.prototype.setterWatchList = {};\nJss.prototype.getterWatchList = {};\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add data\n * -----------------------------------------------------------------------------\n * Add a (default) value for the given attribute.\n *\n * @param {string} attribute                                                    The name of the attribute (this[attribute])\n * @param {*} value                                                             The value of this[attribute], could be anything...\n * @param {object} options\n *           \t\t- setterWatchFunction {function}\n *           \t\t- getterWatchFunction {function}\n */\nJss.prototype.addData = function(attribute, value, options) {\n\n\n    // watchList[key] = fn;\n    var setterWatchFunction = JssService.getOption('setterWatchFunction', options); // Function\n    var getterWatchFunction = JssService.getOption('getterWatchFunction', options); // Function\n\n    if (typeof setterWatchFunction === \"function\") {\n        this.setterWatchList[attribute] = setterWatchFunction;\n    }\n\n    if (typeof getterWatchFunction === \"function\") {\n        this.getterWatchList[attribute] = getterWatchFunction;\n    }\n\n    // Set the default value\n    return this[attribute] = value;\n}\n\n\n\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- ajax {string} url\n */\nJss.prototype.setData = function(attribute, value, options) {\n\n    this[attribute] = value;\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n\n    if (Array.isArray(fallback)) {\n\n        for (var i = 0; i < fallback.length; i++) {\n            var type = fallback[i];\n\n            if (value && value.length > 0) {\n                this['setData' + JssService.toCamelCase(type)](attribute, value); // Call this.addDataAttribute(value) || this.addDataCookie(value) etc...\n                this[attribute] = value;\n            }\n        }\n    }\n\n    // Call the setter watch function, if defined;\n    if (typeof this.setterWatchList[attribute] === \"function\") { // Use the watchlist to add functionality whenever a data attribute is updated\n        this.setterWatchList[attribute]();\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataDefault {boolean}\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- dataAjax {string} url\n */\nJss.prototype.getData = function(attribute, options) {\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n    var value = false;\n\n\n    if (!fallback) {\n        fallback = ['attribute'];\n    }\n\n\n    for (var i = 0; i < fallback.length; i++) {\n        var type = JssService.toCamelCase(fallback[i]);\n        var customOptions = false;\n\n        if (typeof options == \"object\") {\n            customOptions = options[fallback[i].toLowerCase()];\n        }\n\n        if (!value || value.length < 0) {\n            if (typeof this['getData' + type] !== \"function\") {\n                console.error('this.getData' + type + ' is not a function. Probably ' + type + ' is not a available data option');\n                continue;\n            }\n            value = this['getData' + type]( attribute, customOptions ); // Call this.getDataAttribute(value) || this.getDataCookie(value) || this.getDataAjax(value) etc...\n        }\n    }\n    console.log(this.getterWatchList);\n    // Call the getter watch function, if defined;\n    if (typeof this.getterWatchList[attribute] == \"function\") {\n        this.getterWatchList[attribute]();\n    }\n\n    return this[attribute] = value;\n}\n/**\n * -----------------------------------------------------------------------------\n * Get data: Ajax\n * -----------------------------------------------------------------------------\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n *\n * @param {string} attribute                                                    The NAME of the inner variable (this.NAME), is also used as the key for the GET Request {NAME: value}\n * @param {object} options                                                      Object with parameters used to make a GET request\n * @return {string}                                                             The value of the given attribute, or false if an erro occured.\n */\nJss.prototype.getDataAjax = function(attribute, options) {\n    var url = JssService.getOption(\"url\", options);\n    var jsonKey = JssService.getOption(\"jsonKey\", options) || attribute;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('GET', url);\n\n        return ajaxReturn.success(function(result){\n            if (typeof result === \"object\") {\n                if (result[jsonKey]) {\n                    return result[jsonKey];\n                }\n            }\n        }).error(function(errorObject){\n            console.log(errorObject);\n        });\n    }\n\n    return false;\n};\n\n/**\n * -----------------------------------------------------------------------------\n * Set data: Ajax\n * -----------------------------------------------------------------------------\n * Makes a post request to the options.url in a object {attribute: value}\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n */\nJss.prototype.setDataAjax = function(attribute, value, options) {\n    var url = JssService.getOption(\"url\", options);\n    var requestObject = {}\n        requestObject[attribute] = value;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('POST', url, requestObject);\n\n        return ajaxReturn.success(function(result){\n            return true;\n        }).error(function(errorObject){\n            console.log(errorObject);\n            return false;\n        });\n    }\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Ajax (helper function)\n * -----------------------------------------------------------------------------\n * Based on Atom.js by Todd Motto\n * http://toddmotto.com/writing-a-standalone-ajax-xhr-javascript-micro-library/\n */\nJss.prototype.ajaxHelper = {\n    // Parses json if possible, otherwise just return text\n    parse: function(req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return [result, req];\n    },\n\n    xhr: function(type, url, data) {\n        var ajaxHelper = this;\n\n        var methods = {\n            success: function() {},\n            error: function() {}\n        };\n        var XHR = XMLHttpRequest || ActiveXObject;\n        var request = new XHR('MSXML2.XMLHTTP.3.0');\n        request.open(type, url, true);\n        request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n\n        request.onreadystatechange = function() {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    methods.success.apply(methods, ajaxHelper.parse(request));\n                } else {\n                    methods.error.apply(methods, ajaxHelper.parse(request));\n                }\n            }\n        };\n        request.send(data);\n        return {\n            success: function(callback) {\n                methods.success = callback;\n                return methods;\n            },\n            error: function(callback) {\n                methods.error = callback;\n                return methods;\n            }\n        };\n    }\n};\n\nJss.prototype.ajax = {\n    // Get\n    get: function(src) {\n        console.log(this);\n    },\n\n    // Set\n    put: function(url, data) {\n        return this.ajaxHelper.xhr('PUT', url, data);\n    },\n\n    // Add\n    post: function(url, data) {\n        return this.ajaxHelper.xhr('POST', url, data);\n    }\n\n};\n/**\n * -----------------------------------------------------------------------------\n * Get data attribute value\n * -----------------------------------------------------------------------------\n * Returns the value of the requested attribute. Search first for a data-[ATTRIBUTE] value\n * If not found, it checks for the attribute in the default object. When that is not being\n * found neither, the normal this[attribute] value is being returned.\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME)\n * @return {string}                                                             The value of the given attribute\n */\nJss.prototype.getDataAttribute = function(attribute) {\n\n    return this.element.dataset[attribute];\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Update data attribute\n * -----------------------------------------------------------------------------\n * Set the value to the given attribute. And updates the data-[ATTRIBUTE] value\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME=\"value\")\n * @param {string} value                                                        The VALUE of the data attribute (data-name=\"VALUE\")\n * @return {undefined}\n */\n\nJss.prototype.setDataAttribute = function(attribute, value) {\n\n    // Update data attribute\n    if (typeof value !== \"undefined\") {\n        this.element.dataset[attribute] = this[attribute];\n    } else {\n        delete this.element.dataset[attribute];\n    }\n\n    return true;\n}\nJss.prototype.dataDefaultsCookie = {\n    'expireData': undefined\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get cookie value\n * -----------------------------------------------------------------------------\n * Returns cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @return {string}                                                             The VALUE of the given attribute\n */\nJss.prototype.getDataCookie = function(attribute) {\n\n    if (!attribute) { return null; }\n    return decodeURIComponent(document.cookie.replace(new RegExp(\"(?:(?:^|.*;)\\\\s*\" + encodeURIComponent(attribute).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"), \"$1\")) || null;\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data cookie\n * -----------------------------------------------------------------------------\n * Updates the cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @param {string} value                                                        The VALUE of the cookie\n * @return {undefined}\n */\n\nJss.prototype.setDataCookie = function(attribute, value, options) {\n    var endDate, path, domain, secureConnection;\n\n    if (typeof options === \"object\") {\n        endDate = JssService.getOption('endDate', options);\n        path    = JssService.getOption('path', options);\n        domain  = JssService.getOption('domain', options);\n        secureConnection = JssService.getOption('secureConnection', options);\n    }\n\n    if (!attribute || /^(?:expires|max\\-age|path|domain|secure)$/i.test(attribute)) { return false; }\n    var sExpires = \"\";\n    if (endDate) {\n      switch (endDate.constructor) {\n        case Number:\n          sExpires = endDate === Infinity ? \"; expires=Fri, 31 Dec 9999 23:59:59 GMT\" : \"; max-age=\" + endDate;\n          break;\n        case String:\n          sExpires = \"; expires=\" + endDate;\n          break;\n        case Date:\n          sExpires = \"; expires=\" + endDate.toUTCString();\n          break;\n      }\n    }\n\n    document.cookie = encodeURIComponent(attribute) + \"=\" + encodeURIComponent(value) + sExpires + (domain ? \"; domain=\" + domain : \"\") + (path ? \"; path=\" + path : \"\") + (secureConnection ? \"; secure\" : \"\");\n    return true;\n}\n/*******************************************************************************\n\n    Styles\n\n*******************************************************************************/\n\n/**\n * -----------------------------------------------------------------------------\n * Set height\n * -----------------------------------------------------------------------------\n * Sets the height of the `this.element` by the given input (height)\n *\n * @param  {number} height                                                      The height in pixels or percentage. Where numbers will be calculated to pixels so giving a height of 50 will result in a height of \"50px\". If you want percentages pass the variable with a percentage sign 50 + \"%\"\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setHeight = function(height) {\n    if (typeof height === \"number\") {\n        height += \"px\";\n    }\n\n    if (typeof height !== \"string\") {\n        throw(\"parameter height needs to be a string or integer\");\n    }\n\n    this.element.style.height = height;\n    return true;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get height\n * -----------------------------------------------------------------------------\n * Returns the height of the `this.element`\n *\n * @return {number}                                                             The height of the element in pixels\n */\nJss.prototype.getHeight = function() {\n    return this.element.offsetHeight;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set width\n * -----------------------------------------------------------------------------\n * Sets the width of the `this.element` by the given input (width)\n *\n * @param  {number} width                                                       The width in pixels or percentage. Where numbers will be calculated to pixels so giving a width of 50 will result in a width of \"50px\". If you want to set a percentage, just pass the variable with a percentage sign (\"50%\")\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setWidth = function(width) {\n    if (typeof width == \"number\") {\n        width += \"px\";\n    }\n\n    if (typeof width !== \"string\") {\n        throw(\"parameter width needs to be a string or integer\");\n    }\n    this.element.style.width = width;\n    return true;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get width\n * -----------------------------------------------------------------------------\n * Returns the width of the `this.element`\n *\n * @return {number}                                                             The width of the element in pixels\n */\nJss.prototype.getWidth = function() {\n    return this.element.offsetWidth;\n}\n/**\n * -----------------------------------------------------------------------------\n * Set State\n * -----------------------------------------------------------------------------\n * This updates the state of the object. States are being added to the class name prefix with a double underscore.\n * If you would have the module `envelope` and give it the state `open`. The class name `envelope__open` will be added.\n * Whenever you remove the state `open`, the according class name will be removed as well.\n *\n * @param  {string} str                                                         The name of the state which should be set (this is transformed to CamelCase)\n * @return {boolean}                                                            True on success, otherwise false (might already have the state)\n */\nJss.prototype.setState = function(str) {\n    var element, verifiedState, state, className;\n\n    element         = this.element;\n    state           = JssService.toCamelCase(str);\n    className       = this.classNamePrefix() + \"__is\" + state;\n\n    // Check if this.state is an array, and make it one if not.\n    if (Array.isArray(this.state) == false ) {\n        this.state = [];\n    }\n\n    // This if statement prevents that the same state is being set multiple times\n    if ( !this.hasState(str) ) {\n        this.addClassName(className)\n        this.state.push(state);\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Has state\n * -----------------------------------------------------------------------------\n * Checks if the parameter is already a state and returns true if so. Otherwise false.\n *\n * @param  {string} str                                                         The state which will be checked for\n * @return {boolean}                                                            True if it has the given state, otherwise false\n */\nJss.prototype.hasState = function(str) {\n    if (typeof this.state == \"object\" && this.state.indexOf(str) >= 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Remove state\n * -----------------------------------------------------------------------------\n * Removes the state from the states array, and from the element.className\n *\n * @param  {string} str                                                         The name of the state which should be removed\n * @return {undefined}\n */\nJss.prototype.removeState = function(str) {\n\n    var state      = JssService.toCamelCase(str);\n    var stateIndex = this.state.indexOf(state);\n\n    if (str == \"all\" || typeof str == \"undefined\") {\n        this.removeClassName(\"states\");\n    } else {\n        this.state.splice(stateIndex, 1);\n        if (typeof this.moduleAction != \"undefined\" && this.moduleAction.length > -1) {\n            this.removeClassName(this.classNamePrefix() + \"\" + this.moduleAction + \"__is\" + state);\n        } else {\n            this.removeClassName(this.classNamePrefix() + \"__is\" + state);\n        }\n    }\n}\n\n\n// A simple way to watch variables\n\n// addVar(keyName, value, watch_function)\n// setVar(keyName, value)\n// getVar(keyName)\n// Add -> new\n// Set -> update\n// Get -> return\nvar JssModule = function(){};\n\nJssModule.prototype.type               = \"JssModule\";\nJssModule.prototype.init               = Jss.prototype.init;\nJssModule.prototype.setElement         = Jss.prototype.setElement;\n\n// Triggers\nJssModule.prototype.findTriggers       = Jss.prototype.findTriggers;\nJssModule.prototype.configureTrigger      = Jss.prototype.configureTrigger;\n\n// Actions\n//JssModule.prototype.actions            = Object.create(Jss.prototype.actions);\nJssModule.prototype.validateAction     = Jss.prototype.validateAction;\nJssModule.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssModule.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssModule.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssModule.prototype.setState           = Jss.prototype.setState;\nJssModule.prototype.hasState           = Jss.prototype.hasState;\nJssModule.prototype.removeState        = Jss.prototype.removeState;\n\n// Data attributes\nJssModule.prototype.addData            = Jss.prototype.addData;\nJssModule.prototype.getData            = Jss.prototype.getData;\nJssModule.prototype.setData            = Jss.prototype.setData;\nvar JssTrigger = function(element, options) {\n    this.setElement(element);\n\n    if (typeof options === \"object\") {\n        if (typeof options.module === \"object\") {\n            this.module = options.module;\n        }\n        if (typeof options.moduleName === \"string\") {\n            this.moduleName = options.moduleName;\n        }\n        if (typeof options.triggerName === \"string\") {\n            this.triggerName = options.triggerName;\n        }\n    }\n}\n\n\nJssTrigger.prototype                    = Object.create(Jss.prototype);\nJssTrigger.prototype.type               = \"JssTrigger\";\nJssTrigger.prototype.setElement         = Jss.prototype.setElement;\n\n// Actions\n//JssTrigger.prototype.actions            = Object.create(Jss.prototype.actions);\nJssTrigger.prototype.validateAction     = Jss.prototype.validateAction;\nJssTrigger.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssTrigger.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssTrigger.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssTrigger.prototype.setState           = Jss.prototype.setState;\nJssTrigger.prototype.hasState           = Jss.prototype.hasState;\nJssTrigger.prototype.removeState        = Jss.prototype.removeState;\n\n\n\nvar  JssController = {};\nJssController.modules \t\t= []; // Result array with objects of all the found modules\nJssController.activeModules \t= JssService.activeModules;\n\nJssController.findModules = function() {\n    var allElements = document.getElementsByTagName(\"*\");                       // Array with all domElements\n    var test = [];\n    var self = this;\n    for (var i=0; i < allElements.length; i++) {\n\n        // Set default vars //\n        var element = allElements[i];                                           // Specific domElement\n        var tmp = false;\n\n        // Loop through the (active) modules array and add/instantiate them\n        self.activeModules.forEach(function(module){\n            if (JssService.isModule(element, module)) {\n                tmp = eval(\"new \" + JssService.toCamelCase(module) + \"(element)\"); // Dynamicly load modules\n\n                tmp.setElement(element);                                        // Add the domElement to the module\n                tmp.findTriggers();\t\t\t                                    // Search for module triggers\n\n                tmp.init();\t\t\t\t\t                                    // Executes everything within the init function\n                self.modules.push(tmp);\n\n            }\n        }); // End forEach\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    JssController.findModules();\n    console.log(JssController);\n});"
          },
          "params": [
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "domElement"
              },
              "name": "element"
            }
          ],
          "returns": [
            {
              "title": "returns",
              "description": null,
              "type": {
                "type": "UndefinedLiteral"
              }
            }
          ],
          "name": "findTriggers",
          "kind": "function",
          "memberof": "Jss",
          "scope": "instance",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            "Jss",
            "findTriggers"
          ]
        },
        {
          "description": "-----------------------------------------------------------------------------\nGet action element\n-----------------------------------------------------------------------------",
          "tags": [
            {
              "title": "param",
              "description": "The request",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "request"
            },
            {
              "title": "returns",
              "description": "An object with 2 properties: request && element",
              "type": {
                "type": "NameExpression",
                "name": "object"
              }
            },
            {
              "title": "name",
              "name": "getActionElement"
            },
            {
              "title": "kind",
              "kind": "function"
            },
            {
              "title": "memberof",
              "description": "Jss"
            },
            {
              "title": "instance"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 552,
                "column": 0
              },
              "end": {
                "line": 589,
                "column": 0
              }
            },
            "file": "/Users/jeffreyarts/Documents/DEV/jss/lib/jss.js",
            "code": "JssService = {};\n\n// Edit this array to enable or disable default modules\nJssService.activeModules   = []\n\n// Set this to false in a live environment\nJssService.dev             = true;\n\n/**************************\n*\n*   Below are core properties defined, becarefull when you think of changing these...\n*\n**************************/\n\n\nJssService.actions = {\n    hover:      ['hover',    'mouseover',   'onmouseover'                       ], // Fixed\n    click:      ['click',    'onclick'                                          ], // Fixed\n    mouseIn:    ['mousein',  'onmousein', 'mouseenter', 'onmouseenter'          ], // Fixed\n    mouseOut:   ['mouseout', 'onmouseout', 'mouseleave', 'onmouseleave'         ], // Fixed\n    resize:     ['resize',   'onresize'                                         ], // Fixed\n    focus:      ['focus',    'onfocus'                                          ],\n    keyDown:    ['keydown',  'keypress'                                         ],\n    keyUp:      ['keyup',    'keyrelease'                                       ],\n    change:     ['change',   'onchange'                                         ],\n};\n\nJssService.enterDelay = 1000;                                                   // Amount of miliseconds which is used to remove the entered state. (see core.actions) JssService.enterDelay setTimeout\n\nJssService.forbiddenProperties = [\n    'type',\n    'triggers',\n    'configureTrigger',\n    'findTriggers'\n];\n\n/**\n * -----------------------------------------------------------------------------\n * Is Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isModule = function(element, moduleName) {\n    var arr = element.className.split(\" \");\n    var found = false;\n\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i].indexOf(moduleName)        > -1 &&\n            arr[i].indexOf(moduleName + \"_\") == -1 &&\n            arr[i].indexOf(moduleName + \"-\") == -1)\n        {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.addModule = function(moduleName) {\n    this.activeModules.push(this.toKebabCase(moduleName))\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To CamelCase\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toCamelCase = function(input) {\n    var arr, res;\n    res = \"\";\n    if (typeof input === \"string\") {\n        input = input.replace(/\\-/g,\" \");                                       // Replace all dashes with spaces\n        arr = input.split(\" \");\n    } else {\n        arr = input;                                                            // Assume it is an array\n    }\n\n\n\n    var i = 0;\n    for (var i in arr) {\n        if (typeof i != \"undefined\") {\n            res += arr[i][0].toUpperCase()+ arr[i].slice(1); // Capitalize first letter\n        }\n    }\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To kebab-case\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toKebabCase = function(input) {\n    var res, str;\n    res = \"\";\n\n    if (typeof input === \"string\") {\n        str = input;\n    } else {                                                                    // Assume it is an array\n        str = input.join(\" \");\n    }\n\n    // First change it to camelcase\n    str = this.toCamelCase(str);\n\n    var max = str.length;\n    for (var i=0; i < max; i++) {\n        // Check if character is uppercase\n        if (str[i] != str[i].toLowerCase()) {\n            if (i!==0) {\n                str = str.substr(0, i) + \"-\" + str.substr(i);\n                i++;\n            }\n        }\n    }\n\n    return res = str.toLowerCase();\n}\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get option\n * -----------------------------------------------------------------------------\n * @param  {string} name                                                        Keyname in optionList\n * @param  {array} optionList                                                   Array with all possible options\n * @return {}                                                                   Copy of the value (optionsList[name])\n */\nJssService.getOption = function(name, optionList) {\n    if (typeof optionList !== \"object\") {\n        return false;\n    }\n\n    var res;\n\n    switch (name) {\n\n        // Only set `addDefaults` to false when it is explicitly set.\n        case \"addDefaults\":\n            if (optionList[name] !== false || typeof optionList[name] === \"undefined\") {\n                res = true;\n            } else {\n                res = false;\n            }\n        break;\n        case \"fallback\":\n            if ( Array.isArray(optionList[name]) ) {\n                res = optionList[name];\n                if (res.length===0) {\n                    res = false;\n                }\n            } else if (typeof optionList[name] === \"string\"){\n                res = [optionList[name]];\n            }\n        break;\n        default:\n        res = optionList[name]\n    }\n\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Is Trigger\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isTrigger = function(element, moduleName) {\n    if (element.className.indexOf(moduleName + \"--\") > -1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get trigger name\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {string} Name of the trigger.\n */\nJssService.getTriggerName = function(element, moduleName) {\n    if (typeof element != \"object\") {\n        console.error('Required first argument `element` needs to be a domElement.');\n        return false;\n    }\n    if (typeof moduleName != \"string\") {\n        console.error('Required second argument `moduleName` needs to be a string.');\n        return false;\n    }\n\n    // As an example we assume that the value of element.className equals 'b module--triggerName'\n    var startPos = element.className.indexOf(moduleName + \"--\");                    // 2\n    var sliced = element.className.slice(startPos, element.className.length )       // 'module--triggerName'\n    var endPos = sliced.indexOf(\" \");                                               // -1       // not found\n    if (endPos != -1) {                                                             // 19\n        sliced = sliced.slice(0,endPos);                                            // if there is more after the string, this will remove it\n    }\n    return sliced.replace(moduleName + \"--\",\"\")\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger name is allowed\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} True if the triggername is allowed, otherwise false.\n */\nJssService.triggerNameIsAllowed = function(element, moduleName) {\n    if (JssService.forbiddenProperties.indexOf(this.getTriggerName(element, moduleName)) > -1) {      // This triggerName is a core property, throw error\n        console.error('Triggername `' + getTriggerName(element,moduleName) + '` is not allowed. Change the trigger so it does not corresponds any of these: ' + JssService.forbiddenProperties)\n        return false;\n    }\n    return true;\n}\n/**\n * @module Jss\n * @author      Jeffrey Arts <sjeffff@gmail.com>\n * @copyright   2015\n */\nJss = function(){};\n\nJss.prototype.type      = \"Jss\"\nJss.prototype.triggers  = false;\nJss.prototype.element   = undefined;                                              // {obj} domElement\nJss.prototype.state     = undefined;                                              // {str} State of module, is reflected by the css class __isState\n\n/**\n * -----------------------------------------------------------------------------\n * Find Triggers\n * -----------------------------------------------------------------------------\n *\n * @param {domElement} element\n * @return {undefined}\n */\nJss.prototype.findTriggers = function(element) {\n    this.triggers = [];                                                         // If this is not set, all modules will have the same reference point to this.triggers.\n    // Module is created, now look for any module triggers\n    this.searchTriggersRecursiveInnerFunction(this.element)\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger\n * -----------------------------------------------------------------------------\n */\nJss.prototype.trigger = function(which, fn) {\n    if (typeof this.triggers !== \"object\") {\n        console.info(\"No triggers are found, please specify them in the css as `module-name--trigger-name`.\");\n        return false;\n    }\n\n    if (typeof this.triggers[which] !== \"object\") {\n        console.info(\"You are trying to execute a function on a non existing trigger `\" + which + \"`\");\n        return false;\n    }\n\n    for (var i = 0; i < this.triggers[which].length; i++) {\n        fn(this.triggers[which][i])\n    }\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Search triggers recursive inner function\n * -----------------------------------------------------------------------------\n * Recursive function which is executed bij findTriggers;\n *\n * @return {undefined}\n */\nJss.prototype.searchTriggersRecursiveInnerFunction = function(element) {\n    var self = this;\n    if (typeof element == \"undefined\" ) {\n        element = this.element;\n    }\n    if ( element.hasChildNodes() ) {\n        for (var i=0; i < element.childNodes.length; i++) {\n\n            var childElement = element.childNodes[i];                           // Improve readability\n\n            if (childElement.nodeType == 1) {                                   // NodeType 1 == domElement\n\n                if (JssService.isTrigger(childElement, this.moduleName)) {\n\n                    // Add a child element\n                    if (JssService.triggerNameIsAllowed(childElement, this.moduleName)) {\n                        var triggerName = JssService.getTriggerName(childElement, this.moduleName)\n\n                        if (typeof self.triggers[triggerName] !== \"object\") {\n                            self.triggers[triggerName] = [];\n                        }\n\n                        var tmp = new JssTrigger(childElement, {\n                            module: self,\n                            moduleName: this.moduleName,\n                            triggerName: triggerName,\n                        });\n\n                        self.triggers[triggerName].push(tmp);\n                    }\n                }\n                if (childElement.hasChildNodes()) {\n                    self.searchTriggersRecursiveInnerFunction(childElement)\n                }\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Configure Trigger\n * -----------------------------------------------------------------------------\n *\n * @return {undefined}\n */\nJss.prototype.configureTrigger = function(trigger, fn) {\n    if ( typeof this.triggers[trigger] == \"object\") {\n\n        for (var i = 0; i < this.triggers[trigger].length; i++) {\n            //self.triggers[trigger][i]\n            fn(this.triggers[trigger][i]);\n        }\n\n    } else if (JssService.dev) {\n        console.error(\"You are trying to configure a trigger which has no attached domElement\")\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n *   Init\n * -----------------------------------------------------------------------------\n * Notice the user that a init function needs to be added for controlling the triggers\n *\n * @return {undefined}\n */\nJss.prototype.init = function(func) {\n    if (JssService.dev) {\n        console.info(this.moduleName + \": Add a prototype.init function to add triggers and stuff\")\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set element\n * -----------------------------------------------------------------------------\n * Add a domElement to `this`\n *\n * @return {undefined}\n */\nJss.prototype.setElement = function(element) {\n    if (typeof element == \"undefined\") {\n        if (JssService.dev) {\n            return console.error(\"First parameter of setElement needs to be a domElement\");\n        }\n    }\n    this.element = element;\n}\n/*******************************************************************************\n   *\n   *\tActions\n   *\n   *  \t@author      Jeffrey Arts <sjeffff@gmail.com>\n   *    @copyright   2015\n   *\n*******************************************************************************/\n/**\n * -----------------------------------------------------------------------------\n *   Validate action\n * -----------------------------------------------------------------------------\n * Checks if parameter is a valid action, and logs an error when not.\n *\n * @param {string} request                                                      The name of the request\n * @return {boolean} true if a action is valid, otherwise false.\n */\nJss.prototype.validateAction = function(request) {\n    var result;\n    request = this.getActionElement(request).request\n    for (var action in JssService.actions) {\n        if (JssService.actions[action].indexOf(request.toLowerCase()) > -1) {\n            result = action;\n            break;\n        }\n    }\n    if (result) {\n        return result;\n    } else {\n        console.error(\"validateAction: unknown request\", request);\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * \t Add Action\n * -----------------------------------------------------------------------------\n * Adds an action to the object, list of possible requests can be found in Jss.actions\n *\n * | Options\n * \t\t- addDefaults {boolean}                                                 True: add default classes, false: don't\n *\n *\n *\n * @param {string} request                                                      The name of the request\n * @param {function} fn                                                         The function which should be triggered\n * @param {object} options                                                      Object with option parameters\n * @return {boolean} true if a action is succesfully added, otherwise false.\n */\nJss.prototype.addAction = function(request, fn, options) {\n\n    var self        = this;\n    var action      = self.validateAction(request)\n    var actions     = [];\n    var t = self.getActionElement(request);\n    var element     = t.element;\n    var request     = t.request;\n    t = undefined;\n\n    // Options\n    var addDefaults = JssService.getOption(\"addDefaults\", options);\n\n\n\n    switch (action) {\n\n        case \"resize\":\n\n            actions.push(element.addEventListener(\"resize\", fn));\n\n        break;\n\n\n        case \"click\":\n            actions.push(element.addEventListener(\"click\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"click\", function(){\n                    self.setState(\"Clicked\")\n                }));\n                actions.push(window.addEventListener( \"click\", function(event) {\n                    if (event.target != self.element && self.hasState(\"Clicked\")) {\n                        self.removeState(\"Clicked\")\n                    }\n                }));\n            } // End addDefaults\n        break;\n\n\n        case \"change\":\n            actions.push(element.addEventListener(\"change\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"change\", function(){\n                    self.setState(\"Changed\")\n                    setTimeout(function(){self.removeState(\"Changed\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"hover\":\n            actions.push(element.addEventListener(\"mouseover\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseover\", function(){\n                    self.setState(\"Hover\")\n                }));\n                actions.push(element.addEventListener(\"mouseout\",  function(){\n                    self.removeState(\"Hover\")\n                }));\n            }\n        break;\n\n\n        case \"mouseIn\":\n\n            actions.push(element.addEventListener(\"mouseenter\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseenter\", function(){\n                    self.setState(\"MouseIn\")\n                    setTimeout(function(){self.removeState(\"MouseIn\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"mouseOut\":\n\n            actions.push(element.addEventListener(\"mouseleave\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseleave\", function(){\n                    self.setState(\"MouseOut\")\n                    setTimeout(function(){self.removeState(\"MouseOut\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n    }\n\n\n    if (actions.length > 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get action element\n * -----------------------------------------------------------------------------\n * @param  {string} request                                                     The request\n * @return {object}                                                             An object with 2 properties: request && element\n */\nJss.prototype.getActionElement = function(request) {\n    var self = this;\n    var prefix = false;\n    var newRequest  = request;\n    var element = self.element;\n    // Set prefix if it exists\n    if (request.indexOf(\".\") > 0) {\n        var t       = request.split(\".\"),\n        newRequest  = t[1];\n        prefix      = t[0];\n        t = undefined;\n    }\n\n    // Update element according the prefix (or skip it, if not set)\n    if (prefix !== false) {\n        switch (prefix) {\n            case \"screen\":\n            case \"window\":\n                element = window;\n            break;\n        }\n    }\n\n    // Return object\n    return {\n        request: newRequest,\n        element: element\n    }\n}\n/**\n * -----------------------------------------------------------------------------\n * Class name prefix\n * -----------------------------------------------------------------------------\n * The prefix equals the modulename, or - when it's a trigger object - modulename--triggername\n *\n * @return {string} The classname\n */\nJss.prototype.classNamePrefix = function() {\n    if (this.type == \"JssTrigger\") {\n        return this.moduleName + \"--\" + this.triggerName;\n    } else {\n        return this.moduleName;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Remove class name\n * -----------------------------------------------------------------------------\n * Removes the `this.element` classname\n * \t- \"all\" || undefined        > Removes ALL classnames\n *  - \"allStates\" || \"states\"   > Remove all STATES\n *  - all other strings remove that specific string from the className\n *\n * @param {string} input                                                        The classname (case-sensitive) which needs to be removed\n * @return {undefined}\n */\nJss.prototype.removeClassName = function(input) {\n\n    var classList  = [];\n\n    if (input == \"all\" || typeof input == \"undefined\") {\n\n        this.element.className = \"\";\n\n    } else if (input == \"states\" || input == \"allStates\") {\n\n        classList = this.element.className.split(\" \");\n        for (var i in classList) {\n            className = classList[i];\n            if (className.indexOf(\"__is\") > -1) {\n                delete classList[i];\n            }\n        }\n        this.element.className = classList.join(\" \");\n\n    } else if(typeof input == \"string\") {\n        this.element.className = this.element.className.replace(input,\"\");\n    } else {\n        console.error(\"removeClassName: parameter should be a string\");\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Add class name\n * -----------------------------------------------------------------------------\n * Adds a class name by string or array.\n * Does NOT check for duplicates\n *\n * @param  {string} The classname to be added\n * @return {undefined}\n */\nJss.prototype.addClassName = function(data) {\n    this.element.className += \" \";\n    if (typeof data == \"string\") {\n        this.element.className += data;\n    } else {\n        this.element.className += data.join(\" \")\n    }\n}\n\n/**\n * List where the keys corresponds with this[key], and where the value is the function to be executed when the var is changed.\n */\nJss.prototype.setterWatchList = {};\nJss.prototype.getterWatchList = {};\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add data\n * -----------------------------------------------------------------------------\n * Add a (default) value for the given attribute.\n *\n * @param {string} attribute                                                    The name of the attribute (this[attribute])\n * @param {*} value                                                             The value of this[attribute], could be anything...\n * @param {object} options\n *           \t\t- setterWatchFunction {function}\n *           \t\t- getterWatchFunction {function}\n */\nJss.prototype.addData = function(attribute, value, options) {\n\n\n    // watchList[key] = fn;\n    var setterWatchFunction = JssService.getOption('setterWatchFunction', options); // Function\n    var getterWatchFunction = JssService.getOption('getterWatchFunction', options); // Function\n\n    if (typeof setterWatchFunction === \"function\") {\n        this.setterWatchList[attribute] = setterWatchFunction;\n    }\n\n    if (typeof getterWatchFunction === \"function\") {\n        this.getterWatchList[attribute] = getterWatchFunction;\n    }\n\n    // Set the default value\n    return this[attribute] = value;\n}\n\n\n\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- ajax {string} url\n */\nJss.prototype.setData = function(attribute, value, options) {\n\n    this[attribute] = value;\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n\n    if (Array.isArray(fallback)) {\n\n        for (var i = 0; i < fallback.length; i++) {\n            var type = fallback[i];\n\n            if (value && value.length > 0) {\n                this['setData' + JssService.toCamelCase(type)](attribute, value); // Call this.addDataAttribute(value) || this.addDataCookie(value) etc...\n                this[attribute] = value;\n            }\n        }\n    }\n\n    // Call the setter watch function, if defined;\n    if (typeof this.setterWatchList[attribute] === \"function\") { // Use the watchlist to add functionality whenever a data attribute is updated\n        this.setterWatchList[attribute]();\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataDefault {boolean}\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- dataAjax {string} url\n */\nJss.prototype.getData = function(attribute, options) {\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n    var value = false;\n\n\n    if (!fallback) {\n        fallback = ['attribute'];\n    }\n\n\n    for (var i = 0; i < fallback.length; i++) {\n        var type = JssService.toCamelCase(fallback[i]);\n        var customOptions = false;\n\n        if (typeof options == \"object\") {\n            customOptions = options[fallback[i].toLowerCase()];\n        }\n\n        if (!value || value.length < 0) {\n            if (typeof this['getData' + type] !== \"function\") {\n                console.error('this.getData' + type + ' is not a function. Probably ' + type + ' is not a available data option');\n                continue;\n            }\n            value = this['getData' + type]( attribute, customOptions ); // Call this.getDataAttribute(value) || this.getDataCookie(value) || this.getDataAjax(value) etc...\n        }\n    }\n    console.log(this.getterWatchList);\n    // Call the getter watch function, if defined;\n    if (typeof this.getterWatchList[attribute] == \"function\") {\n        this.getterWatchList[attribute]();\n    }\n\n    return this[attribute] = value;\n}\n/**\n * -----------------------------------------------------------------------------\n * Get data: Ajax\n * -----------------------------------------------------------------------------\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n *\n * @param {string} attribute                                                    The NAME of the inner variable (this.NAME), is also used as the key for the GET Request {NAME: value}\n * @param {object} options                                                      Object with parameters used to make a GET request\n * @return {string}                                                             The value of the given attribute, or false if an erro occured.\n */\nJss.prototype.getDataAjax = function(attribute, options) {\n    var url = JssService.getOption(\"url\", options);\n    var jsonKey = JssService.getOption(\"jsonKey\", options) || attribute;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('GET', url);\n\n        return ajaxReturn.success(function(result){\n            if (typeof result === \"object\") {\n                if (result[jsonKey]) {\n                    return result[jsonKey];\n                }\n            }\n        }).error(function(errorObject){\n            console.log(errorObject);\n        });\n    }\n\n    return false;\n};\n\n/**\n * -----------------------------------------------------------------------------\n * Set data: Ajax\n * -----------------------------------------------------------------------------\n * Makes a post request to the options.url in a object {attribute: value}\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n */\nJss.prototype.setDataAjax = function(attribute, value, options) {\n    var url = JssService.getOption(\"url\", options);\n    var requestObject = {}\n        requestObject[attribute] = value;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('POST', url, requestObject);\n\n        return ajaxReturn.success(function(result){\n            return true;\n        }).error(function(errorObject){\n            console.log(errorObject);\n            return false;\n        });\n    }\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Ajax (helper function)\n * -----------------------------------------------------------------------------\n * Based on Atom.js by Todd Motto\n * http://toddmotto.com/writing-a-standalone-ajax-xhr-javascript-micro-library/\n */\nJss.prototype.ajaxHelper = {\n    // Parses json if possible, otherwise just return text\n    parse: function(req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return [result, req];\n    },\n\n    xhr: function(type, url, data) {\n        var ajaxHelper = this;\n\n        var methods = {\n            success: function() {},\n            error: function() {}\n        };\n        var XHR = XMLHttpRequest || ActiveXObject;\n        var request = new XHR('MSXML2.XMLHTTP.3.0');\n        request.open(type, url, true);\n        request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n\n        request.onreadystatechange = function() {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    methods.success.apply(methods, ajaxHelper.parse(request));\n                } else {\n                    methods.error.apply(methods, ajaxHelper.parse(request));\n                }\n            }\n        };\n        request.send(data);\n        return {\n            success: function(callback) {\n                methods.success = callback;\n                return methods;\n            },\n            error: function(callback) {\n                methods.error = callback;\n                return methods;\n            }\n        };\n    }\n};\n\nJss.prototype.ajax = {\n    // Get\n    get: function(src) {\n        console.log(this);\n    },\n\n    // Set\n    put: function(url, data) {\n        return this.ajaxHelper.xhr('PUT', url, data);\n    },\n\n    // Add\n    post: function(url, data) {\n        return this.ajaxHelper.xhr('POST', url, data);\n    }\n\n};\n/**\n * -----------------------------------------------------------------------------\n * Get data attribute value\n * -----------------------------------------------------------------------------\n * Returns the value of the requested attribute. Search first for a data-[ATTRIBUTE] value\n * If not found, it checks for the attribute in the default object. When that is not being\n * found neither, the normal this[attribute] value is being returned.\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME)\n * @return {string}                                                             The value of the given attribute\n */\nJss.prototype.getDataAttribute = function(attribute) {\n\n    return this.element.dataset[attribute];\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Update data attribute\n * -----------------------------------------------------------------------------\n * Set the value to the given attribute. And updates the data-[ATTRIBUTE] value\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME=\"value\")\n * @param {string} value                                                        The VALUE of the data attribute (data-name=\"VALUE\")\n * @return {undefined}\n */\n\nJss.prototype.setDataAttribute = function(attribute, value) {\n\n    // Update data attribute\n    if (typeof value !== \"undefined\") {\n        this.element.dataset[attribute] = this[attribute];\n    } else {\n        delete this.element.dataset[attribute];\n    }\n\n    return true;\n}\nJss.prototype.dataDefaultsCookie = {\n    'expireData': undefined\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get cookie value\n * -----------------------------------------------------------------------------\n * Returns cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @return {string}                                                             The VALUE of the given attribute\n */\nJss.prototype.getDataCookie = function(attribute) {\n\n    if (!attribute) { return null; }\n    return decodeURIComponent(document.cookie.replace(new RegExp(\"(?:(?:^|.*;)\\\\s*\" + encodeURIComponent(attribute).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"), \"$1\")) || null;\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data cookie\n * -----------------------------------------------------------------------------\n * Updates the cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @param {string} value                                                        The VALUE of the cookie\n * @return {undefined}\n */\n\nJss.prototype.setDataCookie = function(attribute, value, options) {\n    var endDate, path, domain, secureConnection;\n\n    if (typeof options === \"object\") {\n        endDate = JssService.getOption('endDate', options);\n        path    = JssService.getOption('path', options);\n        domain  = JssService.getOption('domain', options);\n        secureConnection = JssService.getOption('secureConnection', options);\n    }\n\n    if (!attribute || /^(?:expires|max\\-age|path|domain|secure)$/i.test(attribute)) { return false; }\n    var sExpires = \"\";\n    if (endDate) {\n      switch (endDate.constructor) {\n        case Number:\n          sExpires = endDate === Infinity ? \"; expires=Fri, 31 Dec 9999 23:59:59 GMT\" : \"; max-age=\" + endDate;\n          break;\n        case String:\n          sExpires = \"; expires=\" + endDate;\n          break;\n        case Date:\n          sExpires = \"; expires=\" + endDate.toUTCString();\n          break;\n      }\n    }\n\n    document.cookie = encodeURIComponent(attribute) + \"=\" + encodeURIComponent(value) + sExpires + (domain ? \"; domain=\" + domain : \"\") + (path ? \"; path=\" + path : \"\") + (secureConnection ? \"; secure\" : \"\");\n    return true;\n}\n/*******************************************************************************\n\n    Styles\n\n*******************************************************************************/\n\n/**\n * -----------------------------------------------------------------------------\n * Set height\n * -----------------------------------------------------------------------------\n * Sets the height of the `this.element` by the given input (height)\n *\n * @param  {number} height                                                      The height in pixels or percentage. Where numbers will be calculated to pixels so giving a height of 50 will result in a height of \"50px\". If you want percentages pass the variable with a percentage sign 50 + \"%\"\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setHeight = function(height) {\n    if (typeof height === \"number\") {\n        height += \"px\";\n    }\n\n    if (typeof height !== \"string\") {\n        throw(\"parameter height needs to be a string or integer\");\n    }\n\n    this.element.style.height = height;\n    return true;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get height\n * -----------------------------------------------------------------------------\n * Returns the height of the `this.element`\n *\n * @return {number}                                                             The height of the element in pixels\n */\nJss.prototype.getHeight = function() {\n    return this.element.offsetHeight;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set width\n * -----------------------------------------------------------------------------\n * Sets the width of the `this.element` by the given input (width)\n *\n * @param  {number} width                                                       The width in pixels or percentage. Where numbers will be calculated to pixels so giving a width of 50 will result in a width of \"50px\". If you want to set a percentage, just pass the variable with a percentage sign (\"50%\")\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setWidth = function(width) {\n    if (typeof width == \"number\") {\n        width += \"px\";\n    }\n\n    if (typeof width !== \"string\") {\n        throw(\"parameter width needs to be a string or integer\");\n    }\n    this.element.style.width = width;\n    return true;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get width\n * -----------------------------------------------------------------------------\n * Returns the width of the `this.element`\n *\n * @return {number}                                                             The width of the element in pixels\n */\nJss.prototype.getWidth = function() {\n    return this.element.offsetWidth;\n}\n/**\n * -----------------------------------------------------------------------------\n * Set State\n * -----------------------------------------------------------------------------\n * This updates the state of the object. States are being added to the class name prefix with a double underscore.\n * If you would have the module `envelope` and give it the state `open`. The class name `envelope__open` will be added.\n * Whenever you remove the state `open`, the according class name will be removed as well.\n *\n * @param  {string} str                                                         The name of the state which should be set (this is transformed to CamelCase)\n * @return {boolean}                                                            True on success, otherwise false (might already have the state)\n */\nJss.prototype.setState = function(str) {\n    var element, verifiedState, state, className;\n\n    element         = this.element;\n    state           = JssService.toCamelCase(str);\n    className       = this.classNamePrefix() + \"__is\" + state;\n\n    // Check if this.state is an array, and make it one if not.\n    if (Array.isArray(this.state) == false ) {\n        this.state = [];\n    }\n\n    // This if statement prevents that the same state is being set multiple times\n    if ( !this.hasState(str) ) {\n        this.addClassName(className)\n        this.state.push(state);\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Has state\n * -----------------------------------------------------------------------------\n * Checks if the parameter is already a state and returns true if so. Otherwise false.\n *\n * @param  {string} str                                                         The state which will be checked for\n * @return {boolean}                                                            True if it has the given state, otherwise false\n */\nJss.prototype.hasState = function(str) {\n    if (typeof this.state == \"object\" && this.state.indexOf(str) >= 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Remove state\n * -----------------------------------------------------------------------------\n * Removes the state from the states array, and from the element.className\n *\n * @param  {string} str                                                         The name of the state which should be removed\n * @return {undefined}\n */\nJss.prototype.removeState = function(str) {\n\n    var state      = JssService.toCamelCase(str);\n    var stateIndex = this.state.indexOf(state);\n\n    if (str == \"all\" || typeof str == \"undefined\") {\n        this.removeClassName(\"states\");\n    } else {\n        this.state.splice(stateIndex, 1);\n        if (typeof this.moduleAction != \"undefined\" && this.moduleAction.length > -1) {\n            this.removeClassName(this.classNamePrefix() + \"\" + this.moduleAction + \"__is\" + state);\n        } else {\n            this.removeClassName(this.classNamePrefix() + \"__is\" + state);\n        }\n    }\n}\n\n\n// A simple way to watch variables\n\n// addVar(keyName, value, watch_function)\n// setVar(keyName, value)\n// getVar(keyName)\n// Add -> new\n// Set -> update\n// Get -> return\nvar JssModule = function(){};\n\nJssModule.prototype.type               = \"JssModule\";\nJssModule.prototype.init               = Jss.prototype.init;\nJssModule.prototype.setElement         = Jss.prototype.setElement;\n\n// Triggers\nJssModule.prototype.findTriggers       = Jss.prototype.findTriggers;\nJssModule.prototype.configureTrigger      = Jss.prototype.configureTrigger;\n\n// Actions\n//JssModule.prototype.actions            = Object.create(Jss.prototype.actions);\nJssModule.prototype.validateAction     = Jss.prototype.validateAction;\nJssModule.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssModule.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssModule.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssModule.prototype.setState           = Jss.prototype.setState;\nJssModule.prototype.hasState           = Jss.prototype.hasState;\nJssModule.prototype.removeState        = Jss.prototype.removeState;\n\n// Data attributes\nJssModule.prototype.addData            = Jss.prototype.addData;\nJssModule.prototype.getData            = Jss.prototype.getData;\nJssModule.prototype.setData            = Jss.prototype.setData;\nvar JssTrigger = function(element, options) {\n    this.setElement(element);\n\n    if (typeof options === \"object\") {\n        if (typeof options.module === \"object\") {\n            this.module = options.module;\n        }\n        if (typeof options.moduleName === \"string\") {\n            this.moduleName = options.moduleName;\n        }\n        if (typeof options.triggerName === \"string\") {\n            this.triggerName = options.triggerName;\n        }\n    }\n}\n\n\nJssTrigger.prototype                    = Object.create(Jss.prototype);\nJssTrigger.prototype.type               = \"JssTrigger\";\nJssTrigger.prototype.setElement         = Jss.prototype.setElement;\n\n// Actions\n//JssTrigger.prototype.actions            = Object.create(Jss.prototype.actions);\nJssTrigger.prototype.validateAction     = Jss.prototype.validateAction;\nJssTrigger.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssTrigger.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssTrigger.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssTrigger.prototype.setState           = Jss.prototype.setState;\nJssTrigger.prototype.hasState           = Jss.prototype.hasState;\nJssTrigger.prototype.removeState        = Jss.prototype.removeState;\n\n\n\nvar  JssController = {};\nJssController.modules \t\t= []; // Result array with objects of all the found modules\nJssController.activeModules \t= JssService.activeModules;\n\nJssController.findModules = function() {\n    var allElements = document.getElementsByTagName(\"*\");                       // Array with all domElements\n    var test = [];\n    var self = this;\n    for (var i=0; i < allElements.length; i++) {\n\n        // Set default vars //\n        var element = allElements[i];                                           // Specific domElement\n        var tmp = false;\n\n        // Loop through the (active) modules array and add/instantiate them\n        self.activeModules.forEach(function(module){\n            if (JssService.isModule(element, module)) {\n                tmp = eval(\"new \" + JssService.toCamelCase(module) + \"(element)\"); // Dynamicly load modules\n\n                tmp.setElement(element);                                        // Add the domElement to the module\n                tmp.findTriggers();\t\t\t                                    // Search for module triggers\n\n                tmp.init();\t\t\t\t\t                                    // Executes everything within the init function\n                self.modules.push(tmp);\n\n            }\n        }); // End forEach\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    JssController.findModules();\n    console.log(JssController);\n});"
          },
          "params": [
            {
              "title": "param",
              "description": "The request",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "request"
            }
          ],
          "returns": [
            {
              "title": "returns",
              "description": "An object with 2 properties: request && element",
              "type": {
                "type": "NameExpression",
                "name": "object"
              }
            }
          ],
          "name": "getActionElement",
          "kind": "function",
          "memberof": "Jss",
          "scope": "instance",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            "Jss",
            "getActionElement"
          ]
        },
        {
          "description": "-----------------------------------------------------------------------------\nGet data\n-----------------------------------------------------------------------------",
          "tags": [
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "attribute"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "AllLiteral"
              },
              "name": "value"
            },
            {
              "title": "param",
              "description": "dataDefault {boolean}\n       \t\t\t\t- dataAttribute {boolean}\n       \t\t\t\t- dataAjax {string} url",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "options"
            },
            {
              "title": "name",
              "name": "getData"
            },
            {
              "title": "kind",
              "kind": "function"
            },
            {
              "title": "memberof",
              "description": "Jss"
            },
            {
              "title": "instance"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 744,
                "column": 0
              },
              "end": {
                "line": 791,
                "column": 0
              }
            },
            "file": "/Users/jeffreyarts/Documents/DEV/jss/lib/jss.js",
            "code": "JssService = {};\n\n// Edit this array to enable or disable default modules\nJssService.activeModules   = []\n\n// Set this to false in a live environment\nJssService.dev             = true;\n\n/**************************\n*\n*   Below are core properties defined, becarefull when you think of changing these...\n*\n**************************/\n\n\nJssService.actions = {\n    hover:      ['hover',    'mouseover',   'onmouseover'                       ], // Fixed\n    click:      ['click',    'onclick'                                          ], // Fixed\n    mouseIn:    ['mousein',  'onmousein', 'mouseenter', 'onmouseenter'          ], // Fixed\n    mouseOut:   ['mouseout', 'onmouseout', 'mouseleave', 'onmouseleave'         ], // Fixed\n    resize:     ['resize',   'onresize'                                         ], // Fixed\n    focus:      ['focus',    'onfocus'                                          ],\n    keyDown:    ['keydown',  'keypress'                                         ],\n    keyUp:      ['keyup',    'keyrelease'                                       ],\n    change:     ['change',   'onchange'                                         ],\n};\n\nJssService.enterDelay = 1000;                                                   // Amount of miliseconds which is used to remove the entered state. (see core.actions) JssService.enterDelay setTimeout\n\nJssService.forbiddenProperties = [\n    'type',\n    'triggers',\n    'configureTrigger',\n    'findTriggers'\n];\n\n/**\n * -----------------------------------------------------------------------------\n * Is Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isModule = function(element, moduleName) {\n    var arr = element.className.split(\" \");\n    var found = false;\n\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i].indexOf(moduleName)        > -1 &&\n            arr[i].indexOf(moduleName + \"_\") == -1 &&\n            arr[i].indexOf(moduleName + \"-\") == -1)\n        {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.addModule = function(moduleName) {\n    this.activeModules.push(this.toKebabCase(moduleName))\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To CamelCase\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toCamelCase = function(input) {\n    var arr, res;\n    res = \"\";\n    if (typeof input === \"string\") {\n        input = input.replace(/\\-/g,\" \");                                       // Replace all dashes with spaces\n        arr = input.split(\" \");\n    } else {\n        arr = input;                                                            // Assume it is an array\n    }\n\n\n\n    var i = 0;\n    for (var i in arr) {\n        if (typeof i != \"undefined\") {\n            res += arr[i][0].toUpperCase()+ arr[i].slice(1); // Capitalize first letter\n        }\n    }\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To kebab-case\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toKebabCase = function(input) {\n    var res, str;\n    res = \"\";\n\n    if (typeof input === \"string\") {\n        str = input;\n    } else {                                                                    // Assume it is an array\n        str = input.join(\" \");\n    }\n\n    // First change it to camelcase\n    str = this.toCamelCase(str);\n\n    var max = str.length;\n    for (var i=0; i < max; i++) {\n        // Check if character is uppercase\n        if (str[i] != str[i].toLowerCase()) {\n            if (i!==0) {\n                str = str.substr(0, i) + \"-\" + str.substr(i);\n                i++;\n            }\n        }\n    }\n\n    return res = str.toLowerCase();\n}\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get option\n * -----------------------------------------------------------------------------\n * @param  {string} name                                                        Keyname in optionList\n * @param  {array} optionList                                                   Array with all possible options\n * @return {}                                                                   Copy of the value (optionsList[name])\n */\nJssService.getOption = function(name, optionList) {\n    if (typeof optionList !== \"object\") {\n        return false;\n    }\n\n    var res;\n\n    switch (name) {\n\n        // Only set `addDefaults` to false when it is explicitly set.\n        case \"addDefaults\":\n            if (optionList[name] !== false || typeof optionList[name] === \"undefined\") {\n                res = true;\n            } else {\n                res = false;\n            }\n        break;\n        case \"fallback\":\n            if ( Array.isArray(optionList[name]) ) {\n                res = optionList[name];\n                if (res.length===0) {\n                    res = false;\n                }\n            } else if (typeof optionList[name] === \"string\"){\n                res = [optionList[name]];\n            }\n        break;\n        default:\n        res = optionList[name]\n    }\n\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Is Trigger\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isTrigger = function(element, moduleName) {\n    if (element.className.indexOf(moduleName + \"--\") > -1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get trigger name\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {string} Name of the trigger.\n */\nJssService.getTriggerName = function(element, moduleName) {\n    if (typeof element != \"object\") {\n        console.error('Required first argument `element` needs to be a domElement.');\n        return false;\n    }\n    if (typeof moduleName != \"string\") {\n        console.error('Required second argument `moduleName` needs to be a string.');\n        return false;\n    }\n\n    // As an example we assume that the value of element.className equals 'b module--triggerName'\n    var startPos = element.className.indexOf(moduleName + \"--\");                    // 2\n    var sliced = element.className.slice(startPos, element.className.length )       // 'module--triggerName'\n    var endPos = sliced.indexOf(\" \");                                               // -1       // not found\n    if (endPos != -1) {                                                             // 19\n        sliced = sliced.slice(0,endPos);                                            // if there is more after the string, this will remove it\n    }\n    return sliced.replace(moduleName + \"--\",\"\")\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger name is allowed\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} True if the triggername is allowed, otherwise false.\n */\nJssService.triggerNameIsAllowed = function(element, moduleName) {\n    if (JssService.forbiddenProperties.indexOf(this.getTriggerName(element, moduleName)) > -1) {      // This triggerName is a core property, throw error\n        console.error('Triggername `' + getTriggerName(element,moduleName) + '` is not allowed. Change the trigger so it does not corresponds any of these: ' + JssService.forbiddenProperties)\n        return false;\n    }\n    return true;\n}\n/**\n * @module Jss\n * @author      Jeffrey Arts <sjeffff@gmail.com>\n * @copyright   2015\n */\nJss = function(){};\n\nJss.prototype.type      = \"Jss\"\nJss.prototype.triggers  = false;\nJss.prototype.element   = undefined;                                              // {obj} domElement\nJss.prototype.state     = undefined;                                              // {str} State of module, is reflected by the css class __isState\n\n/**\n * -----------------------------------------------------------------------------\n * Find Triggers\n * -----------------------------------------------------------------------------\n *\n * @param {domElement} element\n * @return {undefined}\n */\nJss.prototype.findTriggers = function(element) {\n    this.triggers = [];                                                         // If this is not set, all modules will have the same reference point to this.triggers.\n    // Module is created, now look for any module triggers\n    this.searchTriggersRecursiveInnerFunction(this.element)\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger\n * -----------------------------------------------------------------------------\n */\nJss.prototype.trigger = function(which, fn) {\n    if (typeof this.triggers !== \"object\") {\n        console.info(\"No triggers are found, please specify them in the css as `module-name--trigger-name`.\");\n        return false;\n    }\n\n    if (typeof this.triggers[which] !== \"object\") {\n        console.info(\"You are trying to execute a function on a non existing trigger `\" + which + \"`\");\n        return false;\n    }\n\n    for (var i = 0; i < this.triggers[which].length; i++) {\n        fn(this.triggers[which][i])\n    }\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Search triggers recursive inner function\n * -----------------------------------------------------------------------------\n * Recursive function which is executed bij findTriggers;\n *\n * @return {undefined}\n */\nJss.prototype.searchTriggersRecursiveInnerFunction = function(element) {\n    var self = this;\n    if (typeof element == \"undefined\" ) {\n        element = this.element;\n    }\n    if ( element.hasChildNodes() ) {\n        for (var i=0; i < element.childNodes.length; i++) {\n\n            var childElement = element.childNodes[i];                           // Improve readability\n\n            if (childElement.nodeType == 1) {                                   // NodeType 1 == domElement\n\n                if (JssService.isTrigger(childElement, this.moduleName)) {\n\n                    // Add a child element\n                    if (JssService.triggerNameIsAllowed(childElement, this.moduleName)) {\n                        var triggerName = JssService.getTriggerName(childElement, this.moduleName)\n\n                        if (typeof self.triggers[triggerName] !== \"object\") {\n                            self.triggers[triggerName] = [];\n                        }\n\n                        var tmp = new JssTrigger(childElement, {\n                            module: self,\n                            moduleName: this.moduleName,\n                            triggerName: triggerName,\n                        });\n\n                        self.triggers[triggerName].push(tmp);\n                    }\n                }\n                if (childElement.hasChildNodes()) {\n                    self.searchTriggersRecursiveInnerFunction(childElement)\n                }\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Configure Trigger\n * -----------------------------------------------------------------------------\n *\n * @return {undefined}\n */\nJss.prototype.configureTrigger = function(trigger, fn) {\n    if ( typeof this.triggers[trigger] == \"object\") {\n\n        for (var i = 0; i < this.triggers[trigger].length; i++) {\n            //self.triggers[trigger][i]\n            fn(this.triggers[trigger][i]);\n        }\n\n    } else if (JssService.dev) {\n        console.error(\"You are trying to configure a trigger which has no attached domElement\")\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n *   Init\n * -----------------------------------------------------------------------------\n * Notice the user that a init function needs to be added for controlling the triggers\n *\n * @return {undefined}\n */\nJss.prototype.init = function(func) {\n    if (JssService.dev) {\n        console.info(this.moduleName + \": Add a prototype.init function to add triggers and stuff\")\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set element\n * -----------------------------------------------------------------------------\n * Add a domElement to `this`\n *\n * @return {undefined}\n */\nJss.prototype.setElement = function(element) {\n    if (typeof element == \"undefined\") {\n        if (JssService.dev) {\n            return console.error(\"First parameter of setElement needs to be a domElement\");\n        }\n    }\n    this.element = element;\n}\n/*******************************************************************************\n   *\n   *\tActions\n   *\n   *  \t@author      Jeffrey Arts <sjeffff@gmail.com>\n   *    @copyright   2015\n   *\n*******************************************************************************/\n/**\n * -----------------------------------------------------------------------------\n *   Validate action\n * -----------------------------------------------------------------------------\n * Checks if parameter is a valid action, and logs an error when not.\n *\n * @param {string} request                                                      The name of the request\n * @return {boolean} true if a action is valid, otherwise false.\n */\nJss.prototype.validateAction = function(request) {\n    var result;\n    request = this.getActionElement(request).request\n    for (var action in JssService.actions) {\n        if (JssService.actions[action].indexOf(request.toLowerCase()) > -1) {\n            result = action;\n            break;\n        }\n    }\n    if (result) {\n        return result;\n    } else {\n        console.error(\"validateAction: unknown request\", request);\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * \t Add Action\n * -----------------------------------------------------------------------------\n * Adds an action to the object, list of possible requests can be found in Jss.actions\n *\n * | Options\n * \t\t- addDefaults {boolean}                                                 True: add default classes, false: don't\n *\n *\n *\n * @param {string} request                                                      The name of the request\n * @param {function} fn                                                         The function which should be triggered\n * @param {object} options                                                      Object with option parameters\n * @return {boolean} true if a action is succesfully added, otherwise false.\n */\nJss.prototype.addAction = function(request, fn, options) {\n\n    var self        = this;\n    var action      = self.validateAction(request)\n    var actions     = [];\n    var t = self.getActionElement(request);\n    var element     = t.element;\n    var request     = t.request;\n    t = undefined;\n\n    // Options\n    var addDefaults = JssService.getOption(\"addDefaults\", options);\n\n\n\n    switch (action) {\n\n        case \"resize\":\n\n            actions.push(element.addEventListener(\"resize\", fn));\n\n        break;\n\n\n        case \"click\":\n            actions.push(element.addEventListener(\"click\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"click\", function(){\n                    self.setState(\"Clicked\")\n                }));\n                actions.push(window.addEventListener( \"click\", function(event) {\n                    if (event.target != self.element && self.hasState(\"Clicked\")) {\n                        self.removeState(\"Clicked\")\n                    }\n                }));\n            } // End addDefaults\n        break;\n\n\n        case \"change\":\n            actions.push(element.addEventListener(\"change\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"change\", function(){\n                    self.setState(\"Changed\")\n                    setTimeout(function(){self.removeState(\"Changed\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"hover\":\n            actions.push(element.addEventListener(\"mouseover\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseover\", function(){\n                    self.setState(\"Hover\")\n                }));\n                actions.push(element.addEventListener(\"mouseout\",  function(){\n                    self.removeState(\"Hover\")\n                }));\n            }\n        break;\n\n\n        case \"mouseIn\":\n\n            actions.push(element.addEventListener(\"mouseenter\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseenter\", function(){\n                    self.setState(\"MouseIn\")\n                    setTimeout(function(){self.removeState(\"MouseIn\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"mouseOut\":\n\n            actions.push(element.addEventListener(\"mouseleave\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseleave\", function(){\n                    self.setState(\"MouseOut\")\n                    setTimeout(function(){self.removeState(\"MouseOut\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n    }\n\n\n    if (actions.length > 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get action element\n * -----------------------------------------------------------------------------\n * @param  {string} request                                                     The request\n * @return {object}                                                             An object with 2 properties: request && element\n */\nJss.prototype.getActionElement = function(request) {\n    var self = this;\n    var prefix = false;\n    var newRequest  = request;\n    var element = self.element;\n    // Set prefix if it exists\n    if (request.indexOf(\".\") > 0) {\n        var t       = request.split(\".\"),\n        newRequest  = t[1];\n        prefix      = t[0];\n        t = undefined;\n    }\n\n    // Update element according the prefix (or skip it, if not set)\n    if (prefix !== false) {\n        switch (prefix) {\n            case \"screen\":\n            case \"window\":\n                element = window;\n            break;\n        }\n    }\n\n    // Return object\n    return {\n        request: newRequest,\n        element: element\n    }\n}\n/**\n * -----------------------------------------------------------------------------\n * Class name prefix\n * -----------------------------------------------------------------------------\n * The prefix equals the modulename, or - when it's a trigger object - modulename--triggername\n *\n * @return {string} The classname\n */\nJss.prototype.classNamePrefix = function() {\n    if (this.type == \"JssTrigger\") {\n        return this.moduleName + \"--\" + this.triggerName;\n    } else {\n        return this.moduleName;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Remove class name\n * -----------------------------------------------------------------------------\n * Removes the `this.element` classname\n * \t- \"all\" || undefined        > Removes ALL classnames\n *  - \"allStates\" || \"states\"   > Remove all STATES\n *  - all other strings remove that specific string from the className\n *\n * @param {string} input                                                        The classname (case-sensitive) which needs to be removed\n * @return {undefined}\n */\nJss.prototype.removeClassName = function(input) {\n\n    var classList  = [];\n\n    if (input == \"all\" || typeof input == \"undefined\") {\n\n        this.element.className = \"\";\n\n    } else if (input == \"states\" || input == \"allStates\") {\n\n        classList = this.element.className.split(\" \");\n        for (var i in classList) {\n            className = classList[i];\n            if (className.indexOf(\"__is\") > -1) {\n                delete classList[i];\n            }\n        }\n        this.element.className = classList.join(\" \");\n\n    } else if(typeof input == \"string\") {\n        this.element.className = this.element.className.replace(input,\"\");\n    } else {\n        console.error(\"removeClassName: parameter should be a string\");\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Add class name\n * -----------------------------------------------------------------------------\n * Adds a class name by string or array.\n * Does NOT check for duplicates\n *\n * @param  {string} The classname to be added\n * @return {undefined}\n */\nJss.prototype.addClassName = function(data) {\n    this.element.className += \" \";\n    if (typeof data == \"string\") {\n        this.element.className += data;\n    } else {\n        this.element.className += data.join(\" \")\n    }\n}\n\n/**\n * List where the keys corresponds with this[key], and where the value is the function to be executed when the var is changed.\n */\nJss.prototype.setterWatchList = {};\nJss.prototype.getterWatchList = {};\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add data\n * -----------------------------------------------------------------------------\n * Add a (default) value for the given attribute.\n *\n * @param {string} attribute                                                    The name of the attribute (this[attribute])\n * @param {*} value                                                             The value of this[attribute], could be anything...\n * @param {object} options\n *           \t\t- setterWatchFunction {function}\n *           \t\t- getterWatchFunction {function}\n */\nJss.prototype.addData = function(attribute, value, options) {\n\n\n    // watchList[key] = fn;\n    var setterWatchFunction = JssService.getOption('setterWatchFunction', options); // Function\n    var getterWatchFunction = JssService.getOption('getterWatchFunction', options); // Function\n\n    if (typeof setterWatchFunction === \"function\") {\n        this.setterWatchList[attribute] = setterWatchFunction;\n    }\n\n    if (typeof getterWatchFunction === \"function\") {\n        this.getterWatchList[attribute] = getterWatchFunction;\n    }\n\n    // Set the default value\n    return this[attribute] = value;\n}\n\n\n\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- ajax {string} url\n */\nJss.prototype.setData = function(attribute, value, options) {\n\n    this[attribute] = value;\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n\n    if (Array.isArray(fallback)) {\n\n        for (var i = 0; i < fallback.length; i++) {\n            var type = fallback[i];\n\n            if (value && value.length > 0) {\n                this['setData' + JssService.toCamelCase(type)](attribute, value); // Call this.addDataAttribute(value) || this.addDataCookie(value) etc...\n                this[attribute] = value;\n            }\n        }\n    }\n\n    // Call the setter watch function, if defined;\n    if (typeof this.setterWatchList[attribute] === \"function\") { // Use the watchlist to add functionality whenever a data attribute is updated\n        this.setterWatchList[attribute]();\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataDefault {boolean}\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- dataAjax {string} url\n */\nJss.prototype.getData = function(attribute, options) {\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n    var value = false;\n\n\n    if (!fallback) {\n        fallback = ['attribute'];\n    }\n\n\n    for (var i = 0; i < fallback.length; i++) {\n        var type = JssService.toCamelCase(fallback[i]);\n        var customOptions = false;\n\n        if (typeof options == \"object\") {\n            customOptions = options[fallback[i].toLowerCase()];\n        }\n\n        if (!value || value.length < 0) {\n            if (typeof this['getData' + type] !== \"function\") {\n                console.error('this.getData' + type + ' is not a function. Probably ' + type + ' is not a available data option');\n                continue;\n            }\n            value = this['getData' + type]( attribute, customOptions ); // Call this.getDataAttribute(value) || this.getDataCookie(value) || this.getDataAjax(value) etc...\n        }\n    }\n    console.log(this.getterWatchList);\n    // Call the getter watch function, if defined;\n    if (typeof this.getterWatchList[attribute] == \"function\") {\n        this.getterWatchList[attribute]();\n    }\n\n    return this[attribute] = value;\n}\n/**\n * -----------------------------------------------------------------------------\n * Get data: Ajax\n * -----------------------------------------------------------------------------\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n *\n * @param {string} attribute                                                    The NAME of the inner variable (this.NAME), is also used as the key for the GET Request {NAME: value}\n * @param {object} options                                                      Object with parameters used to make a GET request\n * @return {string}                                                             The value of the given attribute, or false if an erro occured.\n */\nJss.prototype.getDataAjax = function(attribute, options) {\n    var url = JssService.getOption(\"url\", options);\n    var jsonKey = JssService.getOption(\"jsonKey\", options) || attribute;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('GET', url);\n\n        return ajaxReturn.success(function(result){\n            if (typeof result === \"object\") {\n                if (result[jsonKey]) {\n                    return result[jsonKey];\n                }\n            }\n        }).error(function(errorObject){\n            console.log(errorObject);\n        });\n    }\n\n    return false;\n};\n\n/**\n * -----------------------------------------------------------------------------\n * Set data: Ajax\n * -----------------------------------------------------------------------------\n * Makes a post request to the options.url in a object {attribute: value}\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n */\nJss.prototype.setDataAjax = function(attribute, value, options) {\n    var url = JssService.getOption(\"url\", options);\n    var requestObject = {}\n        requestObject[attribute] = value;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('POST', url, requestObject);\n\n        return ajaxReturn.success(function(result){\n            return true;\n        }).error(function(errorObject){\n            console.log(errorObject);\n            return false;\n        });\n    }\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Ajax (helper function)\n * -----------------------------------------------------------------------------\n * Based on Atom.js by Todd Motto\n * http://toddmotto.com/writing-a-standalone-ajax-xhr-javascript-micro-library/\n */\nJss.prototype.ajaxHelper = {\n    // Parses json if possible, otherwise just return text\n    parse: function(req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return [result, req];\n    },\n\n    xhr: function(type, url, data) {\n        var ajaxHelper = this;\n\n        var methods = {\n            success: function() {},\n            error: function() {}\n        };\n        var XHR = XMLHttpRequest || ActiveXObject;\n        var request = new XHR('MSXML2.XMLHTTP.3.0');\n        request.open(type, url, true);\n        request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n\n        request.onreadystatechange = function() {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    methods.success.apply(methods, ajaxHelper.parse(request));\n                } else {\n                    methods.error.apply(methods, ajaxHelper.parse(request));\n                }\n            }\n        };\n        request.send(data);\n        return {\n            success: function(callback) {\n                methods.success = callback;\n                return methods;\n            },\n            error: function(callback) {\n                methods.error = callback;\n                return methods;\n            }\n        };\n    }\n};\n\nJss.prototype.ajax = {\n    // Get\n    get: function(src) {\n        console.log(this);\n    },\n\n    // Set\n    put: function(url, data) {\n        return this.ajaxHelper.xhr('PUT', url, data);\n    },\n\n    // Add\n    post: function(url, data) {\n        return this.ajaxHelper.xhr('POST', url, data);\n    }\n\n};\n/**\n * -----------------------------------------------------------------------------\n * Get data attribute value\n * -----------------------------------------------------------------------------\n * Returns the value of the requested attribute. Search first for a data-[ATTRIBUTE] value\n * If not found, it checks for the attribute in the default object. When that is not being\n * found neither, the normal this[attribute] value is being returned.\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME)\n * @return {string}                                                             The value of the given attribute\n */\nJss.prototype.getDataAttribute = function(attribute) {\n\n    return this.element.dataset[attribute];\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Update data attribute\n * -----------------------------------------------------------------------------\n * Set the value to the given attribute. And updates the data-[ATTRIBUTE] value\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME=\"value\")\n * @param {string} value                                                        The VALUE of the data attribute (data-name=\"VALUE\")\n * @return {undefined}\n */\n\nJss.prototype.setDataAttribute = function(attribute, value) {\n\n    // Update data attribute\n    if (typeof value !== \"undefined\") {\n        this.element.dataset[attribute] = this[attribute];\n    } else {\n        delete this.element.dataset[attribute];\n    }\n\n    return true;\n}\nJss.prototype.dataDefaultsCookie = {\n    'expireData': undefined\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get cookie value\n * -----------------------------------------------------------------------------\n * Returns cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @return {string}                                                             The VALUE of the given attribute\n */\nJss.prototype.getDataCookie = function(attribute) {\n\n    if (!attribute) { return null; }\n    return decodeURIComponent(document.cookie.replace(new RegExp(\"(?:(?:^|.*;)\\\\s*\" + encodeURIComponent(attribute).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"), \"$1\")) || null;\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data cookie\n * -----------------------------------------------------------------------------\n * Updates the cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @param {string} value                                                        The VALUE of the cookie\n * @return {undefined}\n */\n\nJss.prototype.setDataCookie = function(attribute, value, options) {\n    var endDate, path, domain, secureConnection;\n\n    if (typeof options === \"object\") {\n        endDate = JssService.getOption('endDate', options);\n        path    = JssService.getOption('path', options);\n        domain  = JssService.getOption('domain', options);\n        secureConnection = JssService.getOption('secureConnection', options);\n    }\n\n    if (!attribute || /^(?:expires|max\\-age|path|domain|secure)$/i.test(attribute)) { return false; }\n    var sExpires = \"\";\n    if (endDate) {\n      switch (endDate.constructor) {\n        case Number:\n          sExpires = endDate === Infinity ? \"; expires=Fri, 31 Dec 9999 23:59:59 GMT\" : \"; max-age=\" + endDate;\n          break;\n        case String:\n          sExpires = \"; expires=\" + endDate;\n          break;\n        case Date:\n          sExpires = \"; expires=\" + endDate.toUTCString();\n          break;\n      }\n    }\n\n    document.cookie = encodeURIComponent(attribute) + \"=\" + encodeURIComponent(value) + sExpires + (domain ? \"; domain=\" + domain : \"\") + (path ? \"; path=\" + path : \"\") + (secureConnection ? \"; secure\" : \"\");\n    return true;\n}\n/*******************************************************************************\n\n    Styles\n\n*******************************************************************************/\n\n/**\n * -----------------------------------------------------------------------------\n * Set height\n * -----------------------------------------------------------------------------\n * Sets the height of the `this.element` by the given input (height)\n *\n * @param  {number} height                                                      The height in pixels or percentage. Where numbers will be calculated to pixels so giving a height of 50 will result in a height of \"50px\". If you want percentages pass the variable with a percentage sign 50 + \"%\"\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setHeight = function(height) {\n    if (typeof height === \"number\") {\n        height += \"px\";\n    }\n\n    if (typeof height !== \"string\") {\n        throw(\"parameter height needs to be a string or integer\");\n    }\n\n    this.element.style.height = height;\n    return true;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get height\n * -----------------------------------------------------------------------------\n * Returns the height of the `this.element`\n *\n * @return {number}                                                             The height of the element in pixels\n */\nJss.prototype.getHeight = function() {\n    return this.element.offsetHeight;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set width\n * -----------------------------------------------------------------------------\n * Sets the width of the `this.element` by the given input (width)\n *\n * @param  {number} width                                                       The width in pixels or percentage. Where numbers will be calculated to pixels so giving a width of 50 will result in a width of \"50px\". If you want to set a percentage, just pass the variable with a percentage sign (\"50%\")\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setWidth = function(width) {\n    if (typeof width == \"number\") {\n        width += \"px\";\n    }\n\n    if (typeof width !== \"string\") {\n        throw(\"parameter width needs to be a string or integer\");\n    }\n    this.element.style.width = width;\n    return true;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get width\n * -----------------------------------------------------------------------------\n * Returns the width of the `this.element`\n *\n * @return {number}                                                             The width of the element in pixels\n */\nJss.prototype.getWidth = function() {\n    return this.element.offsetWidth;\n}\n/**\n * -----------------------------------------------------------------------------\n * Set State\n * -----------------------------------------------------------------------------\n * This updates the state of the object. States are being added to the class name prefix with a double underscore.\n * If you would have the module `envelope` and give it the state `open`. The class name `envelope__open` will be added.\n * Whenever you remove the state `open`, the according class name will be removed as well.\n *\n * @param  {string} str                                                         The name of the state which should be set (this is transformed to CamelCase)\n * @return {boolean}                                                            True on success, otherwise false (might already have the state)\n */\nJss.prototype.setState = function(str) {\n    var element, verifiedState, state, className;\n\n    element         = this.element;\n    state           = JssService.toCamelCase(str);\n    className       = this.classNamePrefix() + \"__is\" + state;\n\n    // Check if this.state is an array, and make it one if not.\n    if (Array.isArray(this.state) == false ) {\n        this.state = [];\n    }\n\n    // This if statement prevents that the same state is being set multiple times\n    if ( !this.hasState(str) ) {\n        this.addClassName(className)\n        this.state.push(state);\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Has state\n * -----------------------------------------------------------------------------\n * Checks if the parameter is already a state and returns true if so. Otherwise false.\n *\n * @param  {string} str                                                         The state which will be checked for\n * @return {boolean}                                                            True if it has the given state, otherwise false\n */\nJss.prototype.hasState = function(str) {\n    if (typeof this.state == \"object\" && this.state.indexOf(str) >= 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Remove state\n * -----------------------------------------------------------------------------\n * Removes the state from the states array, and from the element.className\n *\n * @param  {string} str                                                         The name of the state which should be removed\n * @return {undefined}\n */\nJss.prototype.removeState = function(str) {\n\n    var state      = JssService.toCamelCase(str);\n    var stateIndex = this.state.indexOf(state);\n\n    if (str == \"all\" || typeof str == \"undefined\") {\n        this.removeClassName(\"states\");\n    } else {\n        this.state.splice(stateIndex, 1);\n        if (typeof this.moduleAction != \"undefined\" && this.moduleAction.length > -1) {\n            this.removeClassName(this.classNamePrefix() + \"\" + this.moduleAction + \"__is\" + state);\n        } else {\n            this.removeClassName(this.classNamePrefix() + \"__is\" + state);\n        }\n    }\n}\n\n\n// A simple way to watch variables\n\n// addVar(keyName, value, watch_function)\n// setVar(keyName, value)\n// getVar(keyName)\n// Add -> new\n// Set -> update\n// Get -> return\nvar JssModule = function(){};\n\nJssModule.prototype.type               = \"JssModule\";\nJssModule.prototype.init               = Jss.prototype.init;\nJssModule.prototype.setElement         = Jss.prototype.setElement;\n\n// Triggers\nJssModule.prototype.findTriggers       = Jss.prototype.findTriggers;\nJssModule.prototype.configureTrigger      = Jss.prototype.configureTrigger;\n\n// Actions\n//JssModule.prototype.actions            = Object.create(Jss.prototype.actions);\nJssModule.prototype.validateAction     = Jss.prototype.validateAction;\nJssModule.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssModule.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssModule.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssModule.prototype.setState           = Jss.prototype.setState;\nJssModule.prototype.hasState           = Jss.prototype.hasState;\nJssModule.prototype.removeState        = Jss.prototype.removeState;\n\n// Data attributes\nJssModule.prototype.addData            = Jss.prototype.addData;\nJssModule.prototype.getData            = Jss.prototype.getData;\nJssModule.prototype.setData            = Jss.prototype.setData;\nvar JssTrigger = function(element, options) {\n    this.setElement(element);\n\n    if (typeof options === \"object\") {\n        if (typeof options.module === \"object\") {\n            this.module = options.module;\n        }\n        if (typeof options.moduleName === \"string\") {\n            this.moduleName = options.moduleName;\n        }\n        if (typeof options.triggerName === \"string\") {\n            this.triggerName = options.triggerName;\n        }\n    }\n}\n\n\nJssTrigger.prototype                    = Object.create(Jss.prototype);\nJssTrigger.prototype.type               = \"JssTrigger\";\nJssTrigger.prototype.setElement         = Jss.prototype.setElement;\n\n// Actions\n//JssTrigger.prototype.actions            = Object.create(Jss.prototype.actions);\nJssTrigger.prototype.validateAction     = Jss.prototype.validateAction;\nJssTrigger.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssTrigger.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssTrigger.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssTrigger.prototype.setState           = Jss.prototype.setState;\nJssTrigger.prototype.hasState           = Jss.prototype.hasState;\nJssTrigger.prototype.removeState        = Jss.prototype.removeState;\n\n\n\nvar  JssController = {};\nJssController.modules \t\t= []; // Result array with objects of all the found modules\nJssController.activeModules \t= JssService.activeModules;\n\nJssController.findModules = function() {\n    var allElements = document.getElementsByTagName(\"*\");                       // Array with all domElements\n    var test = [];\n    var self = this;\n    for (var i=0; i < allElements.length; i++) {\n\n        // Set default vars //\n        var element = allElements[i];                                           // Specific domElement\n        var tmp = false;\n\n        // Loop through the (active) modules array and add/instantiate them\n        self.activeModules.forEach(function(module){\n            if (JssService.isModule(element, module)) {\n                tmp = eval(\"new \" + JssService.toCamelCase(module) + \"(element)\"); // Dynamicly load modules\n\n                tmp.setElement(element);                                        // Add the domElement to the module\n                tmp.findTriggers();\t\t\t                                    // Search for module triggers\n\n                tmp.init();\t\t\t\t\t                                    // Executes everything within the init function\n                self.modules.push(tmp);\n\n            }\n        }); // End forEach\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    JssController.findModules();\n    console.log(JssController);\n});"
          },
          "params": [
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "attribute"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "AllLiteral"
              },
              "name": "value"
            },
            {
              "title": "param",
              "description": "dataDefault {boolean}\n       \t\t\t\t- dataAttribute {boolean}\n       \t\t\t\t- dataAjax {string} url",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "options"
            }
          ],
          "name": "getData",
          "kind": "function",
          "memberof": "Jss",
          "scope": "instance",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            "Jss",
            "getData"
          ]
        },
        {
          "description": "-----------------------------------------------------------------------------\nGet data: Ajax\n-----------------------------------------------------------------------------\n\n\t\t| Options |\n\t\t- url      {string}                                                     The request url\n\t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.",
          "tags": [
            {
              "title": "param",
              "description": "The NAME of the inner variable (this.NAME), is also used as the key for the GET Request {NAME: value}",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "attribute"
            },
            {
              "title": "param",
              "description": "Object with parameters used to make a GET request",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "options"
            },
            {
              "title": "returns",
              "description": "The value of the given attribute, or false if an erro occured.",
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "name",
              "name": "getDataAjax"
            },
            {
              "title": "kind",
              "kind": "function"
            },
            {
              "title": "memberof",
              "description": "Jss"
            },
            {
              "title": "instance"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 791,
                "column": 0
              },
              "end": {
                "line": 811,
                "column": 2
              }
            },
            "file": "/Users/jeffreyarts/Documents/DEV/jss/lib/jss.js",
            "code": "JssService = {};\n\n// Edit this array to enable or disable default modules\nJssService.activeModules   = []\n\n// Set this to false in a live environment\nJssService.dev             = true;\n\n/**************************\n*\n*   Below are core properties defined, becarefull when you think of changing these...\n*\n**************************/\n\n\nJssService.actions = {\n    hover:      ['hover',    'mouseover',   'onmouseover'                       ], // Fixed\n    click:      ['click',    'onclick'                                          ], // Fixed\n    mouseIn:    ['mousein',  'onmousein', 'mouseenter', 'onmouseenter'          ], // Fixed\n    mouseOut:   ['mouseout', 'onmouseout', 'mouseleave', 'onmouseleave'         ], // Fixed\n    resize:     ['resize',   'onresize'                                         ], // Fixed\n    focus:      ['focus',    'onfocus'                                          ],\n    keyDown:    ['keydown',  'keypress'                                         ],\n    keyUp:      ['keyup',    'keyrelease'                                       ],\n    change:     ['change',   'onchange'                                         ],\n};\n\nJssService.enterDelay = 1000;                                                   // Amount of miliseconds which is used to remove the entered state. (see core.actions) JssService.enterDelay setTimeout\n\nJssService.forbiddenProperties = [\n    'type',\n    'triggers',\n    'configureTrigger',\n    'findTriggers'\n];\n\n/**\n * -----------------------------------------------------------------------------\n * Is Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isModule = function(element, moduleName) {\n    var arr = element.className.split(\" \");\n    var found = false;\n\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i].indexOf(moduleName)        > -1 &&\n            arr[i].indexOf(moduleName + \"_\") == -1 &&\n            arr[i].indexOf(moduleName + \"-\") == -1)\n        {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.addModule = function(moduleName) {\n    this.activeModules.push(this.toKebabCase(moduleName))\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To CamelCase\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toCamelCase = function(input) {\n    var arr, res;\n    res = \"\";\n    if (typeof input === \"string\") {\n        input = input.replace(/\\-/g,\" \");                                       // Replace all dashes with spaces\n        arr = input.split(\" \");\n    } else {\n        arr = input;                                                            // Assume it is an array\n    }\n\n\n\n    var i = 0;\n    for (var i in arr) {\n        if (typeof i != \"undefined\") {\n            res += arr[i][0].toUpperCase()+ arr[i].slice(1); // Capitalize first letter\n        }\n    }\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To kebab-case\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toKebabCase = function(input) {\n    var res, str;\n    res = \"\";\n\n    if (typeof input === \"string\") {\n        str = input;\n    } else {                                                                    // Assume it is an array\n        str = input.join(\" \");\n    }\n\n    // First change it to camelcase\n    str = this.toCamelCase(str);\n\n    var max = str.length;\n    for (var i=0; i < max; i++) {\n        // Check if character is uppercase\n        if (str[i] != str[i].toLowerCase()) {\n            if (i!==0) {\n                str = str.substr(0, i) + \"-\" + str.substr(i);\n                i++;\n            }\n        }\n    }\n\n    return res = str.toLowerCase();\n}\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get option\n * -----------------------------------------------------------------------------\n * @param  {string} name                                                        Keyname in optionList\n * @param  {array} optionList                                                   Array with all possible options\n * @return {}                                                                   Copy of the value (optionsList[name])\n */\nJssService.getOption = function(name, optionList) {\n    if (typeof optionList !== \"object\") {\n        return false;\n    }\n\n    var res;\n\n    switch (name) {\n\n        // Only set `addDefaults` to false when it is explicitly set.\n        case \"addDefaults\":\n            if (optionList[name] !== false || typeof optionList[name] === \"undefined\") {\n                res = true;\n            } else {\n                res = false;\n            }\n        break;\n        case \"fallback\":\n            if ( Array.isArray(optionList[name]) ) {\n                res = optionList[name];\n                if (res.length===0) {\n                    res = false;\n                }\n            } else if (typeof optionList[name] === \"string\"){\n                res = [optionList[name]];\n            }\n        break;\n        default:\n        res = optionList[name]\n    }\n\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Is Trigger\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isTrigger = function(element, moduleName) {\n    if (element.className.indexOf(moduleName + \"--\") > -1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get trigger name\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {string} Name of the trigger.\n */\nJssService.getTriggerName = function(element, moduleName) {\n    if (typeof element != \"object\") {\n        console.error('Required first argument `element` needs to be a domElement.');\n        return false;\n    }\n    if (typeof moduleName != \"string\") {\n        console.error('Required second argument `moduleName` needs to be a string.');\n        return false;\n    }\n\n    // As an example we assume that the value of element.className equals 'b module--triggerName'\n    var startPos = element.className.indexOf(moduleName + \"--\");                    // 2\n    var sliced = element.className.slice(startPos, element.className.length )       // 'module--triggerName'\n    var endPos = sliced.indexOf(\" \");                                               // -1       // not found\n    if (endPos != -1) {                                                             // 19\n        sliced = sliced.slice(0,endPos);                                            // if there is more after the string, this will remove it\n    }\n    return sliced.replace(moduleName + \"--\",\"\")\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger name is allowed\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} True if the triggername is allowed, otherwise false.\n */\nJssService.triggerNameIsAllowed = function(element, moduleName) {\n    if (JssService.forbiddenProperties.indexOf(this.getTriggerName(element, moduleName)) > -1) {      // This triggerName is a core property, throw error\n        console.error('Triggername `' + getTriggerName(element,moduleName) + '` is not allowed. Change the trigger so it does not corresponds any of these: ' + JssService.forbiddenProperties)\n        return false;\n    }\n    return true;\n}\n/**\n * @module Jss\n * @author      Jeffrey Arts <sjeffff@gmail.com>\n * @copyright   2015\n */\nJss = function(){};\n\nJss.prototype.type      = \"Jss\"\nJss.prototype.triggers  = false;\nJss.prototype.element   = undefined;                                              // {obj} domElement\nJss.prototype.state     = undefined;                                              // {str} State of module, is reflected by the css class __isState\n\n/**\n * -----------------------------------------------------------------------------\n * Find Triggers\n * -----------------------------------------------------------------------------\n *\n * @param {domElement} element\n * @return {undefined}\n */\nJss.prototype.findTriggers = function(element) {\n    this.triggers = [];                                                         // If this is not set, all modules will have the same reference point to this.triggers.\n    // Module is created, now look for any module triggers\n    this.searchTriggersRecursiveInnerFunction(this.element)\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger\n * -----------------------------------------------------------------------------\n */\nJss.prototype.trigger = function(which, fn) {\n    if (typeof this.triggers !== \"object\") {\n        console.info(\"No triggers are found, please specify them in the css as `module-name--trigger-name`.\");\n        return false;\n    }\n\n    if (typeof this.triggers[which] !== \"object\") {\n        console.info(\"You are trying to execute a function on a non existing trigger `\" + which + \"`\");\n        return false;\n    }\n\n    for (var i = 0; i < this.triggers[which].length; i++) {\n        fn(this.triggers[which][i])\n    }\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Search triggers recursive inner function\n * -----------------------------------------------------------------------------\n * Recursive function which is executed bij findTriggers;\n *\n * @return {undefined}\n */\nJss.prototype.searchTriggersRecursiveInnerFunction = function(element) {\n    var self = this;\n    if (typeof element == \"undefined\" ) {\n        element = this.element;\n    }\n    if ( element.hasChildNodes() ) {\n        for (var i=0; i < element.childNodes.length; i++) {\n\n            var childElement = element.childNodes[i];                           // Improve readability\n\n            if (childElement.nodeType == 1) {                                   // NodeType 1 == domElement\n\n                if (JssService.isTrigger(childElement, this.moduleName)) {\n\n                    // Add a child element\n                    if (JssService.triggerNameIsAllowed(childElement, this.moduleName)) {\n                        var triggerName = JssService.getTriggerName(childElement, this.moduleName)\n\n                        if (typeof self.triggers[triggerName] !== \"object\") {\n                            self.triggers[triggerName] = [];\n                        }\n\n                        var tmp = new JssTrigger(childElement, {\n                            module: self,\n                            moduleName: this.moduleName,\n                            triggerName: triggerName,\n                        });\n\n                        self.triggers[triggerName].push(tmp);\n                    }\n                }\n                if (childElement.hasChildNodes()) {\n                    self.searchTriggersRecursiveInnerFunction(childElement)\n                }\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Configure Trigger\n * -----------------------------------------------------------------------------\n *\n * @return {undefined}\n */\nJss.prototype.configureTrigger = function(trigger, fn) {\n    if ( typeof this.triggers[trigger] == \"object\") {\n\n        for (var i = 0; i < this.triggers[trigger].length; i++) {\n            //self.triggers[trigger][i]\n            fn(this.triggers[trigger][i]);\n        }\n\n    } else if (JssService.dev) {\n        console.error(\"You are trying to configure a trigger which has no attached domElement\")\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n *   Init\n * -----------------------------------------------------------------------------\n * Notice the user that a init function needs to be added for controlling the triggers\n *\n * @return {undefined}\n */\nJss.prototype.init = function(func) {\n    if (JssService.dev) {\n        console.info(this.moduleName + \": Add a prototype.init function to add triggers and stuff\")\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set element\n * -----------------------------------------------------------------------------\n * Add a domElement to `this`\n *\n * @return {undefined}\n */\nJss.prototype.setElement = function(element) {\n    if (typeof element == \"undefined\") {\n        if (JssService.dev) {\n            return console.error(\"First parameter of setElement needs to be a domElement\");\n        }\n    }\n    this.element = element;\n}\n/*******************************************************************************\n   *\n   *\tActions\n   *\n   *  \t@author      Jeffrey Arts <sjeffff@gmail.com>\n   *    @copyright   2015\n   *\n*******************************************************************************/\n/**\n * -----------------------------------------------------------------------------\n *   Validate action\n * -----------------------------------------------------------------------------\n * Checks if parameter is a valid action, and logs an error when not.\n *\n * @param {string} request                                                      The name of the request\n * @return {boolean} true if a action is valid, otherwise false.\n */\nJss.prototype.validateAction = function(request) {\n    var result;\n    request = this.getActionElement(request).request\n    for (var action in JssService.actions) {\n        if (JssService.actions[action].indexOf(request.toLowerCase()) > -1) {\n            result = action;\n            break;\n        }\n    }\n    if (result) {\n        return result;\n    } else {\n        console.error(\"validateAction: unknown request\", request);\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * \t Add Action\n * -----------------------------------------------------------------------------\n * Adds an action to the object, list of possible requests can be found in Jss.actions\n *\n * | Options\n * \t\t- addDefaults {boolean}                                                 True: add default classes, false: don't\n *\n *\n *\n * @param {string} request                                                      The name of the request\n * @param {function} fn                                                         The function which should be triggered\n * @param {object} options                                                      Object with option parameters\n * @return {boolean} true if a action is succesfully added, otherwise false.\n */\nJss.prototype.addAction = function(request, fn, options) {\n\n    var self        = this;\n    var action      = self.validateAction(request)\n    var actions     = [];\n    var t = self.getActionElement(request);\n    var element     = t.element;\n    var request     = t.request;\n    t = undefined;\n\n    // Options\n    var addDefaults = JssService.getOption(\"addDefaults\", options);\n\n\n\n    switch (action) {\n\n        case \"resize\":\n\n            actions.push(element.addEventListener(\"resize\", fn));\n\n        break;\n\n\n        case \"click\":\n            actions.push(element.addEventListener(\"click\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"click\", function(){\n                    self.setState(\"Clicked\")\n                }));\n                actions.push(window.addEventListener( \"click\", function(event) {\n                    if (event.target != self.element && self.hasState(\"Clicked\")) {\n                        self.removeState(\"Clicked\")\n                    }\n                }));\n            } // End addDefaults\n        break;\n\n\n        case \"change\":\n            actions.push(element.addEventListener(\"change\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"change\", function(){\n                    self.setState(\"Changed\")\n                    setTimeout(function(){self.removeState(\"Changed\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"hover\":\n            actions.push(element.addEventListener(\"mouseover\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseover\", function(){\n                    self.setState(\"Hover\")\n                }));\n                actions.push(element.addEventListener(\"mouseout\",  function(){\n                    self.removeState(\"Hover\")\n                }));\n            }\n        break;\n\n\n        case \"mouseIn\":\n\n            actions.push(element.addEventListener(\"mouseenter\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseenter\", function(){\n                    self.setState(\"MouseIn\")\n                    setTimeout(function(){self.removeState(\"MouseIn\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"mouseOut\":\n\n            actions.push(element.addEventListener(\"mouseleave\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseleave\", function(){\n                    self.setState(\"MouseOut\")\n                    setTimeout(function(){self.removeState(\"MouseOut\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n    }\n\n\n    if (actions.length > 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get action element\n * -----------------------------------------------------------------------------\n * @param  {string} request                                                     The request\n * @return {object}                                                             An object with 2 properties: request && element\n */\nJss.prototype.getActionElement = function(request) {\n    var self = this;\n    var prefix = false;\n    var newRequest  = request;\n    var element = self.element;\n    // Set prefix if it exists\n    if (request.indexOf(\".\") > 0) {\n        var t       = request.split(\".\"),\n        newRequest  = t[1];\n        prefix      = t[0];\n        t = undefined;\n    }\n\n    // Update element according the prefix (or skip it, if not set)\n    if (prefix !== false) {\n        switch (prefix) {\n            case \"screen\":\n            case \"window\":\n                element = window;\n            break;\n        }\n    }\n\n    // Return object\n    return {\n        request: newRequest,\n        element: element\n    }\n}\n/**\n * -----------------------------------------------------------------------------\n * Class name prefix\n * -----------------------------------------------------------------------------\n * The prefix equals the modulename, or - when it's a trigger object - modulename--triggername\n *\n * @return {string} The classname\n */\nJss.prototype.classNamePrefix = function() {\n    if (this.type == \"JssTrigger\") {\n        return this.moduleName + \"--\" + this.triggerName;\n    } else {\n        return this.moduleName;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Remove class name\n * -----------------------------------------------------------------------------\n * Removes the `this.element` classname\n * \t- \"all\" || undefined        > Removes ALL classnames\n *  - \"allStates\" || \"states\"   > Remove all STATES\n *  - all other strings remove that specific string from the className\n *\n * @param {string} input                                                        The classname (case-sensitive) which needs to be removed\n * @return {undefined}\n */\nJss.prototype.removeClassName = function(input) {\n\n    var classList  = [];\n\n    if (input == \"all\" || typeof input == \"undefined\") {\n\n        this.element.className = \"\";\n\n    } else if (input == \"states\" || input == \"allStates\") {\n\n        classList = this.element.className.split(\" \");\n        for (var i in classList) {\n            className = classList[i];\n            if (className.indexOf(\"__is\") > -1) {\n                delete classList[i];\n            }\n        }\n        this.element.className = classList.join(\" \");\n\n    } else if(typeof input == \"string\") {\n        this.element.className = this.element.className.replace(input,\"\");\n    } else {\n        console.error(\"removeClassName: parameter should be a string\");\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Add class name\n * -----------------------------------------------------------------------------\n * Adds a class name by string or array.\n * Does NOT check for duplicates\n *\n * @param  {string} The classname to be added\n * @return {undefined}\n */\nJss.prototype.addClassName = function(data) {\n    this.element.className += \" \";\n    if (typeof data == \"string\") {\n        this.element.className += data;\n    } else {\n        this.element.className += data.join(\" \")\n    }\n}\n\n/**\n * List where the keys corresponds with this[key], and where the value is the function to be executed when the var is changed.\n */\nJss.prototype.setterWatchList = {};\nJss.prototype.getterWatchList = {};\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add data\n * -----------------------------------------------------------------------------\n * Add a (default) value for the given attribute.\n *\n * @param {string} attribute                                                    The name of the attribute (this[attribute])\n * @param {*} value                                                             The value of this[attribute], could be anything...\n * @param {object} options\n *           \t\t- setterWatchFunction {function}\n *           \t\t- getterWatchFunction {function}\n */\nJss.prototype.addData = function(attribute, value, options) {\n\n\n    // watchList[key] = fn;\n    var setterWatchFunction = JssService.getOption('setterWatchFunction', options); // Function\n    var getterWatchFunction = JssService.getOption('getterWatchFunction', options); // Function\n\n    if (typeof setterWatchFunction === \"function\") {\n        this.setterWatchList[attribute] = setterWatchFunction;\n    }\n\n    if (typeof getterWatchFunction === \"function\") {\n        this.getterWatchList[attribute] = getterWatchFunction;\n    }\n\n    // Set the default value\n    return this[attribute] = value;\n}\n\n\n\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- ajax {string} url\n */\nJss.prototype.setData = function(attribute, value, options) {\n\n    this[attribute] = value;\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n\n    if (Array.isArray(fallback)) {\n\n        for (var i = 0; i < fallback.length; i++) {\n            var type = fallback[i];\n\n            if (value && value.length > 0) {\n                this['setData' + JssService.toCamelCase(type)](attribute, value); // Call this.addDataAttribute(value) || this.addDataCookie(value) etc...\n                this[attribute] = value;\n            }\n        }\n    }\n\n    // Call the setter watch function, if defined;\n    if (typeof this.setterWatchList[attribute] === \"function\") { // Use the watchlist to add functionality whenever a data attribute is updated\n        this.setterWatchList[attribute]();\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataDefault {boolean}\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- dataAjax {string} url\n */\nJss.prototype.getData = function(attribute, options) {\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n    var value = false;\n\n\n    if (!fallback) {\n        fallback = ['attribute'];\n    }\n\n\n    for (var i = 0; i < fallback.length; i++) {\n        var type = JssService.toCamelCase(fallback[i]);\n        var customOptions = false;\n\n        if (typeof options == \"object\") {\n            customOptions = options[fallback[i].toLowerCase()];\n        }\n\n        if (!value || value.length < 0) {\n            if (typeof this['getData' + type] !== \"function\") {\n                console.error('this.getData' + type + ' is not a function. Probably ' + type + ' is not a available data option');\n                continue;\n            }\n            value = this['getData' + type]( attribute, customOptions ); // Call this.getDataAttribute(value) || this.getDataCookie(value) || this.getDataAjax(value) etc...\n        }\n    }\n    console.log(this.getterWatchList);\n    // Call the getter watch function, if defined;\n    if (typeof this.getterWatchList[attribute] == \"function\") {\n        this.getterWatchList[attribute]();\n    }\n\n    return this[attribute] = value;\n}\n/**\n * -----------------------------------------------------------------------------\n * Get data: Ajax\n * -----------------------------------------------------------------------------\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n *\n * @param {string} attribute                                                    The NAME of the inner variable (this.NAME), is also used as the key for the GET Request {NAME: value}\n * @param {object} options                                                      Object with parameters used to make a GET request\n * @return {string}                                                             The value of the given attribute, or false if an erro occured.\n */\nJss.prototype.getDataAjax = function(attribute, options) {\n    var url = JssService.getOption(\"url\", options);\n    var jsonKey = JssService.getOption(\"jsonKey\", options) || attribute;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('GET', url);\n\n        return ajaxReturn.success(function(result){\n            if (typeof result === \"object\") {\n                if (result[jsonKey]) {\n                    return result[jsonKey];\n                }\n            }\n        }).error(function(errorObject){\n            console.log(errorObject);\n        });\n    }\n\n    return false;\n};\n\n/**\n * -----------------------------------------------------------------------------\n * Set data: Ajax\n * -----------------------------------------------------------------------------\n * Makes a post request to the options.url in a object {attribute: value}\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n */\nJss.prototype.setDataAjax = function(attribute, value, options) {\n    var url = JssService.getOption(\"url\", options);\n    var requestObject = {}\n        requestObject[attribute] = value;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('POST', url, requestObject);\n\n        return ajaxReturn.success(function(result){\n            return true;\n        }).error(function(errorObject){\n            console.log(errorObject);\n            return false;\n        });\n    }\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Ajax (helper function)\n * -----------------------------------------------------------------------------\n * Based on Atom.js by Todd Motto\n * http://toddmotto.com/writing-a-standalone-ajax-xhr-javascript-micro-library/\n */\nJss.prototype.ajaxHelper = {\n    // Parses json if possible, otherwise just return text\n    parse: function(req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return [result, req];\n    },\n\n    xhr: function(type, url, data) {\n        var ajaxHelper = this;\n\n        var methods = {\n            success: function() {},\n            error: function() {}\n        };\n        var XHR = XMLHttpRequest || ActiveXObject;\n        var request = new XHR('MSXML2.XMLHTTP.3.0');\n        request.open(type, url, true);\n        request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n\n        request.onreadystatechange = function() {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    methods.success.apply(methods, ajaxHelper.parse(request));\n                } else {\n                    methods.error.apply(methods, ajaxHelper.parse(request));\n                }\n            }\n        };\n        request.send(data);\n        return {\n            success: function(callback) {\n                methods.success = callback;\n                return methods;\n            },\n            error: function(callback) {\n                methods.error = callback;\n                return methods;\n            }\n        };\n    }\n};\n\nJss.prototype.ajax = {\n    // Get\n    get: function(src) {\n        console.log(this);\n    },\n\n    // Set\n    put: function(url, data) {\n        return this.ajaxHelper.xhr('PUT', url, data);\n    },\n\n    // Add\n    post: function(url, data) {\n        return this.ajaxHelper.xhr('POST', url, data);\n    }\n\n};\n/**\n * -----------------------------------------------------------------------------\n * Get data attribute value\n * -----------------------------------------------------------------------------\n * Returns the value of the requested attribute. Search first for a data-[ATTRIBUTE] value\n * If not found, it checks for the attribute in the default object. When that is not being\n * found neither, the normal this[attribute] value is being returned.\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME)\n * @return {string}                                                             The value of the given attribute\n */\nJss.prototype.getDataAttribute = function(attribute) {\n\n    return this.element.dataset[attribute];\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Update data attribute\n * -----------------------------------------------------------------------------\n * Set the value to the given attribute. And updates the data-[ATTRIBUTE] value\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME=\"value\")\n * @param {string} value                                                        The VALUE of the data attribute (data-name=\"VALUE\")\n * @return {undefined}\n */\n\nJss.prototype.setDataAttribute = function(attribute, value) {\n\n    // Update data attribute\n    if (typeof value !== \"undefined\") {\n        this.element.dataset[attribute] = this[attribute];\n    } else {\n        delete this.element.dataset[attribute];\n    }\n\n    return true;\n}\nJss.prototype.dataDefaultsCookie = {\n    'expireData': undefined\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get cookie value\n * -----------------------------------------------------------------------------\n * Returns cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @return {string}                                                             The VALUE of the given attribute\n */\nJss.prototype.getDataCookie = function(attribute) {\n\n    if (!attribute) { return null; }\n    return decodeURIComponent(document.cookie.replace(new RegExp(\"(?:(?:^|.*;)\\\\s*\" + encodeURIComponent(attribute).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"), \"$1\")) || null;\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data cookie\n * -----------------------------------------------------------------------------\n * Updates the cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @param {string} value                                                        The VALUE of the cookie\n * @return {undefined}\n */\n\nJss.prototype.setDataCookie = function(attribute, value, options) {\n    var endDate, path, domain, secureConnection;\n\n    if (typeof options === \"object\") {\n        endDate = JssService.getOption('endDate', options);\n        path    = JssService.getOption('path', options);\n        domain  = JssService.getOption('domain', options);\n        secureConnection = JssService.getOption('secureConnection', options);\n    }\n\n    if (!attribute || /^(?:expires|max\\-age|path|domain|secure)$/i.test(attribute)) { return false; }\n    var sExpires = \"\";\n    if (endDate) {\n      switch (endDate.constructor) {\n        case Number:\n          sExpires = endDate === Infinity ? \"; expires=Fri, 31 Dec 9999 23:59:59 GMT\" : \"; max-age=\" + endDate;\n          break;\n        case String:\n          sExpires = \"; expires=\" + endDate;\n          break;\n        case Date:\n          sExpires = \"; expires=\" + endDate.toUTCString();\n          break;\n      }\n    }\n\n    document.cookie = encodeURIComponent(attribute) + \"=\" + encodeURIComponent(value) + sExpires + (domain ? \"; domain=\" + domain : \"\") + (path ? \"; path=\" + path : \"\") + (secureConnection ? \"; secure\" : \"\");\n    return true;\n}\n/*******************************************************************************\n\n    Styles\n\n*******************************************************************************/\n\n/**\n * -----------------------------------------------------------------------------\n * Set height\n * -----------------------------------------------------------------------------\n * Sets the height of the `this.element` by the given input (height)\n *\n * @param  {number} height                                                      The height in pixels or percentage. Where numbers will be calculated to pixels so giving a height of 50 will result in a height of \"50px\". If you want percentages pass the variable with a percentage sign 50 + \"%\"\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setHeight = function(height) {\n    if (typeof height === \"number\") {\n        height += \"px\";\n    }\n\n    if (typeof height !== \"string\") {\n        throw(\"parameter height needs to be a string or integer\");\n    }\n\n    this.element.style.height = height;\n    return true;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get height\n * -----------------------------------------------------------------------------\n * Returns the height of the `this.element`\n *\n * @return {number}                                                             The height of the element in pixels\n */\nJss.prototype.getHeight = function() {\n    return this.element.offsetHeight;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set width\n * -----------------------------------------------------------------------------\n * Sets the width of the `this.element` by the given input (width)\n *\n * @param  {number} width                                                       The width in pixels or percentage. Where numbers will be calculated to pixels so giving a width of 50 will result in a width of \"50px\". If you want to set a percentage, just pass the variable with a percentage sign (\"50%\")\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setWidth = function(width) {\n    if (typeof width == \"number\") {\n        width += \"px\";\n    }\n\n    if (typeof width !== \"string\") {\n        throw(\"parameter width needs to be a string or integer\");\n    }\n    this.element.style.width = width;\n    return true;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get width\n * -----------------------------------------------------------------------------\n * Returns the width of the `this.element`\n *\n * @return {number}                                                             The width of the element in pixels\n */\nJss.prototype.getWidth = function() {\n    return this.element.offsetWidth;\n}\n/**\n * -----------------------------------------------------------------------------\n * Set State\n * -----------------------------------------------------------------------------\n * This updates the state of the object. States are being added to the class name prefix with a double underscore.\n * If you would have the module `envelope` and give it the state `open`. The class name `envelope__open` will be added.\n * Whenever you remove the state `open`, the according class name will be removed as well.\n *\n * @param  {string} str                                                         The name of the state which should be set (this is transformed to CamelCase)\n * @return {boolean}                                                            True on success, otherwise false (might already have the state)\n */\nJss.prototype.setState = function(str) {\n    var element, verifiedState, state, className;\n\n    element         = this.element;\n    state           = JssService.toCamelCase(str);\n    className       = this.classNamePrefix() + \"__is\" + state;\n\n    // Check if this.state is an array, and make it one if not.\n    if (Array.isArray(this.state) == false ) {\n        this.state = [];\n    }\n\n    // This if statement prevents that the same state is being set multiple times\n    if ( !this.hasState(str) ) {\n        this.addClassName(className)\n        this.state.push(state);\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Has state\n * -----------------------------------------------------------------------------\n * Checks if the parameter is already a state and returns true if so. Otherwise false.\n *\n * @param  {string} str                                                         The state which will be checked for\n * @return {boolean}                                                            True if it has the given state, otherwise false\n */\nJss.prototype.hasState = function(str) {\n    if (typeof this.state == \"object\" && this.state.indexOf(str) >= 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Remove state\n * -----------------------------------------------------------------------------\n * Removes the state from the states array, and from the element.className\n *\n * @param  {string} str                                                         The name of the state which should be removed\n * @return {undefined}\n */\nJss.prototype.removeState = function(str) {\n\n    var state      = JssService.toCamelCase(str);\n    var stateIndex = this.state.indexOf(state);\n\n    if (str == \"all\" || typeof str == \"undefined\") {\n        this.removeClassName(\"states\");\n    } else {\n        this.state.splice(stateIndex, 1);\n        if (typeof this.moduleAction != \"undefined\" && this.moduleAction.length > -1) {\n            this.removeClassName(this.classNamePrefix() + \"\" + this.moduleAction + \"__is\" + state);\n        } else {\n            this.removeClassName(this.classNamePrefix() + \"__is\" + state);\n        }\n    }\n}\n\n\n// A simple way to watch variables\n\n// addVar(keyName, value, watch_function)\n// setVar(keyName, value)\n// getVar(keyName)\n// Add -> new\n// Set -> update\n// Get -> return\nvar JssModule = function(){};\n\nJssModule.prototype.type               = \"JssModule\";\nJssModule.prototype.init               = Jss.prototype.init;\nJssModule.prototype.setElement         = Jss.prototype.setElement;\n\n// Triggers\nJssModule.prototype.findTriggers       = Jss.prototype.findTriggers;\nJssModule.prototype.configureTrigger      = Jss.prototype.configureTrigger;\n\n// Actions\n//JssModule.prototype.actions            = Object.create(Jss.prototype.actions);\nJssModule.prototype.validateAction     = Jss.prototype.validateAction;\nJssModule.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssModule.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssModule.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssModule.prototype.setState           = Jss.prototype.setState;\nJssModule.prototype.hasState           = Jss.prototype.hasState;\nJssModule.prototype.removeState        = Jss.prototype.removeState;\n\n// Data attributes\nJssModule.prototype.addData            = Jss.prototype.addData;\nJssModule.prototype.getData            = Jss.prototype.getData;\nJssModule.prototype.setData            = Jss.prototype.setData;\nvar JssTrigger = function(element, options) {\n    this.setElement(element);\n\n    if (typeof options === \"object\") {\n        if (typeof options.module === \"object\") {\n            this.module = options.module;\n        }\n        if (typeof options.moduleName === \"string\") {\n            this.moduleName = options.moduleName;\n        }\n        if (typeof options.triggerName === \"string\") {\n            this.triggerName = options.triggerName;\n        }\n    }\n}\n\n\nJssTrigger.prototype                    = Object.create(Jss.prototype);\nJssTrigger.prototype.type               = \"JssTrigger\";\nJssTrigger.prototype.setElement         = Jss.prototype.setElement;\n\n// Actions\n//JssTrigger.prototype.actions            = Object.create(Jss.prototype.actions);\nJssTrigger.prototype.validateAction     = Jss.prototype.validateAction;\nJssTrigger.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssTrigger.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssTrigger.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssTrigger.prototype.setState           = Jss.prototype.setState;\nJssTrigger.prototype.hasState           = Jss.prototype.hasState;\nJssTrigger.prototype.removeState        = Jss.prototype.removeState;\n\n\n\nvar  JssController = {};\nJssController.modules \t\t= []; // Result array with objects of all the found modules\nJssController.activeModules \t= JssService.activeModules;\n\nJssController.findModules = function() {\n    var allElements = document.getElementsByTagName(\"*\");                       // Array with all domElements\n    var test = [];\n    var self = this;\n    for (var i=0; i < allElements.length; i++) {\n\n        // Set default vars //\n        var element = allElements[i];                                           // Specific domElement\n        var tmp = false;\n\n        // Loop through the (active) modules array and add/instantiate them\n        self.activeModules.forEach(function(module){\n            if (JssService.isModule(element, module)) {\n                tmp = eval(\"new \" + JssService.toCamelCase(module) + \"(element)\"); // Dynamicly load modules\n\n                tmp.setElement(element);                                        // Add the domElement to the module\n                tmp.findTriggers();\t\t\t                                    // Search for module triggers\n\n                tmp.init();\t\t\t\t\t                                    // Executes everything within the init function\n                self.modules.push(tmp);\n\n            }\n        }); // End forEach\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    JssController.findModules();\n    console.log(JssController);\n});"
          },
          "params": [
            {
              "title": "param",
              "description": "The NAME of the inner variable (this.NAME), is also used as the key for the GET Request {NAME: value}",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "attribute"
            },
            {
              "title": "param",
              "description": "Object with parameters used to make a GET request",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "options"
            }
          ],
          "returns": [
            {
              "title": "returns",
              "description": "The value of the given attribute, or false if an erro occured.",
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ],
          "name": "getDataAjax",
          "kind": "function",
          "memberof": "Jss",
          "scope": "instance",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            "Jss",
            "getDataAjax"
          ]
        },
        {
          "description": "-----------------------------------------------------------------------------\nGet data attribute value\n-----------------------------------------------------------------------------\nReturns the value of the requested attribute. Search first for a data-[ATTRIBUTE] value\nIf not found, it checks for the attribute in the default object. When that is not being\nfound neither, the normal this[attribute] value is being returned.",
          "tags": [
            {
              "title": "param",
              "description": "The NAME of the data attribute (data-NAME)",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "attribute"
            },
            {
              "title": "returns",
              "description": "The value of the given attribute",
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "name",
              "name": "getDataAttribute"
            },
            {
              "title": "kind",
              "kind": "function"
            },
            {
              "title": "memberof",
              "description": "Jss"
            },
            {
              "title": "instance"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 925,
                "column": 0
              },
              "end": {
                "line": 942,
                "column": 0
              }
            },
            "file": "/Users/jeffreyarts/Documents/DEV/jss/lib/jss.js",
            "code": "JssService = {};\n\n// Edit this array to enable or disable default modules\nJssService.activeModules   = []\n\n// Set this to false in a live environment\nJssService.dev             = true;\n\n/**************************\n*\n*   Below are core properties defined, becarefull when you think of changing these...\n*\n**************************/\n\n\nJssService.actions = {\n    hover:      ['hover',    'mouseover',   'onmouseover'                       ], // Fixed\n    click:      ['click',    'onclick'                                          ], // Fixed\n    mouseIn:    ['mousein',  'onmousein', 'mouseenter', 'onmouseenter'          ], // Fixed\n    mouseOut:   ['mouseout', 'onmouseout', 'mouseleave', 'onmouseleave'         ], // Fixed\n    resize:     ['resize',   'onresize'                                         ], // Fixed\n    focus:      ['focus',    'onfocus'                                          ],\n    keyDown:    ['keydown',  'keypress'                                         ],\n    keyUp:      ['keyup',    'keyrelease'                                       ],\n    change:     ['change',   'onchange'                                         ],\n};\n\nJssService.enterDelay = 1000;                                                   // Amount of miliseconds which is used to remove the entered state. (see core.actions) JssService.enterDelay setTimeout\n\nJssService.forbiddenProperties = [\n    'type',\n    'triggers',\n    'configureTrigger',\n    'findTriggers'\n];\n\n/**\n * -----------------------------------------------------------------------------\n * Is Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isModule = function(element, moduleName) {\n    var arr = element.className.split(\" \");\n    var found = false;\n\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i].indexOf(moduleName)        > -1 &&\n            arr[i].indexOf(moduleName + \"_\") == -1 &&\n            arr[i].indexOf(moduleName + \"-\") == -1)\n        {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.addModule = function(moduleName) {\n    this.activeModules.push(this.toKebabCase(moduleName))\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To CamelCase\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toCamelCase = function(input) {\n    var arr, res;\n    res = \"\";\n    if (typeof input === \"string\") {\n        input = input.replace(/\\-/g,\" \");                                       // Replace all dashes with spaces\n        arr = input.split(\" \");\n    } else {\n        arr = input;                                                            // Assume it is an array\n    }\n\n\n\n    var i = 0;\n    for (var i in arr) {\n        if (typeof i != \"undefined\") {\n            res += arr[i][0].toUpperCase()+ arr[i].slice(1); // Capitalize first letter\n        }\n    }\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To kebab-case\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toKebabCase = function(input) {\n    var res, str;\n    res = \"\";\n\n    if (typeof input === \"string\") {\n        str = input;\n    } else {                                                                    // Assume it is an array\n        str = input.join(\" \");\n    }\n\n    // First change it to camelcase\n    str = this.toCamelCase(str);\n\n    var max = str.length;\n    for (var i=0; i < max; i++) {\n        // Check if character is uppercase\n        if (str[i] != str[i].toLowerCase()) {\n            if (i!==0) {\n                str = str.substr(0, i) + \"-\" + str.substr(i);\n                i++;\n            }\n        }\n    }\n\n    return res = str.toLowerCase();\n}\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get option\n * -----------------------------------------------------------------------------\n * @param  {string} name                                                        Keyname in optionList\n * @param  {array} optionList                                                   Array with all possible options\n * @return {}                                                                   Copy of the value (optionsList[name])\n */\nJssService.getOption = function(name, optionList) {\n    if (typeof optionList !== \"object\") {\n        return false;\n    }\n\n    var res;\n\n    switch (name) {\n\n        // Only set `addDefaults` to false when it is explicitly set.\n        case \"addDefaults\":\n            if (optionList[name] !== false || typeof optionList[name] === \"undefined\") {\n                res = true;\n            } else {\n                res = false;\n            }\n        break;\n        case \"fallback\":\n            if ( Array.isArray(optionList[name]) ) {\n                res = optionList[name];\n                if (res.length===0) {\n                    res = false;\n                }\n            } else if (typeof optionList[name] === \"string\"){\n                res = [optionList[name]];\n            }\n        break;\n        default:\n        res = optionList[name]\n    }\n\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Is Trigger\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isTrigger = function(element, moduleName) {\n    if (element.className.indexOf(moduleName + \"--\") > -1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get trigger name\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {string} Name of the trigger.\n */\nJssService.getTriggerName = function(element, moduleName) {\n    if (typeof element != \"object\") {\n        console.error('Required first argument `element` needs to be a domElement.');\n        return false;\n    }\n    if (typeof moduleName != \"string\") {\n        console.error('Required second argument `moduleName` needs to be a string.');\n        return false;\n    }\n\n    // As an example we assume that the value of element.className equals 'b module--triggerName'\n    var startPos = element.className.indexOf(moduleName + \"--\");                    // 2\n    var sliced = element.className.slice(startPos, element.className.length )       // 'module--triggerName'\n    var endPos = sliced.indexOf(\" \");                                               // -1       // not found\n    if (endPos != -1) {                                                             // 19\n        sliced = sliced.slice(0,endPos);                                            // if there is more after the string, this will remove it\n    }\n    return sliced.replace(moduleName + \"--\",\"\")\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger name is allowed\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} True if the triggername is allowed, otherwise false.\n */\nJssService.triggerNameIsAllowed = function(element, moduleName) {\n    if (JssService.forbiddenProperties.indexOf(this.getTriggerName(element, moduleName)) > -1) {      // This triggerName is a core property, throw error\n        console.error('Triggername `' + getTriggerName(element,moduleName) + '` is not allowed. Change the trigger so it does not corresponds any of these: ' + JssService.forbiddenProperties)\n        return false;\n    }\n    return true;\n}\n/**\n * @module Jss\n * @author      Jeffrey Arts <sjeffff@gmail.com>\n * @copyright   2015\n */\nJss = function(){};\n\nJss.prototype.type      = \"Jss\"\nJss.prototype.triggers  = false;\nJss.prototype.element   = undefined;                                              // {obj} domElement\nJss.prototype.state     = undefined;                                              // {str} State of module, is reflected by the css class __isState\n\n/**\n * -----------------------------------------------------------------------------\n * Find Triggers\n * -----------------------------------------------------------------------------\n *\n * @param {domElement} element\n * @return {undefined}\n */\nJss.prototype.findTriggers = function(element) {\n    this.triggers = [];                                                         // If this is not set, all modules will have the same reference point to this.triggers.\n    // Module is created, now look for any module triggers\n    this.searchTriggersRecursiveInnerFunction(this.element)\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger\n * -----------------------------------------------------------------------------\n */\nJss.prototype.trigger = function(which, fn) {\n    if (typeof this.triggers !== \"object\") {\n        console.info(\"No triggers are found, please specify them in the css as `module-name--trigger-name`.\");\n        return false;\n    }\n\n    if (typeof this.triggers[which] !== \"object\") {\n        console.info(\"You are trying to execute a function on a non existing trigger `\" + which + \"`\");\n        return false;\n    }\n\n    for (var i = 0; i < this.triggers[which].length; i++) {\n        fn(this.triggers[which][i])\n    }\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Search triggers recursive inner function\n * -----------------------------------------------------------------------------\n * Recursive function which is executed bij findTriggers;\n *\n * @return {undefined}\n */\nJss.prototype.searchTriggersRecursiveInnerFunction = function(element) {\n    var self = this;\n    if (typeof element == \"undefined\" ) {\n        element = this.element;\n    }\n    if ( element.hasChildNodes() ) {\n        for (var i=0; i < element.childNodes.length; i++) {\n\n            var childElement = element.childNodes[i];                           // Improve readability\n\n            if (childElement.nodeType == 1) {                                   // NodeType 1 == domElement\n\n                if (JssService.isTrigger(childElement, this.moduleName)) {\n\n                    // Add a child element\n                    if (JssService.triggerNameIsAllowed(childElement, this.moduleName)) {\n                        var triggerName = JssService.getTriggerName(childElement, this.moduleName)\n\n                        if (typeof self.triggers[triggerName] !== \"object\") {\n                            self.triggers[triggerName] = [];\n                        }\n\n                        var tmp = new JssTrigger(childElement, {\n                            module: self,\n                            moduleName: this.moduleName,\n                            triggerName: triggerName,\n                        });\n\n                        self.triggers[triggerName].push(tmp);\n                    }\n                }\n                if (childElement.hasChildNodes()) {\n                    self.searchTriggersRecursiveInnerFunction(childElement)\n                }\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Configure Trigger\n * -----------------------------------------------------------------------------\n *\n * @return {undefined}\n */\nJss.prototype.configureTrigger = function(trigger, fn) {\n    if ( typeof this.triggers[trigger] == \"object\") {\n\n        for (var i = 0; i < this.triggers[trigger].length; i++) {\n            //self.triggers[trigger][i]\n            fn(this.triggers[trigger][i]);\n        }\n\n    } else if (JssService.dev) {\n        console.error(\"You are trying to configure a trigger which has no attached domElement\")\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n *   Init\n * -----------------------------------------------------------------------------\n * Notice the user that a init function needs to be added for controlling the triggers\n *\n * @return {undefined}\n */\nJss.prototype.init = function(func) {\n    if (JssService.dev) {\n        console.info(this.moduleName + \": Add a prototype.init function to add triggers and stuff\")\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set element\n * -----------------------------------------------------------------------------\n * Add a domElement to `this`\n *\n * @return {undefined}\n */\nJss.prototype.setElement = function(element) {\n    if (typeof element == \"undefined\") {\n        if (JssService.dev) {\n            return console.error(\"First parameter of setElement needs to be a domElement\");\n        }\n    }\n    this.element = element;\n}\n/*******************************************************************************\n   *\n   *\tActions\n   *\n   *  \t@author      Jeffrey Arts <sjeffff@gmail.com>\n   *    @copyright   2015\n   *\n*******************************************************************************/\n/**\n * -----------------------------------------------------------------------------\n *   Validate action\n * -----------------------------------------------------------------------------\n * Checks if parameter is a valid action, and logs an error when not.\n *\n * @param {string} request                                                      The name of the request\n * @return {boolean} true if a action is valid, otherwise false.\n */\nJss.prototype.validateAction = function(request) {\n    var result;\n    request = this.getActionElement(request).request\n    for (var action in JssService.actions) {\n        if (JssService.actions[action].indexOf(request.toLowerCase()) > -1) {\n            result = action;\n            break;\n        }\n    }\n    if (result) {\n        return result;\n    } else {\n        console.error(\"validateAction: unknown request\", request);\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * \t Add Action\n * -----------------------------------------------------------------------------\n * Adds an action to the object, list of possible requests can be found in Jss.actions\n *\n * | Options\n * \t\t- addDefaults {boolean}                                                 True: add default classes, false: don't\n *\n *\n *\n * @param {string} request                                                      The name of the request\n * @param {function} fn                                                         The function which should be triggered\n * @param {object} options                                                      Object with option parameters\n * @return {boolean} true if a action is succesfully added, otherwise false.\n */\nJss.prototype.addAction = function(request, fn, options) {\n\n    var self        = this;\n    var action      = self.validateAction(request)\n    var actions     = [];\n    var t = self.getActionElement(request);\n    var element     = t.element;\n    var request     = t.request;\n    t = undefined;\n\n    // Options\n    var addDefaults = JssService.getOption(\"addDefaults\", options);\n\n\n\n    switch (action) {\n\n        case \"resize\":\n\n            actions.push(element.addEventListener(\"resize\", fn));\n\n        break;\n\n\n        case \"click\":\n            actions.push(element.addEventListener(\"click\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"click\", function(){\n                    self.setState(\"Clicked\")\n                }));\n                actions.push(window.addEventListener( \"click\", function(event) {\n                    if (event.target != self.element && self.hasState(\"Clicked\")) {\n                        self.removeState(\"Clicked\")\n                    }\n                }));\n            } // End addDefaults\n        break;\n\n\n        case \"change\":\n            actions.push(element.addEventListener(\"change\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"change\", function(){\n                    self.setState(\"Changed\")\n                    setTimeout(function(){self.removeState(\"Changed\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"hover\":\n            actions.push(element.addEventListener(\"mouseover\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseover\", function(){\n                    self.setState(\"Hover\")\n                }));\n                actions.push(element.addEventListener(\"mouseout\",  function(){\n                    self.removeState(\"Hover\")\n                }));\n            }\n        break;\n\n\n        case \"mouseIn\":\n\n            actions.push(element.addEventListener(\"mouseenter\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseenter\", function(){\n                    self.setState(\"MouseIn\")\n                    setTimeout(function(){self.removeState(\"MouseIn\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"mouseOut\":\n\n            actions.push(element.addEventListener(\"mouseleave\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseleave\", function(){\n                    self.setState(\"MouseOut\")\n                    setTimeout(function(){self.removeState(\"MouseOut\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n    }\n\n\n    if (actions.length > 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get action element\n * -----------------------------------------------------------------------------\n * @param  {string} request                                                     The request\n * @return {object}                                                             An object with 2 properties: request && element\n */\nJss.prototype.getActionElement = function(request) {\n    var self = this;\n    var prefix = false;\n    var newRequest  = request;\n    var element = self.element;\n    // Set prefix if it exists\n    if (request.indexOf(\".\") > 0) {\n        var t       = request.split(\".\"),\n        newRequest  = t[1];\n        prefix      = t[0];\n        t = undefined;\n    }\n\n    // Update element according the prefix (or skip it, if not set)\n    if (prefix !== false) {\n        switch (prefix) {\n            case \"screen\":\n            case \"window\":\n                element = window;\n            break;\n        }\n    }\n\n    // Return object\n    return {\n        request: newRequest,\n        element: element\n    }\n}\n/**\n * -----------------------------------------------------------------------------\n * Class name prefix\n * -----------------------------------------------------------------------------\n * The prefix equals the modulename, or - when it's a trigger object - modulename--triggername\n *\n * @return {string} The classname\n */\nJss.prototype.classNamePrefix = function() {\n    if (this.type == \"JssTrigger\") {\n        return this.moduleName + \"--\" + this.triggerName;\n    } else {\n        return this.moduleName;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Remove class name\n * -----------------------------------------------------------------------------\n * Removes the `this.element` classname\n * \t- \"all\" || undefined        > Removes ALL classnames\n *  - \"allStates\" || \"states\"   > Remove all STATES\n *  - all other strings remove that specific string from the className\n *\n * @param {string} input                                                        The classname (case-sensitive) which needs to be removed\n * @return {undefined}\n */\nJss.prototype.removeClassName = function(input) {\n\n    var classList  = [];\n\n    if (input == \"all\" || typeof input == \"undefined\") {\n\n        this.element.className = \"\";\n\n    } else if (input == \"states\" || input == \"allStates\") {\n\n        classList = this.element.className.split(\" \");\n        for (var i in classList) {\n            className = classList[i];\n            if (className.indexOf(\"__is\") > -1) {\n                delete classList[i];\n            }\n        }\n        this.element.className = classList.join(\" \");\n\n    } else if(typeof input == \"string\") {\n        this.element.className = this.element.className.replace(input,\"\");\n    } else {\n        console.error(\"removeClassName: parameter should be a string\");\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Add class name\n * -----------------------------------------------------------------------------\n * Adds a class name by string or array.\n * Does NOT check for duplicates\n *\n * @param  {string} The classname to be added\n * @return {undefined}\n */\nJss.prototype.addClassName = function(data) {\n    this.element.className += \" \";\n    if (typeof data == \"string\") {\n        this.element.className += data;\n    } else {\n        this.element.className += data.join(\" \")\n    }\n}\n\n/**\n * List where the keys corresponds with this[key], and where the value is the function to be executed when the var is changed.\n */\nJss.prototype.setterWatchList = {};\nJss.prototype.getterWatchList = {};\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add data\n * -----------------------------------------------------------------------------\n * Add a (default) value for the given attribute.\n *\n * @param {string} attribute                                                    The name of the attribute (this[attribute])\n * @param {*} value                                                             The value of this[attribute], could be anything...\n * @param {object} options\n *           \t\t- setterWatchFunction {function}\n *           \t\t- getterWatchFunction {function}\n */\nJss.prototype.addData = function(attribute, value, options) {\n\n\n    // watchList[key] = fn;\n    var setterWatchFunction = JssService.getOption('setterWatchFunction', options); // Function\n    var getterWatchFunction = JssService.getOption('getterWatchFunction', options); // Function\n\n    if (typeof setterWatchFunction === \"function\") {\n        this.setterWatchList[attribute] = setterWatchFunction;\n    }\n\n    if (typeof getterWatchFunction === \"function\") {\n        this.getterWatchList[attribute] = getterWatchFunction;\n    }\n\n    // Set the default value\n    return this[attribute] = value;\n}\n\n\n\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- ajax {string} url\n */\nJss.prototype.setData = function(attribute, value, options) {\n\n    this[attribute] = value;\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n\n    if (Array.isArray(fallback)) {\n\n        for (var i = 0; i < fallback.length; i++) {\n            var type = fallback[i];\n\n            if (value && value.length > 0) {\n                this['setData' + JssService.toCamelCase(type)](attribute, value); // Call this.addDataAttribute(value) || this.addDataCookie(value) etc...\n                this[attribute] = value;\n            }\n        }\n    }\n\n    // Call the setter watch function, if defined;\n    if (typeof this.setterWatchList[attribute] === \"function\") { // Use the watchlist to add functionality whenever a data attribute is updated\n        this.setterWatchList[attribute]();\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataDefault {boolean}\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- dataAjax {string} url\n */\nJss.prototype.getData = function(attribute, options) {\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n    var value = false;\n\n\n    if (!fallback) {\n        fallback = ['attribute'];\n    }\n\n\n    for (var i = 0; i < fallback.length; i++) {\n        var type = JssService.toCamelCase(fallback[i]);\n        var customOptions = false;\n\n        if (typeof options == \"object\") {\n            customOptions = options[fallback[i].toLowerCase()];\n        }\n\n        if (!value || value.length < 0) {\n            if (typeof this['getData' + type] !== \"function\") {\n                console.error('this.getData' + type + ' is not a function. Probably ' + type + ' is not a available data option');\n                continue;\n            }\n            value = this['getData' + type]( attribute, customOptions ); // Call this.getDataAttribute(value) || this.getDataCookie(value) || this.getDataAjax(value) etc...\n        }\n    }\n    console.log(this.getterWatchList);\n    // Call the getter watch function, if defined;\n    if (typeof this.getterWatchList[attribute] == \"function\") {\n        this.getterWatchList[attribute]();\n    }\n\n    return this[attribute] = value;\n}\n/**\n * -----------------------------------------------------------------------------\n * Get data: Ajax\n * -----------------------------------------------------------------------------\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n *\n * @param {string} attribute                                                    The NAME of the inner variable (this.NAME), is also used as the key for the GET Request {NAME: value}\n * @param {object} options                                                      Object with parameters used to make a GET request\n * @return {string}                                                             The value of the given attribute, or false if an erro occured.\n */\nJss.prototype.getDataAjax = function(attribute, options) {\n    var url = JssService.getOption(\"url\", options);\n    var jsonKey = JssService.getOption(\"jsonKey\", options) || attribute;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('GET', url);\n\n        return ajaxReturn.success(function(result){\n            if (typeof result === \"object\") {\n                if (result[jsonKey]) {\n                    return result[jsonKey];\n                }\n            }\n        }).error(function(errorObject){\n            console.log(errorObject);\n        });\n    }\n\n    return false;\n};\n\n/**\n * -----------------------------------------------------------------------------\n * Set data: Ajax\n * -----------------------------------------------------------------------------\n * Makes a post request to the options.url in a object {attribute: value}\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n */\nJss.prototype.setDataAjax = function(attribute, value, options) {\n    var url = JssService.getOption(\"url\", options);\n    var requestObject = {}\n        requestObject[attribute] = value;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('POST', url, requestObject);\n\n        return ajaxReturn.success(function(result){\n            return true;\n        }).error(function(errorObject){\n            console.log(errorObject);\n            return false;\n        });\n    }\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Ajax (helper function)\n * -----------------------------------------------------------------------------\n * Based on Atom.js by Todd Motto\n * http://toddmotto.com/writing-a-standalone-ajax-xhr-javascript-micro-library/\n */\nJss.prototype.ajaxHelper = {\n    // Parses json if possible, otherwise just return text\n    parse: function(req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return [result, req];\n    },\n\n    xhr: function(type, url, data) {\n        var ajaxHelper = this;\n\n        var methods = {\n            success: function() {},\n            error: function() {}\n        };\n        var XHR = XMLHttpRequest || ActiveXObject;\n        var request = new XHR('MSXML2.XMLHTTP.3.0');\n        request.open(type, url, true);\n        request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n\n        request.onreadystatechange = function() {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    methods.success.apply(methods, ajaxHelper.parse(request));\n                } else {\n                    methods.error.apply(methods, ajaxHelper.parse(request));\n                }\n            }\n        };\n        request.send(data);\n        return {\n            success: function(callback) {\n                methods.success = callback;\n                return methods;\n            },\n            error: function(callback) {\n                methods.error = callback;\n                return methods;\n            }\n        };\n    }\n};\n\nJss.prototype.ajax = {\n    // Get\n    get: function(src) {\n        console.log(this);\n    },\n\n    // Set\n    put: function(url, data) {\n        return this.ajaxHelper.xhr('PUT', url, data);\n    },\n\n    // Add\n    post: function(url, data) {\n        return this.ajaxHelper.xhr('POST', url, data);\n    }\n\n};\n/**\n * -----------------------------------------------------------------------------\n * Get data attribute value\n * -----------------------------------------------------------------------------\n * Returns the value of the requested attribute. Search first for a data-[ATTRIBUTE] value\n * If not found, it checks for the attribute in the default object. When that is not being\n * found neither, the normal this[attribute] value is being returned.\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME)\n * @return {string}                                                             The value of the given attribute\n */\nJss.prototype.getDataAttribute = function(attribute) {\n\n    return this.element.dataset[attribute];\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Update data attribute\n * -----------------------------------------------------------------------------\n * Set the value to the given attribute. And updates the data-[ATTRIBUTE] value\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME=\"value\")\n * @param {string} value                                                        The VALUE of the data attribute (data-name=\"VALUE\")\n * @return {undefined}\n */\n\nJss.prototype.setDataAttribute = function(attribute, value) {\n\n    // Update data attribute\n    if (typeof value !== \"undefined\") {\n        this.element.dataset[attribute] = this[attribute];\n    } else {\n        delete this.element.dataset[attribute];\n    }\n\n    return true;\n}\nJss.prototype.dataDefaultsCookie = {\n    'expireData': undefined\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get cookie value\n * -----------------------------------------------------------------------------\n * Returns cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @return {string}                                                             The VALUE of the given attribute\n */\nJss.prototype.getDataCookie = function(attribute) {\n\n    if (!attribute) { return null; }\n    return decodeURIComponent(document.cookie.replace(new RegExp(\"(?:(?:^|.*;)\\\\s*\" + encodeURIComponent(attribute).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"), \"$1\")) || null;\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data cookie\n * -----------------------------------------------------------------------------\n * Updates the cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @param {string} value                                                        The VALUE of the cookie\n * @return {undefined}\n */\n\nJss.prototype.setDataCookie = function(attribute, value, options) {\n    var endDate, path, domain, secureConnection;\n\n    if (typeof options === \"object\") {\n        endDate = JssService.getOption('endDate', options);\n        path    = JssService.getOption('path', options);\n        domain  = JssService.getOption('domain', options);\n        secureConnection = JssService.getOption('secureConnection', options);\n    }\n\n    if (!attribute || /^(?:expires|max\\-age|path|domain|secure)$/i.test(attribute)) { return false; }\n    var sExpires = \"\";\n    if (endDate) {\n      switch (endDate.constructor) {\n        case Number:\n          sExpires = endDate === Infinity ? \"; expires=Fri, 31 Dec 9999 23:59:59 GMT\" : \"; max-age=\" + endDate;\n          break;\n        case String:\n          sExpires = \"; expires=\" + endDate;\n          break;\n        case Date:\n          sExpires = \"; expires=\" + endDate.toUTCString();\n          break;\n      }\n    }\n\n    document.cookie = encodeURIComponent(attribute) + \"=\" + encodeURIComponent(value) + sExpires + (domain ? \"; domain=\" + domain : \"\") + (path ? \"; path=\" + path : \"\") + (secureConnection ? \"; secure\" : \"\");\n    return true;\n}\n/*******************************************************************************\n\n    Styles\n\n*******************************************************************************/\n\n/**\n * -----------------------------------------------------------------------------\n * Set height\n * -----------------------------------------------------------------------------\n * Sets the height of the `this.element` by the given input (height)\n *\n * @param  {number} height                                                      The height in pixels or percentage. Where numbers will be calculated to pixels so giving a height of 50 will result in a height of \"50px\". If you want percentages pass the variable with a percentage sign 50 + \"%\"\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setHeight = function(height) {\n    if (typeof height === \"number\") {\n        height += \"px\";\n    }\n\n    if (typeof height !== \"string\") {\n        throw(\"parameter height needs to be a string or integer\");\n    }\n\n    this.element.style.height = height;\n    return true;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get height\n * -----------------------------------------------------------------------------\n * Returns the height of the `this.element`\n *\n * @return {number}                                                             The height of the element in pixels\n */\nJss.prototype.getHeight = function() {\n    return this.element.offsetHeight;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set width\n * -----------------------------------------------------------------------------\n * Sets the width of the `this.element` by the given input (width)\n *\n * @param  {number} width                                                       The width in pixels or percentage. Where numbers will be calculated to pixels so giving a width of 50 will result in a width of \"50px\". If you want to set a percentage, just pass the variable with a percentage sign (\"50%\")\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setWidth = function(width) {\n    if (typeof width == \"number\") {\n        width += \"px\";\n    }\n\n    if (typeof width !== \"string\") {\n        throw(\"parameter width needs to be a string or integer\");\n    }\n    this.element.style.width = width;\n    return true;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get width\n * -----------------------------------------------------------------------------\n * Returns the width of the `this.element`\n *\n * @return {number}                                                             The width of the element in pixels\n */\nJss.prototype.getWidth = function() {\n    return this.element.offsetWidth;\n}\n/**\n * -----------------------------------------------------------------------------\n * Set State\n * -----------------------------------------------------------------------------\n * This updates the state of the object. States are being added to the class name prefix with a double underscore.\n * If you would have the module `envelope` and give it the state `open`. The class name `envelope__open` will be added.\n * Whenever you remove the state `open`, the according class name will be removed as well.\n *\n * @param  {string} str                                                         The name of the state which should be set (this is transformed to CamelCase)\n * @return {boolean}                                                            True on success, otherwise false (might already have the state)\n */\nJss.prototype.setState = function(str) {\n    var element, verifiedState, state, className;\n\n    element         = this.element;\n    state           = JssService.toCamelCase(str);\n    className       = this.classNamePrefix() + \"__is\" + state;\n\n    // Check if this.state is an array, and make it one if not.\n    if (Array.isArray(this.state) == false ) {\n        this.state = [];\n    }\n\n    // This if statement prevents that the same state is being set multiple times\n    if ( !this.hasState(str) ) {\n        this.addClassName(className)\n        this.state.push(state);\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Has state\n * -----------------------------------------------------------------------------\n * Checks if the parameter is already a state and returns true if so. Otherwise false.\n *\n * @param  {string} str                                                         The state which will be checked for\n * @return {boolean}                                                            True if it has the given state, otherwise false\n */\nJss.prototype.hasState = function(str) {\n    if (typeof this.state == \"object\" && this.state.indexOf(str) >= 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Remove state\n * -----------------------------------------------------------------------------\n * Removes the state from the states array, and from the element.className\n *\n * @param  {string} str                                                         The name of the state which should be removed\n * @return {undefined}\n */\nJss.prototype.removeState = function(str) {\n\n    var state      = JssService.toCamelCase(str);\n    var stateIndex = this.state.indexOf(state);\n\n    if (str == \"all\" || typeof str == \"undefined\") {\n        this.removeClassName(\"states\");\n    } else {\n        this.state.splice(stateIndex, 1);\n        if (typeof this.moduleAction != \"undefined\" && this.moduleAction.length > -1) {\n            this.removeClassName(this.classNamePrefix() + \"\" + this.moduleAction + \"__is\" + state);\n        } else {\n            this.removeClassName(this.classNamePrefix() + \"__is\" + state);\n        }\n    }\n}\n\n\n// A simple way to watch variables\n\n// addVar(keyName, value, watch_function)\n// setVar(keyName, value)\n// getVar(keyName)\n// Add -> new\n// Set -> update\n// Get -> return\nvar JssModule = function(){};\n\nJssModule.prototype.type               = \"JssModule\";\nJssModule.prototype.init               = Jss.prototype.init;\nJssModule.prototype.setElement         = Jss.prototype.setElement;\n\n// Triggers\nJssModule.prototype.findTriggers       = Jss.prototype.findTriggers;\nJssModule.prototype.configureTrigger      = Jss.prototype.configureTrigger;\n\n// Actions\n//JssModule.prototype.actions            = Object.create(Jss.prototype.actions);\nJssModule.prototype.validateAction     = Jss.prototype.validateAction;\nJssModule.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssModule.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssModule.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssModule.prototype.setState           = Jss.prototype.setState;\nJssModule.prototype.hasState           = Jss.prototype.hasState;\nJssModule.prototype.removeState        = Jss.prototype.removeState;\n\n// Data attributes\nJssModule.prototype.addData            = Jss.prototype.addData;\nJssModule.prototype.getData            = Jss.prototype.getData;\nJssModule.prototype.setData            = Jss.prototype.setData;\nvar JssTrigger = function(element, options) {\n    this.setElement(element);\n\n    if (typeof options === \"object\") {\n        if (typeof options.module === \"object\") {\n            this.module = options.module;\n        }\n        if (typeof options.moduleName === \"string\") {\n            this.moduleName = options.moduleName;\n        }\n        if (typeof options.triggerName === \"string\") {\n            this.triggerName = options.triggerName;\n        }\n    }\n}\n\n\nJssTrigger.prototype                    = Object.create(Jss.prototype);\nJssTrigger.prototype.type               = \"JssTrigger\";\nJssTrigger.prototype.setElement         = Jss.prototype.setElement;\n\n// Actions\n//JssTrigger.prototype.actions            = Object.create(Jss.prototype.actions);\nJssTrigger.prototype.validateAction     = Jss.prototype.validateAction;\nJssTrigger.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssTrigger.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssTrigger.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssTrigger.prototype.setState           = Jss.prototype.setState;\nJssTrigger.prototype.hasState           = Jss.prototype.hasState;\nJssTrigger.prototype.removeState        = Jss.prototype.removeState;\n\n\n\nvar  JssController = {};\nJssController.modules \t\t= []; // Result array with objects of all the found modules\nJssController.activeModules \t= JssService.activeModules;\n\nJssController.findModules = function() {\n    var allElements = document.getElementsByTagName(\"*\");                       // Array with all domElements\n    var test = [];\n    var self = this;\n    for (var i=0; i < allElements.length; i++) {\n\n        // Set default vars //\n        var element = allElements[i];                                           // Specific domElement\n        var tmp = false;\n\n        // Loop through the (active) modules array and add/instantiate them\n        self.activeModules.forEach(function(module){\n            if (JssService.isModule(element, module)) {\n                tmp = eval(\"new \" + JssService.toCamelCase(module) + \"(element)\"); // Dynamicly load modules\n\n                tmp.setElement(element);                                        // Add the domElement to the module\n                tmp.findTriggers();\t\t\t                                    // Search for module triggers\n\n                tmp.init();\t\t\t\t\t                                    // Executes everything within the init function\n                self.modules.push(tmp);\n\n            }\n        }); // End forEach\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    JssController.findModules();\n    console.log(JssController);\n});"
          },
          "params": [
            {
              "title": "param",
              "description": "The NAME of the data attribute (data-NAME)",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "attribute"
            }
          ],
          "returns": [
            {
              "title": "returns",
              "description": "The value of the given attribute",
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ],
          "name": "getDataAttribute",
          "kind": "function",
          "memberof": "Jss",
          "scope": "instance",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            "Jss",
            "getDataAttribute"
          ]
        },
        {
          "description": "-----------------------------------------------------------------------------\nGet cookie value\n-----------------------------------------------------------------------------\nReturns cookie value.\nOriginal code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)",
          "tags": [
            {
              "title": "param",
              "description": "The NAME of the cookie",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "attribute"
            },
            {
              "title": "returns",
              "description": "The VALUE of the given attribute",
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "name",
              "name": "getDataCookie"
            },
            {
              "title": "kind",
              "kind": "function"
            },
            {
              "title": "memberof",
              "description": "Jss"
            },
            {
              "title": "instance"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 967,
                "column": 0
              },
              "end": {
                "line": 987,
                "column": 0
              }
            },
            "file": "/Users/jeffreyarts/Documents/DEV/jss/lib/jss.js",
            "code": "JssService = {};\n\n// Edit this array to enable or disable default modules\nJssService.activeModules   = []\n\n// Set this to false in a live environment\nJssService.dev             = true;\n\n/**************************\n*\n*   Below are core properties defined, becarefull when you think of changing these...\n*\n**************************/\n\n\nJssService.actions = {\n    hover:      ['hover',    'mouseover',   'onmouseover'                       ], // Fixed\n    click:      ['click',    'onclick'                                          ], // Fixed\n    mouseIn:    ['mousein',  'onmousein', 'mouseenter', 'onmouseenter'          ], // Fixed\n    mouseOut:   ['mouseout', 'onmouseout', 'mouseleave', 'onmouseleave'         ], // Fixed\n    resize:     ['resize',   'onresize'                                         ], // Fixed\n    focus:      ['focus',    'onfocus'                                          ],\n    keyDown:    ['keydown',  'keypress'                                         ],\n    keyUp:      ['keyup',    'keyrelease'                                       ],\n    change:     ['change',   'onchange'                                         ],\n};\n\nJssService.enterDelay = 1000;                                                   // Amount of miliseconds which is used to remove the entered state. (see core.actions) JssService.enterDelay setTimeout\n\nJssService.forbiddenProperties = [\n    'type',\n    'triggers',\n    'configureTrigger',\n    'findTriggers'\n];\n\n/**\n * -----------------------------------------------------------------------------\n * Is Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isModule = function(element, moduleName) {\n    var arr = element.className.split(\" \");\n    var found = false;\n\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i].indexOf(moduleName)        > -1 &&\n            arr[i].indexOf(moduleName + \"_\") == -1 &&\n            arr[i].indexOf(moduleName + \"-\") == -1)\n        {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.addModule = function(moduleName) {\n    this.activeModules.push(this.toKebabCase(moduleName))\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To CamelCase\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toCamelCase = function(input) {\n    var arr, res;\n    res = \"\";\n    if (typeof input === \"string\") {\n        input = input.replace(/\\-/g,\" \");                                       // Replace all dashes with spaces\n        arr = input.split(\" \");\n    } else {\n        arr = input;                                                            // Assume it is an array\n    }\n\n\n\n    var i = 0;\n    for (var i in arr) {\n        if (typeof i != \"undefined\") {\n            res += arr[i][0].toUpperCase()+ arr[i].slice(1); // Capitalize first letter\n        }\n    }\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To kebab-case\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toKebabCase = function(input) {\n    var res, str;\n    res = \"\";\n\n    if (typeof input === \"string\") {\n        str = input;\n    } else {                                                                    // Assume it is an array\n        str = input.join(\" \");\n    }\n\n    // First change it to camelcase\n    str = this.toCamelCase(str);\n\n    var max = str.length;\n    for (var i=0; i < max; i++) {\n        // Check if character is uppercase\n        if (str[i] != str[i].toLowerCase()) {\n            if (i!==0) {\n                str = str.substr(0, i) + \"-\" + str.substr(i);\n                i++;\n            }\n        }\n    }\n\n    return res = str.toLowerCase();\n}\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get option\n * -----------------------------------------------------------------------------\n * @param  {string} name                                                        Keyname in optionList\n * @param  {array} optionList                                                   Array with all possible options\n * @return {}                                                                   Copy of the value (optionsList[name])\n */\nJssService.getOption = function(name, optionList) {\n    if (typeof optionList !== \"object\") {\n        return false;\n    }\n\n    var res;\n\n    switch (name) {\n\n        // Only set `addDefaults` to false when it is explicitly set.\n        case \"addDefaults\":\n            if (optionList[name] !== false || typeof optionList[name] === \"undefined\") {\n                res = true;\n            } else {\n                res = false;\n            }\n        break;\n        case \"fallback\":\n            if ( Array.isArray(optionList[name]) ) {\n                res = optionList[name];\n                if (res.length===0) {\n                    res = false;\n                }\n            } else if (typeof optionList[name] === \"string\"){\n                res = [optionList[name]];\n            }\n        break;\n        default:\n        res = optionList[name]\n    }\n\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Is Trigger\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isTrigger = function(element, moduleName) {\n    if (element.className.indexOf(moduleName + \"--\") > -1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get trigger name\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {string} Name of the trigger.\n */\nJssService.getTriggerName = function(element, moduleName) {\n    if (typeof element != \"object\") {\n        console.error('Required first argument `element` needs to be a domElement.');\n        return false;\n    }\n    if (typeof moduleName != \"string\") {\n        console.error('Required second argument `moduleName` needs to be a string.');\n        return false;\n    }\n\n    // As an example we assume that the value of element.className equals 'b module--triggerName'\n    var startPos = element.className.indexOf(moduleName + \"--\");                    // 2\n    var sliced = element.className.slice(startPos, element.className.length )       // 'module--triggerName'\n    var endPos = sliced.indexOf(\" \");                                               // -1       // not found\n    if (endPos != -1) {                                                             // 19\n        sliced = sliced.slice(0,endPos);                                            // if there is more after the string, this will remove it\n    }\n    return sliced.replace(moduleName + \"--\",\"\")\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger name is allowed\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} True if the triggername is allowed, otherwise false.\n */\nJssService.triggerNameIsAllowed = function(element, moduleName) {\n    if (JssService.forbiddenProperties.indexOf(this.getTriggerName(element, moduleName)) > -1) {      // This triggerName is a core property, throw error\n        console.error('Triggername `' + getTriggerName(element,moduleName) + '` is not allowed. Change the trigger so it does not corresponds any of these: ' + JssService.forbiddenProperties)\n        return false;\n    }\n    return true;\n}\n/**\n * @module Jss\n * @author      Jeffrey Arts <sjeffff@gmail.com>\n * @copyright   2015\n */\nJss = function(){};\n\nJss.prototype.type      = \"Jss\"\nJss.prototype.triggers  = false;\nJss.prototype.element   = undefined;                                              // {obj} domElement\nJss.prototype.state     = undefined;                                              // {str} State of module, is reflected by the css class __isState\n\n/**\n * -----------------------------------------------------------------------------\n * Find Triggers\n * -----------------------------------------------------------------------------\n *\n * @param {domElement} element\n * @return {undefined}\n */\nJss.prototype.findTriggers = function(element) {\n    this.triggers = [];                                                         // If this is not set, all modules will have the same reference point to this.triggers.\n    // Module is created, now look for any module triggers\n    this.searchTriggersRecursiveInnerFunction(this.element)\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger\n * -----------------------------------------------------------------------------\n */\nJss.prototype.trigger = function(which, fn) {\n    if (typeof this.triggers !== \"object\") {\n        console.info(\"No triggers are found, please specify them in the css as `module-name--trigger-name`.\");\n        return false;\n    }\n\n    if (typeof this.triggers[which] !== \"object\") {\n        console.info(\"You are trying to execute a function on a non existing trigger `\" + which + \"`\");\n        return false;\n    }\n\n    for (var i = 0; i < this.triggers[which].length; i++) {\n        fn(this.triggers[which][i])\n    }\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Search triggers recursive inner function\n * -----------------------------------------------------------------------------\n * Recursive function which is executed bij findTriggers;\n *\n * @return {undefined}\n */\nJss.prototype.searchTriggersRecursiveInnerFunction = function(element) {\n    var self = this;\n    if (typeof element == \"undefined\" ) {\n        element = this.element;\n    }\n    if ( element.hasChildNodes() ) {\n        for (var i=0; i < element.childNodes.length; i++) {\n\n            var childElement = element.childNodes[i];                           // Improve readability\n\n            if (childElement.nodeType == 1) {                                   // NodeType 1 == domElement\n\n                if (JssService.isTrigger(childElement, this.moduleName)) {\n\n                    // Add a child element\n                    if (JssService.triggerNameIsAllowed(childElement, this.moduleName)) {\n                        var triggerName = JssService.getTriggerName(childElement, this.moduleName)\n\n                        if (typeof self.triggers[triggerName] !== \"object\") {\n                            self.triggers[triggerName] = [];\n                        }\n\n                        var tmp = new JssTrigger(childElement, {\n                            module: self,\n                            moduleName: this.moduleName,\n                            triggerName: triggerName,\n                        });\n\n                        self.triggers[triggerName].push(tmp);\n                    }\n                }\n                if (childElement.hasChildNodes()) {\n                    self.searchTriggersRecursiveInnerFunction(childElement)\n                }\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Configure Trigger\n * -----------------------------------------------------------------------------\n *\n * @return {undefined}\n */\nJss.prototype.configureTrigger = function(trigger, fn) {\n    if ( typeof this.triggers[trigger] == \"object\") {\n\n        for (var i = 0; i < this.triggers[trigger].length; i++) {\n            //self.triggers[trigger][i]\n            fn(this.triggers[trigger][i]);\n        }\n\n    } else if (JssService.dev) {\n        console.error(\"You are trying to configure a trigger which has no attached domElement\")\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n *   Init\n * -----------------------------------------------------------------------------\n * Notice the user that a init function needs to be added for controlling the triggers\n *\n * @return {undefined}\n */\nJss.prototype.init = function(func) {\n    if (JssService.dev) {\n        console.info(this.moduleName + \": Add a prototype.init function to add triggers and stuff\")\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set element\n * -----------------------------------------------------------------------------\n * Add a domElement to `this`\n *\n * @return {undefined}\n */\nJss.prototype.setElement = function(element) {\n    if (typeof element == \"undefined\") {\n        if (JssService.dev) {\n            return console.error(\"First parameter of setElement needs to be a domElement\");\n        }\n    }\n    this.element = element;\n}\n/*******************************************************************************\n   *\n   *\tActions\n   *\n   *  \t@author      Jeffrey Arts <sjeffff@gmail.com>\n   *    @copyright   2015\n   *\n*******************************************************************************/\n/**\n * -----------------------------------------------------------------------------\n *   Validate action\n * -----------------------------------------------------------------------------\n * Checks if parameter is a valid action, and logs an error when not.\n *\n * @param {string} request                                                      The name of the request\n * @return {boolean} true if a action is valid, otherwise false.\n */\nJss.prototype.validateAction = function(request) {\n    var result;\n    request = this.getActionElement(request).request\n    for (var action in JssService.actions) {\n        if (JssService.actions[action].indexOf(request.toLowerCase()) > -1) {\n            result = action;\n            break;\n        }\n    }\n    if (result) {\n        return result;\n    } else {\n        console.error(\"validateAction: unknown request\", request);\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * \t Add Action\n * -----------------------------------------------------------------------------\n * Adds an action to the object, list of possible requests can be found in Jss.actions\n *\n * | Options\n * \t\t- addDefaults {boolean}                                                 True: add default classes, false: don't\n *\n *\n *\n * @param {string} request                                                      The name of the request\n * @param {function} fn                                                         The function which should be triggered\n * @param {object} options                                                      Object with option parameters\n * @return {boolean} true if a action is succesfully added, otherwise false.\n */\nJss.prototype.addAction = function(request, fn, options) {\n\n    var self        = this;\n    var action      = self.validateAction(request)\n    var actions     = [];\n    var t = self.getActionElement(request);\n    var element     = t.element;\n    var request     = t.request;\n    t = undefined;\n\n    // Options\n    var addDefaults = JssService.getOption(\"addDefaults\", options);\n\n\n\n    switch (action) {\n\n        case \"resize\":\n\n            actions.push(element.addEventListener(\"resize\", fn));\n\n        break;\n\n\n        case \"click\":\n            actions.push(element.addEventListener(\"click\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"click\", function(){\n                    self.setState(\"Clicked\")\n                }));\n                actions.push(window.addEventListener( \"click\", function(event) {\n                    if (event.target != self.element && self.hasState(\"Clicked\")) {\n                        self.removeState(\"Clicked\")\n                    }\n                }));\n            } // End addDefaults\n        break;\n\n\n        case \"change\":\n            actions.push(element.addEventListener(\"change\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"change\", function(){\n                    self.setState(\"Changed\")\n                    setTimeout(function(){self.removeState(\"Changed\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"hover\":\n            actions.push(element.addEventListener(\"mouseover\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseover\", function(){\n                    self.setState(\"Hover\")\n                }));\n                actions.push(element.addEventListener(\"mouseout\",  function(){\n                    self.removeState(\"Hover\")\n                }));\n            }\n        break;\n\n\n        case \"mouseIn\":\n\n            actions.push(element.addEventListener(\"mouseenter\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseenter\", function(){\n                    self.setState(\"MouseIn\")\n                    setTimeout(function(){self.removeState(\"MouseIn\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"mouseOut\":\n\n            actions.push(element.addEventListener(\"mouseleave\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseleave\", function(){\n                    self.setState(\"MouseOut\")\n                    setTimeout(function(){self.removeState(\"MouseOut\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n    }\n\n\n    if (actions.length > 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get action element\n * -----------------------------------------------------------------------------\n * @param  {string} request                                                     The request\n * @return {object}                                                             An object with 2 properties: request && element\n */\nJss.prototype.getActionElement = function(request) {\n    var self = this;\n    var prefix = false;\n    var newRequest  = request;\n    var element = self.element;\n    // Set prefix if it exists\n    if (request.indexOf(\".\") > 0) {\n        var t       = request.split(\".\"),\n        newRequest  = t[1];\n        prefix      = t[0];\n        t = undefined;\n    }\n\n    // Update element according the prefix (or skip it, if not set)\n    if (prefix !== false) {\n        switch (prefix) {\n            case \"screen\":\n            case \"window\":\n                element = window;\n            break;\n        }\n    }\n\n    // Return object\n    return {\n        request: newRequest,\n        element: element\n    }\n}\n/**\n * -----------------------------------------------------------------------------\n * Class name prefix\n * -----------------------------------------------------------------------------\n * The prefix equals the modulename, or - when it's a trigger object - modulename--triggername\n *\n * @return {string} The classname\n */\nJss.prototype.classNamePrefix = function() {\n    if (this.type == \"JssTrigger\") {\n        return this.moduleName + \"--\" + this.triggerName;\n    } else {\n        return this.moduleName;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Remove class name\n * -----------------------------------------------------------------------------\n * Removes the `this.element` classname\n * \t- \"all\" || undefined        > Removes ALL classnames\n *  - \"allStates\" || \"states\"   > Remove all STATES\n *  - all other strings remove that specific string from the className\n *\n * @param {string} input                                                        The classname (case-sensitive) which needs to be removed\n * @return {undefined}\n */\nJss.prototype.removeClassName = function(input) {\n\n    var classList  = [];\n\n    if (input == \"all\" || typeof input == \"undefined\") {\n\n        this.element.className = \"\";\n\n    } else if (input == \"states\" || input == \"allStates\") {\n\n        classList = this.element.className.split(\" \");\n        for (var i in classList) {\n            className = classList[i];\n            if (className.indexOf(\"__is\") > -1) {\n                delete classList[i];\n            }\n        }\n        this.element.className = classList.join(\" \");\n\n    } else if(typeof input == \"string\") {\n        this.element.className = this.element.className.replace(input,\"\");\n    } else {\n        console.error(\"removeClassName: parameter should be a string\");\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Add class name\n * -----------------------------------------------------------------------------\n * Adds a class name by string or array.\n * Does NOT check for duplicates\n *\n * @param  {string} The classname to be added\n * @return {undefined}\n */\nJss.prototype.addClassName = function(data) {\n    this.element.className += \" \";\n    if (typeof data == \"string\") {\n        this.element.className += data;\n    } else {\n        this.element.className += data.join(\" \")\n    }\n}\n\n/**\n * List where the keys corresponds with this[key], and where the value is the function to be executed when the var is changed.\n */\nJss.prototype.setterWatchList = {};\nJss.prototype.getterWatchList = {};\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add data\n * -----------------------------------------------------------------------------\n * Add a (default) value for the given attribute.\n *\n * @param {string} attribute                                                    The name of the attribute (this[attribute])\n * @param {*} value                                                             The value of this[attribute], could be anything...\n * @param {object} options\n *           \t\t- setterWatchFunction {function}\n *           \t\t- getterWatchFunction {function}\n */\nJss.prototype.addData = function(attribute, value, options) {\n\n\n    // watchList[key] = fn;\n    var setterWatchFunction = JssService.getOption('setterWatchFunction', options); // Function\n    var getterWatchFunction = JssService.getOption('getterWatchFunction', options); // Function\n\n    if (typeof setterWatchFunction === \"function\") {\n        this.setterWatchList[attribute] = setterWatchFunction;\n    }\n\n    if (typeof getterWatchFunction === \"function\") {\n        this.getterWatchList[attribute] = getterWatchFunction;\n    }\n\n    // Set the default value\n    return this[attribute] = value;\n}\n\n\n\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- ajax {string} url\n */\nJss.prototype.setData = function(attribute, value, options) {\n\n    this[attribute] = value;\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n\n    if (Array.isArray(fallback)) {\n\n        for (var i = 0; i < fallback.length; i++) {\n            var type = fallback[i];\n\n            if (value && value.length > 0) {\n                this['setData' + JssService.toCamelCase(type)](attribute, value); // Call this.addDataAttribute(value) || this.addDataCookie(value) etc...\n                this[attribute] = value;\n            }\n        }\n    }\n\n    // Call the setter watch function, if defined;\n    if (typeof this.setterWatchList[attribute] === \"function\") { // Use the watchlist to add functionality whenever a data attribute is updated\n        this.setterWatchList[attribute]();\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataDefault {boolean}\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- dataAjax {string} url\n */\nJss.prototype.getData = function(attribute, options) {\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n    var value = false;\n\n\n    if (!fallback) {\n        fallback = ['attribute'];\n    }\n\n\n    for (var i = 0; i < fallback.length; i++) {\n        var type = JssService.toCamelCase(fallback[i]);\n        var customOptions = false;\n\n        if (typeof options == \"object\") {\n            customOptions = options[fallback[i].toLowerCase()];\n        }\n\n        if (!value || value.length < 0) {\n            if (typeof this['getData' + type] !== \"function\") {\n                console.error('this.getData' + type + ' is not a function. Probably ' + type + ' is not a available data option');\n                continue;\n            }\n            value = this['getData' + type]( attribute, customOptions ); // Call this.getDataAttribute(value) || this.getDataCookie(value) || this.getDataAjax(value) etc...\n        }\n    }\n    console.log(this.getterWatchList);\n    // Call the getter watch function, if defined;\n    if (typeof this.getterWatchList[attribute] == \"function\") {\n        this.getterWatchList[attribute]();\n    }\n\n    return this[attribute] = value;\n}\n/**\n * -----------------------------------------------------------------------------\n * Get data: Ajax\n * -----------------------------------------------------------------------------\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n *\n * @param {string} attribute                                                    The NAME of the inner variable (this.NAME), is also used as the key for the GET Request {NAME: value}\n * @param {object} options                                                      Object with parameters used to make a GET request\n * @return {string}                                                             The value of the given attribute, or false if an erro occured.\n */\nJss.prototype.getDataAjax = function(attribute, options) {\n    var url = JssService.getOption(\"url\", options);\n    var jsonKey = JssService.getOption(\"jsonKey\", options) || attribute;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('GET', url);\n\n        return ajaxReturn.success(function(result){\n            if (typeof result === \"object\") {\n                if (result[jsonKey]) {\n                    return result[jsonKey];\n                }\n            }\n        }).error(function(errorObject){\n            console.log(errorObject);\n        });\n    }\n\n    return false;\n};\n\n/**\n * -----------------------------------------------------------------------------\n * Set data: Ajax\n * -----------------------------------------------------------------------------\n * Makes a post request to the options.url in a object {attribute: value}\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n */\nJss.prototype.setDataAjax = function(attribute, value, options) {\n    var url = JssService.getOption(\"url\", options);\n    var requestObject = {}\n        requestObject[attribute] = value;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('POST', url, requestObject);\n\n        return ajaxReturn.success(function(result){\n            return true;\n        }).error(function(errorObject){\n            console.log(errorObject);\n            return false;\n        });\n    }\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Ajax (helper function)\n * -----------------------------------------------------------------------------\n * Based on Atom.js by Todd Motto\n * http://toddmotto.com/writing-a-standalone-ajax-xhr-javascript-micro-library/\n */\nJss.prototype.ajaxHelper = {\n    // Parses json if possible, otherwise just return text\n    parse: function(req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return [result, req];\n    },\n\n    xhr: function(type, url, data) {\n        var ajaxHelper = this;\n\n        var methods = {\n            success: function() {},\n            error: function() {}\n        };\n        var XHR = XMLHttpRequest || ActiveXObject;\n        var request = new XHR('MSXML2.XMLHTTP.3.0');\n        request.open(type, url, true);\n        request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n\n        request.onreadystatechange = function() {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    methods.success.apply(methods, ajaxHelper.parse(request));\n                } else {\n                    methods.error.apply(methods, ajaxHelper.parse(request));\n                }\n            }\n        };\n        request.send(data);\n        return {\n            success: function(callback) {\n                methods.success = callback;\n                return methods;\n            },\n            error: function(callback) {\n                methods.error = callback;\n                return methods;\n            }\n        };\n    }\n};\n\nJss.prototype.ajax = {\n    // Get\n    get: function(src) {\n        console.log(this);\n    },\n\n    // Set\n    put: function(url, data) {\n        return this.ajaxHelper.xhr('PUT', url, data);\n    },\n\n    // Add\n    post: function(url, data) {\n        return this.ajaxHelper.xhr('POST', url, data);\n    }\n\n};\n/**\n * -----------------------------------------------------------------------------\n * Get data attribute value\n * -----------------------------------------------------------------------------\n * Returns the value of the requested attribute. Search first for a data-[ATTRIBUTE] value\n * If not found, it checks for the attribute in the default object. When that is not being\n * found neither, the normal this[attribute] value is being returned.\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME)\n * @return {string}                                                             The value of the given attribute\n */\nJss.prototype.getDataAttribute = function(attribute) {\n\n    return this.element.dataset[attribute];\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Update data attribute\n * -----------------------------------------------------------------------------\n * Set the value to the given attribute. And updates the data-[ATTRIBUTE] value\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME=\"value\")\n * @param {string} value                                                        The VALUE of the data attribute (data-name=\"VALUE\")\n * @return {undefined}\n */\n\nJss.prototype.setDataAttribute = function(attribute, value) {\n\n    // Update data attribute\n    if (typeof value !== \"undefined\") {\n        this.element.dataset[attribute] = this[attribute];\n    } else {\n        delete this.element.dataset[attribute];\n    }\n\n    return true;\n}\nJss.prototype.dataDefaultsCookie = {\n    'expireData': undefined\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get cookie value\n * -----------------------------------------------------------------------------\n * Returns cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @return {string}                                                             The VALUE of the given attribute\n */\nJss.prototype.getDataCookie = function(attribute) {\n\n    if (!attribute) { return null; }\n    return decodeURIComponent(document.cookie.replace(new RegExp(\"(?:(?:^|.*;)\\\\s*\" + encodeURIComponent(attribute).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"), \"$1\")) || null;\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data cookie\n * -----------------------------------------------------------------------------\n * Updates the cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @param {string} value                                                        The VALUE of the cookie\n * @return {undefined}\n */\n\nJss.prototype.setDataCookie = function(attribute, value, options) {\n    var endDate, path, domain, secureConnection;\n\n    if (typeof options === \"object\") {\n        endDate = JssService.getOption('endDate', options);\n        path    = JssService.getOption('path', options);\n        domain  = JssService.getOption('domain', options);\n        secureConnection = JssService.getOption('secureConnection', options);\n    }\n\n    if (!attribute || /^(?:expires|max\\-age|path|domain|secure)$/i.test(attribute)) { return false; }\n    var sExpires = \"\";\n    if (endDate) {\n      switch (endDate.constructor) {\n        case Number:\n          sExpires = endDate === Infinity ? \"; expires=Fri, 31 Dec 9999 23:59:59 GMT\" : \"; max-age=\" + endDate;\n          break;\n        case String:\n          sExpires = \"; expires=\" + endDate;\n          break;\n        case Date:\n          sExpires = \"; expires=\" + endDate.toUTCString();\n          break;\n      }\n    }\n\n    document.cookie = encodeURIComponent(attribute) + \"=\" + encodeURIComponent(value) + sExpires + (domain ? \"; domain=\" + domain : \"\") + (path ? \"; path=\" + path : \"\") + (secureConnection ? \"; secure\" : \"\");\n    return true;\n}\n/*******************************************************************************\n\n    Styles\n\n*******************************************************************************/\n\n/**\n * -----------------------------------------------------------------------------\n * Set height\n * -----------------------------------------------------------------------------\n * Sets the height of the `this.element` by the given input (height)\n *\n * @param  {number} height                                                      The height in pixels or percentage. Where numbers will be calculated to pixels so giving a height of 50 will result in a height of \"50px\". If you want percentages pass the variable with a percentage sign 50 + \"%\"\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setHeight = function(height) {\n    if (typeof height === \"number\") {\n        height += \"px\";\n    }\n\n    if (typeof height !== \"string\") {\n        throw(\"parameter height needs to be a string or integer\");\n    }\n\n    this.element.style.height = height;\n    return true;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get height\n * -----------------------------------------------------------------------------\n * Returns the height of the `this.element`\n *\n * @return {number}                                                             The height of the element in pixels\n */\nJss.prototype.getHeight = function() {\n    return this.element.offsetHeight;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set width\n * -----------------------------------------------------------------------------\n * Sets the width of the `this.element` by the given input (width)\n *\n * @param  {number} width                                                       The width in pixels or percentage. Where numbers will be calculated to pixels so giving a width of 50 will result in a width of \"50px\". If you want to set a percentage, just pass the variable with a percentage sign (\"50%\")\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setWidth = function(width) {\n    if (typeof width == \"number\") {\n        width += \"px\";\n    }\n\n    if (typeof width !== \"string\") {\n        throw(\"parameter width needs to be a string or integer\");\n    }\n    this.element.style.width = width;\n    return true;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get width\n * -----------------------------------------------------------------------------\n * Returns the width of the `this.element`\n *\n * @return {number}                                                             The width of the element in pixels\n */\nJss.prototype.getWidth = function() {\n    return this.element.offsetWidth;\n}\n/**\n * -----------------------------------------------------------------------------\n * Set State\n * -----------------------------------------------------------------------------\n * This updates the state of the object. States are being added to the class name prefix with a double underscore.\n * If you would have the module `envelope` and give it the state `open`. The class name `envelope__open` will be added.\n * Whenever you remove the state `open`, the according class name will be removed as well.\n *\n * @param  {string} str                                                         The name of the state which should be set (this is transformed to CamelCase)\n * @return {boolean}                                                            True on success, otherwise false (might already have the state)\n */\nJss.prototype.setState = function(str) {\n    var element, verifiedState, state, className;\n\n    element         = this.element;\n    state           = JssService.toCamelCase(str);\n    className       = this.classNamePrefix() + \"__is\" + state;\n\n    // Check if this.state is an array, and make it one if not.\n    if (Array.isArray(this.state) == false ) {\n        this.state = [];\n    }\n\n    // This if statement prevents that the same state is being set multiple times\n    if ( !this.hasState(str) ) {\n        this.addClassName(className)\n        this.state.push(state);\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Has state\n * -----------------------------------------------------------------------------\n * Checks if the parameter is already a state and returns true if so. Otherwise false.\n *\n * @param  {string} str                                                         The state which will be checked for\n * @return {boolean}                                                            True if it has the given state, otherwise false\n */\nJss.prototype.hasState = function(str) {\n    if (typeof this.state == \"object\" && this.state.indexOf(str) >= 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Remove state\n * -----------------------------------------------------------------------------\n * Removes the state from the states array, and from the element.className\n *\n * @param  {string} str                                                         The name of the state which should be removed\n * @return {undefined}\n */\nJss.prototype.removeState = function(str) {\n\n    var state      = JssService.toCamelCase(str);\n    var stateIndex = this.state.indexOf(state);\n\n    if (str == \"all\" || typeof str == \"undefined\") {\n        this.removeClassName(\"states\");\n    } else {\n        this.state.splice(stateIndex, 1);\n        if (typeof this.moduleAction != \"undefined\" && this.moduleAction.length > -1) {\n            this.removeClassName(this.classNamePrefix() + \"\" + this.moduleAction + \"__is\" + state);\n        } else {\n            this.removeClassName(this.classNamePrefix() + \"__is\" + state);\n        }\n    }\n}\n\n\n// A simple way to watch variables\n\n// addVar(keyName, value, watch_function)\n// setVar(keyName, value)\n// getVar(keyName)\n// Add -> new\n// Set -> update\n// Get -> return\nvar JssModule = function(){};\n\nJssModule.prototype.type               = \"JssModule\";\nJssModule.prototype.init               = Jss.prototype.init;\nJssModule.prototype.setElement         = Jss.prototype.setElement;\n\n// Triggers\nJssModule.prototype.findTriggers       = Jss.prototype.findTriggers;\nJssModule.prototype.configureTrigger      = Jss.prototype.configureTrigger;\n\n// Actions\n//JssModule.prototype.actions            = Object.create(Jss.prototype.actions);\nJssModule.prototype.validateAction     = Jss.prototype.validateAction;\nJssModule.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssModule.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssModule.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssModule.prototype.setState           = Jss.prototype.setState;\nJssModule.prototype.hasState           = Jss.prototype.hasState;\nJssModule.prototype.removeState        = Jss.prototype.removeState;\n\n// Data attributes\nJssModule.prototype.addData            = Jss.prototype.addData;\nJssModule.prototype.getData            = Jss.prototype.getData;\nJssModule.prototype.setData            = Jss.prototype.setData;\nvar JssTrigger = function(element, options) {\n    this.setElement(element);\n\n    if (typeof options === \"object\") {\n        if (typeof options.module === \"object\") {\n            this.module = options.module;\n        }\n        if (typeof options.moduleName === \"string\") {\n            this.moduleName = options.moduleName;\n        }\n        if (typeof options.triggerName === \"string\") {\n            this.triggerName = options.triggerName;\n        }\n    }\n}\n\n\nJssTrigger.prototype                    = Object.create(Jss.prototype);\nJssTrigger.prototype.type               = \"JssTrigger\";\nJssTrigger.prototype.setElement         = Jss.prototype.setElement;\n\n// Actions\n//JssTrigger.prototype.actions            = Object.create(Jss.prototype.actions);\nJssTrigger.prototype.validateAction     = Jss.prototype.validateAction;\nJssTrigger.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssTrigger.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssTrigger.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssTrigger.prototype.setState           = Jss.prototype.setState;\nJssTrigger.prototype.hasState           = Jss.prototype.hasState;\nJssTrigger.prototype.removeState        = Jss.prototype.removeState;\n\n\n\nvar  JssController = {};\nJssController.modules \t\t= []; // Result array with objects of all the found modules\nJssController.activeModules \t= JssService.activeModules;\n\nJssController.findModules = function() {\n    var allElements = document.getElementsByTagName(\"*\");                       // Array with all domElements\n    var test = [];\n    var self = this;\n    for (var i=0; i < allElements.length; i++) {\n\n        // Set default vars //\n        var element = allElements[i];                                           // Specific domElement\n        var tmp = false;\n\n        // Loop through the (active) modules array and add/instantiate them\n        self.activeModules.forEach(function(module){\n            if (JssService.isModule(element, module)) {\n                tmp = eval(\"new \" + JssService.toCamelCase(module) + \"(element)\"); // Dynamicly load modules\n\n                tmp.setElement(element);                                        // Add the domElement to the module\n                tmp.findTriggers();\t\t\t                                    // Search for module triggers\n\n                tmp.init();\t\t\t\t\t                                    // Executes everything within the init function\n                self.modules.push(tmp);\n\n            }\n        }); // End forEach\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    JssController.findModules();\n    console.log(JssController);\n});"
          },
          "params": [
            {
              "title": "param",
              "description": "The NAME of the cookie",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "attribute"
            }
          ],
          "returns": [
            {
              "title": "returns",
              "description": "The VALUE of the given attribute",
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ],
          "name": "getDataCookie",
          "kind": "function",
          "memberof": "Jss",
          "scope": "instance",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            "Jss",
            "getDataCookie"
          ]
        },
        {
          "description": "-----------------------------------------------------------------------------\nGet height\n-----------------------------------------------------------------------------\nReturns the height of the `this.element`",
          "tags": [
            {
              "title": "returns",
              "description": "The height of the element in pixels",
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            },
            {
              "title": "name",
              "name": "getHeight"
            },
            {
              "title": "kind",
              "kind": "function"
            },
            {
              "title": "memberof",
              "description": "Jss"
            },
            {
              "title": "instance"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 1052,
                "column": 0
              },
              "end": {
                "line": 1065,
                "column": 0
              }
            },
            "file": "/Users/jeffreyarts/Documents/DEV/jss/lib/jss.js",
            "code": "JssService = {};\n\n// Edit this array to enable or disable default modules\nJssService.activeModules   = []\n\n// Set this to false in a live environment\nJssService.dev             = true;\n\n/**************************\n*\n*   Below are core properties defined, becarefull when you think of changing these...\n*\n**************************/\n\n\nJssService.actions = {\n    hover:      ['hover',    'mouseover',   'onmouseover'                       ], // Fixed\n    click:      ['click',    'onclick'                                          ], // Fixed\n    mouseIn:    ['mousein',  'onmousein', 'mouseenter', 'onmouseenter'          ], // Fixed\n    mouseOut:   ['mouseout', 'onmouseout', 'mouseleave', 'onmouseleave'         ], // Fixed\n    resize:     ['resize',   'onresize'                                         ], // Fixed\n    focus:      ['focus',    'onfocus'                                          ],\n    keyDown:    ['keydown',  'keypress'                                         ],\n    keyUp:      ['keyup',    'keyrelease'                                       ],\n    change:     ['change',   'onchange'                                         ],\n};\n\nJssService.enterDelay = 1000;                                                   // Amount of miliseconds which is used to remove the entered state. (see core.actions) JssService.enterDelay setTimeout\n\nJssService.forbiddenProperties = [\n    'type',\n    'triggers',\n    'configureTrigger',\n    'findTriggers'\n];\n\n/**\n * -----------------------------------------------------------------------------\n * Is Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isModule = function(element, moduleName) {\n    var arr = element.className.split(\" \");\n    var found = false;\n\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i].indexOf(moduleName)        > -1 &&\n            arr[i].indexOf(moduleName + \"_\") == -1 &&\n            arr[i].indexOf(moduleName + \"-\") == -1)\n        {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.addModule = function(moduleName) {\n    this.activeModules.push(this.toKebabCase(moduleName))\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To CamelCase\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toCamelCase = function(input) {\n    var arr, res;\n    res = \"\";\n    if (typeof input === \"string\") {\n        input = input.replace(/\\-/g,\" \");                                       // Replace all dashes with spaces\n        arr = input.split(\" \");\n    } else {\n        arr = input;                                                            // Assume it is an array\n    }\n\n\n\n    var i = 0;\n    for (var i in arr) {\n        if (typeof i != \"undefined\") {\n            res += arr[i][0].toUpperCase()+ arr[i].slice(1); // Capitalize first letter\n        }\n    }\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To kebab-case\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toKebabCase = function(input) {\n    var res, str;\n    res = \"\";\n\n    if (typeof input === \"string\") {\n        str = input;\n    } else {                                                                    // Assume it is an array\n        str = input.join(\" \");\n    }\n\n    // First change it to camelcase\n    str = this.toCamelCase(str);\n\n    var max = str.length;\n    for (var i=0; i < max; i++) {\n        // Check if character is uppercase\n        if (str[i] != str[i].toLowerCase()) {\n            if (i!==0) {\n                str = str.substr(0, i) + \"-\" + str.substr(i);\n                i++;\n            }\n        }\n    }\n\n    return res = str.toLowerCase();\n}\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get option\n * -----------------------------------------------------------------------------\n * @param  {string} name                                                        Keyname in optionList\n * @param  {array} optionList                                                   Array with all possible options\n * @return {}                                                                   Copy of the value (optionsList[name])\n */\nJssService.getOption = function(name, optionList) {\n    if (typeof optionList !== \"object\") {\n        return false;\n    }\n\n    var res;\n\n    switch (name) {\n\n        // Only set `addDefaults` to false when it is explicitly set.\n        case \"addDefaults\":\n            if (optionList[name] !== false || typeof optionList[name] === \"undefined\") {\n                res = true;\n            } else {\n                res = false;\n            }\n        break;\n        case \"fallback\":\n            if ( Array.isArray(optionList[name]) ) {\n                res = optionList[name];\n                if (res.length===0) {\n                    res = false;\n                }\n            } else if (typeof optionList[name] === \"string\"){\n                res = [optionList[name]];\n            }\n        break;\n        default:\n        res = optionList[name]\n    }\n\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Is Trigger\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isTrigger = function(element, moduleName) {\n    if (element.className.indexOf(moduleName + \"--\") > -1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get trigger name\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {string} Name of the trigger.\n */\nJssService.getTriggerName = function(element, moduleName) {\n    if (typeof element != \"object\") {\n        console.error('Required first argument `element` needs to be a domElement.');\n        return false;\n    }\n    if (typeof moduleName != \"string\") {\n        console.error('Required second argument `moduleName` needs to be a string.');\n        return false;\n    }\n\n    // As an example we assume that the value of element.className equals 'b module--triggerName'\n    var startPos = element.className.indexOf(moduleName + \"--\");                    // 2\n    var sliced = element.className.slice(startPos, element.className.length )       // 'module--triggerName'\n    var endPos = sliced.indexOf(\" \");                                               // -1       // not found\n    if (endPos != -1) {                                                             // 19\n        sliced = sliced.slice(0,endPos);                                            // if there is more after the string, this will remove it\n    }\n    return sliced.replace(moduleName + \"--\",\"\")\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger name is allowed\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} True if the triggername is allowed, otherwise false.\n */\nJssService.triggerNameIsAllowed = function(element, moduleName) {\n    if (JssService.forbiddenProperties.indexOf(this.getTriggerName(element, moduleName)) > -1) {      // This triggerName is a core property, throw error\n        console.error('Triggername `' + getTriggerName(element,moduleName) + '` is not allowed. Change the trigger so it does not corresponds any of these: ' + JssService.forbiddenProperties)\n        return false;\n    }\n    return true;\n}\n/**\n * @module Jss\n * @author      Jeffrey Arts <sjeffff@gmail.com>\n * @copyright   2015\n */\nJss = function(){};\n\nJss.prototype.type      = \"Jss\"\nJss.prototype.triggers  = false;\nJss.prototype.element   = undefined;                                              // {obj} domElement\nJss.prototype.state     = undefined;                                              // {str} State of module, is reflected by the css class __isState\n\n/**\n * -----------------------------------------------------------------------------\n * Find Triggers\n * -----------------------------------------------------------------------------\n *\n * @param {domElement} element\n * @return {undefined}\n */\nJss.prototype.findTriggers = function(element) {\n    this.triggers = [];                                                         // If this is not set, all modules will have the same reference point to this.triggers.\n    // Module is created, now look for any module triggers\n    this.searchTriggersRecursiveInnerFunction(this.element)\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger\n * -----------------------------------------------------------------------------\n */\nJss.prototype.trigger = function(which, fn) {\n    if (typeof this.triggers !== \"object\") {\n        console.info(\"No triggers are found, please specify them in the css as `module-name--trigger-name`.\");\n        return false;\n    }\n\n    if (typeof this.triggers[which] !== \"object\") {\n        console.info(\"You are trying to execute a function on a non existing trigger `\" + which + \"`\");\n        return false;\n    }\n\n    for (var i = 0; i < this.triggers[which].length; i++) {\n        fn(this.triggers[which][i])\n    }\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Search triggers recursive inner function\n * -----------------------------------------------------------------------------\n * Recursive function which is executed bij findTriggers;\n *\n * @return {undefined}\n */\nJss.prototype.searchTriggersRecursiveInnerFunction = function(element) {\n    var self = this;\n    if (typeof element == \"undefined\" ) {\n        element = this.element;\n    }\n    if ( element.hasChildNodes() ) {\n        for (var i=0; i < element.childNodes.length; i++) {\n\n            var childElement = element.childNodes[i];                           // Improve readability\n\n            if (childElement.nodeType == 1) {                                   // NodeType 1 == domElement\n\n                if (JssService.isTrigger(childElement, this.moduleName)) {\n\n                    // Add a child element\n                    if (JssService.triggerNameIsAllowed(childElement, this.moduleName)) {\n                        var triggerName = JssService.getTriggerName(childElement, this.moduleName)\n\n                        if (typeof self.triggers[triggerName] !== \"object\") {\n                            self.triggers[triggerName] = [];\n                        }\n\n                        var tmp = new JssTrigger(childElement, {\n                            module: self,\n                            moduleName: this.moduleName,\n                            triggerName: triggerName,\n                        });\n\n                        self.triggers[triggerName].push(tmp);\n                    }\n                }\n                if (childElement.hasChildNodes()) {\n                    self.searchTriggersRecursiveInnerFunction(childElement)\n                }\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Configure Trigger\n * -----------------------------------------------------------------------------\n *\n * @return {undefined}\n */\nJss.prototype.configureTrigger = function(trigger, fn) {\n    if ( typeof this.triggers[trigger] == \"object\") {\n\n        for (var i = 0; i < this.triggers[trigger].length; i++) {\n            //self.triggers[trigger][i]\n            fn(this.triggers[trigger][i]);\n        }\n\n    } else if (JssService.dev) {\n        console.error(\"You are trying to configure a trigger which has no attached domElement\")\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n *   Init\n * -----------------------------------------------------------------------------\n * Notice the user that a init function needs to be added for controlling the triggers\n *\n * @return {undefined}\n */\nJss.prototype.init = function(func) {\n    if (JssService.dev) {\n        console.info(this.moduleName + \": Add a prototype.init function to add triggers and stuff\")\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set element\n * -----------------------------------------------------------------------------\n * Add a domElement to `this`\n *\n * @return {undefined}\n */\nJss.prototype.setElement = function(element) {\n    if (typeof element == \"undefined\") {\n        if (JssService.dev) {\n            return console.error(\"First parameter of setElement needs to be a domElement\");\n        }\n    }\n    this.element = element;\n}\n/*******************************************************************************\n   *\n   *\tActions\n   *\n   *  \t@author      Jeffrey Arts <sjeffff@gmail.com>\n   *    @copyright   2015\n   *\n*******************************************************************************/\n/**\n * -----------------------------------------------------------------------------\n *   Validate action\n * -----------------------------------------------------------------------------\n * Checks if parameter is a valid action, and logs an error when not.\n *\n * @param {string} request                                                      The name of the request\n * @return {boolean} true if a action is valid, otherwise false.\n */\nJss.prototype.validateAction = function(request) {\n    var result;\n    request = this.getActionElement(request).request\n    for (var action in JssService.actions) {\n        if (JssService.actions[action].indexOf(request.toLowerCase()) > -1) {\n            result = action;\n            break;\n        }\n    }\n    if (result) {\n        return result;\n    } else {\n        console.error(\"validateAction: unknown request\", request);\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * \t Add Action\n * -----------------------------------------------------------------------------\n * Adds an action to the object, list of possible requests can be found in Jss.actions\n *\n * | Options\n * \t\t- addDefaults {boolean}                                                 True: add default classes, false: don't\n *\n *\n *\n * @param {string} request                                                      The name of the request\n * @param {function} fn                                                         The function which should be triggered\n * @param {object} options                                                      Object with option parameters\n * @return {boolean} true if a action is succesfully added, otherwise false.\n */\nJss.prototype.addAction = function(request, fn, options) {\n\n    var self        = this;\n    var action      = self.validateAction(request)\n    var actions     = [];\n    var t = self.getActionElement(request);\n    var element     = t.element;\n    var request     = t.request;\n    t = undefined;\n\n    // Options\n    var addDefaults = JssService.getOption(\"addDefaults\", options);\n\n\n\n    switch (action) {\n\n        case \"resize\":\n\n            actions.push(element.addEventListener(\"resize\", fn));\n\n        break;\n\n\n        case \"click\":\n            actions.push(element.addEventListener(\"click\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"click\", function(){\n                    self.setState(\"Clicked\")\n                }));\n                actions.push(window.addEventListener( \"click\", function(event) {\n                    if (event.target != self.element && self.hasState(\"Clicked\")) {\n                        self.removeState(\"Clicked\")\n                    }\n                }));\n            } // End addDefaults\n        break;\n\n\n        case \"change\":\n            actions.push(element.addEventListener(\"change\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"change\", function(){\n                    self.setState(\"Changed\")\n                    setTimeout(function(){self.removeState(\"Changed\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"hover\":\n            actions.push(element.addEventListener(\"mouseover\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseover\", function(){\n                    self.setState(\"Hover\")\n                }));\n                actions.push(element.addEventListener(\"mouseout\",  function(){\n                    self.removeState(\"Hover\")\n                }));\n            }\n        break;\n\n\n        case \"mouseIn\":\n\n            actions.push(element.addEventListener(\"mouseenter\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseenter\", function(){\n                    self.setState(\"MouseIn\")\n                    setTimeout(function(){self.removeState(\"MouseIn\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"mouseOut\":\n\n            actions.push(element.addEventListener(\"mouseleave\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseleave\", function(){\n                    self.setState(\"MouseOut\")\n                    setTimeout(function(){self.removeState(\"MouseOut\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n    }\n\n\n    if (actions.length > 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get action element\n * -----------------------------------------------------------------------------\n * @param  {string} request                                                     The request\n * @return {object}                                                             An object with 2 properties: request && element\n */\nJss.prototype.getActionElement = function(request) {\n    var self = this;\n    var prefix = false;\n    var newRequest  = request;\n    var element = self.element;\n    // Set prefix if it exists\n    if (request.indexOf(\".\") > 0) {\n        var t       = request.split(\".\"),\n        newRequest  = t[1];\n        prefix      = t[0];\n        t = undefined;\n    }\n\n    // Update element according the prefix (or skip it, if not set)\n    if (prefix !== false) {\n        switch (prefix) {\n            case \"screen\":\n            case \"window\":\n                element = window;\n            break;\n        }\n    }\n\n    // Return object\n    return {\n        request: newRequest,\n        element: element\n    }\n}\n/**\n * -----------------------------------------------------------------------------\n * Class name prefix\n * -----------------------------------------------------------------------------\n * The prefix equals the modulename, or - when it's a trigger object - modulename--triggername\n *\n * @return {string} The classname\n */\nJss.prototype.classNamePrefix = function() {\n    if (this.type == \"JssTrigger\") {\n        return this.moduleName + \"--\" + this.triggerName;\n    } else {\n        return this.moduleName;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Remove class name\n * -----------------------------------------------------------------------------\n * Removes the `this.element` classname\n * \t- \"all\" || undefined        > Removes ALL classnames\n *  - \"allStates\" || \"states\"   > Remove all STATES\n *  - all other strings remove that specific string from the className\n *\n * @param {string} input                                                        The classname (case-sensitive) which needs to be removed\n * @return {undefined}\n */\nJss.prototype.removeClassName = function(input) {\n\n    var classList  = [];\n\n    if (input == \"all\" || typeof input == \"undefined\") {\n\n        this.element.className = \"\";\n\n    } else if (input == \"states\" || input == \"allStates\") {\n\n        classList = this.element.className.split(\" \");\n        for (var i in classList) {\n            className = classList[i];\n            if (className.indexOf(\"__is\") > -1) {\n                delete classList[i];\n            }\n        }\n        this.element.className = classList.join(\" \");\n\n    } else if(typeof input == \"string\") {\n        this.element.className = this.element.className.replace(input,\"\");\n    } else {\n        console.error(\"removeClassName: parameter should be a string\");\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Add class name\n * -----------------------------------------------------------------------------\n * Adds a class name by string or array.\n * Does NOT check for duplicates\n *\n * @param  {string} The classname to be added\n * @return {undefined}\n */\nJss.prototype.addClassName = function(data) {\n    this.element.className += \" \";\n    if (typeof data == \"string\") {\n        this.element.className += data;\n    } else {\n        this.element.className += data.join(\" \")\n    }\n}\n\n/**\n * List where the keys corresponds with this[key], and where the value is the function to be executed when the var is changed.\n */\nJss.prototype.setterWatchList = {};\nJss.prototype.getterWatchList = {};\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add data\n * -----------------------------------------------------------------------------\n * Add a (default) value for the given attribute.\n *\n * @param {string} attribute                                                    The name of the attribute (this[attribute])\n * @param {*} value                                                             The value of this[attribute], could be anything...\n * @param {object} options\n *           \t\t- setterWatchFunction {function}\n *           \t\t- getterWatchFunction {function}\n */\nJss.prototype.addData = function(attribute, value, options) {\n\n\n    // watchList[key] = fn;\n    var setterWatchFunction = JssService.getOption('setterWatchFunction', options); // Function\n    var getterWatchFunction = JssService.getOption('getterWatchFunction', options); // Function\n\n    if (typeof setterWatchFunction === \"function\") {\n        this.setterWatchList[attribute] = setterWatchFunction;\n    }\n\n    if (typeof getterWatchFunction === \"function\") {\n        this.getterWatchList[attribute] = getterWatchFunction;\n    }\n\n    // Set the default value\n    return this[attribute] = value;\n}\n\n\n\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- ajax {string} url\n */\nJss.prototype.setData = function(attribute, value, options) {\n\n    this[attribute] = value;\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n\n    if (Array.isArray(fallback)) {\n\n        for (var i = 0; i < fallback.length; i++) {\n            var type = fallback[i];\n\n            if (value && value.length > 0) {\n                this['setData' + JssService.toCamelCase(type)](attribute, value); // Call this.addDataAttribute(value) || this.addDataCookie(value) etc...\n                this[attribute] = value;\n            }\n        }\n    }\n\n    // Call the setter watch function, if defined;\n    if (typeof this.setterWatchList[attribute] === \"function\") { // Use the watchlist to add functionality whenever a data attribute is updated\n        this.setterWatchList[attribute]();\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataDefault {boolean}\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- dataAjax {string} url\n */\nJss.prototype.getData = function(attribute, options) {\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n    var value = false;\n\n\n    if (!fallback) {\n        fallback = ['attribute'];\n    }\n\n\n    for (var i = 0; i < fallback.length; i++) {\n        var type = JssService.toCamelCase(fallback[i]);\n        var customOptions = false;\n\n        if (typeof options == \"object\") {\n            customOptions = options[fallback[i].toLowerCase()];\n        }\n\n        if (!value || value.length < 0) {\n            if (typeof this['getData' + type] !== \"function\") {\n                console.error('this.getData' + type + ' is not a function. Probably ' + type + ' is not a available data option');\n                continue;\n            }\n            value = this['getData' + type]( attribute, customOptions ); // Call this.getDataAttribute(value) || this.getDataCookie(value) || this.getDataAjax(value) etc...\n        }\n    }\n    console.log(this.getterWatchList);\n    // Call the getter watch function, if defined;\n    if (typeof this.getterWatchList[attribute] == \"function\") {\n        this.getterWatchList[attribute]();\n    }\n\n    return this[attribute] = value;\n}\n/**\n * -----------------------------------------------------------------------------\n * Get data: Ajax\n * -----------------------------------------------------------------------------\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n *\n * @param {string} attribute                                                    The NAME of the inner variable (this.NAME), is also used as the key for the GET Request {NAME: value}\n * @param {object} options                                                      Object with parameters used to make a GET request\n * @return {string}                                                             The value of the given attribute, or false if an erro occured.\n */\nJss.prototype.getDataAjax = function(attribute, options) {\n    var url = JssService.getOption(\"url\", options);\n    var jsonKey = JssService.getOption(\"jsonKey\", options) || attribute;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('GET', url);\n\n        return ajaxReturn.success(function(result){\n            if (typeof result === \"object\") {\n                if (result[jsonKey]) {\n                    return result[jsonKey];\n                }\n            }\n        }).error(function(errorObject){\n            console.log(errorObject);\n        });\n    }\n\n    return false;\n};\n\n/**\n * -----------------------------------------------------------------------------\n * Set data: Ajax\n * -----------------------------------------------------------------------------\n * Makes a post request to the options.url in a object {attribute: value}\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n */\nJss.prototype.setDataAjax = function(attribute, value, options) {\n    var url = JssService.getOption(\"url\", options);\n    var requestObject = {}\n        requestObject[attribute] = value;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('POST', url, requestObject);\n\n        return ajaxReturn.success(function(result){\n            return true;\n        }).error(function(errorObject){\n            console.log(errorObject);\n            return false;\n        });\n    }\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Ajax (helper function)\n * -----------------------------------------------------------------------------\n * Based on Atom.js by Todd Motto\n * http://toddmotto.com/writing-a-standalone-ajax-xhr-javascript-micro-library/\n */\nJss.prototype.ajaxHelper = {\n    // Parses json if possible, otherwise just return text\n    parse: function(req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return [result, req];\n    },\n\n    xhr: function(type, url, data) {\n        var ajaxHelper = this;\n\n        var methods = {\n            success: function() {},\n            error: function() {}\n        };\n        var XHR = XMLHttpRequest || ActiveXObject;\n        var request = new XHR('MSXML2.XMLHTTP.3.0');\n        request.open(type, url, true);\n        request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n\n        request.onreadystatechange = function() {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    methods.success.apply(methods, ajaxHelper.parse(request));\n                } else {\n                    methods.error.apply(methods, ajaxHelper.parse(request));\n                }\n            }\n        };\n        request.send(data);\n        return {\n            success: function(callback) {\n                methods.success = callback;\n                return methods;\n            },\n            error: function(callback) {\n                methods.error = callback;\n                return methods;\n            }\n        };\n    }\n};\n\nJss.prototype.ajax = {\n    // Get\n    get: function(src) {\n        console.log(this);\n    },\n\n    // Set\n    put: function(url, data) {\n        return this.ajaxHelper.xhr('PUT', url, data);\n    },\n\n    // Add\n    post: function(url, data) {\n        return this.ajaxHelper.xhr('POST', url, data);\n    }\n\n};\n/**\n * -----------------------------------------------------------------------------\n * Get data attribute value\n * -----------------------------------------------------------------------------\n * Returns the value of the requested attribute. Search first for a data-[ATTRIBUTE] value\n * If not found, it checks for the attribute in the default object. When that is not being\n * found neither, the normal this[attribute] value is being returned.\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME)\n * @return {string}                                                             The value of the given attribute\n */\nJss.prototype.getDataAttribute = function(attribute) {\n\n    return this.element.dataset[attribute];\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Update data attribute\n * -----------------------------------------------------------------------------\n * Set the value to the given attribute. And updates the data-[ATTRIBUTE] value\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME=\"value\")\n * @param {string} value                                                        The VALUE of the data attribute (data-name=\"VALUE\")\n * @return {undefined}\n */\n\nJss.prototype.setDataAttribute = function(attribute, value) {\n\n    // Update data attribute\n    if (typeof value !== \"undefined\") {\n        this.element.dataset[attribute] = this[attribute];\n    } else {\n        delete this.element.dataset[attribute];\n    }\n\n    return true;\n}\nJss.prototype.dataDefaultsCookie = {\n    'expireData': undefined\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get cookie value\n * -----------------------------------------------------------------------------\n * Returns cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @return {string}                                                             The VALUE of the given attribute\n */\nJss.prototype.getDataCookie = function(attribute) {\n\n    if (!attribute) { return null; }\n    return decodeURIComponent(document.cookie.replace(new RegExp(\"(?:(?:^|.*;)\\\\s*\" + encodeURIComponent(attribute).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"), \"$1\")) || null;\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data cookie\n * -----------------------------------------------------------------------------\n * Updates the cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @param {string} value                                                        The VALUE of the cookie\n * @return {undefined}\n */\n\nJss.prototype.setDataCookie = function(attribute, value, options) {\n    var endDate, path, domain, secureConnection;\n\n    if (typeof options === \"object\") {\n        endDate = JssService.getOption('endDate', options);\n        path    = JssService.getOption('path', options);\n        domain  = JssService.getOption('domain', options);\n        secureConnection = JssService.getOption('secureConnection', options);\n    }\n\n    if (!attribute || /^(?:expires|max\\-age|path|domain|secure)$/i.test(attribute)) { return false; }\n    var sExpires = \"\";\n    if (endDate) {\n      switch (endDate.constructor) {\n        case Number:\n          sExpires = endDate === Infinity ? \"; expires=Fri, 31 Dec 9999 23:59:59 GMT\" : \"; max-age=\" + endDate;\n          break;\n        case String:\n          sExpires = \"; expires=\" + endDate;\n          break;\n        case Date:\n          sExpires = \"; expires=\" + endDate.toUTCString();\n          break;\n      }\n    }\n\n    document.cookie = encodeURIComponent(attribute) + \"=\" + encodeURIComponent(value) + sExpires + (domain ? \"; domain=\" + domain : \"\") + (path ? \"; path=\" + path : \"\") + (secureConnection ? \"; secure\" : \"\");\n    return true;\n}\n/*******************************************************************************\n\n    Styles\n\n*******************************************************************************/\n\n/**\n * -----------------------------------------------------------------------------\n * Set height\n * -----------------------------------------------------------------------------\n * Sets the height of the `this.element` by the given input (height)\n *\n * @param  {number} height                                                      The height in pixels or percentage. Where numbers will be calculated to pixels so giving a height of 50 will result in a height of \"50px\". If you want percentages pass the variable with a percentage sign 50 + \"%\"\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setHeight = function(height) {\n    if (typeof height === \"number\") {\n        height += \"px\";\n    }\n\n    if (typeof height !== \"string\") {\n        throw(\"parameter height needs to be a string or integer\");\n    }\n\n    this.element.style.height = height;\n    return true;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get height\n * -----------------------------------------------------------------------------\n * Returns the height of the `this.element`\n *\n * @return {number}                                                             The height of the element in pixels\n */\nJss.prototype.getHeight = function() {\n    return this.element.offsetHeight;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set width\n * -----------------------------------------------------------------------------\n * Sets the width of the `this.element` by the given input (width)\n *\n * @param  {number} width                                                       The width in pixels or percentage. Where numbers will be calculated to pixels so giving a width of 50 will result in a width of \"50px\". If you want to set a percentage, just pass the variable with a percentage sign (\"50%\")\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setWidth = function(width) {\n    if (typeof width == \"number\") {\n        width += \"px\";\n    }\n\n    if (typeof width !== \"string\") {\n        throw(\"parameter width needs to be a string or integer\");\n    }\n    this.element.style.width = width;\n    return true;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get width\n * -----------------------------------------------------------------------------\n * Returns the width of the `this.element`\n *\n * @return {number}                                                             The width of the element in pixels\n */\nJss.prototype.getWidth = function() {\n    return this.element.offsetWidth;\n}\n/**\n * -----------------------------------------------------------------------------\n * Set State\n * -----------------------------------------------------------------------------\n * This updates the state of the object. States are being added to the class name prefix with a double underscore.\n * If you would have the module `envelope` and give it the state `open`. The class name `envelope__open` will be added.\n * Whenever you remove the state `open`, the according class name will be removed as well.\n *\n * @param  {string} str                                                         The name of the state which should be set (this is transformed to CamelCase)\n * @return {boolean}                                                            True on success, otherwise false (might already have the state)\n */\nJss.prototype.setState = function(str) {\n    var element, verifiedState, state, className;\n\n    element         = this.element;\n    state           = JssService.toCamelCase(str);\n    className       = this.classNamePrefix() + \"__is\" + state;\n\n    // Check if this.state is an array, and make it one if not.\n    if (Array.isArray(this.state) == false ) {\n        this.state = [];\n    }\n\n    // This if statement prevents that the same state is being set multiple times\n    if ( !this.hasState(str) ) {\n        this.addClassName(className)\n        this.state.push(state);\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Has state\n * -----------------------------------------------------------------------------\n * Checks if the parameter is already a state and returns true if so. Otherwise false.\n *\n * @param  {string} str                                                         The state which will be checked for\n * @return {boolean}                                                            True if it has the given state, otherwise false\n */\nJss.prototype.hasState = function(str) {\n    if (typeof this.state == \"object\" && this.state.indexOf(str) >= 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Remove state\n * -----------------------------------------------------------------------------\n * Removes the state from the states array, and from the element.className\n *\n * @param  {string} str                                                         The name of the state which should be removed\n * @return {undefined}\n */\nJss.prototype.removeState = function(str) {\n\n    var state      = JssService.toCamelCase(str);\n    var stateIndex = this.state.indexOf(state);\n\n    if (str == \"all\" || typeof str == \"undefined\") {\n        this.removeClassName(\"states\");\n    } else {\n        this.state.splice(stateIndex, 1);\n        if (typeof this.moduleAction != \"undefined\" && this.moduleAction.length > -1) {\n            this.removeClassName(this.classNamePrefix() + \"\" + this.moduleAction + \"__is\" + state);\n        } else {\n            this.removeClassName(this.classNamePrefix() + \"__is\" + state);\n        }\n    }\n}\n\n\n// A simple way to watch variables\n\n// addVar(keyName, value, watch_function)\n// setVar(keyName, value)\n// getVar(keyName)\n// Add -> new\n// Set -> update\n// Get -> return\nvar JssModule = function(){};\n\nJssModule.prototype.type               = \"JssModule\";\nJssModule.prototype.init               = Jss.prototype.init;\nJssModule.prototype.setElement         = Jss.prototype.setElement;\n\n// Triggers\nJssModule.prototype.findTriggers       = Jss.prototype.findTriggers;\nJssModule.prototype.configureTrigger      = Jss.prototype.configureTrigger;\n\n// Actions\n//JssModule.prototype.actions            = Object.create(Jss.prototype.actions);\nJssModule.prototype.validateAction     = Jss.prototype.validateAction;\nJssModule.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssModule.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssModule.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssModule.prototype.setState           = Jss.prototype.setState;\nJssModule.prototype.hasState           = Jss.prototype.hasState;\nJssModule.prototype.removeState        = Jss.prototype.removeState;\n\n// Data attributes\nJssModule.prototype.addData            = Jss.prototype.addData;\nJssModule.prototype.getData            = Jss.prototype.getData;\nJssModule.prototype.setData            = Jss.prototype.setData;\nvar JssTrigger = function(element, options) {\n    this.setElement(element);\n\n    if (typeof options === \"object\") {\n        if (typeof options.module === \"object\") {\n            this.module = options.module;\n        }\n        if (typeof options.moduleName === \"string\") {\n            this.moduleName = options.moduleName;\n        }\n        if (typeof options.triggerName === \"string\") {\n            this.triggerName = options.triggerName;\n        }\n    }\n}\n\n\nJssTrigger.prototype                    = Object.create(Jss.prototype);\nJssTrigger.prototype.type               = \"JssTrigger\";\nJssTrigger.prototype.setElement         = Jss.prototype.setElement;\n\n// Actions\n//JssTrigger.prototype.actions            = Object.create(Jss.prototype.actions);\nJssTrigger.prototype.validateAction     = Jss.prototype.validateAction;\nJssTrigger.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssTrigger.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssTrigger.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssTrigger.prototype.setState           = Jss.prototype.setState;\nJssTrigger.prototype.hasState           = Jss.prototype.hasState;\nJssTrigger.prototype.removeState        = Jss.prototype.removeState;\n\n\n\nvar  JssController = {};\nJssController.modules \t\t= []; // Result array with objects of all the found modules\nJssController.activeModules \t= JssService.activeModules;\n\nJssController.findModules = function() {\n    var allElements = document.getElementsByTagName(\"*\");                       // Array with all domElements\n    var test = [];\n    var self = this;\n    for (var i=0; i < allElements.length; i++) {\n\n        // Set default vars //\n        var element = allElements[i];                                           // Specific domElement\n        var tmp = false;\n\n        // Loop through the (active) modules array and add/instantiate them\n        self.activeModules.forEach(function(module){\n            if (JssService.isModule(element, module)) {\n                tmp = eval(\"new \" + JssService.toCamelCase(module) + \"(element)\"); // Dynamicly load modules\n\n                tmp.setElement(element);                                        // Add the domElement to the module\n                tmp.findTriggers();\t\t\t                                    // Search for module triggers\n\n                tmp.init();\t\t\t\t\t                                    // Executes everything within the init function\n                self.modules.push(tmp);\n\n            }\n        }); // End forEach\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    JssController.findModules();\n    console.log(JssController);\n});"
          },
          "returns": [
            {
              "title": "returns",
              "description": "The height of the element in pixels",
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            }
          ],
          "name": "getHeight",
          "kind": "function",
          "memberof": "Jss",
          "scope": "instance",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            "Jss",
            "getHeight"
          ]
        },
        {
          "description": "-----------------------------------------------------------------------------\nGet width\n-----------------------------------------------------------------------------\nReturns the width of the `this.element`",
          "tags": [
            {
              "title": "returns",
              "description": "The width of the element in pixels",
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            },
            {
              "title": "name",
              "name": "getWidth"
            },
            {
              "title": "kind",
              "kind": "function"
            },
            {
              "title": "memberof",
              "description": "Jss"
            },
            {
              "title": "instance"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 1086,
                "column": 0
              },
              "end": {
                "line": 1100,
                "column": 0
              }
            },
            "file": "/Users/jeffreyarts/Documents/DEV/jss/lib/jss.js",
            "code": "JssService = {};\n\n// Edit this array to enable or disable default modules\nJssService.activeModules   = []\n\n// Set this to false in a live environment\nJssService.dev             = true;\n\n/**************************\n*\n*   Below are core properties defined, becarefull when you think of changing these...\n*\n**************************/\n\n\nJssService.actions = {\n    hover:      ['hover',    'mouseover',   'onmouseover'                       ], // Fixed\n    click:      ['click',    'onclick'                                          ], // Fixed\n    mouseIn:    ['mousein',  'onmousein', 'mouseenter', 'onmouseenter'          ], // Fixed\n    mouseOut:   ['mouseout', 'onmouseout', 'mouseleave', 'onmouseleave'         ], // Fixed\n    resize:     ['resize',   'onresize'                                         ], // Fixed\n    focus:      ['focus',    'onfocus'                                          ],\n    keyDown:    ['keydown',  'keypress'                                         ],\n    keyUp:      ['keyup',    'keyrelease'                                       ],\n    change:     ['change',   'onchange'                                         ],\n};\n\nJssService.enterDelay = 1000;                                                   // Amount of miliseconds which is used to remove the entered state. (see core.actions) JssService.enterDelay setTimeout\n\nJssService.forbiddenProperties = [\n    'type',\n    'triggers',\n    'configureTrigger',\n    'findTriggers'\n];\n\n/**\n * -----------------------------------------------------------------------------\n * Is Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isModule = function(element, moduleName) {\n    var arr = element.className.split(\" \");\n    var found = false;\n\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i].indexOf(moduleName)        > -1 &&\n            arr[i].indexOf(moduleName + \"_\") == -1 &&\n            arr[i].indexOf(moduleName + \"-\") == -1)\n        {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.addModule = function(moduleName) {\n    this.activeModules.push(this.toKebabCase(moduleName))\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To CamelCase\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toCamelCase = function(input) {\n    var arr, res;\n    res = \"\";\n    if (typeof input === \"string\") {\n        input = input.replace(/\\-/g,\" \");                                       // Replace all dashes with spaces\n        arr = input.split(\" \");\n    } else {\n        arr = input;                                                            // Assume it is an array\n    }\n\n\n\n    var i = 0;\n    for (var i in arr) {\n        if (typeof i != \"undefined\") {\n            res += arr[i][0].toUpperCase()+ arr[i].slice(1); // Capitalize first letter\n        }\n    }\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To kebab-case\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toKebabCase = function(input) {\n    var res, str;\n    res = \"\";\n\n    if (typeof input === \"string\") {\n        str = input;\n    } else {                                                                    // Assume it is an array\n        str = input.join(\" \");\n    }\n\n    // First change it to camelcase\n    str = this.toCamelCase(str);\n\n    var max = str.length;\n    for (var i=0; i < max; i++) {\n        // Check if character is uppercase\n        if (str[i] != str[i].toLowerCase()) {\n            if (i!==0) {\n                str = str.substr(0, i) + \"-\" + str.substr(i);\n                i++;\n            }\n        }\n    }\n\n    return res = str.toLowerCase();\n}\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get option\n * -----------------------------------------------------------------------------\n * @param  {string} name                                                        Keyname in optionList\n * @param  {array} optionList                                                   Array with all possible options\n * @return {}                                                                   Copy of the value (optionsList[name])\n */\nJssService.getOption = function(name, optionList) {\n    if (typeof optionList !== \"object\") {\n        return false;\n    }\n\n    var res;\n\n    switch (name) {\n\n        // Only set `addDefaults` to false when it is explicitly set.\n        case \"addDefaults\":\n            if (optionList[name] !== false || typeof optionList[name] === \"undefined\") {\n                res = true;\n            } else {\n                res = false;\n            }\n        break;\n        case \"fallback\":\n            if ( Array.isArray(optionList[name]) ) {\n                res = optionList[name];\n                if (res.length===0) {\n                    res = false;\n                }\n            } else if (typeof optionList[name] === \"string\"){\n                res = [optionList[name]];\n            }\n        break;\n        default:\n        res = optionList[name]\n    }\n\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Is Trigger\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isTrigger = function(element, moduleName) {\n    if (element.className.indexOf(moduleName + \"--\") > -1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get trigger name\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {string} Name of the trigger.\n */\nJssService.getTriggerName = function(element, moduleName) {\n    if (typeof element != \"object\") {\n        console.error('Required first argument `element` needs to be a domElement.');\n        return false;\n    }\n    if (typeof moduleName != \"string\") {\n        console.error('Required second argument `moduleName` needs to be a string.');\n        return false;\n    }\n\n    // As an example we assume that the value of element.className equals 'b module--triggerName'\n    var startPos = element.className.indexOf(moduleName + \"--\");                    // 2\n    var sliced = element.className.slice(startPos, element.className.length )       // 'module--triggerName'\n    var endPos = sliced.indexOf(\" \");                                               // -1       // not found\n    if (endPos != -1) {                                                             // 19\n        sliced = sliced.slice(0,endPos);                                            // if there is more after the string, this will remove it\n    }\n    return sliced.replace(moduleName + \"--\",\"\")\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger name is allowed\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} True if the triggername is allowed, otherwise false.\n */\nJssService.triggerNameIsAllowed = function(element, moduleName) {\n    if (JssService.forbiddenProperties.indexOf(this.getTriggerName(element, moduleName)) > -1) {      // This triggerName is a core property, throw error\n        console.error('Triggername `' + getTriggerName(element,moduleName) + '` is not allowed. Change the trigger so it does not corresponds any of these: ' + JssService.forbiddenProperties)\n        return false;\n    }\n    return true;\n}\n/**\n * @module Jss\n * @author      Jeffrey Arts <sjeffff@gmail.com>\n * @copyright   2015\n */\nJss = function(){};\n\nJss.prototype.type      = \"Jss\"\nJss.prototype.triggers  = false;\nJss.prototype.element   = undefined;                                              // {obj} domElement\nJss.prototype.state     = undefined;                                              // {str} State of module, is reflected by the css class __isState\n\n/**\n * -----------------------------------------------------------------------------\n * Find Triggers\n * -----------------------------------------------------------------------------\n *\n * @param {domElement} element\n * @return {undefined}\n */\nJss.prototype.findTriggers = function(element) {\n    this.triggers = [];                                                         // If this is not set, all modules will have the same reference point to this.triggers.\n    // Module is created, now look for any module triggers\n    this.searchTriggersRecursiveInnerFunction(this.element)\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger\n * -----------------------------------------------------------------------------\n */\nJss.prototype.trigger = function(which, fn) {\n    if (typeof this.triggers !== \"object\") {\n        console.info(\"No triggers are found, please specify them in the css as `module-name--trigger-name`.\");\n        return false;\n    }\n\n    if (typeof this.triggers[which] !== \"object\") {\n        console.info(\"You are trying to execute a function on a non existing trigger `\" + which + \"`\");\n        return false;\n    }\n\n    for (var i = 0; i < this.triggers[which].length; i++) {\n        fn(this.triggers[which][i])\n    }\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Search triggers recursive inner function\n * -----------------------------------------------------------------------------\n * Recursive function which is executed bij findTriggers;\n *\n * @return {undefined}\n */\nJss.prototype.searchTriggersRecursiveInnerFunction = function(element) {\n    var self = this;\n    if (typeof element == \"undefined\" ) {\n        element = this.element;\n    }\n    if ( element.hasChildNodes() ) {\n        for (var i=0; i < element.childNodes.length; i++) {\n\n            var childElement = element.childNodes[i];                           // Improve readability\n\n            if (childElement.nodeType == 1) {                                   // NodeType 1 == domElement\n\n                if (JssService.isTrigger(childElement, this.moduleName)) {\n\n                    // Add a child element\n                    if (JssService.triggerNameIsAllowed(childElement, this.moduleName)) {\n                        var triggerName = JssService.getTriggerName(childElement, this.moduleName)\n\n                        if (typeof self.triggers[triggerName] !== \"object\") {\n                            self.triggers[triggerName] = [];\n                        }\n\n                        var tmp = new JssTrigger(childElement, {\n                            module: self,\n                            moduleName: this.moduleName,\n                            triggerName: triggerName,\n                        });\n\n                        self.triggers[triggerName].push(tmp);\n                    }\n                }\n                if (childElement.hasChildNodes()) {\n                    self.searchTriggersRecursiveInnerFunction(childElement)\n                }\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Configure Trigger\n * -----------------------------------------------------------------------------\n *\n * @return {undefined}\n */\nJss.prototype.configureTrigger = function(trigger, fn) {\n    if ( typeof this.triggers[trigger] == \"object\") {\n\n        for (var i = 0; i < this.triggers[trigger].length; i++) {\n            //self.triggers[trigger][i]\n            fn(this.triggers[trigger][i]);\n        }\n\n    } else if (JssService.dev) {\n        console.error(\"You are trying to configure a trigger which has no attached domElement\")\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n *   Init\n * -----------------------------------------------------------------------------\n * Notice the user that a init function needs to be added for controlling the triggers\n *\n * @return {undefined}\n */\nJss.prototype.init = function(func) {\n    if (JssService.dev) {\n        console.info(this.moduleName + \": Add a prototype.init function to add triggers and stuff\")\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set element\n * -----------------------------------------------------------------------------\n * Add a domElement to `this`\n *\n * @return {undefined}\n */\nJss.prototype.setElement = function(element) {\n    if (typeof element == \"undefined\") {\n        if (JssService.dev) {\n            return console.error(\"First parameter of setElement needs to be a domElement\");\n        }\n    }\n    this.element = element;\n}\n/*******************************************************************************\n   *\n   *\tActions\n   *\n   *  \t@author      Jeffrey Arts <sjeffff@gmail.com>\n   *    @copyright   2015\n   *\n*******************************************************************************/\n/**\n * -----------------------------------------------------------------------------\n *   Validate action\n * -----------------------------------------------------------------------------\n * Checks if parameter is a valid action, and logs an error when not.\n *\n * @param {string} request                                                      The name of the request\n * @return {boolean} true if a action is valid, otherwise false.\n */\nJss.prototype.validateAction = function(request) {\n    var result;\n    request = this.getActionElement(request).request\n    for (var action in JssService.actions) {\n        if (JssService.actions[action].indexOf(request.toLowerCase()) > -1) {\n            result = action;\n            break;\n        }\n    }\n    if (result) {\n        return result;\n    } else {\n        console.error(\"validateAction: unknown request\", request);\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * \t Add Action\n * -----------------------------------------------------------------------------\n * Adds an action to the object, list of possible requests can be found in Jss.actions\n *\n * | Options\n * \t\t- addDefaults {boolean}                                                 True: add default classes, false: don't\n *\n *\n *\n * @param {string} request                                                      The name of the request\n * @param {function} fn                                                         The function which should be triggered\n * @param {object} options                                                      Object with option parameters\n * @return {boolean} true if a action is succesfully added, otherwise false.\n */\nJss.prototype.addAction = function(request, fn, options) {\n\n    var self        = this;\n    var action      = self.validateAction(request)\n    var actions     = [];\n    var t = self.getActionElement(request);\n    var element     = t.element;\n    var request     = t.request;\n    t = undefined;\n\n    // Options\n    var addDefaults = JssService.getOption(\"addDefaults\", options);\n\n\n\n    switch (action) {\n\n        case \"resize\":\n\n            actions.push(element.addEventListener(\"resize\", fn));\n\n        break;\n\n\n        case \"click\":\n            actions.push(element.addEventListener(\"click\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"click\", function(){\n                    self.setState(\"Clicked\")\n                }));\n                actions.push(window.addEventListener( \"click\", function(event) {\n                    if (event.target != self.element && self.hasState(\"Clicked\")) {\n                        self.removeState(\"Clicked\")\n                    }\n                }));\n            } // End addDefaults\n        break;\n\n\n        case \"change\":\n            actions.push(element.addEventListener(\"change\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"change\", function(){\n                    self.setState(\"Changed\")\n                    setTimeout(function(){self.removeState(\"Changed\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"hover\":\n            actions.push(element.addEventListener(\"mouseover\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseover\", function(){\n                    self.setState(\"Hover\")\n                }));\n                actions.push(element.addEventListener(\"mouseout\",  function(){\n                    self.removeState(\"Hover\")\n                }));\n            }\n        break;\n\n\n        case \"mouseIn\":\n\n            actions.push(element.addEventListener(\"mouseenter\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseenter\", function(){\n                    self.setState(\"MouseIn\")\n                    setTimeout(function(){self.removeState(\"MouseIn\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"mouseOut\":\n\n            actions.push(element.addEventListener(\"mouseleave\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseleave\", function(){\n                    self.setState(\"MouseOut\")\n                    setTimeout(function(){self.removeState(\"MouseOut\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n    }\n\n\n    if (actions.length > 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get action element\n * -----------------------------------------------------------------------------\n * @param  {string} request                                                     The request\n * @return {object}                                                             An object with 2 properties: request && element\n */\nJss.prototype.getActionElement = function(request) {\n    var self = this;\n    var prefix = false;\n    var newRequest  = request;\n    var element = self.element;\n    // Set prefix if it exists\n    if (request.indexOf(\".\") > 0) {\n        var t       = request.split(\".\"),\n        newRequest  = t[1];\n        prefix      = t[0];\n        t = undefined;\n    }\n\n    // Update element according the prefix (or skip it, if not set)\n    if (prefix !== false) {\n        switch (prefix) {\n            case \"screen\":\n            case \"window\":\n                element = window;\n            break;\n        }\n    }\n\n    // Return object\n    return {\n        request: newRequest,\n        element: element\n    }\n}\n/**\n * -----------------------------------------------------------------------------\n * Class name prefix\n * -----------------------------------------------------------------------------\n * The prefix equals the modulename, or - when it's a trigger object - modulename--triggername\n *\n * @return {string} The classname\n */\nJss.prototype.classNamePrefix = function() {\n    if (this.type == \"JssTrigger\") {\n        return this.moduleName + \"--\" + this.triggerName;\n    } else {\n        return this.moduleName;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Remove class name\n * -----------------------------------------------------------------------------\n * Removes the `this.element` classname\n * \t- \"all\" || undefined        > Removes ALL classnames\n *  - \"allStates\" || \"states\"   > Remove all STATES\n *  - all other strings remove that specific string from the className\n *\n * @param {string} input                                                        The classname (case-sensitive) which needs to be removed\n * @return {undefined}\n */\nJss.prototype.removeClassName = function(input) {\n\n    var classList  = [];\n\n    if (input == \"all\" || typeof input == \"undefined\") {\n\n        this.element.className = \"\";\n\n    } else if (input == \"states\" || input == \"allStates\") {\n\n        classList = this.element.className.split(\" \");\n        for (var i in classList) {\n            className = classList[i];\n            if (className.indexOf(\"__is\") > -1) {\n                delete classList[i];\n            }\n        }\n        this.element.className = classList.join(\" \");\n\n    } else if(typeof input == \"string\") {\n        this.element.className = this.element.className.replace(input,\"\");\n    } else {\n        console.error(\"removeClassName: parameter should be a string\");\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Add class name\n * -----------------------------------------------------------------------------\n * Adds a class name by string or array.\n * Does NOT check for duplicates\n *\n * @param  {string} The classname to be added\n * @return {undefined}\n */\nJss.prototype.addClassName = function(data) {\n    this.element.className += \" \";\n    if (typeof data == \"string\") {\n        this.element.className += data;\n    } else {\n        this.element.className += data.join(\" \")\n    }\n}\n\n/**\n * List where the keys corresponds with this[key], and where the value is the function to be executed when the var is changed.\n */\nJss.prototype.setterWatchList = {};\nJss.prototype.getterWatchList = {};\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add data\n * -----------------------------------------------------------------------------\n * Add a (default) value for the given attribute.\n *\n * @param {string} attribute                                                    The name of the attribute (this[attribute])\n * @param {*} value                                                             The value of this[attribute], could be anything...\n * @param {object} options\n *           \t\t- setterWatchFunction {function}\n *           \t\t- getterWatchFunction {function}\n */\nJss.prototype.addData = function(attribute, value, options) {\n\n\n    // watchList[key] = fn;\n    var setterWatchFunction = JssService.getOption('setterWatchFunction', options); // Function\n    var getterWatchFunction = JssService.getOption('getterWatchFunction', options); // Function\n\n    if (typeof setterWatchFunction === \"function\") {\n        this.setterWatchList[attribute] = setterWatchFunction;\n    }\n\n    if (typeof getterWatchFunction === \"function\") {\n        this.getterWatchList[attribute] = getterWatchFunction;\n    }\n\n    // Set the default value\n    return this[attribute] = value;\n}\n\n\n\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- ajax {string} url\n */\nJss.prototype.setData = function(attribute, value, options) {\n\n    this[attribute] = value;\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n\n    if (Array.isArray(fallback)) {\n\n        for (var i = 0; i < fallback.length; i++) {\n            var type = fallback[i];\n\n            if (value && value.length > 0) {\n                this['setData' + JssService.toCamelCase(type)](attribute, value); // Call this.addDataAttribute(value) || this.addDataCookie(value) etc...\n                this[attribute] = value;\n            }\n        }\n    }\n\n    // Call the setter watch function, if defined;\n    if (typeof this.setterWatchList[attribute] === \"function\") { // Use the watchlist to add functionality whenever a data attribute is updated\n        this.setterWatchList[attribute]();\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataDefault {boolean}\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- dataAjax {string} url\n */\nJss.prototype.getData = function(attribute, options) {\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n    var value = false;\n\n\n    if (!fallback) {\n        fallback = ['attribute'];\n    }\n\n\n    for (var i = 0; i < fallback.length; i++) {\n        var type = JssService.toCamelCase(fallback[i]);\n        var customOptions = false;\n\n        if (typeof options == \"object\") {\n            customOptions = options[fallback[i].toLowerCase()];\n        }\n\n        if (!value || value.length < 0) {\n            if (typeof this['getData' + type] !== \"function\") {\n                console.error('this.getData' + type + ' is not a function. Probably ' + type + ' is not a available data option');\n                continue;\n            }\n            value = this['getData' + type]( attribute, customOptions ); // Call this.getDataAttribute(value) || this.getDataCookie(value) || this.getDataAjax(value) etc...\n        }\n    }\n    console.log(this.getterWatchList);\n    // Call the getter watch function, if defined;\n    if (typeof this.getterWatchList[attribute] == \"function\") {\n        this.getterWatchList[attribute]();\n    }\n\n    return this[attribute] = value;\n}\n/**\n * -----------------------------------------------------------------------------\n * Get data: Ajax\n * -----------------------------------------------------------------------------\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n *\n * @param {string} attribute                                                    The NAME of the inner variable (this.NAME), is also used as the key for the GET Request {NAME: value}\n * @param {object} options                                                      Object with parameters used to make a GET request\n * @return {string}                                                             The value of the given attribute, or false if an erro occured.\n */\nJss.prototype.getDataAjax = function(attribute, options) {\n    var url = JssService.getOption(\"url\", options);\n    var jsonKey = JssService.getOption(\"jsonKey\", options) || attribute;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('GET', url);\n\n        return ajaxReturn.success(function(result){\n            if (typeof result === \"object\") {\n                if (result[jsonKey]) {\n                    return result[jsonKey];\n                }\n            }\n        }).error(function(errorObject){\n            console.log(errorObject);\n        });\n    }\n\n    return false;\n};\n\n/**\n * -----------------------------------------------------------------------------\n * Set data: Ajax\n * -----------------------------------------------------------------------------\n * Makes a post request to the options.url in a object {attribute: value}\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n */\nJss.prototype.setDataAjax = function(attribute, value, options) {\n    var url = JssService.getOption(\"url\", options);\n    var requestObject = {}\n        requestObject[attribute] = value;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('POST', url, requestObject);\n\n        return ajaxReturn.success(function(result){\n            return true;\n        }).error(function(errorObject){\n            console.log(errorObject);\n            return false;\n        });\n    }\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Ajax (helper function)\n * -----------------------------------------------------------------------------\n * Based on Atom.js by Todd Motto\n * http://toddmotto.com/writing-a-standalone-ajax-xhr-javascript-micro-library/\n */\nJss.prototype.ajaxHelper = {\n    // Parses json if possible, otherwise just return text\n    parse: function(req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return [result, req];\n    },\n\n    xhr: function(type, url, data) {\n        var ajaxHelper = this;\n\n        var methods = {\n            success: function() {},\n            error: function() {}\n        };\n        var XHR = XMLHttpRequest || ActiveXObject;\n        var request = new XHR('MSXML2.XMLHTTP.3.0');\n        request.open(type, url, true);\n        request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n\n        request.onreadystatechange = function() {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    methods.success.apply(methods, ajaxHelper.parse(request));\n                } else {\n                    methods.error.apply(methods, ajaxHelper.parse(request));\n                }\n            }\n        };\n        request.send(data);\n        return {\n            success: function(callback) {\n                methods.success = callback;\n                return methods;\n            },\n            error: function(callback) {\n                methods.error = callback;\n                return methods;\n            }\n        };\n    }\n};\n\nJss.prototype.ajax = {\n    // Get\n    get: function(src) {\n        console.log(this);\n    },\n\n    // Set\n    put: function(url, data) {\n        return this.ajaxHelper.xhr('PUT', url, data);\n    },\n\n    // Add\n    post: function(url, data) {\n        return this.ajaxHelper.xhr('POST', url, data);\n    }\n\n};\n/**\n * -----------------------------------------------------------------------------\n * Get data attribute value\n * -----------------------------------------------------------------------------\n * Returns the value of the requested attribute. Search first for a data-[ATTRIBUTE] value\n * If not found, it checks for the attribute in the default object. When that is not being\n * found neither, the normal this[attribute] value is being returned.\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME)\n * @return {string}                                                             The value of the given attribute\n */\nJss.prototype.getDataAttribute = function(attribute) {\n\n    return this.element.dataset[attribute];\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Update data attribute\n * -----------------------------------------------------------------------------\n * Set the value to the given attribute. And updates the data-[ATTRIBUTE] value\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME=\"value\")\n * @param {string} value                                                        The VALUE of the data attribute (data-name=\"VALUE\")\n * @return {undefined}\n */\n\nJss.prototype.setDataAttribute = function(attribute, value) {\n\n    // Update data attribute\n    if (typeof value !== \"undefined\") {\n        this.element.dataset[attribute] = this[attribute];\n    } else {\n        delete this.element.dataset[attribute];\n    }\n\n    return true;\n}\nJss.prototype.dataDefaultsCookie = {\n    'expireData': undefined\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get cookie value\n * -----------------------------------------------------------------------------\n * Returns cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @return {string}                                                             The VALUE of the given attribute\n */\nJss.prototype.getDataCookie = function(attribute) {\n\n    if (!attribute) { return null; }\n    return decodeURIComponent(document.cookie.replace(new RegExp(\"(?:(?:^|.*;)\\\\s*\" + encodeURIComponent(attribute).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"), \"$1\")) || null;\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data cookie\n * -----------------------------------------------------------------------------\n * Updates the cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @param {string} value                                                        The VALUE of the cookie\n * @return {undefined}\n */\n\nJss.prototype.setDataCookie = function(attribute, value, options) {\n    var endDate, path, domain, secureConnection;\n\n    if (typeof options === \"object\") {\n        endDate = JssService.getOption('endDate', options);\n        path    = JssService.getOption('path', options);\n        domain  = JssService.getOption('domain', options);\n        secureConnection = JssService.getOption('secureConnection', options);\n    }\n\n    if (!attribute || /^(?:expires|max\\-age|path|domain|secure)$/i.test(attribute)) { return false; }\n    var sExpires = \"\";\n    if (endDate) {\n      switch (endDate.constructor) {\n        case Number:\n          sExpires = endDate === Infinity ? \"; expires=Fri, 31 Dec 9999 23:59:59 GMT\" : \"; max-age=\" + endDate;\n          break;\n        case String:\n          sExpires = \"; expires=\" + endDate;\n          break;\n        case Date:\n          sExpires = \"; expires=\" + endDate.toUTCString();\n          break;\n      }\n    }\n\n    document.cookie = encodeURIComponent(attribute) + \"=\" + encodeURIComponent(value) + sExpires + (domain ? \"; domain=\" + domain : \"\") + (path ? \"; path=\" + path : \"\") + (secureConnection ? \"; secure\" : \"\");\n    return true;\n}\n/*******************************************************************************\n\n    Styles\n\n*******************************************************************************/\n\n/**\n * -----------------------------------------------------------------------------\n * Set height\n * -----------------------------------------------------------------------------\n * Sets the height of the `this.element` by the given input (height)\n *\n * @param  {number} height                                                      The height in pixels or percentage. Where numbers will be calculated to pixels so giving a height of 50 will result in a height of \"50px\". If you want percentages pass the variable with a percentage sign 50 + \"%\"\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setHeight = function(height) {\n    if (typeof height === \"number\") {\n        height += \"px\";\n    }\n\n    if (typeof height !== \"string\") {\n        throw(\"parameter height needs to be a string or integer\");\n    }\n\n    this.element.style.height = height;\n    return true;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get height\n * -----------------------------------------------------------------------------\n * Returns the height of the `this.element`\n *\n * @return {number}                                                             The height of the element in pixels\n */\nJss.prototype.getHeight = function() {\n    return this.element.offsetHeight;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set width\n * -----------------------------------------------------------------------------\n * Sets the width of the `this.element` by the given input (width)\n *\n * @param  {number} width                                                       The width in pixels or percentage. Where numbers will be calculated to pixels so giving a width of 50 will result in a width of \"50px\". If you want to set a percentage, just pass the variable with a percentage sign (\"50%\")\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setWidth = function(width) {\n    if (typeof width == \"number\") {\n        width += \"px\";\n    }\n\n    if (typeof width !== \"string\") {\n        throw(\"parameter width needs to be a string or integer\");\n    }\n    this.element.style.width = width;\n    return true;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get width\n * -----------------------------------------------------------------------------\n * Returns the width of the `this.element`\n *\n * @return {number}                                                             The width of the element in pixels\n */\nJss.prototype.getWidth = function() {\n    return this.element.offsetWidth;\n}\n/**\n * -----------------------------------------------------------------------------\n * Set State\n * -----------------------------------------------------------------------------\n * This updates the state of the object. States are being added to the class name prefix with a double underscore.\n * If you would have the module `envelope` and give it the state `open`. The class name `envelope__open` will be added.\n * Whenever you remove the state `open`, the according class name will be removed as well.\n *\n * @param  {string} str                                                         The name of the state which should be set (this is transformed to CamelCase)\n * @return {boolean}                                                            True on success, otherwise false (might already have the state)\n */\nJss.prototype.setState = function(str) {\n    var element, verifiedState, state, className;\n\n    element         = this.element;\n    state           = JssService.toCamelCase(str);\n    className       = this.classNamePrefix() + \"__is\" + state;\n\n    // Check if this.state is an array, and make it one if not.\n    if (Array.isArray(this.state) == false ) {\n        this.state = [];\n    }\n\n    // This if statement prevents that the same state is being set multiple times\n    if ( !this.hasState(str) ) {\n        this.addClassName(className)\n        this.state.push(state);\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Has state\n * -----------------------------------------------------------------------------\n * Checks if the parameter is already a state and returns true if so. Otherwise false.\n *\n * @param  {string} str                                                         The state which will be checked for\n * @return {boolean}                                                            True if it has the given state, otherwise false\n */\nJss.prototype.hasState = function(str) {\n    if (typeof this.state == \"object\" && this.state.indexOf(str) >= 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Remove state\n * -----------------------------------------------------------------------------\n * Removes the state from the states array, and from the element.className\n *\n * @param  {string} str                                                         The name of the state which should be removed\n * @return {undefined}\n */\nJss.prototype.removeState = function(str) {\n\n    var state      = JssService.toCamelCase(str);\n    var stateIndex = this.state.indexOf(state);\n\n    if (str == \"all\" || typeof str == \"undefined\") {\n        this.removeClassName(\"states\");\n    } else {\n        this.state.splice(stateIndex, 1);\n        if (typeof this.moduleAction != \"undefined\" && this.moduleAction.length > -1) {\n            this.removeClassName(this.classNamePrefix() + \"\" + this.moduleAction + \"__is\" + state);\n        } else {\n            this.removeClassName(this.classNamePrefix() + \"__is\" + state);\n        }\n    }\n}\n\n\n// A simple way to watch variables\n\n// addVar(keyName, value, watch_function)\n// setVar(keyName, value)\n// getVar(keyName)\n// Add -> new\n// Set -> update\n// Get -> return\nvar JssModule = function(){};\n\nJssModule.prototype.type               = \"JssModule\";\nJssModule.prototype.init               = Jss.prototype.init;\nJssModule.prototype.setElement         = Jss.prototype.setElement;\n\n// Triggers\nJssModule.prototype.findTriggers       = Jss.prototype.findTriggers;\nJssModule.prototype.configureTrigger      = Jss.prototype.configureTrigger;\n\n// Actions\n//JssModule.prototype.actions            = Object.create(Jss.prototype.actions);\nJssModule.prototype.validateAction     = Jss.prototype.validateAction;\nJssModule.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssModule.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssModule.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssModule.prototype.setState           = Jss.prototype.setState;\nJssModule.prototype.hasState           = Jss.prototype.hasState;\nJssModule.prototype.removeState        = Jss.prototype.removeState;\n\n// Data attributes\nJssModule.prototype.addData            = Jss.prototype.addData;\nJssModule.prototype.getData            = Jss.prototype.getData;\nJssModule.prototype.setData            = Jss.prototype.setData;\nvar JssTrigger = function(element, options) {\n    this.setElement(element);\n\n    if (typeof options === \"object\") {\n        if (typeof options.module === \"object\") {\n            this.module = options.module;\n        }\n        if (typeof options.moduleName === \"string\") {\n            this.moduleName = options.moduleName;\n        }\n        if (typeof options.triggerName === \"string\") {\n            this.triggerName = options.triggerName;\n        }\n    }\n}\n\n\nJssTrigger.prototype                    = Object.create(Jss.prototype);\nJssTrigger.prototype.type               = \"JssTrigger\";\nJssTrigger.prototype.setElement         = Jss.prototype.setElement;\n\n// Actions\n//JssTrigger.prototype.actions            = Object.create(Jss.prototype.actions);\nJssTrigger.prototype.validateAction     = Jss.prototype.validateAction;\nJssTrigger.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssTrigger.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssTrigger.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssTrigger.prototype.setState           = Jss.prototype.setState;\nJssTrigger.prototype.hasState           = Jss.prototype.hasState;\nJssTrigger.prototype.removeState        = Jss.prototype.removeState;\n\n\n\nvar  JssController = {};\nJssController.modules \t\t= []; // Result array with objects of all the found modules\nJssController.activeModules \t= JssService.activeModules;\n\nJssController.findModules = function() {\n    var allElements = document.getElementsByTagName(\"*\");                       // Array with all domElements\n    var test = [];\n    var self = this;\n    for (var i=0; i < allElements.length; i++) {\n\n        // Set default vars //\n        var element = allElements[i];                                           // Specific domElement\n        var tmp = false;\n\n        // Loop through the (active) modules array and add/instantiate them\n        self.activeModules.forEach(function(module){\n            if (JssService.isModule(element, module)) {\n                tmp = eval(\"new \" + JssService.toCamelCase(module) + \"(element)\"); // Dynamicly load modules\n\n                tmp.setElement(element);                                        // Add the domElement to the module\n                tmp.findTriggers();\t\t\t                                    // Search for module triggers\n\n                tmp.init();\t\t\t\t\t                                    // Executes everything within the init function\n                self.modules.push(tmp);\n\n            }\n        }); // End forEach\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    JssController.findModules();\n    console.log(JssController);\n});"
          },
          "returns": [
            {
              "title": "returns",
              "description": "The width of the element in pixels",
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            }
          ],
          "name": "getWidth",
          "kind": "function",
          "memberof": "Jss",
          "scope": "instance",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            "Jss",
            "getWidth"
          ]
        },
        {
          "description": "-----------------------------------------------------------------------------\nHas state\n-----------------------------------------------------------------------------\nChecks if the parameter is already a state and returns true if so. Otherwise false.",
          "tags": [
            {
              "title": "param",
              "description": "The state which will be checked for",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "str"
            },
            {
              "title": "returns",
              "description": "True if it has the given state, otherwise false",
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            },
            {
              "title": "name",
              "name": "hasState"
            },
            {
              "title": "kind",
              "kind": "function"
            },
            {
              "title": "memberof",
              "description": "Jss"
            },
            {
              "title": "instance"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 1131,
                "column": 0
              },
              "end": {
                "line": 1149,
                "column": 0
              }
            },
            "file": "/Users/jeffreyarts/Documents/DEV/jss/lib/jss.js",
            "code": "JssService = {};\n\n// Edit this array to enable or disable default modules\nJssService.activeModules   = []\n\n// Set this to false in a live environment\nJssService.dev             = true;\n\n/**************************\n*\n*   Below are core properties defined, becarefull when you think of changing these...\n*\n**************************/\n\n\nJssService.actions = {\n    hover:      ['hover',    'mouseover',   'onmouseover'                       ], // Fixed\n    click:      ['click',    'onclick'                                          ], // Fixed\n    mouseIn:    ['mousein',  'onmousein', 'mouseenter', 'onmouseenter'          ], // Fixed\n    mouseOut:   ['mouseout', 'onmouseout', 'mouseleave', 'onmouseleave'         ], // Fixed\n    resize:     ['resize',   'onresize'                                         ], // Fixed\n    focus:      ['focus',    'onfocus'                                          ],\n    keyDown:    ['keydown',  'keypress'                                         ],\n    keyUp:      ['keyup',    'keyrelease'                                       ],\n    change:     ['change',   'onchange'                                         ],\n};\n\nJssService.enterDelay = 1000;                                                   // Amount of miliseconds which is used to remove the entered state. (see core.actions) JssService.enterDelay setTimeout\n\nJssService.forbiddenProperties = [\n    'type',\n    'triggers',\n    'configureTrigger',\n    'findTriggers'\n];\n\n/**\n * -----------------------------------------------------------------------------\n * Is Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isModule = function(element, moduleName) {\n    var arr = element.className.split(\" \");\n    var found = false;\n\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i].indexOf(moduleName)        > -1 &&\n            arr[i].indexOf(moduleName + \"_\") == -1 &&\n            arr[i].indexOf(moduleName + \"-\") == -1)\n        {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.addModule = function(moduleName) {\n    this.activeModules.push(this.toKebabCase(moduleName))\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To CamelCase\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toCamelCase = function(input) {\n    var arr, res;\n    res = \"\";\n    if (typeof input === \"string\") {\n        input = input.replace(/\\-/g,\" \");                                       // Replace all dashes with spaces\n        arr = input.split(\" \");\n    } else {\n        arr = input;                                                            // Assume it is an array\n    }\n\n\n\n    var i = 0;\n    for (var i in arr) {\n        if (typeof i != \"undefined\") {\n            res += arr[i][0].toUpperCase()+ arr[i].slice(1); // Capitalize first letter\n        }\n    }\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To kebab-case\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toKebabCase = function(input) {\n    var res, str;\n    res = \"\";\n\n    if (typeof input === \"string\") {\n        str = input;\n    } else {                                                                    // Assume it is an array\n        str = input.join(\" \");\n    }\n\n    // First change it to camelcase\n    str = this.toCamelCase(str);\n\n    var max = str.length;\n    for (var i=0; i < max; i++) {\n        // Check if character is uppercase\n        if (str[i] != str[i].toLowerCase()) {\n            if (i!==0) {\n                str = str.substr(0, i) + \"-\" + str.substr(i);\n                i++;\n            }\n        }\n    }\n\n    return res = str.toLowerCase();\n}\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get option\n * -----------------------------------------------------------------------------\n * @param  {string} name                                                        Keyname in optionList\n * @param  {array} optionList                                                   Array with all possible options\n * @return {}                                                                   Copy of the value (optionsList[name])\n */\nJssService.getOption = function(name, optionList) {\n    if (typeof optionList !== \"object\") {\n        return false;\n    }\n\n    var res;\n\n    switch (name) {\n\n        // Only set `addDefaults` to false when it is explicitly set.\n        case \"addDefaults\":\n            if (optionList[name] !== false || typeof optionList[name] === \"undefined\") {\n                res = true;\n            } else {\n                res = false;\n            }\n        break;\n        case \"fallback\":\n            if ( Array.isArray(optionList[name]) ) {\n                res = optionList[name];\n                if (res.length===0) {\n                    res = false;\n                }\n            } else if (typeof optionList[name] === \"string\"){\n                res = [optionList[name]];\n            }\n        break;\n        default:\n        res = optionList[name]\n    }\n\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Is Trigger\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isTrigger = function(element, moduleName) {\n    if (element.className.indexOf(moduleName + \"--\") > -1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get trigger name\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {string} Name of the trigger.\n */\nJssService.getTriggerName = function(element, moduleName) {\n    if (typeof element != \"object\") {\n        console.error('Required first argument `element` needs to be a domElement.');\n        return false;\n    }\n    if (typeof moduleName != \"string\") {\n        console.error('Required second argument `moduleName` needs to be a string.');\n        return false;\n    }\n\n    // As an example we assume that the value of element.className equals 'b module--triggerName'\n    var startPos = element.className.indexOf(moduleName + \"--\");                    // 2\n    var sliced = element.className.slice(startPos, element.className.length )       // 'module--triggerName'\n    var endPos = sliced.indexOf(\" \");                                               // -1       // not found\n    if (endPos != -1) {                                                             // 19\n        sliced = sliced.slice(0,endPos);                                            // if there is more after the string, this will remove it\n    }\n    return sliced.replace(moduleName + \"--\",\"\")\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger name is allowed\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} True if the triggername is allowed, otherwise false.\n */\nJssService.triggerNameIsAllowed = function(element, moduleName) {\n    if (JssService.forbiddenProperties.indexOf(this.getTriggerName(element, moduleName)) > -1) {      // This triggerName is a core property, throw error\n        console.error('Triggername `' + getTriggerName(element,moduleName) + '` is not allowed. Change the trigger so it does not corresponds any of these: ' + JssService.forbiddenProperties)\n        return false;\n    }\n    return true;\n}\n/**\n * @module Jss\n * @author      Jeffrey Arts <sjeffff@gmail.com>\n * @copyright   2015\n */\nJss = function(){};\n\nJss.prototype.type      = \"Jss\"\nJss.prototype.triggers  = false;\nJss.prototype.element   = undefined;                                              // {obj} domElement\nJss.prototype.state     = undefined;                                              // {str} State of module, is reflected by the css class __isState\n\n/**\n * -----------------------------------------------------------------------------\n * Find Triggers\n * -----------------------------------------------------------------------------\n *\n * @param {domElement} element\n * @return {undefined}\n */\nJss.prototype.findTriggers = function(element) {\n    this.triggers = [];                                                         // If this is not set, all modules will have the same reference point to this.triggers.\n    // Module is created, now look for any module triggers\n    this.searchTriggersRecursiveInnerFunction(this.element)\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger\n * -----------------------------------------------------------------------------\n */\nJss.prototype.trigger = function(which, fn) {\n    if (typeof this.triggers !== \"object\") {\n        console.info(\"No triggers are found, please specify them in the css as `module-name--trigger-name`.\");\n        return false;\n    }\n\n    if (typeof this.triggers[which] !== \"object\") {\n        console.info(\"You are trying to execute a function on a non existing trigger `\" + which + \"`\");\n        return false;\n    }\n\n    for (var i = 0; i < this.triggers[which].length; i++) {\n        fn(this.triggers[which][i])\n    }\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Search triggers recursive inner function\n * -----------------------------------------------------------------------------\n * Recursive function which is executed bij findTriggers;\n *\n * @return {undefined}\n */\nJss.prototype.searchTriggersRecursiveInnerFunction = function(element) {\n    var self = this;\n    if (typeof element == \"undefined\" ) {\n        element = this.element;\n    }\n    if ( element.hasChildNodes() ) {\n        for (var i=0; i < element.childNodes.length; i++) {\n\n            var childElement = element.childNodes[i];                           // Improve readability\n\n            if (childElement.nodeType == 1) {                                   // NodeType 1 == domElement\n\n                if (JssService.isTrigger(childElement, this.moduleName)) {\n\n                    // Add a child element\n                    if (JssService.triggerNameIsAllowed(childElement, this.moduleName)) {\n                        var triggerName = JssService.getTriggerName(childElement, this.moduleName)\n\n                        if (typeof self.triggers[triggerName] !== \"object\") {\n                            self.triggers[triggerName] = [];\n                        }\n\n                        var tmp = new JssTrigger(childElement, {\n                            module: self,\n                            moduleName: this.moduleName,\n                            triggerName: triggerName,\n                        });\n\n                        self.triggers[triggerName].push(tmp);\n                    }\n                }\n                if (childElement.hasChildNodes()) {\n                    self.searchTriggersRecursiveInnerFunction(childElement)\n                }\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Configure Trigger\n * -----------------------------------------------------------------------------\n *\n * @return {undefined}\n */\nJss.prototype.configureTrigger = function(trigger, fn) {\n    if ( typeof this.triggers[trigger] == \"object\") {\n\n        for (var i = 0; i < this.triggers[trigger].length; i++) {\n            //self.triggers[trigger][i]\n            fn(this.triggers[trigger][i]);\n        }\n\n    } else if (JssService.dev) {\n        console.error(\"You are trying to configure a trigger which has no attached domElement\")\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n *   Init\n * -----------------------------------------------------------------------------\n * Notice the user that a init function needs to be added for controlling the triggers\n *\n * @return {undefined}\n */\nJss.prototype.init = function(func) {\n    if (JssService.dev) {\n        console.info(this.moduleName + \": Add a prototype.init function to add triggers and stuff\")\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set element\n * -----------------------------------------------------------------------------\n * Add a domElement to `this`\n *\n * @return {undefined}\n */\nJss.prototype.setElement = function(element) {\n    if (typeof element == \"undefined\") {\n        if (JssService.dev) {\n            return console.error(\"First parameter of setElement needs to be a domElement\");\n        }\n    }\n    this.element = element;\n}\n/*******************************************************************************\n   *\n   *\tActions\n   *\n   *  \t@author      Jeffrey Arts <sjeffff@gmail.com>\n   *    @copyright   2015\n   *\n*******************************************************************************/\n/**\n * -----------------------------------------------------------------------------\n *   Validate action\n * -----------------------------------------------------------------------------\n * Checks if parameter is a valid action, and logs an error when not.\n *\n * @param {string} request                                                      The name of the request\n * @return {boolean} true if a action is valid, otherwise false.\n */\nJss.prototype.validateAction = function(request) {\n    var result;\n    request = this.getActionElement(request).request\n    for (var action in JssService.actions) {\n        if (JssService.actions[action].indexOf(request.toLowerCase()) > -1) {\n            result = action;\n            break;\n        }\n    }\n    if (result) {\n        return result;\n    } else {\n        console.error(\"validateAction: unknown request\", request);\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * \t Add Action\n * -----------------------------------------------------------------------------\n * Adds an action to the object, list of possible requests can be found in Jss.actions\n *\n * | Options\n * \t\t- addDefaults {boolean}                                                 True: add default classes, false: don't\n *\n *\n *\n * @param {string} request                                                      The name of the request\n * @param {function} fn                                                         The function which should be triggered\n * @param {object} options                                                      Object with option parameters\n * @return {boolean} true if a action is succesfully added, otherwise false.\n */\nJss.prototype.addAction = function(request, fn, options) {\n\n    var self        = this;\n    var action      = self.validateAction(request)\n    var actions     = [];\n    var t = self.getActionElement(request);\n    var element     = t.element;\n    var request     = t.request;\n    t = undefined;\n\n    // Options\n    var addDefaults = JssService.getOption(\"addDefaults\", options);\n\n\n\n    switch (action) {\n\n        case \"resize\":\n\n            actions.push(element.addEventListener(\"resize\", fn));\n\n        break;\n\n\n        case \"click\":\n            actions.push(element.addEventListener(\"click\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"click\", function(){\n                    self.setState(\"Clicked\")\n                }));\n                actions.push(window.addEventListener( \"click\", function(event) {\n                    if (event.target != self.element && self.hasState(\"Clicked\")) {\n                        self.removeState(\"Clicked\")\n                    }\n                }));\n            } // End addDefaults\n        break;\n\n\n        case \"change\":\n            actions.push(element.addEventListener(\"change\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"change\", function(){\n                    self.setState(\"Changed\")\n                    setTimeout(function(){self.removeState(\"Changed\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"hover\":\n            actions.push(element.addEventListener(\"mouseover\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseover\", function(){\n                    self.setState(\"Hover\")\n                }));\n                actions.push(element.addEventListener(\"mouseout\",  function(){\n                    self.removeState(\"Hover\")\n                }));\n            }\n        break;\n\n\n        case \"mouseIn\":\n\n            actions.push(element.addEventListener(\"mouseenter\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseenter\", function(){\n                    self.setState(\"MouseIn\")\n                    setTimeout(function(){self.removeState(\"MouseIn\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"mouseOut\":\n\n            actions.push(element.addEventListener(\"mouseleave\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseleave\", function(){\n                    self.setState(\"MouseOut\")\n                    setTimeout(function(){self.removeState(\"MouseOut\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n    }\n\n\n    if (actions.length > 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get action element\n * -----------------------------------------------------------------------------\n * @param  {string} request                                                     The request\n * @return {object}                                                             An object with 2 properties: request && element\n */\nJss.prototype.getActionElement = function(request) {\n    var self = this;\n    var prefix = false;\n    var newRequest  = request;\n    var element = self.element;\n    // Set prefix if it exists\n    if (request.indexOf(\".\") > 0) {\n        var t       = request.split(\".\"),\n        newRequest  = t[1];\n        prefix      = t[0];\n        t = undefined;\n    }\n\n    // Update element according the prefix (or skip it, if not set)\n    if (prefix !== false) {\n        switch (prefix) {\n            case \"screen\":\n            case \"window\":\n                element = window;\n            break;\n        }\n    }\n\n    // Return object\n    return {\n        request: newRequest,\n        element: element\n    }\n}\n/**\n * -----------------------------------------------------------------------------\n * Class name prefix\n * -----------------------------------------------------------------------------\n * The prefix equals the modulename, or - when it's a trigger object - modulename--triggername\n *\n * @return {string} The classname\n */\nJss.prototype.classNamePrefix = function() {\n    if (this.type == \"JssTrigger\") {\n        return this.moduleName + \"--\" + this.triggerName;\n    } else {\n        return this.moduleName;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Remove class name\n * -----------------------------------------------------------------------------\n * Removes the `this.element` classname\n * \t- \"all\" || undefined        > Removes ALL classnames\n *  - \"allStates\" || \"states\"   > Remove all STATES\n *  - all other strings remove that specific string from the className\n *\n * @param {string} input                                                        The classname (case-sensitive) which needs to be removed\n * @return {undefined}\n */\nJss.prototype.removeClassName = function(input) {\n\n    var classList  = [];\n\n    if (input == \"all\" || typeof input == \"undefined\") {\n\n        this.element.className = \"\";\n\n    } else if (input == \"states\" || input == \"allStates\") {\n\n        classList = this.element.className.split(\" \");\n        for (var i in classList) {\n            className = classList[i];\n            if (className.indexOf(\"__is\") > -1) {\n                delete classList[i];\n            }\n        }\n        this.element.className = classList.join(\" \");\n\n    } else if(typeof input == \"string\") {\n        this.element.className = this.element.className.replace(input,\"\");\n    } else {\n        console.error(\"removeClassName: parameter should be a string\");\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Add class name\n * -----------------------------------------------------------------------------\n * Adds a class name by string or array.\n * Does NOT check for duplicates\n *\n * @param  {string} The classname to be added\n * @return {undefined}\n */\nJss.prototype.addClassName = function(data) {\n    this.element.className += \" \";\n    if (typeof data == \"string\") {\n        this.element.className += data;\n    } else {\n        this.element.className += data.join(\" \")\n    }\n}\n\n/**\n * List where the keys corresponds with this[key], and where the value is the function to be executed when the var is changed.\n */\nJss.prototype.setterWatchList = {};\nJss.prototype.getterWatchList = {};\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add data\n * -----------------------------------------------------------------------------\n * Add a (default) value for the given attribute.\n *\n * @param {string} attribute                                                    The name of the attribute (this[attribute])\n * @param {*} value                                                             The value of this[attribute], could be anything...\n * @param {object} options\n *           \t\t- setterWatchFunction {function}\n *           \t\t- getterWatchFunction {function}\n */\nJss.prototype.addData = function(attribute, value, options) {\n\n\n    // watchList[key] = fn;\n    var setterWatchFunction = JssService.getOption('setterWatchFunction', options); // Function\n    var getterWatchFunction = JssService.getOption('getterWatchFunction', options); // Function\n\n    if (typeof setterWatchFunction === \"function\") {\n        this.setterWatchList[attribute] = setterWatchFunction;\n    }\n\n    if (typeof getterWatchFunction === \"function\") {\n        this.getterWatchList[attribute] = getterWatchFunction;\n    }\n\n    // Set the default value\n    return this[attribute] = value;\n}\n\n\n\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- ajax {string} url\n */\nJss.prototype.setData = function(attribute, value, options) {\n\n    this[attribute] = value;\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n\n    if (Array.isArray(fallback)) {\n\n        for (var i = 0; i < fallback.length; i++) {\n            var type = fallback[i];\n\n            if (value && value.length > 0) {\n                this['setData' + JssService.toCamelCase(type)](attribute, value); // Call this.addDataAttribute(value) || this.addDataCookie(value) etc...\n                this[attribute] = value;\n            }\n        }\n    }\n\n    // Call the setter watch function, if defined;\n    if (typeof this.setterWatchList[attribute] === \"function\") { // Use the watchlist to add functionality whenever a data attribute is updated\n        this.setterWatchList[attribute]();\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataDefault {boolean}\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- dataAjax {string} url\n */\nJss.prototype.getData = function(attribute, options) {\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n    var value = false;\n\n\n    if (!fallback) {\n        fallback = ['attribute'];\n    }\n\n\n    for (var i = 0; i < fallback.length; i++) {\n        var type = JssService.toCamelCase(fallback[i]);\n        var customOptions = false;\n\n        if (typeof options == \"object\") {\n            customOptions = options[fallback[i].toLowerCase()];\n        }\n\n        if (!value || value.length < 0) {\n            if (typeof this['getData' + type] !== \"function\") {\n                console.error('this.getData' + type + ' is not a function. Probably ' + type + ' is not a available data option');\n                continue;\n            }\n            value = this['getData' + type]( attribute, customOptions ); // Call this.getDataAttribute(value) || this.getDataCookie(value) || this.getDataAjax(value) etc...\n        }\n    }\n    console.log(this.getterWatchList);\n    // Call the getter watch function, if defined;\n    if (typeof this.getterWatchList[attribute] == \"function\") {\n        this.getterWatchList[attribute]();\n    }\n\n    return this[attribute] = value;\n}\n/**\n * -----------------------------------------------------------------------------\n * Get data: Ajax\n * -----------------------------------------------------------------------------\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n *\n * @param {string} attribute                                                    The NAME of the inner variable (this.NAME), is also used as the key for the GET Request {NAME: value}\n * @param {object} options                                                      Object with parameters used to make a GET request\n * @return {string}                                                             The value of the given attribute, or false if an erro occured.\n */\nJss.prototype.getDataAjax = function(attribute, options) {\n    var url = JssService.getOption(\"url\", options);\n    var jsonKey = JssService.getOption(\"jsonKey\", options) || attribute;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('GET', url);\n\n        return ajaxReturn.success(function(result){\n            if (typeof result === \"object\") {\n                if (result[jsonKey]) {\n                    return result[jsonKey];\n                }\n            }\n        }).error(function(errorObject){\n            console.log(errorObject);\n        });\n    }\n\n    return false;\n};\n\n/**\n * -----------------------------------------------------------------------------\n * Set data: Ajax\n * -----------------------------------------------------------------------------\n * Makes a post request to the options.url in a object {attribute: value}\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n */\nJss.prototype.setDataAjax = function(attribute, value, options) {\n    var url = JssService.getOption(\"url\", options);\n    var requestObject = {}\n        requestObject[attribute] = value;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('POST', url, requestObject);\n\n        return ajaxReturn.success(function(result){\n            return true;\n        }).error(function(errorObject){\n            console.log(errorObject);\n            return false;\n        });\n    }\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Ajax (helper function)\n * -----------------------------------------------------------------------------\n * Based on Atom.js by Todd Motto\n * http://toddmotto.com/writing-a-standalone-ajax-xhr-javascript-micro-library/\n */\nJss.prototype.ajaxHelper = {\n    // Parses json if possible, otherwise just return text\n    parse: function(req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return [result, req];\n    },\n\n    xhr: function(type, url, data) {\n        var ajaxHelper = this;\n\n        var methods = {\n            success: function() {},\n            error: function() {}\n        };\n        var XHR = XMLHttpRequest || ActiveXObject;\n        var request = new XHR('MSXML2.XMLHTTP.3.0');\n        request.open(type, url, true);\n        request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n\n        request.onreadystatechange = function() {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    methods.success.apply(methods, ajaxHelper.parse(request));\n                } else {\n                    methods.error.apply(methods, ajaxHelper.parse(request));\n                }\n            }\n        };\n        request.send(data);\n        return {\n            success: function(callback) {\n                methods.success = callback;\n                return methods;\n            },\n            error: function(callback) {\n                methods.error = callback;\n                return methods;\n            }\n        };\n    }\n};\n\nJss.prototype.ajax = {\n    // Get\n    get: function(src) {\n        console.log(this);\n    },\n\n    // Set\n    put: function(url, data) {\n        return this.ajaxHelper.xhr('PUT', url, data);\n    },\n\n    // Add\n    post: function(url, data) {\n        return this.ajaxHelper.xhr('POST', url, data);\n    }\n\n};\n/**\n * -----------------------------------------------------------------------------\n * Get data attribute value\n * -----------------------------------------------------------------------------\n * Returns the value of the requested attribute. Search first for a data-[ATTRIBUTE] value\n * If not found, it checks for the attribute in the default object. When that is not being\n * found neither, the normal this[attribute] value is being returned.\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME)\n * @return {string}                                                             The value of the given attribute\n */\nJss.prototype.getDataAttribute = function(attribute) {\n\n    return this.element.dataset[attribute];\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Update data attribute\n * -----------------------------------------------------------------------------\n * Set the value to the given attribute. And updates the data-[ATTRIBUTE] value\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME=\"value\")\n * @param {string} value                                                        The VALUE of the data attribute (data-name=\"VALUE\")\n * @return {undefined}\n */\n\nJss.prototype.setDataAttribute = function(attribute, value) {\n\n    // Update data attribute\n    if (typeof value !== \"undefined\") {\n        this.element.dataset[attribute] = this[attribute];\n    } else {\n        delete this.element.dataset[attribute];\n    }\n\n    return true;\n}\nJss.prototype.dataDefaultsCookie = {\n    'expireData': undefined\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get cookie value\n * -----------------------------------------------------------------------------\n * Returns cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @return {string}                                                             The VALUE of the given attribute\n */\nJss.prototype.getDataCookie = function(attribute) {\n\n    if (!attribute) { return null; }\n    return decodeURIComponent(document.cookie.replace(new RegExp(\"(?:(?:^|.*;)\\\\s*\" + encodeURIComponent(attribute).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"), \"$1\")) || null;\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data cookie\n * -----------------------------------------------------------------------------\n * Updates the cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @param {string} value                                                        The VALUE of the cookie\n * @return {undefined}\n */\n\nJss.prototype.setDataCookie = function(attribute, value, options) {\n    var endDate, path, domain, secureConnection;\n\n    if (typeof options === \"object\") {\n        endDate = JssService.getOption('endDate', options);\n        path    = JssService.getOption('path', options);\n        domain  = JssService.getOption('domain', options);\n        secureConnection = JssService.getOption('secureConnection', options);\n    }\n\n    if (!attribute || /^(?:expires|max\\-age|path|domain|secure)$/i.test(attribute)) { return false; }\n    var sExpires = \"\";\n    if (endDate) {\n      switch (endDate.constructor) {\n        case Number:\n          sExpires = endDate === Infinity ? \"; expires=Fri, 31 Dec 9999 23:59:59 GMT\" : \"; max-age=\" + endDate;\n          break;\n        case String:\n          sExpires = \"; expires=\" + endDate;\n          break;\n        case Date:\n          sExpires = \"; expires=\" + endDate.toUTCString();\n          break;\n      }\n    }\n\n    document.cookie = encodeURIComponent(attribute) + \"=\" + encodeURIComponent(value) + sExpires + (domain ? \"; domain=\" + domain : \"\") + (path ? \"; path=\" + path : \"\") + (secureConnection ? \"; secure\" : \"\");\n    return true;\n}\n/*******************************************************************************\n\n    Styles\n\n*******************************************************************************/\n\n/**\n * -----------------------------------------------------------------------------\n * Set height\n * -----------------------------------------------------------------------------\n * Sets the height of the `this.element` by the given input (height)\n *\n * @param  {number} height                                                      The height in pixels or percentage. Where numbers will be calculated to pixels so giving a height of 50 will result in a height of \"50px\". If you want percentages pass the variable with a percentage sign 50 + \"%\"\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setHeight = function(height) {\n    if (typeof height === \"number\") {\n        height += \"px\";\n    }\n\n    if (typeof height !== \"string\") {\n        throw(\"parameter height needs to be a string or integer\");\n    }\n\n    this.element.style.height = height;\n    return true;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get height\n * -----------------------------------------------------------------------------\n * Returns the height of the `this.element`\n *\n * @return {number}                                                             The height of the element in pixels\n */\nJss.prototype.getHeight = function() {\n    return this.element.offsetHeight;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set width\n * -----------------------------------------------------------------------------\n * Sets the width of the `this.element` by the given input (width)\n *\n * @param  {number} width                                                       The width in pixels or percentage. Where numbers will be calculated to pixels so giving a width of 50 will result in a width of \"50px\". If you want to set a percentage, just pass the variable with a percentage sign (\"50%\")\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setWidth = function(width) {\n    if (typeof width == \"number\") {\n        width += \"px\";\n    }\n\n    if (typeof width !== \"string\") {\n        throw(\"parameter width needs to be a string or integer\");\n    }\n    this.element.style.width = width;\n    return true;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get width\n * -----------------------------------------------------------------------------\n * Returns the width of the `this.element`\n *\n * @return {number}                                                             The width of the element in pixels\n */\nJss.prototype.getWidth = function() {\n    return this.element.offsetWidth;\n}\n/**\n * -----------------------------------------------------------------------------\n * Set State\n * -----------------------------------------------------------------------------\n * This updates the state of the object. States are being added to the class name prefix with a double underscore.\n * If you would have the module `envelope` and give it the state `open`. The class name `envelope__open` will be added.\n * Whenever you remove the state `open`, the according class name will be removed as well.\n *\n * @param  {string} str                                                         The name of the state which should be set (this is transformed to CamelCase)\n * @return {boolean}                                                            True on success, otherwise false (might already have the state)\n */\nJss.prototype.setState = function(str) {\n    var element, verifiedState, state, className;\n\n    element         = this.element;\n    state           = JssService.toCamelCase(str);\n    className       = this.classNamePrefix() + \"__is\" + state;\n\n    // Check if this.state is an array, and make it one if not.\n    if (Array.isArray(this.state) == false ) {\n        this.state = [];\n    }\n\n    // This if statement prevents that the same state is being set multiple times\n    if ( !this.hasState(str) ) {\n        this.addClassName(className)\n        this.state.push(state);\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Has state\n * -----------------------------------------------------------------------------\n * Checks if the parameter is already a state and returns true if so. Otherwise false.\n *\n * @param  {string} str                                                         The state which will be checked for\n * @return {boolean}                                                            True if it has the given state, otherwise false\n */\nJss.prototype.hasState = function(str) {\n    if (typeof this.state == \"object\" && this.state.indexOf(str) >= 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Remove state\n * -----------------------------------------------------------------------------\n * Removes the state from the states array, and from the element.className\n *\n * @param  {string} str                                                         The name of the state which should be removed\n * @return {undefined}\n */\nJss.prototype.removeState = function(str) {\n\n    var state      = JssService.toCamelCase(str);\n    var stateIndex = this.state.indexOf(state);\n\n    if (str == \"all\" || typeof str == \"undefined\") {\n        this.removeClassName(\"states\");\n    } else {\n        this.state.splice(stateIndex, 1);\n        if (typeof this.moduleAction != \"undefined\" && this.moduleAction.length > -1) {\n            this.removeClassName(this.classNamePrefix() + \"\" + this.moduleAction + \"__is\" + state);\n        } else {\n            this.removeClassName(this.classNamePrefix() + \"__is\" + state);\n        }\n    }\n}\n\n\n// A simple way to watch variables\n\n// addVar(keyName, value, watch_function)\n// setVar(keyName, value)\n// getVar(keyName)\n// Add -> new\n// Set -> update\n// Get -> return\nvar JssModule = function(){};\n\nJssModule.prototype.type               = \"JssModule\";\nJssModule.prototype.init               = Jss.prototype.init;\nJssModule.prototype.setElement         = Jss.prototype.setElement;\n\n// Triggers\nJssModule.prototype.findTriggers       = Jss.prototype.findTriggers;\nJssModule.prototype.configureTrigger      = Jss.prototype.configureTrigger;\n\n// Actions\n//JssModule.prototype.actions            = Object.create(Jss.prototype.actions);\nJssModule.prototype.validateAction     = Jss.prototype.validateAction;\nJssModule.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssModule.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssModule.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssModule.prototype.setState           = Jss.prototype.setState;\nJssModule.prototype.hasState           = Jss.prototype.hasState;\nJssModule.prototype.removeState        = Jss.prototype.removeState;\n\n// Data attributes\nJssModule.prototype.addData            = Jss.prototype.addData;\nJssModule.prototype.getData            = Jss.prototype.getData;\nJssModule.prototype.setData            = Jss.prototype.setData;\nvar JssTrigger = function(element, options) {\n    this.setElement(element);\n\n    if (typeof options === \"object\") {\n        if (typeof options.module === \"object\") {\n            this.module = options.module;\n        }\n        if (typeof options.moduleName === \"string\") {\n            this.moduleName = options.moduleName;\n        }\n        if (typeof options.triggerName === \"string\") {\n            this.triggerName = options.triggerName;\n        }\n    }\n}\n\n\nJssTrigger.prototype                    = Object.create(Jss.prototype);\nJssTrigger.prototype.type               = \"JssTrigger\";\nJssTrigger.prototype.setElement         = Jss.prototype.setElement;\n\n// Actions\n//JssTrigger.prototype.actions            = Object.create(Jss.prototype.actions);\nJssTrigger.prototype.validateAction     = Jss.prototype.validateAction;\nJssTrigger.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssTrigger.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssTrigger.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssTrigger.prototype.setState           = Jss.prototype.setState;\nJssTrigger.prototype.hasState           = Jss.prototype.hasState;\nJssTrigger.prototype.removeState        = Jss.prototype.removeState;\n\n\n\nvar  JssController = {};\nJssController.modules \t\t= []; // Result array with objects of all the found modules\nJssController.activeModules \t= JssService.activeModules;\n\nJssController.findModules = function() {\n    var allElements = document.getElementsByTagName(\"*\");                       // Array with all domElements\n    var test = [];\n    var self = this;\n    for (var i=0; i < allElements.length; i++) {\n\n        // Set default vars //\n        var element = allElements[i];                                           // Specific domElement\n        var tmp = false;\n\n        // Loop through the (active) modules array and add/instantiate them\n        self.activeModules.forEach(function(module){\n            if (JssService.isModule(element, module)) {\n                tmp = eval(\"new \" + JssService.toCamelCase(module) + \"(element)\"); // Dynamicly load modules\n\n                tmp.setElement(element);                                        // Add the domElement to the module\n                tmp.findTriggers();\t\t\t                                    // Search for module triggers\n\n                tmp.init();\t\t\t\t\t                                    // Executes everything within the init function\n                self.modules.push(tmp);\n\n            }\n        }); // End forEach\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    JssController.findModules();\n    console.log(JssController);\n});"
          },
          "params": [
            {
              "title": "param",
              "description": "The state which will be checked for",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "str"
            }
          ],
          "returns": [
            {
              "title": "returns",
              "description": "True if it has the given state, otherwise false",
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          ],
          "name": "hasState",
          "kind": "function",
          "memberof": "Jss",
          "scope": "instance",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            "Jss",
            "hasState"
          ]
        },
        {
          "description": "-----------------------------------------------------------------------------\n  Init\n-----------------------------------------------------------------------------\nNotice the user that a init function needs to be added for controlling the triggers",
          "tags": [
            {
              "title": "returns",
              "description": null,
              "type": {
                "type": "UndefinedLiteral"
              }
            },
            {
              "title": "name",
              "name": "init"
            },
            {
              "title": "kind",
              "kind": "function"
            },
            {
              "title": "memberof",
              "description": "Jss"
            },
            {
              "title": "instance"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 375,
                "column": 0
              },
              "end": {
                "line": 389,
                "column": 0
              }
            },
            "file": "/Users/jeffreyarts/Documents/DEV/jss/lib/jss.js",
            "code": "JssService = {};\n\n// Edit this array to enable or disable default modules\nJssService.activeModules   = []\n\n// Set this to false in a live environment\nJssService.dev             = true;\n\n/**************************\n*\n*   Below are core properties defined, becarefull when you think of changing these...\n*\n**************************/\n\n\nJssService.actions = {\n    hover:      ['hover',    'mouseover',   'onmouseover'                       ], // Fixed\n    click:      ['click',    'onclick'                                          ], // Fixed\n    mouseIn:    ['mousein',  'onmousein', 'mouseenter', 'onmouseenter'          ], // Fixed\n    mouseOut:   ['mouseout', 'onmouseout', 'mouseleave', 'onmouseleave'         ], // Fixed\n    resize:     ['resize',   'onresize'                                         ], // Fixed\n    focus:      ['focus',    'onfocus'                                          ],\n    keyDown:    ['keydown',  'keypress'                                         ],\n    keyUp:      ['keyup',    'keyrelease'                                       ],\n    change:     ['change',   'onchange'                                         ],\n};\n\nJssService.enterDelay = 1000;                                                   // Amount of miliseconds which is used to remove the entered state. (see core.actions) JssService.enterDelay setTimeout\n\nJssService.forbiddenProperties = [\n    'type',\n    'triggers',\n    'configureTrigger',\n    'findTriggers'\n];\n\n/**\n * -----------------------------------------------------------------------------\n * Is Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isModule = function(element, moduleName) {\n    var arr = element.className.split(\" \");\n    var found = false;\n\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i].indexOf(moduleName)        > -1 &&\n            arr[i].indexOf(moduleName + \"_\") == -1 &&\n            arr[i].indexOf(moduleName + \"-\") == -1)\n        {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.addModule = function(moduleName) {\n    this.activeModules.push(this.toKebabCase(moduleName))\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To CamelCase\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toCamelCase = function(input) {\n    var arr, res;\n    res = \"\";\n    if (typeof input === \"string\") {\n        input = input.replace(/\\-/g,\" \");                                       // Replace all dashes with spaces\n        arr = input.split(\" \");\n    } else {\n        arr = input;                                                            // Assume it is an array\n    }\n\n\n\n    var i = 0;\n    for (var i in arr) {\n        if (typeof i != \"undefined\") {\n            res += arr[i][0].toUpperCase()+ arr[i].slice(1); // Capitalize first letter\n        }\n    }\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To kebab-case\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toKebabCase = function(input) {\n    var res, str;\n    res = \"\";\n\n    if (typeof input === \"string\") {\n        str = input;\n    } else {                                                                    // Assume it is an array\n        str = input.join(\" \");\n    }\n\n    // First change it to camelcase\n    str = this.toCamelCase(str);\n\n    var max = str.length;\n    for (var i=0; i < max; i++) {\n        // Check if character is uppercase\n        if (str[i] != str[i].toLowerCase()) {\n            if (i!==0) {\n                str = str.substr(0, i) + \"-\" + str.substr(i);\n                i++;\n            }\n        }\n    }\n\n    return res = str.toLowerCase();\n}\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get option\n * -----------------------------------------------------------------------------\n * @param  {string} name                                                        Keyname in optionList\n * @param  {array} optionList                                                   Array with all possible options\n * @return {}                                                                   Copy of the value (optionsList[name])\n */\nJssService.getOption = function(name, optionList) {\n    if (typeof optionList !== \"object\") {\n        return false;\n    }\n\n    var res;\n\n    switch (name) {\n\n        // Only set `addDefaults` to false when it is explicitly set.\n        case \"addDefaults\":\n            if (optionList[name] !== false || typeof optionList[name] === \"undefined\") {\n                res = true;\n            } else {\n                res = false;\n            }\n        break;\n        case \"fallback\":\n            if ( Array.isArray(optionList[name]) ) {\n                res = optionList[name];\n                if (res.length===0) {\n                    res = false;\n                }\n            } else if (typeof optionList[name] === \"string\"){\n                res = [optionList[name]];\n            }\n        break;\n        default:\n        res = optionList[name]\n    }\n\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Is Trigger\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isTrigger = function(element, moduleName) {\n    if (element.className.indexOf(moduleName + \"--\") > -1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get trigger name\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {string} Name of the trigger.\n */\nJssService.getTriggerName = function(element, moduleName) {\n    if (typeof element != \"object\") {\n        console.error('Required first argument `element` needs to be a domElement.');\n        return false;\n    }\n    if (typeof moduleName != \"string\") {\n        console.error('Required second argument `moduleName` needs to be a string.');\n        return false;\n    }\n\n    // As an example we assume that the value of element.className equals 'b module--triggerName'\n    var startPos = element.className.indexOf(moduleName + \"--\");                    // 2\n    var sliced = element.className.slice(startPos, element.className.length )       // 'module--triggerName'\n    var endPos = sliced.indexOf(\" \");                                               // -1       // not found\n    if (endPos != -1) {                                                             // 19\n        sliced = sliced.slice(0,endPos);                                            // if there is more after the string, this will remove it\n    }\n    return sliced.replace(moduleName + \"--\",\"\")\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger name is allowed\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} True if the triggername is allowed, otherwise false.\n */\nJssService.triggerNameIsAllowed = function(element, moduleName) {\n    if (JssService.forbiddenProperties.indexOf(this.getTriggerName(element, moduleName)) > -1) {      // This triggerName is a core property, throw error\n        console.error('Triggername `' + getTriggerName(element,moduleName) + '` is not allowed. Change the trigger so it does not corresponds any of these: ' + JssService.forbiddenProperties)\n        return false;\n    }\n    return true;\n}\n/**\n * @module Jss\n * @author      Jeffrey Arts <sjeffff@gmail.com>\n * @copyright   2015\n */\nJss = function(){};\n\nJss.prototype.type      = \"Jss\"\nJss.prototype.triggers  = false;\nJss.prototype.element   = undefined;                                              // {obj} domElement\nJss.prototype.state     = undefined;                                              // {str} State of module, is reflected by the css class __isState\n\n/**\n * -----------------------------------------------------------------------------\n * Find Triggers\n * -----------------------------------------------------------------------------\n *\n * @param {domElement} element\n * @return {undefined}\n */\nJss.prototype.findTriggers = function(element) {\n    this.triggers = [];                                                         // If this is not set, all modules will have the same reference point to this.triggers.\n    // Module is created, now look for any module triggers\n    this.searchTriggersRecursiveInnerFunction(this.element)\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger\n * -----------------------------------------------------------------------------\n */\nJss.prototype.trigger = function(which, fn) {\n    if (typeof this.triggers !== \"object\") {\n        console.info(\"No triggers are found, please specify them in the css as `module-name--trigger-name`.\");\n        return false;\n    }\n\n    if (typeof this.triggers[which] !== \"object\") {\n        console.info(\"You are trying to execute a function on a non existing trigger `\" + which + \"`\");\n        return false;\n    }\n\n    for (var i = 0; i < this.triggers[which].length; i++) {\n        fn(this.triggers[which][i])\n    }\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Search triggers recursive inner function\n * -----------------------------------------------------------------------------\n * Recursive function which is executed bij findTriggers;\n *\n * @return {undefined}\n */\nJss.prototype.searchTriggersRecursiveInnerFunction = function(element) {\n    var self = this;\n    if (typeof element == \"undefined\" ) {\n        element = this.element;\n    }\n    if ( element.hasChildNodes() ) {\n        for (var i=0; i < element.childNodes.length; i++) {\n\n            var childElement = element.childNodes[i];                           // Improve readability\n\n            if (childElement.nodeType == 1) {                                   // NodeType 1 == domElement\n\n                if (JssService.isTrigger(childElement, this.moduleName)) {\n\n                    // Add a child element\n                    if (JssService.triggerNameIsAllowed(childElement, this.moduleName)) {\n                        var triggerName = JssService.getTriggerName(childElement, this.moduleName)\n\n                        if (typeof self.triggers[triggerName] !== \"object\") {\n                            self.triggers[triggerName] = [];\n                        }\n\n                        var tmp = new JssTrigger(childElement, {\n                            module: self,\n                            moduleName: this.moduleName,\n                            triggerName: triggerName,\n                        });\n\n                        self.triggers[triggerName].push(tmp);\n                    }\n                }\n                if (childElement.hasChildNodes()) {\n                    self.searchTriggersRecursiveInnerFunction(childElement)\n                }\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Configure Trigger\n * -----------------------------------------------------------------------------\n *\n * @return {undefined}\n */\nJss.prototype.configureTrigger = function(trigger, fn) {\n    if ( typeof this.triggers[trigger] == \"object\") {\n\n        for (var i = 0; i < this.triggers[trigger].length; i++) {\n            //self.triggers[trigger][i]\n            fn(this.triggers[trigger][i]);\n        }\n\n    } else if (JssService.dev) {\n        console.error(\"You are trying to configure a trigger which has no attached domElement\")\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n *   Init\n * -----------------------------------------------------------------------------\n * Notice the user that a init function needs to be added for controlling the triggers\n *\n * @return {undefined}\n */\nJss.prototype.init = function(func) {\n    if (JssService.dev) {\n        console.info(this.moduleName + \": Add a prototype.init function to add triggers and stuff\")\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set element\n * -----------------------------------------------------------------------------\n * Add a domElement to `this`\n *\n * @return {undefined}\n */\nJss.prototype.setElement = function(element) {\n    if (typeof element == \"undefined\") {\n        if (JssService.dev) {\n            return console.error(\"First parameter of setElement needs to be a domElement\");\n        }\n    }\n    this.element = element;\n}\n/*******************************************************************************\n   *\n   *\tActions\n   *\n   *  \t@author      Jeffrey Arts <sjeffff@gmail.com>\n   *    @copyright   2015\n   *\n*******************************************************************************/\n/**\n * -----------------------------------------------------------------------------\n *   Validate action\n * -----------------------------------------------------------------------------\n * Checks if parameter is a valid action, and logs an error when not.\n *\n * @param {string} request                                                      The name of the request\n * @return {boolean} true if a action is valid, otherwise false.\n */\nJss.prototype.validateAction = function(request) {\n    var result;\n    request = this.getActionElement(request).request\n    for (var action in JssService.actions) {\n        if (JssService.actions[action].indexOf(request.toLowerCase()) > -1) {\n            result = action;\n            break;\n        }\n    }\n    if (result) {\n        return result;\n    } else {\n        console.error(\"validateAction: unknown request\", request);\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * \t Add Action\n * -----------------------------------------------------------------------------\n * Adds an action to the object, list of possible requests can be found in Jss.actions\n *\n * | Options\n * \t\t- addDefaults {boolean}                                                 True: add default classes, false: don't\n *\n *\n *\n * @param {string} request                                                      The name of the request\n * @param {function} fn                                                         The function which should be triggered\n * @param {object} options                                                      Object with option parameters\n * @return {boolean} true if a action is succesfully added, otherwise false.\n */\nJss.prototype.addAction = function(request, fn, options) {\n\n    var self        = this;\n    var action      = self.validateAction(request)\n    var actions     = [];\n    var t = self.getActionElement(request);\n    var element     = t.element;\n    var request     = t.request;\n    t = undefined;\n\n    // Options\n    var addDefaults = JssService.getOption(\"addDefaults\", options);\n\n\n\n    switch (action) {\n\n        case \"resize\":\n\n            actions.push(element.addEventListener(\"resize\", fn));\n\n        break;\n\n\n        case \"click\":\n            actions.push(element.addEventListener(\"click\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"click\", function(){\n                    self.setState(\"Clicked\")\n                }));\n                actions.push(window.addEventListener( \"click\", function(event) {\n                    if (event.target != self.element && self.hasState(\"Clicked\")) {\n                        self.removeState(\"Clicked\")\n                    }\n                }));\n            } // End addDefaults\n        break;\n\n\n        case \"change\":\n            actions.push(element.addEventListener(\"change\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"change\", function(){\n                    self.setState(\"Changed\")\n                    setTimeout(function(){self.removeState(\"Changed\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"hover\":\n            actions.push(element.addEventListener(\"mouseover\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseover\", function(){\n                    self.setState(\"Hover\")\n                }));\n                actions.push(element.addEventListener(\"mouseout\",  function(){\n                    self.removeState(\"Hover\")\n                }));\n            }\n        break;\n\n\n        case \"mouseIn\":\n\n            actions.push(element.addEventListener(\"mouseenter\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseenter\", function(){\n                    self.setState(\"MouseIn\")\n                    setTimeout(function(){self.removeState(\"MouseIn\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"mouseOut\":\n\n            actions.push(element.addEventListener(\"mouseleave\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseleave\", function(){\n                    self.setState(\"MouseOut\")\n                    setTimeout(function(){self.removeState(\"MouseOut\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n    }\n\n\n    if (actions.length > 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get action element\n * -----------------------------------------------------------------------------\n * @param  {string} request                                                     The request\n * @return {object}                                                             An object with 2 properties: request && element\n */\nJss.prototype.getActionElement = function(request) {\n    var self = this;\n    var prefix = false;\n    var newRequest  = request;\n    var element = self.element;\n    // Set prefix if it exists\n    if (request.indexOf(\".\") > 0) {\n        var t       = request.split(\".\"),\n        newRequest  = t[1];\n        prefix      = t[0];\n        t = undefined;\n    }\n\n    // Update element according the prefix (or skip it, if not set)\n    if (prefix !== false) {\n        switch (prefix) {\n            case \"screen\":\n            case \"window\":\n                element = window;\n            break;\n        }\n    }\n\n    // Return object\n    return {\n        request: newRequest,\n        element: element\n    }\n}\n/**\n * -----------------------------------------------------------------------------\n * Class name prefix\n * -----------------------------------------------------------------------------\n * The prefix equals the modulename, or - when it's a trigger object - modulename--triggername\n *\n * @return {string} The classname\n */\nJss.prototype.classNamePrefix = function() {\n    if (this.type == \"JssTrigger\") {\n        return this.moduleName + \"--\" + this.triggerName;\n    } else {\n        return this.moduleName;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Remove class name\n * -----------------------------------------------------------------------------\n * Removes the `this.element` classname\n * \t- \"all\" || undefined        > Removes ALL classnames\n *  - \"allStates\" || \"states\"   > Remove all STATES\n *  - all other strings remove that specific string from the className\n *\n * @param {string} input                                                        The classname (case-sensitive) which needs to be removed\n * @return {undefined}\n */\nJss.prototype.removeClassName = function(input) {\n\n    var classList  = [];\n\n    if (input == \"all\" || typeof input == \"undefined\") {\n\n        this.element.className = \"\";\n\n    } else if (input == \"states\" || input == \"allStates\") {\n\n        classList = this.element.className.split(\" \");\n        for (var i in classList) {\n            className = classList[i];\n            if (className.indexOf(\"__is\") > -1) {\n                delete classList[i];\n            }\n        }\n        this.element.className = classList.join(\" \");\n\n    } else if(typeof input == \"string\") {\n        this.element.className = this.element.className.replace(input,\"\");\n    } else {\n        console.error(\"removeClassName: parameter should be a string\");\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Add class name\n * -----------------------------------------------------------------------------\n * Adds a class name by string or array.\n * Does NOT check for duplicates\n *\n * @param  {string} The classname to be added\n * @return {undefined}\n */\nJss.prototype.addClassName = function(data) {\n    this.element.className += \" \";\n    if (typeof data == \"string\") {\n        this.element.className += data;\n    } else {\n        this.element.className += data.join(\" \")\n    }\n}\n\n/**\n * List where the keys corresponds with this[key], and where the value is the function to be executed when the var is changed.\n */\nJss.prototype.setterWatchList = {};\nJss.prototype.getterWatchList = {};\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add data\n * -----------------------------------------------------------------------------\n * Add a (default) value for the given attribute.\n *\n * @param {string} attribute                                                    The name of the attribute (this[attribute])\n * @param {*} value                                                             The value of this[attribute], could be anything...\n * @param {object} options\n *           \t\t- setterWatchFunction {function}\n *           \t\t- getterWatchFunction {function}\n */\nJss.prototype.addData = function(attribute, value, options) {\n\n\n    // watchList[key] = fn;\n    var setterWatchFunction = JssService.getOption('setterWatchFunction', options); // Function\n    var getterWatchFunction = JssService.getOption('getterWatchFunction', options); // Function\n\n    if (typeof setterWatchFunction === \"function\") {\n        this.setterWatchList[attribute] = setterWatchFunction;\n    }\n\n    if (typeof getterWatchFunction === \"function\") {\n        this.getterWatchList[attribute] = getterWatchFunction;\n    }\n\n    // Set the default value\n    return this[attribute] = value;\n}\n\n\n\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- ajax {string} url\n */\nJss.prototype.setData = function(attribute, value, options) {\n\n    this[attribute] = value;\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n\n    if (Array.isArray(fallback)) {\n\n        for (var i = 0; i < fallback.length; i++) {\n            var type = fallback[i];\n\n            if (value && value.length > 0) {\n                this['setData' + JssService.toCamelCase(type)](attribute, value); // Call this.addDataAttribute(value) || this.addDataCookie(value) etc...\n                this[attribute] = value;\n            }\n        }\n    }\n\n    // Call the setter watch function, if defined;\n    if (typeof this.setterWatchList[attribute] === \"function\") { // Use the watchlist to add functionality whenever a data attribute is updated\n        this.setterWatchList[attribute]();\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataDefault {boolean}\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- dataAjax {string} url\n */\nJss.prototype.getData = function(attribute, options) {\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n    var value = false;\n\n\n    if (!fallback) {\n        fallback = ['attribute'];\n    }\n\n\n    for (var i = 0; i < fallback.length; i++) {\n        var type = JssService.toCamelCase(fallback[i]);\n        var customOptions = false;\n\n        if (typeof options == \"object\") {\n            customOptions = options[fallback[i].toLowerCase()];\n        }\n\n        if (!value || value.length < 0) {\n            if (typeof this['getData' + type] !== \"function\") {\n                console.error('this.getData' + type + ' is not a function. Probably ' + type + ' is not a available data option');\n                continue;\n            }\n            value = this['getData' + type]( attribute, customOptions ); // Call this.getDataAttribute(value) || this.getDataCookie(value) || this.getDataAjax(value) etc...\n        }\n    }\n    console.log(this.getterWatchList);\n    // Call the getter watch function, if defined;\n    if (typeof this.getterWatchList[attribute] == \"function\") {\n        this.getterWatchList[attribute]();\n    }\n\n    return this[attribute] = value;\n}\n/**\n * -----------------------------------------------------------------------------\n * Get data: Ajax\n * -----------------------------------------------------------------------------\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n *\n * @param {string} attribute                                                    The NAME of the inner variable (this.NAME), is also used as the key for the GET Request {NAME: value}\n * @param {object} options                                                      Object with parameters used to make a GET request\n * @return {string}                                                             The value of the given attribute, or false if an erro occured.\n */\nJss.prototype.getDataAjax = function(attribute, options) {\n    var url = JssService.getOption(\"url\", options);\n    var jsonKey = JssService.getOption(\"jsonKey\", options) || attribute;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('GET', url);\n\n        return ajaxReturn.success(function(result){\n            if (typeof result === \"object\") {\n                if (result[jsonKey]) {\n                    return result[jsonKey];\n                }\n            }\n        }).error(function(errorObject){\n            console.log(errorObject);\n        });\n    }\n\n    return false;\n};\n\n/**\n * -----------------------------------------------------------------------------\n * Set data: Ajax\n * -----------------------------------------------------------------------------\n * Makes a post request to the options.url in a object {attribute: value}\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n */\nJss.prototype.setDataAjax = function(attribute, value, options) {\n    var url = JssService.getOption(\"url\", options);\n    var requestObject = {}\n        requestObject[attribute] = value;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('POST', url, requestObject);\n\n        return ajaxReturn.success(function(result){\n            return true;\n        }).error(function(errorObject){\n            console.log(errorObject);\n            return false;\n        });\n    }\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Ajax (helper function)\n * -----------------------------------------------------------------------------\n * Based on Atom.js by Todd Motto\n * http://toddmotto.com/writing-a-standalone-ajax-xhr-javascript-micro-library/\n */\nJss.prototype.ajaxHelper = {\n    // Parses json if possible, otherwise just return text\n    parse: function(req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return [result, req];\n    },\n\n    xhr: function(type, url, data) {\n        var ajaxHelper = this;\n\n        var methods = {\n            success: function() {},\n            error: function() {}\n        };\n        var XHR = XMLHttpRequest || ActiveXObject;\n        var request = new XHR('MSXML2.XMLHTTP.3.0');\n        request.open(type, url, true);\n        request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n\n        request.onreadystatechange = function() {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    methods.success.apply(methods, ajaxHelper.parse(request));\n                } else {\n                    methods.error.apply(methods, ajaxHelper.parse(request));\n                }\n            }\n        };\n        request.send(data);\n        return {\n            success: function(callback) {\n                methods.success = callback;\n                return methods;\n            },\n            error: function(callback) {\n                methods.error = callback;\n                return methods;\n            }\n        };\n    }\n};\n\nJss.prototype.ajax = {\n    // Get\n    get: function(src) {\n        console.log(this);\n    },\n\n    // Set\n    put: function(url, data) {\n        return this.ajaxHelper.xhr('PUT', url, data);\n    },\n\n    // Add\n    post: function(url, data) {\n        return this.ajaxHelper.xhr('POST', url, data);\n    }\n\n};\n/**\n * -----------------------------------------------------------------------------\n * Get data attribute value\n * -----------------------------------------------------------------------------\n * Returns the value of the requested attribute. Search first for a data-[ATTRIBUTE] value\n * If not found, it checks for the attribute in the default object. When that is not being\n * found neither, the normal this[attribute] value is being returned.\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME)\n * @return {string}                                                             The value of the given attribute\n */\nJss.prototype.getDataAttribute = function(attribute) {\n\n    return this.element.dataset[attribute];\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Update data attribute\n * -----------------------------------------------------------------------------\n * Set the value to the given attribute. And updates the data-[ATTRIBUTE] value\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME=\"value\")\n * @param {string} value                                                        The VALUE of the data attribute (data-name=\"VALUE\")\n * @return {undefined}\n */\n\nJss.prototype.setDataAttribute = function(attribute, value) {\n\n    // Update data attribute\n    if (typeof value !== \"undefined\") {\n        this.element.dataset[attribute] = this[attribute];\n    } else {\n        delete this.element.dataset[attribute];\n    }\n\n    return true;\n}\nJss.prototype.dataDefaultsCookie = {\n    'expireData': undefined\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get cookie value\n * -----------------------------------------------------------------------------\n * Returns cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @return {string}                                                             The VALUE of the given attribute\n */\nJss.prototype.getDataCookie = function(attribute) {\n\n    if (!attribute) { return null; }\n    return decodeURIComponent(document.cookie.replace(new RegExp(\"(?:(?:^|.*;)\\\\s*\" + encodeURIComponent(attribute).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"), \"$1\")) || null;\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data cookie\n * -----------------------------------------------------------------------------\n * Updates the cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @param {string} value                                                        The VALUE of the cookie\n * @return {undefined}\n */\n\nJss.prototype.setDataCookie = function(attribute, value, options) {\n    var endDate, path, domain, secureConnection;\n\n    if (typeof options === \"object\") {\n        endDate = JssService.getOption('endDate', options);\n        path    = JssService.getOption('path', options);\n        domain  = JssService.getOption('domain', options);\n        secureConnection = JssService.getOption('secureConnection', options);\n    }\n\n    if (!attribute || /^(?:expires|max\\-age|path|domain|secure)$/i.test(attribute)) { return false; }\n    var sExpires = \"\";\n    if (endDate) {\n      switch (endDate.constructor) {\n        case Number:\n          sExpires = endDate === Infinity ? \"; expires=Fri, 31 Dec 9999 23:59:59 GMT\" : \"; max-age=\" + endDate;\n          break;\n        case String:\n          sExpires = \"; expires=\" + endDate;\n          break;\n        case Date:\n          sExpires = \"; expires=\" + endDate.toUTCString();\n          break;\n      }\n    }\n\n    document.cookie = encodeURIComponent(attribute) + \"=\" + encodeURIComponent(value) + sExpires + (domain ? \"; domain=\" + domain : \"\") + (path ? \"; path=\" + path : \"\") + (secureConnection ? \"; secure\" : \"\");\n    return true;\n}\n/*******************************************************************************\n\n    Styles\n\n*******************************************************************************/\n\n/**\n * -----------------------------------------------------------------------------\n * Set height\n * -----------------------------------------------------------------------------\n * Sets the height of the `this.element` by the given input (height)\n *\n * @param  {number} height                                                      The height in pixels or percentage. Where numbers will be calculated to pixels so giving a height of 50 will result in a height of \"50px\". If you want percentages pass the variable with a percentage sign 50 + \"%\"\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setHeight = function(height) {\n    if (typeof height === \"number\") {\n        height += \"px\";\n    }\n\n    if (typeof height !== \"string\") {\n        throw(\"parameter height needs to be a string or integer\");\n    }\n\n    this.element.style.height = height;\n    return true;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get height\n * -----------------------------------------------------------------------------\n * Returns the height of the `this.element`\n *\n * @return {number}                                                             The height of the element in pixels\n */\nJss.prototype.getHeight = function() {\n    return this.element.offsetHeight;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set width\n * -----------------------------------------------------------------------------\n * Sets the width of the `this.element` by the given input (width)\n *\n * @param  {number} width                                                       The width in pixels or percentage. Where numbers will be calculated to pixels so giving a width of 50 will result in a width of \"50px\". If you want to set a percentage, just pass the variable with a percentage sign (\"50%\")\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setWidth = function(width) {\n    if (typeof width == \"number\") {\n        width += \"px\";\n    }\n\n    if (typeof width !== \"string\") {\n        throw(\"parameter width needs to be a string or integer\");\n    }\n    this.element.style.width = width;\n    return true;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get width\n * -----------------------------------------------------------------------------\n * Returns the width of the `this.element`\n *\n * @return {number}                                                             The width of the element in pixels\n */\nJss.prototype.getWidth = function() {\n    return this.element.offsetWidth;\n}\n/**\n * -----------------------------------------------------------------------------\n * Set State\n * -----------------------------------------------------------------------------\n * This updates the state of the object. States are being added to the class name prefix with a double underscore.\n * If you would have the module `envelope` and give it the state `open`. The class name `envelope__open` will be added.\n * Whenever you remove the state `open`, the according class name will be removed as well.\n *\n * @param  {string} str                                                         The name of the state which should be set (this is transformed to CamelCase)\n * @return {boolean}                                                            True on success, otherwise false (might already have the state)\n */\nJss.prototype.setState = function(str) {\n    var element, verifiedState, state, className;\n\n    element         = this.element;\n    state           = JssService.toCamelCase(str);\n    className       = this.classNamePrefix() + \"__is\" + state;\n\n    // Check if this.state is an array, and make it one if not.\n    if (Array.isArray(this.state) == false ) {\n        this.state = [];\n    }\n\n    // This if statement prevents that the same state is being set multiple times\n    if ( !this.hasState(str) ) {\n        this.addClassName(className)\n        this.state.push(state);\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Has state\n * -----------------------------------------------------------------------------\n * Checks if the parameter is already a state and returns true if so. Otherwise false.\n *\n * @param  {string} str                                                         The state which will be checked for\n * @return {boolean}                                                            True if it has the given state, otherwise false\n */\nJss.prototype.hasState = function(str) {\n    if (typeof this.state == \"object\" && this.state.indexOf(str) >= 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Remove state\n * -----------------------------------------------------------------------------\n * Removes the state from the states array, and from the element.className\n *\n * @param  {string} str                                                         The name of the state which should be removed\n * @return {undefined}\n */\nJss.prototype.removeState = function(str) {\n\n    var state      = JssService.toCamelCase(str);\n    var stateIndex = this.state.indexOf(state);\n\n    if (str == \"all\" || typeof str == \"undefined\") {\n        this.removeClassName(\"states\");\n    } else {\n        this.state.splice(stateIndex, 1);\n        if (typeof this.moduleAction != \"undefined\" && this.moduleAction.length > -1) {\n            this.removeClassName(this.classNamePrefix() + \"\" + this.moduleAction + \"__is\" + state);\n        } else {\n            this.removeClassName(this.classNamePrefix() + \"__is\" + state);\n        }\n    }\n}\n\n\n// A simple way to watch variables\n\n// addVar(keyName, value, watch_function)\n// setVar(keyName, value)\n// getVar(keyName)\n// Add -> new\n// Set -> update\n// Get -> return\nvar JssModule = function(){};\n\nJssModule.prototype.type               = \"JssModule\";\nJssModule.prototype.init               = Jss.prototype.init;\nJssModule.prototype.setElement         = Jss.prototype.setElement;\n\n// Triggers\nJssModule.prototype.findTriggers       = Jss.prototype.findTriggers;\nJssModule.prototype.configureTrigger      = Jss.prototype.configureTrigger;\n\n// Actions\n//JssModule.prototype.actions            = Object.create(Jss.prototype.actions);\nJssModule.prototype.validateAction     = Jss.prototype.validateAction;\nJssModule.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssModule.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssModule.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssModule.prototype.setState           = Jss.prototype.setState;\nJssModule.prototype.hasState           = Jss.prototype.hasState;\nJssModule.prototype.removeState        = Jss.prototype.removeState;\n\n// Data attributes\nJssModule.prototype.addData            = Jss.prototype.addData;\nJssModule.prototype.getData            = Jss.prototype.getData;\nJssModule.prototype.setData            = Jss.prototype.setData;\nvar JssTrigger = function(element, options) {\n    this.setElement(element);\n\n    if (typeof options === \"object\") {\n        if (typeof options.module === \"object\") {\n            this.module = options.module;\n        }\n        if (typeof options.moduleName === \"string\") {\n            this.moduleName = options.moduleName;\n        }\n        if (typeof options.triggerName === \"string\") {\n            this.triggerName = options.triggerName;\n        }\n    }\n}\n\n\nJssTrigger.prototype                    = Object.create(Jss.prototype);\nJssTrigger.prototype.type               = \"JssTrigger\";\nJssTrigger.prototype.setElement         = Jss.prototype.setElement;\n\n// Actions\n//JssTrigger.prototype.actions            = Object.create(Jss.prototype.actions);\nJssTrigger.prototype.validateAction     = Jss.prototype.validateAction;\nJssTrigger.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssTrigger.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssTrigger.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssTrigger.prototype.setState           = Jss.prototype.setState;\nJssTrigger.prototype.hasState           = Jss.prototype.hasState;\nJssTrigger.prototype.removeState        = Jss.prototype.removeState;\n\n\n\nvar  JssController = {};\nJssController.modules \t\t= []; // Result array with objects of all the found modules\nJssController.activeModules \t= JssService.activeModules;\n\nJssController.findModules = function() {\n    var allElements = document.getElementsByTagName(\"*\");                       // Array with all domElements\n    var test = [];\n    var self = this;\n    for (var i=0; i < allElements.length; i++) {\n\n        // Set default vars //\n        var element = allElements[i];                                           // Specific domElement\n        var tmp = false;\n\n        // Loop through the (active) modules array and add/instantiate them\n        self.activeModules.forEach(function(module){\n            if (JssService.isModule(element, module)) {\n                tmp = eval(\"new \" + JssService.toCamelCase(module) + \"(element)\"); // Dynamicly load modules\n\n                tmp.setElement(element);                                        // Add the domElement to the module\n                tmp.findTriggers();\t\t\t                                    // Search for module triggers\n\n                tmp.init();\t\t\t\t\t                                    // Executes everything within the init function\n                self.modules.push(tmp);\n\n            }\n        }); // End forEach\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    JssController.findModules();\n    console.log(JssController);\n});"
          },
          "returns": [
            {
              "title": "returns",
              "description": null,
              "type": {
                "type": "UndefinedLiteral"
              }
            }
          ],
          "name": "init",
          "kind": "function",
          "memberof": "Jss",
          "scope": "instance",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            "Jss",
            "init"
          ]
        },
        {
          "description": "-----------------------------------------------------------------------------\nRemove class name\n-----------------------------------------------------------------------------\nRemoves the `this.element` classname\n\t- \"all\" || undefined        > Removes ALL classnames\n - \"allStates\" || \"states\"   > Remove all STATES\n - all other strings remove that specific string from the className",
          "tags": [
            {
              "title": "param",
              "description": "The classname (case-sensitive) which needs to be removed",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "input"
            },
            {
              "title": "returns",
              "description": null,
              "type": {
                "type": "UndefinedLiteral"
              }
            },
            {
              "title": "name",
              "name": "removeClassName"
            },
            {
              "title": "kind",
              "kind": "function"
            },
            {
              "title": "memberof",
              "description": "Jss"
            },
            {
              "title": "instance"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 609,
                "column": 0
              },
              "end": {
                "line": 645,
                "column": 0
              }
            },
            "file": "/Users/jeffreyarts/Documents/DEV/jss/lib/jss.js",
            "code": "JssService = {};\n\n// Edit this array to enable or disable default modules\nJssService.activeModules   = []\n\n// Set this to false in a live environment\nJssService.dev             = true;\n\n/**************************\n*\n*   Below are core properties defined, becarefull when you think of changing these...\n*\n**************************/\n\n\nJssService.actions = {\n    hover:      ['hover',    'mouseover',   'onmouseover'                       ], // Fixed\n    click:      ['click',    'onclick'                                          ], // Fixed\n    mouseIn:    ['mousein',  'onmousein', 'mouseenter', 'onmouseenter'          ], // Fixed\n    mouseOut:   ['mouseout', 'onmouseout', 'mouseleave', 'onmouseleave'         ], // Fixed\n    resize:     ['resize',   'onresize'                                         ], // Fixed\n    focus:      ['focus',    'onfocus'                                          ],\n    keyDown:    ['keydown',  'keypress'                                         ],\n    keyUp:      ['keyup',    'keyrelease'                                       ],\n    change:     ['change',   'onchange'                                         ],\n};\n\nJssService.enterDelay = 1000;                                                   // Amount of miliseconds which is used to remove the entered state. (see core.actions) JssService.enterDelay setTimeout\n\nJssService.forbiddenProperties = [\n    'type',\n    'triggers',\n    'configureTrigger',\n    'findTriggers'\n];\n\n/**\n * -----------------------------------------------------------------------------\n * Is Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isModule = function(element, moduleName) {\n    var arr = element.className.split(\" \");\n    var found = false;\n\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i].indexOf(moduleName)        > -1 &&\n            arr[i].indexOf(moduleName + \"_\") == -1 &&\n            arr[i].indexOf(moduleName + \"-\") == -1)\n        {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.addModule = function(moduleName) {\n    this.activeModules.push(this.toKebabCase(moduleName))\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To CamelCase\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toCamelCase = function(input) {\n    var arr, res;\n    res = \"\";\n    if (typeof input === \"string\") {\n        input = input.replace(/\\-/g,\" \");                                       // Replace all dashes with spaces\n        arr = input.split(\" \");\n    } else {\n        arr = input;                                                            // Assume it is an array\n    }\n\n\n\n    var i = 0;\n    for (var i in arr) {\n        if (typeof i != \"undefined\") {\n            res += arr[i][0].toUpperCase()+ arr[i].slice(1); // Capitalize first letter\n        }\n    }\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To kebab-case\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toKebabCase = function(input) {\n    var res, str;\n    res = \"\";\n\n    if (typeof input === \"string\") {\n        str = input;\n    } else {                                                                    // Assume it is an array\n        str = input.join(\" \");\n    }\n\n    // First change it to camelcase\n    str = this.toCamelCase(str);\n\n    var max = str.length;\n    for (var i=0; i < max; i++) {\n        // Check if character is uppercase\n        if (str[i] != str[i].toLowerCase()) {\n            if (i!==0) {\n                str = str.substr(0, i) + \"-\" + str.substr(i);\n                i++;\n            }\n        }\n    }\n\n    return res = str.toLowerCase();\n}\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get option\n * -----------------------------------------------------------------------------\n * @param  {string} name                                                        Keyname in optionList\n * @param  {array} optionList                                                   Array with all possible options\n * @return {}                                                                   Copy of the value (optionsList[name])\n */\nJssService.getOption = function(name, optionList) {\n    if (typeof optionList !== \"object\") {\n        return false;\n    }\n\n    var res;\n\n    switch (name) {\n\n        // Only set `addDefaults` to false when it is explicitly set.\n        case \"addDefaults\":\n            if (optionList[name] !== false || typeof optionList[name] === \"undefined\") {\n                res = true;\n            } else {\n                res = false;\n            }\n        break;\n        case \"fallback\":\n            if ( Array.isArray(optionList[name]) ) {\n                res = optionList[name];\n                if (res.length===0) {\n                    res = false;\n                }\n            } else if (typeof optionList[name] === \"string\"){\n                res = [optionList[name]];\n            }\n        break;\n        default:\n        res = optionList[name]\n    }\n\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Is Trigger\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isTrigger = function(element, moduleName) {\n    if (element.className.indexOf(moduleName + \"--\") > -1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get trigger name\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {string} Name of the trigger.\n */\nJssService.getTriggerName = function(element, moduleName) {\n    if (typeof element != \"object\") {\n        console.error('Required first argument `element` needs to be a domElement.');\n        return false;\n    }\n    if (typeof moduleName != \"string\") {\n        console.error('Required second argument `moduleName` needs to be a string.');\n        return false;\n    }\n\n    // As an example we assume that the value of element.className equals 'b module--triggerName'\n    var startPos = element.className.indexOf(moduleName + \"--\");                    // 2\n    var sliced = element.className.slice(startPos, element.className.length )       // 'module--triggerName'\n    var endPos = sliced.indexOf(\" \");                                               // -1       // not found\n    if (endPos != -1) {                                                             // 19\n        sliced = sliced.slice(0,endPos);                                            // if there is more after the string, this will remove it\n    }\n    return sliced.replace(moduleName + \"--\",\"\")\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger name is allowed\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} True if the triggername is allowed, otherwise false.\n */\nJssService.triggerNameIsAllowed = function(element, moduleName) {\n    if (JssService.forbiddenProperties.indexOf(this.getTriggerName(element, moduleName)) > -1) {      // This triggerName is a core property, throw error\n        console.error('Triggername `' + getTriggerName(element,moduleName) + '` is not allowed. Change the trigger so it does not corresponds any of these: ' + JssService.forbiddenProperties)\n        return false;\n    }\n    return true;\n}\n/**\n * @module Jss\n * @author      Jeffrey Arts <sjeffff@gmail.com>\n * @copyright   2015\n */\nJss = function(){};\n\nJss.prototype.type      = \"Jss\"\nJss.prototype.triggers  = false;\nJss.prototype.element   = undefined;                                              // {obj} domElement\nJss.prototype.state     = undefined;                                              // {str} State of module, is reflected by the css class __isState\n\n/**\n * -----------------------------------------------------------------------------\n * Find Triggers\n * -----------------------------------------------------------------------------\n *\n * @param {domElement} element\n * @return {undefined}\n */\nJss.prototype.findTriggers = function(element) {\n    this.triggers = [];                                                         // If this is not set, all modules will have the same reference point to this.triggers.\n    // Module is created, now look for any module triggers\n    this.searchTriggersRecursiveInnerFunction(this.element)\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger\n * -----------------------------------------------------------------------------\n */\nJss.prototype.trigger = function(which, fn) {\n    if (typeof this.triggers !== \"object\") {\n        console.info(\"No triggers are found, please specify them in the css as `module-name--trigger-name`.\");\n        return false;\n    }\n\n    if (typeof this.triggers[which] !== \"object\") {\n        console.info(\"You are trying to execute a function on a non existing trigger `\" + which + \"`\");\n        return false;\n    }\n\n    for (var i = 0; i < this.triggers[which].length; i++) {\n        fn(this.triggers[which][i])\n    }\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Search triggers recursive inner function\n * -----------------------------------------------------------------------------\n * Recursive function which is executed bij findTriggers;\n *\n * @return {undefined}\n */\nJss.prototype.searchTriggersRecursiveInnerFunction = function(element) {\n    var self = this;\n    if (typeof element == \"undefined\" ) {\n        element = this.element;\n    }\n    if ( element.hasChildNodes() ) {\n        for (var i=0; i < element.childNodes.length; i++) {\n\n            var childElement = element.childNodes[i];                           // Improve readability\n\n            if (childElement.nodeType == 1) {                                   // NodeType 1 == domElement\n\n                if (JssService.isTrigger(childElement, this.moduleName)) {\n\n                    // Add a child element\n                    if (JssService.triggerNameIsAllowed(childElement, this.moduleName)) {\n                        var triggerName = JssService.getTriggerName(childElement, this.moduleName)\n\n                        if (typeof self.triggers[triggerName] !== \"object\") {\n                            self.triggers[triggerName] = [];\n                        }\n\n                        var tmp = new JssTrigger(childElement, {\n                            module: self,\n                            moduleName: this.moduleName,\n                            triggerName: triggerName,\n                        });\n\n                        self.triggers[triggerName].push(tmp);\n                    }\n                }\n                if (childElement.hasChildNodes()) {\n                    self.searchTriggersRecursiveInnerFunction(childElement)\n                }\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Configure Trigger\n * -----------------------------------------------------------------------------\n *\n * @return {undefined}\n */\nJss.prototype.configureTrigger = function(trigger, fn) {\n    if ( typeof this.triggers[trigger] == \"object\") {\n\n        for (var i = 0; i < this.triggers[trigger].length; i++) {\n            //self.triggers[trigger][i]\n            fn(this.triggers[trigger][i]);\n        }\n\n    } else if (JssService.dev) {\n        console.error(\"You are trying to configure a trigger which has no attached domElement\")\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n *   Init\n * -----------------------------------------------------------------------------\n * Notice the user that a init function needs to be added for controlling the triggers\n *\n * @return {undefined}\n */\nJss.prototype.init = function(func) {\n    if (JssService.dev) {\n        console.info(this.moduleName + \": Add a prototype.init function to add triggers and stuff\")\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set element\n * -----------------------------------------------------------------------------\n * Add a domElement to `this`\n *\n * @return {undefined}\n */\nJss.prototype.setElement = function(element) {\n    if (typeof element == \"undefined\") {\n        if (JssService.dev) {\n            return console.error(\"First parameter of setElement needs to be a domElement\");\n        }\n    }\n    this.element = element;\n}\n/*******************************************************************************\n   *\n   *\tActions\n   *\n   *  \t@author      Jeffrey Arts <sjeffff@gmail.com>\n   *    @copyright   2015\n   *\n*******************************************************************************/\n/**\n * -----------------------------------------------------------------------------\n *   Validate action\n * -----------------------------------------------------------------------------\n * Checks if parameter is a valid action, and logs an error when not.\n *\n * @param {string} request                                                      The name of the request\n * @return {boolean} true if a action is valid, otherwise false.\n */\nJss.prototype.validateAction = function(request) {\n    var result;\n    request = this.getActionElement(request).request\n    for (var action in JssService.actions) {\n        if (JssService.actions[action].indexOf(request.toLowerCase()) > -1) {\n            result = action;\n            break;\n        }\n    }\n    if (result) {\n        return result;\n    } else {\n        console.error(\"validateAction: unknown request\", request);\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * \t Add Action\n * -----------------------------------------------------------------------------\n * Adds an action to the object, list of possible requests can be found in Jss.actions\n *\n * | Options\n * \t\t- addDefaults {boolean}                                                 True: add default classes, false: don't\n *\n *\n *\n * @param {string} request                                                      The name of the request\n * @param {function} fn                                                         The function which should be triggered\n * @param {object} options                                                      Object with option parameters\n * @return {boolean} true if a action is succesfully added, otherwise false.\n */\nJss.prototype.addAction = function(request, fn, options) {\n\n    var self        = this;\n    var action      = self.validateAction(request)\n    var actions     = [];\n    var t = self.getActionElement(request);\n    var element     = t.element;\n    var request     = t.request;\n    t = undefined;\n\n    // Options\n    var addDefaults = JssService.getOption(\"addDefaults\", options);\n\n\n\n    switch (action) {\n\n        case \"resize\":\n\n            actions.push(element.addEventListener(\"resize\", fn));\n\n        break;\n\n\n        case \"click\":\n            actions.push(element.addEventListener(\"click\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"click\", function(){\n                    self.setState(\"Clicked\")\n                }));\n                actions.push(window.addEventListener( \"click\", function(event) {\n                    if (event.target != self.element && self.hasState(\"Clicked\")) {\n                        self.removeState(\"Clicked\")\n                    }\n                }));\n            } // End addDefaults\n        break;\n\n\n        case \"change\":\n            actions.push(element.addEventListener(\"change\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"change\", function(){\n                    self.setState(\"Changed\")\n                    setTimeout(function(){self.removeState(\"Changed\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"hover\":\n            actions.push(element.addEventListener(\"mouseover\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseover\", function(){\n                    self.setState(\"Hover\")\n                }));\n                actions.push(element.addEventListener(\"mouseout\",  function(){\n                    self.removeState(\"Hover\")\n                }));\n            }\n        break;\n\n\n        case \"mouseIn\":\n\n            actions.push(element.addEventListener(\"mouseenter\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseenter\", function(){\n                    self.setState(\"MouseIn\")\n                    setTimeout(function(){self.removeState(\"MouseIn\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"mouseOut\":\n\n            actions.push(element.addEventListener(\"mouseleave\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseleave\", function(){\n                    self.setState(\"MouseOut\")\n                    setTimeout(function(){self.removeState(\"MouseOut\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n    }\n\n\n    if (actions.length > 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get action element\n * -----------------------------------------------------------------------------\n * @param  {string} request                                                     The request\n * @return {object}                                                             An object with 2 properties: request && element\n */\nJss.prototype.getActionElement = function(request) {\n    var self = this;\n    var prefix = false;\n    var newRequest  = request;\n    var element = self.element;\n    // Set prefix if it exists\n    if (request.indexOf(\".\") > 0) {\n        var t       = request.split(\".\"),\n        newRequest  = t[1];\n        prefix      = t[0];\n        t = undefined;\n    }\n\n    // Update element according the prefix (or skip it, if not set)\n    if (prefix !== false) {\n        switch (prefix) {\n            case \"screen\":\n            case \"window\":\n                element = window;\n            break;\n        }\n    }\n\n    // Return object\n    return {\n        request: newRequest,\n        element: element\n    }\n}\n/**\n * -----------------------------------------------------------------------------\n * Class name prefix\n * -----------------------------------------------------------------------------\n * The prefix equals the modulename, or - when it's a trigger object - modulename--triggername\n *\n * @return {string} The classname\n */\nJss.prototype.classNamePrefix = function() {\n    if (this.type == \"JssTrigger\") {\n        return this.moduleName + \"--\" + this.triggerName;\n    } else {\n        return this.moduleName;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Remove class name\n * -----------------------------------------------------------------------------\n * Removes the `this.element` classname\n * \t- \"all\" || undefined        > Removes ALL classnames\n *  - \"allStates\" || \"states\"   > Remove all STATES\n *  - all other strings remove that specific string from the className\n *\n * @param {string} input                                                        The classname (case-sensitive) which needs to be removed\n * @return {undefined}\n */\nJss.prototype.removeClassName = function(input) {\n\n    var classList  = [];\n\n    if (input == \"all\" || typeof input == \"undefined\") {\n\n        this.element.className = \"\";\n\n    } else if (input == \"states\" || input == \"allStates\") {\n\n        classList = this.element.className.split(\" \");\n        for (var i in classList) {\n            className = classList[i];\n            if (className.indexOf(\"__is\") > -1) {\n                delete classList[i];\n            }\n        }\n        this.element.className = classList.join(\" \");\n\n    } else if(typeof input == \"string\") {\n        this.element.className = this.element.className.replace(input,\"\");\n    } else {\n        console.error(\"removeClassName: parameter should be a string\");\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Add class name\n * -----------------------------------------------------------------------------\n * Adds a class name by string or array.\n * Does NOT check for duplicates\n *\n * @param  {string} The classname to be added\n * @return {undefined}\n */\nJss.prototype.addClassName = function(data) {\n    this.element.className += \" \";\n    if (typeof data == \"string\") {\n        this.element.className += data;\n    } else {\n        this.element.className += data.join(\" \")\n    }\n}\n\n/**\n * List where the keys corresponds with this[key], and where the value is the function to be executed when the var is changed.\n */\nJss.prototype.setterWatchList = {};\nJss.prototype.getterWatchList = {};\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add data\n * -----------------------------------------------------------------------------\n * Add a (default) value for the given attribute.\n *\n * @param {string} attribute                                                    The name of the attribute (this[attribute])\n * @param {*} value                                                             The value of this[attribute], could be anything...\n * @param {object} options\n *           \t\t- setterWatchFunction {function}\n *           \t\t- getterWatchFunction {function}\n */\nJss.prototype.addData = function(attribute, value, options) {\n\n\n    // watchList[key] = fn;\n    var setterWatchFunction = JssService.getOption('setterWatchFunction', options); // Function\n    var getterWatchFunction = JssService.getOption('getterWatchFunction', options); // Function\n\n    if (typeof setterWatchFunction === \"function\") {\n        this.setterWatchList[attribute] = setterWatchFunction;\n    }\n\n    if (typeof getterWatchFunction === \"function\") {\n        this.getterWatchList[attribute] = getterWatchFunction;\n    }\n\n    // Set the default value\n    return this[attribute] = value;\n}\n\n\n\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- ajax {string} url\n */\nJss.prototype.setData = function(attribute, value, options) {\n\n    this[attribute] = value;\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n\n    if (Array.isArray(fallback)) {\n\n        for (var i = 0; i < fallback.length; i++) {\n            var type = fallback[i];\n\n            if (value && value.length > 0) {\n                this['setData' + JssService.toCamelCase(type)](attribute, value); // Call this.addDataAttribute(value) || this.addDataCookie(value) etc...\n                this[attribute] = value;\n            }\n        }\n    }\n\n    // Call the setter watch function, if defined;\n    if (typeof this.setterWatchList[attribute] === \"function\") { // Use the watchlist to add functionality whenever a data attribute is updated\n        this.setterWatchList[attribute]();\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataDefault {boolean}\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- dataAjax {string} url\n */\nJss.prototype.getData = function(attribute, options) {\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n    var value = false;\n\n\n    if (!fallback) {\n        fallback = ['attribute'];\n    }\n\n\n    for (var i = 0; i < fallback.length; i++) {\n        var type = JssService.toCamelCase(fallback[i]);\n        var customOptions = false;\n\n        if (typeof options == \"object\") {\n            customOptions = options[fallback[i].toLowerCase()];\n        }\n\n        if (!value || value.length < 0) {\n            if (typeof this['getData' + type] !== \"function\") {\n                console.error('this.getData' + type + ' is not a function. Probably ' + type + ' is not a available data option');\n                continue;\n            }\n            value = this['getData' + type]( attribute, customOptions ); // Call this.getDataAttribute(value) || this.getDataCookie(value) || this.getDataAjax(value) etc...\n        }\n    }\n    console.log(this.getterWatchList);\n    // Call the getter watch function, if defined;\n    if (typeof this.getterWatchList[attribute] == \"function\") {\n        this.getterWatchList[attribute]();\n    }\n\n    return this[attribute] = value;\n}\n/**\n * -----------------------------------------------------------------------------\n * Get data: Ajax\n * -----------------------------------------------------------------------------\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n *\n * @param {string} attribute                                                    The NAME of the inner variable (this.NAME), is also used as the key for the GET Request {NAME: value}\n * @param {object} options                                                      Object with parameters used to make a GET request\n * @return {string}                                                             The value of the given attribute, or false if an erro occured.\n */\nJss.prototype.getDataAjax = function(attribute, options) {\n    var url = JssService.getOption(\"url\", options);\n    var jsonKey = JssService.getOption(\"jsonKey\", options) || attribute;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('GET', url);\n\n        return ajaxReturn.success(function(result){\n            if (typeof result === \"object\") {\n                if (result[jsonKey]) {\n                    return result[jsonKey];\n                }\n            }\n        }).error(function(errorObject){\n            console.log(errorObject);\n        });\n    }\n\n    return false;\n};\n\n/**\n * -----------------------------------------------------------------------------\n * Set data: Ajax\n * -----------------------------------------------------------------------------\n * Makes a post request to the options.url in a object {attribute: value}\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n */\nJss.prototype.setDataAjax = function(attribute, value, options) {\n    var url = JssService.getOption(\"url\", options);\n    var requestObject = {}\n        requestObject[attribute] = value;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('POST', url, requestObject);\n\n        return ajaxReturn.success(function(result){\n            return true;\n        }).error(function(errorObject){\n            console.log(errorObject);\n            return false;\n        });\n    }\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Ajax (helper function)\n * -----------------------------------------------------------------------------\n * Based on Atom.js by Todd Motto\n * http://toddmotto.com/writing-a-standalone-ajax-xhr-javascript-micro-library/\n */\nJss.prototype.ajaxHelper = {\n    // Parses json if possible, otherwise just return text\n    parse: function(req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return [result, req];\n    },\n\n    xhr: function(type, url, data) {\n        var ajaxHelper = this;\n\n        var methods = {\n            success: function() {},\n            error: function() {}\n        };\n        var XHR = XMLHttpRequest || ActiveXObject;\n        var request = new XHR('MSXML2.XMLHTTP.3.0');\n        request.open(type, url, true);\n        request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n\n        request.onreadystatechange = function() {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    methods.success.apply(methods, ajaxHelper.parse(request));\n                } else {\n                    methods.error.apply(methods, ajaxHelper.parse(request));\n                }\n            }\n        };\n        request.send(data);\n        return {\n            success: function(callback) {\n                methods.success = callback;\n                return methods;\n            },\n            error: function(callback) {\n                methods.error = callback;\n                return methods;\n            }\n        };\n    }\n};\n\nJss.prototype.ajax = {\n    // Get\n    get: function(src) {\n        console.log(this);\n    },\n\n    // Set\n    put: function(url, data) {\n        return this.ajaxHelper.xhr('PUT', url, data);\n    },\n\n    // Add\n    post: function(url, data) {\n        return this.ajaxHelper.xhr('POST', url, data);\n    }\n\n};\n/**\n * -----------------------------------------------------------------------------\n * Get data attribute value\n * -----------------------------------------------------------------------------\n * Returns the value of the requested attribute. Search first for a data-[ATTRIBUTE] value\n * If not found, it checks for the attribute in the default object. When that is not being\n * found neither, the normal this[attribute] value is being returned.\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME)\n * @return {string}                                                             The value of the given attribute\n */\nJss.prototype.getDataAttribute = function(attribute) {\n\n    return this.element.dataset[attribute];\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Update data attribute\n * -----------------------------------------------------------------------------\n * Set the value to the given attribute. And updates the data-[ATTRIBUTE] value\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME=\"value\")\n * @param {string} value                                                        The VALUE of the data attribute (data-name=\"VALUE\")\n * @return {undefined}\n */\n\nJss.prototype.setDataAttribute = function(attribute, value) {\n\n    // Update data attribute\n    if (typeof value !== \"undefined\") {\n        this.element.dataset[attribute] = this[attribute];\n    } else {\n        delete this.element.dataset[attribute];\n    }\n\n    return true;\n}\nJss.prototype.dataDefaultsCookie = {\n    'expireData': undefined\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get cookie value\n * -----------------------------------------------------------------------------\n * Returns cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @return {string}                                                             The VALUE of the given attribute\n */\nJss.prototype.getDataCookie = function(attribute) {\n\n    if (!attribute) { return null; }\n    return decodeURIComponent(document.cookie.replace(new RegExp(\"(?:(?:^|.*;)\\\\s*\" + encodeURIComponent(attribute).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"), \"$1\")) || null;\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data cookie\n * -----------------------------------------------------------------------------\n * Updates the cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @param {string} value                                                        The VALUE of the cookie\n * @return {undefined}\n */\n\nJss.prototype.setDataCookie = function(attribute, value, options) {\n    var endDate, path, domain, secureConnection;\n\n    if (typeof options === \"object\") {\n        endDate = JssService.getOption('endDate', options);\n        path    = JssService.getOption('path', options);\n        domain  = JssService.getOption('domain', options);\n        secureConnection = JssService.getOption('secureConnection', options);\n    }\n\n    if (!attribute || /^(?:expires|max\\-age|path|domain|secure)$/i.test(attribute)) { return false; }\n    var sExpires = \"\";\n    if (endDate) {\n      switch (endDate.constructor) {\n        case Number:\n          sExpires = endDate === Infinity ? \"; expires=Fri, 31 Dec 9999 23:59:59 GMT\" : \"; max-age=\" + endDate;\n          break;\n        case String:\n          sExpires = \"; expires=\" + endDate;\n          break;\n        case Date:\n          sExpires = \"; expires=\" + endDate.toUTCString();\n          break;\n      }\n    }\n\n    document.cookie = encodeURIComponent(attribute) + \"=\" + encodeURIComponent(value) + sExpires + (domain ? \"; domain=\" + domain : \"\") + (path ? \"; path=\" + path : \"\") + (secureConnection ? \"; secure\" : \"\");\n    return true;\n}\n/*******************************************************************************\n\n    Styles\n\n*******************************************************************************/\n\n/**\n * -----------------------------------------------------------------------------\n * Set height\n * -----------------------------------------------------------------------------\n * Sets the height of the `this.element` by the given input (height)\n *\n * @param  {number} height                                                      The height in pixels or percentage. Where numbers will be calculated to pixels so giving a height of 50 will result in a height of \"50px\". If you want percentages pass the variable with a percentage sign 50 + \"%\"\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setHeight = function(height) {\n    if (typeof height === \"number\") {\n        height += \"px\";\n    }\n\n    if (typeof height !== \"string\") {\n        throw(\"parameter height needs to be a string or integer\");\n    }\n\n    this.element.style.height = height;\n    return true;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get height\n * -----------------------------------------------------------------------------\n * Returns the height of the `this.element`\n *\n * @return {number}                                                             The height of the element in pixels\n */\nJss.prototype.getHeight = function() {\n    return this.element.offsetHeight;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set width\n * -----------------------------------------------------------------------------\n * Sets the width of the `this.element` by the given input (width)\n *\n * @param  {number} width                                                       The width in pixels or percentage. Where numbers will be calculated to pixels so giving a width of 50 will result in a width of \"50px\". If you want to set a percentage, just pass the variable with a percentage sign (\"50%\")\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setWidth = function(width) {\n    if (typeof width == \"number\") {\n        width += \"px\";\n    }\n\n    if (typeof width !== \"string\") {\n        throw(\"parameter width needs to be a string or integer\");\n    }\n    this.element.style.width = width;\n    return true;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get width\n * -----------------------------------------------------------------------------\n * Returns the width of the `this.element`\n *\n * @return {number}                                                             The width of the element in pixels\n */\nJss.prototype.getWidth = function() {\n    return this.element.offsetWidth;\n}\n/**\n * -----------------------------------------------------------------------------\n * Set State\n * -----------------------------------------------------------------------------\n * This updates the state of the object. States are being added to the class name prefix with a double underscore.\n * If you would have the module `envelope` and give it the state `open`. The class name `envelope__open` will be added.\n * Whenever you remove the state `open`, the according class name will be removed as well.\n *\n * @param  {string} str                                                         The name of the state which should be set (this is transformed to CamelCase)\n * @return {boolean}                                                            True on success, otherwise false (might already have the state)\n */\nJss.prototype.setState = function(str) {\n    var element, verifiedState, state, className;\n\n    element         = this.element;\n    state           = JssService.toCamelCase(str);\n    className       = this.classNamePrefix() + \"__is\" + state;\n\n    // Check if this.state is an array, and make it one if not.\n    if (Array.isArray(this.state) == false ) {\n        this.state = [];\n    }\n\n    // This if statement prevents that the same state is being set multiple times\n    if ( !this.hasState(str) ) {\n        this.addClassName(className)\n        this.state.push(state);\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Has state\n * -----------------------------------------------------------------------------\n * Checks if the parameter is already a state and returns true if so. Otherwise false.\n *\n * @param  {string} str                                                         The state which will be checked for\n * @return {boolean}                                                            True if it has the given state, otherwise false\n */\nJss.prototype.hasState = function(str) {\n    if (typeof this.state == \"object\" && this.state.indexOf(str) >= 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Remove state\n * -----------------------------------------------------------------------------\n * Removes the state from the states array, and from the element.className\n *\n * @param  {string} str                                                         The name of the state which should be removed\n * @return {undefined}\n */\nJss.prototype.removeState = function(str) {\n\n    var state      = JssService.toCamelCase(str);\n    var stateIndex = this.state.indexOf(state);\n\n    if (str == \"all\" || typeof str == \"undefined\") {\n        this.removeClassName(\"states\");\n    } else {\n        this.state.splice(stateIndex, 1);\n        if (typeof this.moduleAction != \"undefined\" && this.moduleAction.length > -1) {\n            this.removeClassName(this.classNamePrefix() + \"\" + this.moduleAction + \"__is\" + state);\n        } else {\n            this.removeClassName(this.classNamePrefix() + \"__is\" + state);\n        }\n    }\n}\n\n\n// A simple way to watch variables\n\n// addVar(keyName, value, watch_function)\n// setVar(keyName, value)\n// getVar(keyName)\n// Add -> new\n// Set -> update\n// Get -> return\nvar JssModule = function(){};\n\nJssModule.prototype.type               = \"JssModule\";\nJssModule.prototype.init               = Jss.prototype.init;\nJssModule.prototype.setElement         = Jss.prototype.setElement;\n\n// Triggers\nJssModule.prototype.findTriggers       = Jss.prototype.findTriggers;\nJssModule.prototype.configureTrigger      = Jss.prototype.configureTrigger;\n\n// Actions\n//JssModule.prototype.actions            = Object.create(Jss.prototype.actions);\nJssModule.prototype.validateAction     = Jss.prototype.validateAction;\nJssModule.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssModule.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssModule.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssModule.prototype.setState           = Jss.prototype.setState;\nJssModule.prototype.hasState           = Jss.prototype.hasState;\nJssModule.prototype.removeState        = Jss.prototype.removeState;\n\n// Data attributes\nJssModule.prototype.addData            = Jss.prototype.addData;\nJssModule.prototype.getData            = Jss.prototype.getData;\nJssModule.prototype.setData            = Jss.prototype.setData;\nvar JssTrigger = function(element, options) {\n    this.setElement(element);\n\n    if (typeof options === \"object\") {\n        if (typeof options.module === \"object\") {\n            this.module = options.module;\n        }\n        if (typeof options.moduleName === \"string\") {\n            this.moduleName = options.moduleName;\n        }\n        if (typeof options.triggerName === \"string\") {\n            this.triggerName = options.triggerName;\n        }\n    }\n}\n\n\nJssTrigger.prototype                    = Object.create(Jss.prototype);\nJssTrigger.prototype.type               = \"JssTrigger\";\nJssTrigger.prototype.setElement         = Jss.prototype.setElement;\n\n// Actions\n//JssTrigger.prototype.actions            = Object.create(Jss.prototype.actions);\nJssTrigger.prototype.validateAction     = Jss.prototype.validateAction;\nJssTrigger.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssTrigger.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssTrigger.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssTrigger.prototype.setState           = Jss.prototype.setState;\nJssTrigger.prototype.hasState           = Jss.prototype.hasState;\nJssTrigger.prototype.removeState        = Jss.prototype.removeState;\n\n\n\nvar  JssController = {};\nJssController.modules \t\t= []; // Result array with objects of all the found modules\nJssController.activeModules \t= JssService.activeModules;\n\nJssController.findModules = function() {\n    var allElements = document.getElementsByTagName(\"*\");                       // Array with all domElements\n    var test = [];\n    var self = this;\n    for (var i=0; i < allElements.length; i++) {\n\n        // Set default vars //\n        var element = allElements[i];                                           // Specific domElement\n        var tmp = false;\n\n        // Loop through the (active) modules array and add/instantiate them\n        self.activeModules.forEach(function(module){\n            if (JssService.isModule(element, module)) {\n                tmp = eval(\"new \" + JssService.toCamelCase(module) + \"(element)\"); // Dynamicly load modules\n\n                tmp.setElement(element);                                        // Add the domElement to the module\n                tmp.findTriggers();\t\t\t                                    // Search for module triggers\n\n                tmp.init();\t\t\t\t\t                                    // Executes everything within the init function\n                self.modules.push(tmp);\n\n            }\n        }); // End forEach\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    JssController.findModules();\n    console.log(JssController);\n});"
          },
          "params": [
            {
              "title": "param",
              "description": "The classname (case-sensitive) which needs to be removed",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "input"
            }
          ],
          "returns": [
            {
              "title": "returns",
              "description": null,
              "type": {
                "type": "UndefinedLiteral"
              }
            }
          ],
          "name": "removeClassName",
          "kind": "function",
          "memberof": "Jss",
          "scope": "instance",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            "Jss",
            "removeClassName"
          ]
        },
        {
          "description": "-----------------------------------------------------------------------------\nRemove state\n-----------------------------------------------------------------------------\nRemoves the state from the states array, and from the element.className",
          "tags": [
            {
              "title": "param",
              "description": "The name of the state which should be removed",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "str"
            },
            {
              "title": "returns",
              "description": null,
              "type": {
                "type": "UndefinedLiteral"
              }
            },
            {
              "title": "name",
              "name": "removeState"
            },
            {
              "title": "kind",
              "kind": "function"
            },
            {
              "title": "memberof",
              "description": "Jss"
            },
            {
              "title": "instance"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 1149,
                "column": 0
              },
              "end": {
                "line": 1175,
                "column": 0
              }
            },
            "file": "/Users/jeffreyarts/Documents/DEV/jss/lib/jss.js",
            "code": "JssService = {};\n\n// Edit this array to enable or disable default modules\nJssService.activeModules   = []\n\n// Set this to false in a live environment\nJssService.dev             = true;\n\n/**************************\n*\n*   Below are core properties defined, becarefull when you think of changing these...\n*\n**************************/\n\n\nJssService.actions = {\n    hover:      ['hover',    'mouseover',   'onmouseover'                       ], // Fixed\n    click:      ['click',    'onclick'                                          ], // Fixed\n    mouseIn:    ['mousein',  'onmousein', 'mouseenter', 'onmouseenter'          ], // Fixed\n    mouseOut:   ['mouseout', 'onmouseout', 'mouseleave', 'onmouseleave'         ], // Fixed\n    resize:     ['resize',   'onresize'                                         ], // Fixed\n    focus:      ['focus',    'onfocus'                                          ],\n    keyDown:    ['keydown',  'keypress'                                         ],\n    keyUp:      ['keyup',    'keyrelease'                                       ],\n    change:     ['change',   'onchange'                                         ],\n};\n\nJssService.enterDelay = 1000;                                                   // Amount of miliseconds which is used to remove the entered state. (see core.actions) JssService.enterDelay setTimeout\n\nJssService.forbiddenProperties = [\n    'type',\n    'triggers',\n    'configureTrigger',\n    'findTriggers'\n];\n\n/**\n * -----------------------------------------------------------------------------\n * Is Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isModule = function(element, moduleName) {\n    var arr = element.className.split(\" \");\n    var found = false;\n\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i].indexOf(moduleName)        > -1 &&\n            arr[i].indexOf(moduleName + \"_\") == -1 &&\n            arr[i].indexOf(moduleName + \"-\") == -1)\n        {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.addModule = function(moduleName) {\n    this.activeModules.push(this.toKebabCase(moduleName))\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To CamelCase\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toCamelCase = function(input) {\n    var arr, res;\n    res = \"\";\n    if (typeof input === \"string\") {\n        input = input.replace(/\\-/g,\" \");                                       // Replace all dashes with spaces\n        arr = input.split(\" \");\n    } else {\n        arr = input;                                                            // Assume it is an array\n    }\n\n\n\n    var i = 0;\n    for (var i in arr) {\n        if (typeof i != \"undefined\") {\n            res += arr[i][0].toUpperCase()+ arr[i].slice(1); // Capitalize first letter\n        }\n    }\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To kebab-case\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toKebabCase = function(input) {\n    var res, str;\n    res = \"\";\n\n    if (typeof input === \"string\") {\n        str = input;\n    } else {                                                                    // Assume it is an array\n        str = input.join(\" \");\n    }\n\n    // First change it to camelcase\n    str = this.toCamelCase(str);\n\n    var max = str.length;\n    for (var i=0; i < max; i++) {\n        // Check if character is uppercase\n        if (str[i] != str[i].toLowerCase()) {\n            if (i!==0) {\n                str = str.substr(0, i) + \"-\" + str.substr(i);\n                i++;\n            }\n        }\n    }\n\n    return res = str.toLowerCase();\n}\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get option\n * -----------------------------------------------------------------------------\n * @param  {string} name                                                        Keyname in optionList\n * @param  {array} optionList                                                   Array with all possible options\n * @return {}                                                                   Copy of the value (optionsList[name])\n */\nJssService.getOption = function(name, optionList) {\n    if (typeof optionList !== \"object\") {\n        return false;\n    }\n\n    var res;\n\n    switch (name) {\n\n        // Only set `addDefaults` to false when it is explicitly set.\n        case \"addDefaults\":\n            if (optionList[name] !== false || typeof optionList[name] === \"undefined\") {\n                res = true;\n            } else {\n                res = false;\n            }\n        break;\n        case \"fallback\":\n            if ( Array.isArray(optionList[name]) ) {\n                res = optionList[name];\n                if (res.length===0) {\n                    res = false;\n                }\n            } else if (typeof optionList[name] === \"string\"){\n                res = [optionList[name]];\n            }\n        break;\n        default:\n        res = optionList[name]\n    }\n\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Is Trigger\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isTrigger = function(element, moduleName) {\n    if (element.className.indexOf(moduleName + \"--\") > -1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get trigger name\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {string} Name of the trigger.\n */\nJssService.getTriggerName = function(element, moduleName) {\n    if (typeof element != \"object\") {\n        console.error('Required first argument `element` needs to be a domElement.');\n        return false;\n    }\n    if (typeof moduleName != \"string\") {\n        console.error('Required second argument `moduleName` needs to be a string.');\n        return false;\n    }\n\n    // As an example we assume that the value of element.className equals 'b module--triggerName'\n    var startPos = element.className.indexOf(moduleName + \"--\");                    // 2\n    var sliced = element.className.slice(startPos, element.className.length )       // 'module--triggerName'\n    var endPos = sliced.indexOf(\" \");                                               // -1       // not found\n    if (endPos != -1) {                                                             // 19\n        sliced = sliced.slice(0,endPos);                                            // if there is more after the string, this will remove it\n    }\n    return sliced.replace(moduleName + \"--\",\"\")\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger name is allowed\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} True if the triggername is allowed, otherwise false.\n */\nJssService.triggerNameIsAllowed = function(element, moduleName) {\n    if (JssService.forbiddenProperties.indexOf(this.getTriggerName(element, moduleName)) > -1) {      // This triggerName is a core property, throw error\n        console.error('Triggername `' + getTriggerName(element,moduleName) + '` is not allowed. Change the trigger so it does not corresponds any of these: ' + JssService.forbiddenProperties)\n        return false;\n    }\n    return true;\n}\n/**\n * @module Jss\n * @author      Jeffrey Arts <sjeffff@gmail.com>\n * @copyright   2015\n */\nJss = function(){};\n\nJss.prototype.type      = \"Jss\"\nJss.prototype.triggers  = false;\nJss.prototype.element   = undefined;                                              // {obj} domElement\nJss.prototype.state     = undefined;                                              // {str} State of module, is reflected by the css class __isState\n\n/**\n * -----------------------------------------------------------------------------\n * Find Triggers\n * -----------------------------------------------------------------------------\n *\n * @param {domElement} element\n * @return {undefined}\n */\nJss.prototype.findTriggers = function(element) {\n    this.triggers = [];                                                         // If this is not set, all modules will have the same reference point to this.triggers.\n    // Module is created, now look for any module triggers\n    this.searchTriggersRecursiveInnerFunction(this.element)\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger\n * -----------------------------------------------------------------------------\n */\nJss.prototype.trigger = function(which, fn) {\n    if (typeof this.triggers !== \"object\") {\n        console.info(\"No triggers are found, please specify them in the css as `module-name--trigger-name`.\");\n        return false;\n    }\n\n    if (typeof this.triggers[which] !== \"object\") {\n        console.info(\"You are trying to execute a function on a non existing trigger `\" + which + \"`\");\n        return false;\n    }\n\n    for (var i = 0; i < this.triggers[which].length; i++) {\n        fn(this.triggers[which][i])\n    }\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Search triggers recursive inner function\n * -----------------------------------------------------------------------------\n * Recursive function which is executed bij findTriggers;\n *\n * @return {undefined}\n */\nJss.prototype.searchTriggersRecursiveInnerFunction = function(element) {\n    var self = this;\n    if (typeof element == \"undefined\" ) {\n        element = this.element;\n    }\n    if ( element.hasChildNodes() ) {\n        for (var i=0; i < element.childNodes.length; i++) {\n\n            var childElement = element.childNodes[i];                           // Improve readability\n\n            if (childElement.nodeType == 1) {                                   // NodeType 1 == domElement\n\n                if (JssService.isTrigger(childElement, this.moduleName)) {\n\n                    // Add a child element\n                    if (JssService.triggerNameIsAllowed(childElement, this.moduleName)) {\n                        var triggerName = JssService.getTriggerName(childElement, this.moduleName)\n\n                        if (typeof self.triggers[triggerName] !== \"object\") {\n                            self.triggers[triggerName] = [];\n                        }\n\n                        var tmp = new JssTrigger(childElement, {\n                            module: self,\n                            moduleName: this.moduleName,\n                            triggerName: triggerName,\n                        });\n\n                        self.triggers[triggerName].push(tmp);\n                    }\n                }\n                if (childElement.hasChildNodes()) {\n                    self.searchTriggersRecursiveInnerFunction(childElement)\n                }\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Configure Trigger\n * -----------------------------------------------------------------------------\n *\n * @return {undefined}\n */\nJss.prototype.configureTrigger = function(trigger, fn) {\n    if ( typeof this.triggers[trigger] == \"object\") {\n\n        for (var i = 0; i < this.triggers[trigger].length; i++) {\n            //self.triggers[trigger][i]\n            fn(this.triggers[trigger][i]);\n        }\n\n    } else if (JssService.dev) {\n        console.error(\"You are trying to configure a trigger which has no attached domElement\")\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n *   Init\n * -----------------------------------------------------------------------------\n * Notice the user that a init function needs to be added for controlling the triggers\n *\n * @return {undefined}\n */\nJss.prototype.init = function(func) {\n    if (JssService.dev) {\n        console.info(this.moduleName + \": Add a prototype.init function to add triggers and stuff\")\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set element\n * -----------------------------------------------------------------------------\n * Add a domElement to `this`\n *\n * @return {undefined}\n */\nJss.prototype.setElement = function(element) {\n    if (typeof element == \"undefined\") {\n        if (JssService.dev) {\n            return console.error(\"First parameter of setElement needs to be a domElement\");\n        }\n    }\n    this.element = element;\n}\n/*******************************************************************************\n   *\n   *\tActions\n   *\n   *  \t@author      Jeffrey Arts <sjeffff@gmail.com>\n   *    @copyright   2015\n   *\n*******************************************************************************/\n/**\n * -----------------------------------------------------------------------------\n *   Validate action\n * -----------------------------------------------------------------------------\n * Checks if parameter is a valid action, and logs an error when not.\n *\n * @param {string} request                                                      The name of the request\n * @return {boolean} true if a action is valid, otherwise false.\n */\nJss.prototype.validateAction = function(request) {\n    var result;\n    request = this.getActionElement(request).request\n    for (var action in JssService.actions) {\n        if (JssService.actions[action].indexOf(request.toLowerCase()) > -1) {\n            result = action;\n            break;\n        }\n    }\n    if (result) {\n        return result;\n    } else {\n        console.error(\"validateAction: unknown request\", request);\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * \t Add Action\n * -----------------------------------------------------------------------------\n * Adds an action to the object, list of possible requests can be found in Jss.actions\n *\n * | Options\n * \t\t- addDefaults {boolean}                                                 True: add default classes, false: don't\n *\n *\n *\n * @param {string} request                                                      The name of the request\n * @param {function} fn                                                         The function which should be triggered\n * @param {object} options                                                      Object with option parameters\n * @return {boolean} true if a action is succesfully added, otherwise false.\n */\nJss.prototype.addAction = function(request, fn, options) {\n\n    var self        = this;\n    var action      = self.validateAction(request)\n    var actions     = [];\n    var t = self.getActionElement(request);\n    var element     = t.element;\n    var request     = t.request;\n    t = undefined;\n\n    // Options\n    var addDefaults = JssService.getOption(\"addDefaults\", options);\n\n\n\n    switch (action) {\n\n        case \"resize\":\n\n            actions.push(element.addEventListener(\"resize\", fn));\n\n        break;\n\n\n        case \"click\":\n            actions.push(element.addEventListener(\"click\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"click\", function(){\n                    self.setState(\"Clicked\")\n                }));\n                actions.push(window.addEventListener( \"click\", function(event) {\n                    if (event.target != self.element && self.hasState(\"Clicked\")) {\n                        self.removeState(\"Clicked\")\n                    }\n                }));\n            } // End addDefaults\n        break;\n\n\n        case \"change\":\n            actions.push(element.addEventListener(\"change\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"change\", function(){\n                    self.setState(\"Changed\")\n                    setTimeout(function(){self.removeState(\"Changed\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"hover\":\n            actions.push(element.addEventListener(\"mouseover\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseover\", function(){\n                    self.setState(\"Hover\")\n                }));\n                actions.push(element.addEventListener(\"mouseout\",  function(){\n                    self.removeState(\"Hover\")\n                }));\n            }\n        break;\n\n\n        case \"mouseIn\":\n\n            actions.push(element.addEventListener(\"mouseenter\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseenter\", function(){\n                    self.setState(\"MouseIn\")\n                    setTimeout(function(){self.removeState(\"MouseIn\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"mouseOut\":\n\n            actions.push(element.addEventListener(\"mouseleave\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseleave\", function(){\n                    self.setState(\"MouseOut\")\n                    setTimeout(function(){self.removeState(\"MouseOut\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n    }\n\n\n    if (actions.length > 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get action element\n * -----------------------------------------------------------------------------\n * @param  {string} request                                                     The request\n * @return {object}                                                             An object with 2 properties: request && element\n */\nJss.prototype.getActionElement = function(request) {\n    var self = this;\n    var prefix = false;\n    var newRequest  = request;\n    var element = self.element;\n    // Set prefix if it exists\n    if (request.indexOf(\".\") > 0) {\n        var t       = request.split(\".\"),\n        newRequest  = t[1];\n        prefix      = t[0];\n        t = undefined;\n    }\n\n    // Update element according the prefix (or skip it, if not set)\n    if (prefix !== false) {\n        switch (prefix) {\n            case \"screen\":\n            case \"window\":\n                element = window;\n            break;\n        }\n    }\n\n    // Return object\n    return {\n        request: newRequest,\n        element: element\n    }\n}\n/**\n * -----------------------------------------------------------------------------\n * Class name prefix\n * -----------------------------------------------------------------------------\n * The prefix equals the modulename, or - when it's a trigger object - modulename--triggername\n *\n * @return {string} The classname\n */\nJss.prototype.classNamePrefix = function() {\n    if (this.type == \"JssTrigger\") {\n        return this.moduleName + \"--\" + this.triggerName;\n    } else {\n        return this.moduleName;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Remove class name\n * -----------------------------------------------------------------------------\n * Removes the `this.element` classname\n * \t- \"all\" || undefined        > Removes ALL classnames\n *  - \"allStates\" || \"states\"   > Remove all STATES\n *  - all other strings remove that specific string from the className\n *\n * @param {string} input                                                        The classname (case-sensitive) which needs to be removed\n * @return {undefined}\n */\nJss.prototype.removeClassName = function(input) {\n\n    var classList  = [];\n\n    if (input == \"all\" || typeof input == \"undefined\") {\n\n        this.element.className = \"\";\n\n    } else if (input == \"states\" || input == \"allStates\") {\n\n        classList = this.element.className.split(\" \");\n        for (var i in classList) {\n            className = classList[i];\n            if (className.indexOf(\"__is\") > -1) {\n                delete classList[i];\n            }\n        }\n        this.element.className = classList.join(\" \");\n\n    } else if(typeof input == \"string\") {\n        this.element.className = this.element.className.replace(input,\"\");\n    } else {\n        console.error(\"removeClassName: parameter should be a string\");\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Add class name\n * -----------------------------------------------------------------------------\n * Adds a class name by string or array.\n * Does NOT check for duplicates\n *\n * @param  {string} The classname to be added\n * @return {undefined}\n */\nJss.prototype.addClassName = function(data) {\n    this.element.className += \" \";\n    if (typeof data == \"string\") {\n        this.element.className += data;\n    } else {\n        this.element.className += data.join(\" \")\n    }\n}\n\n/**\n * List where the keys corresponds with this[key], and where the value is the function to be executed when the var is changed.\n */\nJss.prototype.setterWatchList = {};\nJss.prototype.getterWatchList = {};\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add data\n * -----------------------------------------------------------------------------\n * Add a (default) value for the given attribute.\n *\n * @param {string} attribute                                                    The name of the attribute (this[attribute])\n * @param {*} value                                                             The value of this[attribute], could be anything...\n * @param {object} options\n *           \t\t- setterWatchFunction {function}\n *           \t\t- getterWatchFunction {function}\n */\nJss.prototype.addData = function(attribute, value, options) {\n\n\n    // watchList[key] = fn;\n    var setterWatchFunction = JssService.getOption('setterWatchFunction', options); // Function\n    var getterWatchFunction = JssService.getOption('getterWatchFunction', options); // Function\n\n    if (typeof setterWatchFunction === \"function\") {\n        this.setterWatchList[attribute] = setterWatchFunction;\n    }\n\n    if (typeof getterWatchFunction === \"function\") {\n        this.getterWatchList[attribute] = getterWatchFunction;\n    }\n\n    // Set the default value\n    return this[attribute] = value;\n}\n\n\n\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- ajax {string} url\n */\nJss.prototype.setData = function(attribute, value, options) {\n\n    this[attribute] = value;\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n\n    if (Array.isArray(fallback)) {\n\n        for (var i = 0; i < fallback.length; i++) {\n            var type = fallback[i];\n\n            if (value && value.length > 0) {\n                this['setData' + JssService.toCamelCase(type)](attribute, value); // Call this.addDataAttribute(value) || this.addDataCookie(value) etc...\n                this[attribute] = value;\n            }\n        }\n    }\n\n    // Call the setter watch function, if defined;\n    if (typeof this.setterWatchList[attribute] === \"function\") { // Use the watchlist to add functionality whenever a data attribute is updated\n        this.setterWatchList[attribute]();\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataDefault {boolean}\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- dataAjax {string} url\n */\nJss.prototype.getData = function(attribute, options) {\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n    var value = false;\n\n\n    if (!fallback) {\n        fallback = ['attribute'];\n    }\n\n\n    for (var i = 0; i < fallback.length; i++) {\n        var type = JssService.toCamelCase(fallback[i]);\n        var customOptions = false;\n\n        if (typeof options == \"object\") {\n            customOptions = options[fallback[i].toLowerCase()];\n        }\n\n        if (!value || value.length < 0) {\n            if (typeof this['getData' + type] !== \"function\") {\n                console.error('this.getData' + type + ' is not a function. Probably ' + type + ' is not a available data option');\n                continue;\n            }\n            value = this['getData' + type]( attribute, customOptions ); // Call this.getDataAttribute(value) || this.getDataCookie(value) || this.getDataAjax(value) etc...\n        }\n    }\n    console.log(this.getterWatchList);\n    // Call the getter watch function, if defined;\n    if (typeof this.getterWatchList[attribute] == \"function\") {\n        this.getterWatchList[attribute]();\n    }\n\n    return this[attribute] = value;\n}\n/**\n * -----------------------------------------------------------------------------\n * Get data: Ajax\n * -----------------------------------------------------------------------------\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n *\n * @param {string} attribute                                                    The NAME of the inner variable (this.NAME), is also used as the key for the GET Request {NAME: value}\n * @param {object} options                                                      Object with parameters used to make a GET request\n * @return {string}                                                             The value of the given attribute, or false if an erro occured.\n */\nJss.prototype.getDataAjax = function(attribute, options) {\n    var url = JssService.getOption(\"url\", options);\n    var jsonKey = JssService.getOption(\"jsonKey\", options) || attribute;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('GET', url);\n\n        return ajaxReturn.success(function(result){\n            if (typeof result === \"object\") {\n                if (result[jsonKey]) {\n                    return result[jsonKey];\n                }\n            }\n        }).error(function(errorObject){\n            console.log(errorObject);\n        });\n    }\n\n    return false;\n};\n\n/**\n * -----------------------------------------------------------------------------\n * Set data: Ajax\n * -----------------------------------------------------------------------------\n * Makes a post request to the options.url in a object {attribute: value}\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n */\nJss.prototype.setDataAjax = function(attribute, value, options) {\n    var url = JssService.getOption(\"url\", options);\n    var requestObject = {}\n        requestObject[attribute] = value;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('POST', url, requestObject);\n\n        return ajaxReturn.success(function(result){\n            return true;\n        }).error(function(errorObject){\n            console.log(errorObject);\n            return false;\n        });\n    }\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Ajax (helper function)\n * -----------------------------------------------------------------------------\n * Based on Atom.js by Todd Motto\n * http://toddmotto.com/writing-a-standalone-ajax-xhr-javascript-micro-library/\n */\nJss.prototype.ajaxHelper = {\n    // Parses json if possible, otherwise just return text\n    parse: function(req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return [result, req];\n    },\n\n    xhr: function(type, url, data) {\n        var ajaxHelper = this;\n\n        var methods = {\n            success: function() {},\n            error: function() {}\n        };\n        var XHR = XMLHttpRequest || ActiveXObject;\n        var request = new XHR('MSXML2.XMLHTTP.3.0');\n        request.open(type, url, true);\n        request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n\n        request.onreadystatechange = function() {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    methods.success.apply(methods, ajaxHelper.parse(request));\n                } else {\n                    methods.error.apply(methods, ajaxHelper.parse(request));\n                }\n            }\n        };\n        request.send(data);\n        return {\n            success: function(callback) {\n                methods.success = callback;\n                return methods;\n            },\n            error: function(callback) {\n                methods.error = callback;\n                return methods;\n            }\n        };\n    }\n};\n\nJss.prototype.ajax = {\n    // Get\n    get: function(src) {\n        console.log(this);\n    },\n\n    // Set\n    put: function(url, data) {\n        return this.ajaxHelper.xhr('PUT', url, data);\n    },\n\n    // Add\n    post: function(url, data) {\n        return this.ajaxHelper.xhr('POST', url, data);\n    }\n\n};\n/**\n * -----------------------------------------------------------------------------\n * Get data attribute value\n * -----------------------------------------------------------------------------\n * Returns the value of the requested attribute. Search first for a data-[ATTRIBUTE] value\n * If not found, it checks for the attribute in the default object. When that is not being\n * found neither, the normal this[attribute] value is being returned.\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME)\n * @return {string}                                                             The value of the given attribute\n */\nJss.prototype.getDataAttribute = function(attribute) {\n\n    return this.element.dataset[attribute];\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Update data attribute\n * -----------------------------------------------------------------------------\n * Set the value to the given attribute. And updates the data-[ATTRIBUTE] value\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME=\"value\")\n * @param {string} value                                                        The VALUE of the data attribute (data-name=\"VALUE\")\n * @return {undefined}\n */\n\nJss.prototype.setDataAttribute = function(attribute, value) {\n\n    // Update data attribute\n    if (typeof value !== \"undefined\") {\n        this.element.dataset[attribute] = this[attribute];\n    } else {\n        delete this.element.dataset[attribute];\n    }\n\n    return true;\n}\nJss.prototype.dataDefaultsCookie = {\n    'expireData': undefined\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get cookie value\n * -----------------------------------------------------------------------------\n * Returns cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @return {string}                                                             The VALUE of the given attribute\n */\nJss.prototype.getDataCookie = function(attribute) {\n\n    if (!attribute) { return null; }\n    return decodeURIComponent(document.cookie.replace(new RegExp(\"(?:(?:^|.*;)\\\\s*\" + encodeURIComponent(attribute).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"), \"$1\")) || null;\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data cookie\n * -----------------------------------------------------------------------------\n * Updates the cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @param {string} value                                                        The VALUE of the cookie\n * @return {undefined}\n */\n\nJss.prototype.setDataCookie = function(attribute, value, options) {\n    var endDate, path, domain, secureConnection;\n\n    if (typeof options === \"object\") {\n        endDate = JssService.getOption('endDate', options);\n        path    = JssService.getOption('path', options);\n        domain  = JssService.getOption('domain', options);\n        secureConnection = JssService.getOption('secureConnection', options);\n    }\n\n    if (!attribute || /^(?:expires|max\\-age|path|domain|secure)$/i.test(attribute)) { return false; }\n    var sExpires = \"\";\n    if (endDate) {\n      switch (endDate.constructor) {\n        case Number:\n          sExpires = endDate === Infinity ? \"; expires=Fri, 31 Dec 9999 23:59:59 GMT\" : \"; max-age=\" + endDate;\n          break;\n        case String:\n          sExpires = \"; expires=\" + endDate;\n          break;\n        case Date:\n          sExpires = \"; expires=\" + endDate.toUTCString();\n          break;\n      }\n    }\n\n    document.cookie = encodeURIComponent(attribute) + \"=\" + encodeURIComponent(value) + sExpires + (domain ? \"; domain=\" + domain : \"\") + (path ? \"; path=\" + path : \"\") + (secureConnection ? \"; secure\" : \"\");\n    return true;\n}\n/*******************************************************************************\n\n    Styles\n\n*******************************************************************************/\n\n/**\n * -----------------------------------------------------------------------------\n * Set height\n * -----------------------------------------------------------------------------\n * Sets the height of the `this.element` by the given input (height)\n *\n * @param  {number} height                                                      The height in pixels or percentage. Where numbers will be calculated to pixels so giving a height of 50 will result in a height of \"50px\". If you want percentages pass the variable with a percentage sign 50 + \"%\"\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setHeight = function(height) {\n    if (typeof height === \"number\") {\n        height += \"px\";\n    }\n\n    if (typeof height !== \"string\") {\n        throw(\"parameter height needs to be a string or integer\");\n    }\n\n    this.element.style.height = height;\n    return true;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get height\n * -----------------------------------------------------------------------------\n * Returns the height of the `this.element`\n *\n * @return {number}                                                             The height of the element in pixels\n */\nJss.prototype.getHeight = function() {\n    return this.element.offsetHeight;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set width\n * -----------------------------------------------------------------------------\n * Sets the width of the `this.element` by the given input (width)\n *\n * @param  {number} width                                                       The width in pixels or percentage. Where numbers will be calculated to pixels so giving a width of 50 will result in a width of \"50px\". If you want to set a percentage, just pass the variable with a percentage sign (\"50%\")\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setWidth = function(width) {\n    if (typeof width == \"number\") {\n        width += \"px\";\n    }\n\n    if (typeof width !== \"string\") {\n        throw(\"parameter width needs to be a string or integer\");\n    }\n    this.element.style.width = width;\n    return true;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get width\n * -----------------------------------------------------------------------------\n * Returns the width of the `this.element`\n *\n * @return {number}                                                             The width of the element in pixels\n */\nJss.prototype.getWidth = function() {\n    return this.element.offsetWidth;\n}\n/**\n * -----------------------------------------------------------------------------\n * Set State\n * -----------------------------------------------------------------------------\n * This updates the state of the object. States are being added to the class name prefix with a double underscore.\n * If you would have the module `envelope` and give it the state `open`. The class name `envelope__open` will be added.\n * Whenever you remove the state `open`, the according class name will be removed as well.\n *\n * @param  {string} str                                                         The name of the state which should be set (this is transformed to CamelCase)\n * @return {boolean}                                                            True on success, otherwise false (might already have the state)\n */\nJss.prototype.setState = function(str) {\n    var element, verifiedState, state, className;\n\n    element         = this.element;\n    state           = JssService.toCamelCase(str);\n    className       = this.classNamePrefix() + \"__is\" + state;\n\n    // Check if this.state is an array, and make it one if not.\n    if (Array.isArray(this.state) == false ) {\n        this.state = [];\n    }\n\n    // This if statement prevents that the same state is being set multiple times\n    if ( !this.hasState(str) ) {\n        this.addClassName(className)\n        this.state.push(state);\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Has state\n * -----------------------------------------------------------------------------\n * Checks if the parameter is already a state and returns true if so. Otherwise false.\n *\n * @param  {string} str                                                         The state which will be checked for\n * @return {boolean}                                                            True if it has the given state, otherwise false\n */\nJss.prototype.hasState = function(str) {\n    if (typeof this.state == \"object\" && this.state.indexOf(str) >= 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Remove state\n * -----------------------------------------------------------------------------\n * Removes the state from the states array, and from the element.className\n *\n * @param  {string} str                                                         The name of the state which should be removed\n * @return {undefined}\n */\nJss.prototype.removeState = function(str) {\n\n    var state      = JssService.toCamelCase(str);\n    var stateIndex = this.state.indexOf(state);\n\n    if (str == \"all\" || typeof str == \"undefined\") {\n        this.removeClassName(\"states\");\n    } else {\n        this.state.splice(stateIndex, 1);\n        if (typeof this.moduleAction != \"undefined\" && this.moduleAction.length > -1) {\n            this.removeClassName(this.classNamePrefix() + \"\" + this.moduleAction + \"__is\" + state);\n        } else {\n            this.removeClassName(this.classNamePrefix() + \"__is\" + state);\n        }\n    }\n}\n\n\n// A simple way to watch variables\n\n// addVar(keyName, value, watch_function)\n// setVar(keyName, value)\n// getVar(keyName)\n// Add -> new\n// Set -> update\n// Get -> return\nvar JssModule = function(){};\n\nJssModule.prototype.type               = \"JssModule\";\nJssModule.prototype.init               = Jss.prototype.init;\nJssModule.prototype.setElement         = Jss.prototype.setElement;\n\n// Triggers\nJssModule.prototype.findTriggers       = Jss.prototype.findTriggers;\nJssModule.prototype.configureTrigger      = Jss.prototype.configureTrigger;\n\n// Actions\n//JssModule.prototype.actions            = Object.create(Jss.prototype.actions);\nJssModule.prototype.validateAction     = Jss.prototype.validateAction;\nJssModule.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssModule.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssModule.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssModule.prototype.setState           = Jss.prototype.setState;\nJssModule.prototype.hasState           = Jss.prototype.hasState;\nJssModule.prototype.removeState        = Jss.prototype.removeState;\n\n// Data attributes\nJssModule.prototype.addData            = Jss.prototype.addData;\nJssModule.prototype.getData            = Jss.prototype.getData;\nJssModule.prototype.setData            = Jss.prototype.setData;\nvar JssTrigger = function(element, options) {\n    this.setElement(element);\n\n    if (typeof options === \"object\") {\n        if (typeof options.module === \"object\") {\n            this.module = options.module;\n        }\n        if (typeof options.moduleName === \"string\") {\n            this.moduleName = options.moduleName;\n        }\n        if (typeof options.triggerName === \"string\") {\n            this.triggerName = options.triggerName;\n        }\n    }\n}\n\n\nJssTrigger.prototype                    = Object.create(Jss.prototype);\nJssTrigger.prototype.type               = \"JssTrigger\";\nJssTrigger.prototype.setElement         = Jss.prototype.setElement;\n\n// Actions\n//JssTrigger.prototype.actions            = Object.create(Jss.prototype.actions);\nJssTrigger.prototype.validateAction     = Jss.prototype.validateAction;\nJssTrigger.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssTrigger.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssTrigger.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssTrigger.prototype.setState           = Jss.prototype.setState;\nJssTrigger.prototype.hasState           = Jss.prototype.hasState;\nJssTrigger.prototype.removeState        = Jss.prototype.removeState;\n\n\n\nvar  JssController = {};\nJssController.modules \t\t= []; // Result array with objects of all the found modules\nJssController.activeModules \t= JssService.activeModules;\n\nJssController.findModules = function() {\n    var allElements = document.getElementsByTagName(\"*\");                       // Array with all domElements\n    var test = [];\n    var self = this;\n    for (var i=0; i < allElements.length; i++) {\n\n        // Set default vars //\n        var element = allElements[i];                                           // Specific domElement\n        var tmp = false;\n\n        // Loop through the (active) modules array and add/instantiate them\n        self.activeModules.forEach(function(module){\n            if (JssService.isModule(element, module)) {\n                tmp = eval(\"new \" + JssService.toCamelCase(module) + \"(element)\"); // Dynamicly load modules\n\n                tmp.setElement(element);                                        // Add the domElement to the module\n                tmp.findTriggers();\t\t\t                                    // Search for module triggers\n\n                tmp.init();\t\t\t\t\t                                    // Executes everything within the init function\n                self.modules.push(tmp);\n\n            }\n        }); // End forEach\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    JssController.findModules();\n    console.log(JssController);\n});"
          },
          "params": [
            {
              "title": "param",
              "description": "The name of the state which should be removed",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "str"
            }
          ],
          "returns": [
            {
              "title": "returns",
              "description": null,
              "type": {
                "type": "UndefinedLiteral"
              }
            }
          ],
          "name": "removeState",
          "kind": "function",
          "memberof": "Jss",
          "scope": "instance",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            "Jss",
            "removeState"
          ]
        },
        {
          "description": "-----------------------------------------------------------------------------\nSearch triggers recursive inner function\n-----------------------------------------------------------------------------\nRecursive function which is executed bij findTriggers;",
          "tags": [
            {
              "title": "returns",
              "description": null,
              "type": {
                "type": "UndefinedLiteral"
              }
            },
            {
              "title": "name",
              "name": "searchTriggersRecursiveInnerFunction"
            },
            {
              "title": "kind",
              "kind": "function"
            },
            {
              "title": "memberof",
              "description": "Jss"
            },
            {
              "title": "instance"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 306,
                "column": 0
              },
              "end": {
                "line": 353,
                "column": 0
              }
            },
            "file": "/Users/jeffreyarts/Documents/DEV/jss/lib/jss.js",
            "code": "JssService = {};\n\n// Edit this array to enable or disable default modules\nJssService.activeModules   = []\n\n// Set this to false in a live environment\nJssService.dev             = true;\n\n/**************************\n*\n*   Below are core properties defined, becarefull when you think of changing these...\n*\n**************************/\n\n\nJssService.actions = {\n    hover:      ['hover',    'mouseover',   'onmouseover'                       ], // Fixed\n    click:      ['click',    'onclick'                                          ], // Fixed\n    mouseIn:    ['mousein',  'onmousein', 'mouseenter', 'onmouseenter'          ], // Fixed\n    mouseOut:   ['mouseout', 'onmouseout', 'mouseleave', 'onmouseleave'         ], // Fixed\n    resize:     ['resize',   'onresize'                                         ], // Fixed\n    focus:      ['focus',    'onfocus'                                          ],\n    keyDown:    ['keydown',  'keypress'                                         ],\n    keyUp:      ['keyup',    'keyrelease'                                       ],\n    change:     ['change',   'onchange'                                         ],\n};\n\nJssService.enterDelay = 1000;                                                   // Amount of miliseconds which is used to remove the entered state. (see core.actions) JssService.enterDelay setTimeout\n\nJssService.forbiddenProperties = [\n    'type',\n    'triggers',\n    'configureTrigger',\n    'findTriggers'\n];\n\n/**\n * -----------------------------------------------------------------------------\n * Is Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isModule = function(element, moduleName) {\n    var arr = element.className.split(\" \");\n    var found = false;\n\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i].indexOf(moduleName)        > -1 &&\n            arr[i].indexOf(moduleName + \"_\") == -1 &&\n            arr[i].indexOf(moduleName + \"-\") == -1)\n        {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.addModule = function(moduleName) {\n    this.activeModules.push(this.toKebabCase(moduleName))\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To CamelCase\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toCamelCase = function(input) {\n    var arr, res;\n    res = \"\";\n    if (typeof input === \"string\") {\n        input = input.replace(/\\-/g,\" \");                                       // Replace all dashes with spaces\n        arr = input.split(\" \");\n    } else {\n        arr = input;                                                            // Assume it is an array\n    }\n\n\n\n    var i = 0;\n    for (var i in arr) {\n        if (typeof i != \"undefined\") {\n            res += arr[i][0].toUpperCase()+ arr[i].slice(1); // Capitalize first letter\n        }\n    }\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To kebab-case\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toKebabCase = function(input) {\n    var res, str;\n    res = \"\";\n\n    if (typeof input === \"string\") {\n        str = input;\n    } else {                                                                    // Assume it is an array\n        str = input.join(\" \");\n    }\n\n    // First change it to camelcase\n    str = this.toCamelCase(str);\n\n    var max = str.length;\n    for (var i=0; i < max; i++) {\n        // Check if character is uppercase\n        if (str[i] != str[i].toLowerCase()) {\n            if (i!==0) {\n                str = str.substr(0, i) + \"-\" + str.substr(i);\n                i++;\n            }\n        }\n    }\n\n    return res = str.toLowerCase();\n}\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get option\n * -----------------------------------------------------------------------------\n * @param  {string} name                                                        Keyname in optionList\n * @param  {array} optionList                                                   Array with all possible options\n * @return {}                                                                   Copy of the value (optionsList[name])\n */\nJssService.getOption = function(name, optionList) {\n    if (typeof optionList !== \"object\") {\n        return false;\n    }\n\n    var res;\n\n    switch (name) {\n\n        // Only set `addDefaults` to false when it is explicitly set.\n        case \"addDefaults\":\n            if (optionList[name] !== false || typeof optionList[name] === \"undefined\") {\n                res = true;\n            } else {\n                res = false;\n            }\n        break;\n        case \"fallback\":\n            if ( Array.isArray(optionList[name]) ) {\n                res = optionList[name];\n                if (res.length===0) {\n                    res = false;\n                }\n            } else if (typeof optionList[name] === \"string\"){\n                res = [optionList[name]];\n            }\n        break;\n        default:\n        res = optionList[name]\n    }\n\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Is Trigger\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isTrigger = function(element, moduleName) {\n    if (element.className.indexOf(moduleName + \"--\") > -1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get trigger name\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {string} Name of the trigger.\n */\nJssService.getTriggerName = function(element, moduleName) {\n    if (typeof element != \"object\") {\n        console.error('Required first argument `element` needs to be a domElement.');\n        return false;\n    }\n    if (typeof moduleName != \"string\") {\n        console.error('Required second argument `moduleName` needs to be a string.');\n        return false;\n    }\n\n    // As an example we assume that the value of element.className equals 'b module--triggerName'\n    var startPos = element.className.indexOf(moduleName + \"--\");                    // 2\n    var sliced = element.className.slice(startPos, element.className.length )       // 'module--triggerName'\n    var endPos = sliced.indexOf(\" \");                                               // -1       // not found\n    if (endPos != -1) {                                                             // 19\n        sliced = sliced.slice(0,endPos);                                            // if there is more after the string, this will remove it\n    }\n    return sliced.replace(moduleName + \"--\",\"\")\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger name is allowed\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} True if the triggername is allowed, otherwise false.\n */\nJssService.triggerNameIsAllowed = function(element, moduleName) {\n    if (JssService.forbiddenProperties.indexOf(this.getTriggerName(element, moduleName)) > -1) {      // This triggerName is a core property, throw error\n        console.error('Triggername `' + getTriggerName(element,moduleName) + '` is not allowed. Change the trigger so it does not corresponds any of these: ' + JssService.forbiddenProperties)\n        return false;\n    }\n    return true;\n}\n/**\n * @module Jss\n * @author      Jeffrey Arts <sjeffff@gmail.com>\n * @copyright   2015\n */\nJss = function(){};\n\nJss.prototype.type      = \"Jss\"\nJss.prototype.triggers  = false;\nJss.prototype.element   = undefined;                                              // {obj} domElement\nJss.prototype.state     = undefined;                                              // {str} State of module, is reflected by the css class __isState\n\n/**\n * -----------------------------------------------------------------------------\n * Find Triggers\n * -----------------------------------------------------------------------------\n *\n * @param {domElement} element\n * @return {undefined}\n */\nJss.prototype.findTriggers = function(element) {\n    this.triggers = [];                                                         // If this is not set, all modules will have the same reference point to this.triggers.\n    // Module is created, now look for any module triggers\n    this.searchTriggersRecursiveInnerFunction(this.element)\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger\n * -----------------------------------------------------------------------------\n */\nJss.prototype.trigger = function(which, fn) {\n    if (typeof this.triggers !== \"object\") {\n        console.info(\"No triggers are found, please specify them in the css as `module-name--trigger-name`.\");\n        return false;\n    }\n\n    if (typeof this.triggers[which] !== \"object\") {\n        console.info(\"You are trying to execute a function on a non existing trigger `\" + which + \"`\");\n        return false;\n    }\n\n    for (var i = 0; i < this.triggers[which].length; i++) {\n        fn(this.triggers[which][i])\n    }\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Search triggers recursive inner function\n * -----------------------------------------------------------------------------\n * Recursive function which is executed bij findTriggers;\n *\n * @return {undefined}\n */\nJss.prototype.searchTriggersRecursiveInnerFunction = function(element) {\n    var self = this;\n    if (typeof element == \"undefined\" ) {\n        element = this.element;\n    }\n    if ( element.hasChildNodes() ) {\n        for (var i=0; i < element.childNodes.length; i++) {\n\n            var childElement = element.childNodes[i];                           // Improve readability\n\n            if (childElement.nodeType == 1) {                                   // NodeType 1 == domElement\n\n                if (JssService.isTrigger(childElement, this.moduleName)) {\n\n                    // Add a child element\n                    if (JssService.triggerNameIsAllowed(childElement, this.moduleName)) {\n                        var triggerName = JssService.getTriggerName(childElement, this.moduleName)\n\n                        if (typeof self.triggers[triggerName] !== \"object\") {\n                            self.triggers[triggerName] = [];\n                        }\n\n                        var tmp = new JssTrigger(childElement, {\n                            module: self,\n                            moduleName: this.moduleName,\n                            triggerName: triggerName,\n                        });\n\n                        self.triggers[triggerName].push(tmp);\n                    }\n                }\n                if (childElement.hasChildNodes()) {\n                    self.searchTriggersRecursiveInnerFunction(childElement)\n                }\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Configure Trigger\n * -----------------------------------------------------------------------------\n *\n * @return {undefined}\n */\nJss.prototype.configureTrigger = function(trigger, fn) {\n    if ( typeof this.triggers[trigger] == \"object\") {\n\n        for (var i = 0; i < this.triggers[trigger].length; i++) {\n            //self.triggers[trigger][i]\n            fn(this.triggers[trigger][i]);\n        }\n\n    } else if (JssService.dev) {\n        console.error(\"You are trying to configure a trigger which has no attached domElement\")\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n *   Init\n * -----------------------------------------------------------------------------\n * Notice the user that a init function needs to be added for controlling the triggers\n *\n * @return {undefined}\n */\nJss.prototype.init = function(func) {\n    if (JssService.dev) {\n        console.info(this.moduleName + \": Add a prototype.init function to add triggers and stuff\")\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set element\n * -----------------------------------------------------------------------------\n * Add a domElement to `this`\n *\n * @return {undefined}\n */\nJss.prototype.setElement = function(element) {\n    if (typeof element == \"undefined\") {\n        if (JssService.dev) {\n            return console.error(\"First parameter of setElement needs to be a domElement\");\n        }\n    }\n    this.element = element;\n}\n/*******************************************************************************\n   *\n   *\tActions\n   *\n   *  \t@author      Jeffrey Arts <sjeffff@gmail.com>\n   *    @copyright   2015\n   *\n*******************************************************************************/\n/**\n * -----------------------------------------------------------------------------\n *   Validate action\n * -----------------------------------------------------------------------------\n * Checks if parameter is a valid action, and logs an error when not.\n *\n * @param {string} request                                                      The name of the request\n * @return {boolean} true if a action is valid, otherwise false.\n */\nJss.prototype.validateAction = function(request) {\n    var result;\n    request = this.getActionElement(request).request\n    for (var action in JssService.actions) {\n        if (JssService.actions[action].indexOf(request.toLowerCase()) > -1) {\n            result = action;\n            break;\n        }\n    }\n    if (result) {\n        return result;\n    } else {\n        console.error(\"validateAction: unknown request\", request);\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * \t Add Action\n * -----------------------------------------------------------------------------\n * Adds an action to the object, list of possible requests can be found in Jss.actions\n *\n * | Options\n * \t\t- addDefaults {boolean}                                                 True: add default classes, false: don't\n *\n *\n *\n * @param {string} request                                                      The name of the request\n * @param {function} fn                                                         The function which should be triggered\n * @param {object} options                                                      Object with option parameters\n * @return {boolean} true if a action is succesfully added, otherwise false.\n */\nJss.prototype.addAction = function(request, fn, options) {\n\n    var self        = this;\n    var action      = self.validateAction(request)\n    var actions     = [];\n    var t = self.getActionElement(request);\n    var element     = t.element;\n    var request     = t.request;\n    t = undefined;\n\n    // Options\n    var addDefaults = JssService.getOption(\"addDefaults\", options);\n\n\n\n    switch (action) {\n\n        case \"resize\":\n\n            actions.push(element.addEventListener(\"resize\", fn));\n\n        break;\n\n\n        case \"click\":\n            actions.push(element.addEventListener(\"click\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"click\", function(){\n                    self.setState(\"Clicked\")\n                }));\n                actions.push(window.addEventListener( \"click\", function(event) {\n                    if (event.target != self.element && self.hasState(\"Clicked\")) {\n                        self.removeState(\"Clicked\")\n                    }\n                }));\n            } // End addDefaults\n        break;\n\n\n        case \"change\":\n            actions.push(element.addEventListener(\"change\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"change\", function(){\n                    self.setState(\"Changed\")\n                    setTimeout(function(){self.removeState(\"Changed\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"hover\":\n            actions.push(element.addEventListener(\"mouseover\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseover\", function(){\n                    self.setState(\"Hover\")\n                }));\n                actions.push(element.addEventListener(\"mouseout\",  function(){\n                    self.removeState(\"Hover\")\n                }));\n            }\n        break;\n\n\n        case \"mouseIn\":\n\n            actions.push(element.addEventListener(\"mouseenter\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseenter\", function(){\n                    self.setState(\"MouseIn\")\n                    setTimeout(function(){self.removeState(\"MouseIn\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"mouseOut\":\n\n            actions.push(element.addEventListener(\"mouseleave\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseleave\", function(){\n                    self.setState(\"MouseOut\")\n                    setTimeout(function(){self.removeState(\"MouseOut\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n    }\n\n\n    if (actions.length > 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get action element\n * -----------------------------------------------------------------------------\n * @param  {string} request                                                     The request\n * @return {object}                                                             An object with 2 properties: request && element\n */\nJss.prototype.getActionElement = function(request) {\n    var self = this;\n    var prefix = false;\n    var newRequest  = request;\n    var element = self.element;\n    // Set prefix if it exists\n    if (request.indexOf(\".\") > 0) {\n        var t       = request.split(\".\"),\n        newRequest  = t[1];\n        prefix      = t[0];\n        t = undefined;\n    }\n\n    // Update element according the prefix (or skip it, if not set)\n    if (prefix !== false) {\n        switch (prefix) {\n            case \"screen\":\n            case \"window\":\n                element = window;\n            break;\n        }\n    }\n\n    // Return object\n    return {\n        request: newRequest,\n        element: element\n    }\n}\n/**\n * -----------------------------------------------------------------------------\n * Class name prefix\n * -----------------------------------------------------------------------------\n * The prefix equals the modulename, or - when it's a trigger object - modulename--triggername\n *\n * @return {string} The classname\n */\nJss.prototype.classNamePrefix = function() {\n    if (this.type == \"JssTrigger\") {\n        return this.moduleName + \"--\" + this.triggerName;\n    } else {\n        return this.moduleName;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Remove class name\n * -----------------------------------------------------------------------------\n * Removes the `this.element` classname\n * \t- \"all\" || undefined        > Removes ALL classnames\n *  - \"allStates\" || \"states\"   > Remove all STATES\n *  - all other strings remove that specific string from the className\n *\n * @param {string} input                                                        The classname (case-sensitive) which needs to be removed\n * @return {undefined}\n */\nJss.prototype.removeClassName = function(input) {\n\n    var classList  = [];\n\n    if (input == \"all\" || typeof input == \"undefined\") {\n\n        this.element.className = \"\";\n\n    } else if (input == \"states\" || input == \"allStates\") {\n\n        classList = this.element.className.split(\" \");\n        for (var i in classList) {\n            className = classList[i];\n            if (className.indexOf(\"__is\") > -1) {\n                delete classList[i];\n            }\n        }\n        this.element.className = classList.join(\" \");\n\n    } else if(typeof input == \"string\") {\n        this.element.className = this.element.className.replace(input,\"\");\n    } else {\n        console.error(\"removeClassName: parameter should be a string\");\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Add class name\n * -----------------------------------------------------------------------------\n * Adds a class name by string or array.\n * Does NOT check for duplicates\n *\n * @param  {string} The classname to be added\n * @return {undefined}\n */\nJss.prototype.addClassName = function(data) {\n    this.element.className += \" \";\n    if (typeof data == \"string\") {\n        this.element.className += data;\n    } else {\n        this.element.className += data.join(\" \")\n    }\n}\n\n/**\n * List where the keys corresponds with this[key], and where the value is the function to be executed when the var is changed.\n */\nJss.prototype.setterWatchList = {};\nJss.prototype.getterWatchList = {};\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add data\n * -----------------------------------------------------------------------------\n * Add a (default) value for the given attribute.\n *\n * @param {string} attribute                                                    The name of the attribute (this[attribute])\n * @param {*} value                                                             The value of this[attribute], could be anything...\n * @param {object} options\n *           \t\t- setterWatchFunction {function}\n *           \t\t- getterWatchFunction {function}\n */\nJss.prototype.addData = function(attribute, value, options) {\n\n\n    // watchList[key] = fn;\n    var setterWatchFunction = JssService.getOption('setterWatchFunction', options); // Function\n    var getterWatchFunction = JssService.getOption('getterWatchFunction', options); // Function\n\n    if (typeof setterWatchFunction === \"function\") {\n        this.setterWatchList[attribute] = setterWatchFunction;\n    }\n\n    if (typeof getterWatchFunction === \"function\") {\n        this.getterWatchList[attribute] = getterWatchFunction;\n    }\n\n    // Set the default value\n    return this[attribute] = value;\n}\n\n\n\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- ajax {string} url\n */\nJss.prototype.setData = function(attribute, value, options) {\n\n    this[attribute] = value;\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n\n    if (Array.isArray(fallback)) {\n\n        for (var i = 0; i < fallback.length; i++) {\n            var type = fallback[i];\n\n            if (value && value.length > 0) {\n                this['setData' + JssService.toCamelCase(type)](attribute, value); // Call this.addDataAttribute(value) || this.addDataCookie(value) etc...\n                this[attribute] = value;\n            }\n        }\n    }\n\n    // Call the setter watch function, if defined;\n    if (typeof this.setterWatchList[attribute] === \"function\") { // Use the watchlist to add functionality whenever a data attribute is updated\n        this.setterWatchList[attribute]();\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataDefault {boolean}\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- dataAjax {string} url\n */\nJss.prototype.getData = function(attribute, options) {\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n    var value = false;\n\n\n    if (!fallback) {\n        fallback = ['attribute'];\n    }\n\n\n    for (var i = 0; i < fallback.length; i++) {\n        var type = JssService.toCamelCase(fallback[i]);\n        var customOptions = false;\n\n        if (typeof options == \"object\") {\n            customOptions = options[fallback[i].toLowerCase()];\n        }\n\n        if (!value || value.length < 0) {\n            if (typeof this['getData' + type] !== \"function\") {\n                console.error('this.getData' + type + ' is not a function. Probably ' + type + ' is not a available data option');\n                continue;\n            }\n            value = this['getData' + type]( attribute, customOptions ); // Call this.getDataAttribute(value) || this.getDataCookie(value) || this.getDataAjax(value) etc...\n        }\n    }\n    console.log(this.getterWatchList);\n    // Call the getter watch function, if defined;\n    if (typeof this.getterWatchList[attribute] == \"function\") {\n        this.getterWatchList[attribute]();\n    }\n\n    return this[attribute] = value;\n}\n/**\n * -----------------------------------------------------------------------------\n * Get data: Ajax\n * -----------------------------------------------------------------------------\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n *\n * @param {string} attribute                                                    The NAME of the inner variable (this.NAME), is also used as the key for the GET Request {NAME: value}\n * @param {object} options                                                      Object with parameters used to make a GET request\n * @return {string}                                                             The value of the given attribute, or false if an erro occured.\n */\nJss.prototype.getDataAjax = function(attribute, options) {\n    var url = JssService.getOption(\"url\", options);\n    var jsonKey = JssService.getOption(\"jsonKey\", options) || attribute;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('GET', url);\n\n        return ajaxReturn.success(function(result){\n            if (typeof result === \"object\") {\n                if (result[jsonKey]) {\n                    return result[jsonKey];\n                }\n            }\n        }).error(function(errorObject){\n            console.log(errorObject);\n        });\n    }\n\n    return false;\n};\n\n/**\n * -----------------------------------------------------------------------------\n * Set data: Ajax\n * -----------------------------------------------------------------------------\n * Makes a post request to the options.url in a object {attribute: value}\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n */\nJss.prototype.setDataAjax = function(attribute, value, options) {\n    var url = JssService.getOption(\"url\", options);\n    var requestObject = {}\n        requestObject[attribute] = value;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('POST', url, requestObject);\n\n        return ajaxReturn.success(function(result){\n            return true;\n        }).error(function(errorObject){\n            console.log(errorObject);\n            return false;\n        });\n    }\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Ajax (helper function)\n * -----------------------------------------------------------------------------\n * Based on Atom.js by Todd Motto\n * http://toddmotto.com/writing-a-standalone-ajax-xhr-javascript-micro-library/\n */\nJss.prototype.ajaxHelper = {\n    // Parses json if possible, otherwise just return text\n    parse: function(req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return [result, req];\n    },\n\n    xhr: function(type, url, data) {\n        var ajaxHelper = this;\n\n        var methods = {\n            success: function() {},\n            error: function() {}\n        };\n        var XHR = XMLHttpRequest || ActiveXObject;\n        var request = new XHR('MSXML2.XMLHTTP.3.0');\n        request.open(type, url, true);\n        request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n\n        request.onreadystatechange = function() {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    methods.success.apply(methods, ajaxHelper.parse(request));\n                } else {\n                    methods.error.apply(methods, ajaxHelper.parse(request));\n                }\n            }\n        };\n        request.send(data);\n        return {\n            success: function(callback) {\n                methods.success = callback;\n                return methods;\n            },\n            error: function(callback) {\n                methods.error = callback;\n                return methods;\n            }\n        };\n    }\n};\n\nJss.prototype.ajax = {\n    // Get\n    get: function(src) {\n        console.log(this);\n    },\n\n    // Set\n    put: function(url, data) {\n        return this.ajaxHelper.xhr('PUT', url, data);\n    },\n\n    // Add\n    post: function(url, data) {\n        return this.ajaxHelper.xhr('POST', url, data);\n    }\n\n};\n/**\n * -----------------------------------------------------------------------------\n * Get data attribute value\n * -----------------------------------------------------------------------------\n * Returns the value of the requested attribute. Search first for a data-[ATTRIBUTE] value\n * If not found, it checks for the attribute in the default object. When that is not being\n * found neither, the normal this[attribute] value is being returned.\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME)\n * @return {string}                                                             The value of the given attribute\n */\nJss.prototype.getDataAttribute = function(attribute) {\n\n    return this.element.dataset[attribute];\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Update data attribute\n * -----------------------------------------------------------------------------\n * Set the value to the given attribute. And updates the data-[ATTRIBUTE] value\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME=\"value\")\n * @param {string} value                                                        The VALUE of the data attribute (data-name=\"VALUE\")\n * @return {undefined}\n */\n\nJss.prototype.setDataAttribute = function(attribute, value) {\n\n    // Update data attribute\n    if (typeof value !== \"undefined\") {\n        this.element.dataset[attribute] = this[attribute];\n    } else {\n        delete this.element.dataset[attribute];\n    }\n\n    return true;\n}\nJss.prototype.dataDefaultsCookie = {\n    'expireData': undefined\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get cookie value\n * -----------------------------------------------------------------------------\n * Returns cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @return {string}                                                             The VALUE of the given attribute\n */\nJss.prototype.getDataCookie = function(attribute) {\n\n    if (!attribute) { return null; }\n    return decodeURIComponent(document.cookie.replace(new RegExp(\"(?:(?:^|.*;)\\\\s*\" + encodeURIComponent(attribute).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"), \"$1\")) || null;\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data cookie\n * -----------------------------------------------------------------------------\n * Updates the cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @param {string} value                                                        The VALUE of the cookie\n * @return {undefined}\n */\n\nJss.prototype.setDataCookie = function(attribute, value, options) {\n    var endDate, path, domain, secureConnection;\n\n    if (typeof options === \"object\") {\n        endDate = JssService.getOption('endDate', options);\n        path    = JssService.getOption('path', options);\n        domain  = JssService.getOption('domain', options);\n        secureConnection = JssService.getOption('secureConnection', options);\n    }\n\n    if (!attribute || /^(?:expires|max\\-age|path|domain|secure)$/i.test(attribute)) { return false; }\n    var sExpires = \"\";\n    if (endDate) {\n      switch (endDate.constructor) {\n        case Number:\n          sExpires = endDate === Infinity ? \"; expires=Fri, 31 Dec 9999 23:59:59 GMT\" : \"; max-age=\" + endDate;\n          break;\n        case String:\n          sExpires = \"; expires=\" + endDate;\n          break;\n        case Date:\n          sExpires = \"; expires=\" + endDate.toUTCString();\n          break;\n      }\n    }\n\n    document.cookie = encodeURIComponent(attribute) + \"=\" + encodeURIComponent(value) + sExpires + (domain ? \"; domain=\" + domain : \"\") + (path ? \"; path=\" + path : \"\") + (secureConnection ? \"; secure\" : \"\");\n    return true;\n}\n/*******************************************************************************\n\n    Styles\n\n*******************************************************************************/\n\n/**\n * -----------------------------------------------------------------------------\n * Set height\n * -----------------------------------------------------------------------------\n * Sets the height of the `this.element` by the given input (height)\n *\n * @param  {number} height                                                      The height in pixels or percentage. Where numbers will be calculated to pixels so giving a height of 50 will result in a height of \"50px\". If you want percentages pass the variable with a percentage sign 50 + \"%\"\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setHeight = function(height) {\n    if (typeof height === \"number\") {\n        height += \"px\";\n    }\n\n    if (typeof height !== \"string\") {\n        throw(\"parameter height needs to be a string or integer\");\n    }\n\n    this.element.style.height = height;\n    return true;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get height\n * -----------------------------------------------------------------------------\n * Returns the height of the `this.element`\n *\n * @return {number}                                                             The height of the element in pixels\n */\nJss.prototype.getHeight = function() {\n    return this.element.offsetHeight;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set width\n * -----------------------------------------------------------------------------\n * Sets the width of the `this.element` by the given input (width)\n *\n * @param  {number} width                                                       The width in pixels or percentage. Where numbers will be calculated to pixels so giving a width of 50 will result in a width of \"50px\". If you want to set a percentage, just pass the variable with a percentage sign (\"50%\")\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setWidth = function(width) {\n    if (typeof width == \"number\") {\n        width += \"px\";\n    }\n\n    if (typeof width !== \"string\") {\n        throw(\"parameter width needs to be a string or integer\");\n    }\n    this.element.style.width = width;\n    return true;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get width\n * -----------------------------------------------------------------------------\n * Returns the width of the `this.element`\n *\n * @return {number}                                                             The width of the element in pixels\n */\nJss.prototype.getWidth = function() {\n    return this.element.offsetWidth;\n}\n/**\n * -----------------------------------------------------------------------------\n * Set State\n * -----------------------------------------------------------------------------\n * This updates the state of the object. States are being added to the class name prefix with a double underscore.\n * If you would have the module `envelope` and give it the state `open`. The class name `envelope__open` will be added.\n * Whenever you remove the state `open`, the according class name will be removed as well.\n *\n * @param  {string} str                                                         The name of the state which should be set (this is transformed to CamelCase)\n * @return {boolean}                                                            True on success, otherwise false (might already have the state)\n */\nJss.prototype.setState = function(str) {\n    var element, verifiedState, state, className;\n\n    element         = this.element;\n    state           = JssService.toCamelCase(str);\n    className       = this.classNamePrefix() + \"__is\" + state;\n\n    // Check if this.state is an array, and make it one if not.\n    if (Array.isArray(this.state) == false ) {\n        this.state = [];\n    }\n\n    // This if statement prevents that the same state is being set multiple times\n    if ( !this.hasState(str) ) {\n        this.addClassName(className)\n        this.state.push(state);\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Has state\n * -----------------------------------------------------------------------------\n * Checks if the parameter is already a state and returns true if so. Otherwise false.\n *\n * @param  {string} str                                                         The state which will be checked for\n * @return {boolean}                                                            True if it has the given state, otherwise false\n */\nJss.prototype.hasState = function(str) {\n    if (typeof this.state == \"object\" && this.state.indexOf(str) >= 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Remove state\n * -----------------------------------------------------------------------------\n * Removes the state from the states array, and from the element.className\n *\n * @param  {string} str                                                         The name of the state which should be removed\n * @return {undefined}\n */\nJss.prototype.removeState = function(str) {\n\n    var state      = JssService.toCamelCase(str);\n    var stateIndex = this.state.indexOf(state);\n\n    if (str == \"all\" || typeof str == \"undefined\") {\n        this.removeClassName(\"states\");\n    } else {\n        this.state.splice(stateIndex, 1);\n        if (typeof this.moduleAction != \"undefined\" && this.moduleAction.length > -1) {\n            this.removeClassName(this.classNamePrefix() + \"\" + this.moduleAction + \"__is\" + state);\n        } else {\n            this.removeClassName(this.classNamePrefix() + \"__is\" + state);\n        }\n    }\n}\n\n\n// A simple way to watch variables\n\n// addVar(keyName, value, watch_function)\n// setVar(keyName, value)\n// getVar(keyName)\n// Add -> new\n// Set -> update\n// Get -> return\nvar JssModule = function(){};\n\nJssModule.prototype.type               = \"JssModule\";\nJssModule.prototype.init               = Jss.prototype.init;\nJssModule.prototype.setElement         = Jss.prototype.setElement;\n\n// Triggers\nJssModule.prototype.findTriggers       = Jss.prototype.findTriggers;\nJssModule.prototype.configureTrigger      = Jss.prototype.configureTrigger;\n\n// Actions\n//JssModule.prototype.actions            = Object.create(Jss.prototype.actions);\nJssModule.prototype.validateAction     = Jss.prototype.validateAction;\nJssModule.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssModule.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssModule.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssModule.prototype.setState           = Jss.prototype.setState;\nJssModule.prototype.hasState           = Jss.prototype.hasState;\nJssModule.prototype.removeState        = Jss.prototype.removeState;\n\n// Data attributes\nJssModule.prototype.addData            = Jss.prototype.addData;\nJssModule.prototype.getData            = Jss.prototype.getData;\nJssModule.prototype.setData            = Jss.prototype.setData;\nvar JssTrigger = function(element, options) {\n    this.setElement(element);\n\n    if (typeof options === \"object\") {\n        if (typeof options.module === \"object\") {\n            this.module = options.module;\n        }\n        if (typeof options.moduleName === \"string\") {\n            this.moduleName = options.moduleName;\n        }\n        if (typeof options.triggerName === \"string\") {\n            this.triggerName = options.triggerName;\n        }\n    }\n}\n\n\nJssTrigger.prototype                    = Object.create(Jss.prototype);\nJssTrigger.prototype.type               = \"JssTrigger\";\nJssTrigger.prototype.setElement         = Jss.prototype.setElement;\n\n// Actions\n//JssTrigger.prototype.actions            = Object.create(Jss.prototype.actions);\nJssTrigger.prototype.validateAction     = Jss.prototype.validateAction;\nJssTrigger.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssTrigger.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssTrigger.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssTrigger.prototype.setState           = Jss.prototype.setState;\nJssTrigger.prototype.hasState           = Jss.prototype.hasState;\nJssTrigger.prototype.removeState        = Jss.prototype.removeState;\n\n\n\nvar  JssController = {};\nJssController.modules \t\t= []; // Result array with objects of all the found modules\nJssController.activeModules \t= JssService.activeModules;\n\nJssController.findModules = function() {\n    var allElements = document.getElementsByTagName(\"*\");                       // Array with all domElements\n    var test = [];\n    var self = this;\n    for (var i=0; i < allElements.length; i++) {\n\n        // Set default vars //\n        var element = allElements[i];                                           // Specific domElement\n        var tmp = false;\n\n        // Loop through the (active) modules array and add/instantiate them\n        self.activeModules.forEach(function(module){\n            if (JssService.isModule(element, module)) {\n                tmp = eval(\"new \" + JssService.toCamelCase(module) + \"(element)\"); // Dynamicly load modules\n\n                tmp.setElement(element);                                        // Add the domElement to the module\n                tmp.findTriggers();\t\t\t                                    // Search for module triggers\n\n                tmp.init();\t\t\t\t\t                                    // Executes everything within the init function\n                self.modules.push(tmp);\n\n            }\n        }); // End forEach\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    JssController.findModules();\n    console.log(JssController);\n});"
          },
          "returns": [
            {
              "title": "returns",
              "description": null,
              "type": {
                "type": "UndefinedLiteral"
              }
            }
          ],
          "name": "searchTriggersRecursiveInnerFunction",
          "kind": "function",
          "memberof": "Jss",
          "scope": "instance",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            "Jss",
            "searchTriggersRecursiveInnerFunction"
          ]
        },
        {
          "description": "-----------------------------------------------------------------------------\nSet data\n-----------------------------------------------------------------------------",
          "tags": [
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "attribute"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "AllLiteral"
              },
              "name": "value"
            },
            {
              "title": "param",
              "description": "dataAttribute {boolean}\n       \t\t\t\t- ajax {string} url",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "options"
            },
            {
              "title": "name",
              "name": "setData"
            },
            {
              "title": "kind",
              "kind": "function"
            },
            {
              "title": "memberof",
              "description": "Jss"
            },
            {
              "title": "instance"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 708,
                "column": 0
              },
              "end": {
                "line": 744,
                "column": 0
              }
            },
            "file": "/Users/jeffreyarts/Documents/DEV/jss/lib/jss.js",
            "code": "JssService = {};\n\n// Edit this array to enable or disable default modules\nJssService.activeModules   = []\n\n// Set this to false in a live environment\nJssService.dev             = true;\n\n/**************************\n*\n*   Below are core properties defined, becarefull when you think of changing these...\n*\n**************************/\n\n\nJssService.actions = {\n    hover:      ['hover',    'mouseover',   'onmouseover'                       ], // Fixed\n    click:      ['click',    'onclick'                                          ], // Fixed\n    mouseIn:    ['mousein',  'onmousein', 'mouseenter', 'onmouseenter'          ], // Fixed\n    mouseOut:   ['mouseout', 'onmouseout', 'mouseleave', 'onmouseleave'         ], // Fixed\n    resize:     ['resize',   'onresize'                                         ], // Fixed\n    focus:      ['focus',    'onfocus'                                          ],\n    keyDown:    ['keydown',  'keypress'                                         ],\n    keyUp:      ['keyup',    'keyrelease'                                       ],\n    change:     ['change',   'onchange'                                         ],\n};\n\nJssService.enterDelay = 1000;                                                   // Amount of miliseconds which is used to remove the entered state. (see core.actions) JssService.enterDelay setTimeout\n\nJssService.forbiddenProperties = [\n    'type',\n    'triggers',\n    'configureTrigger',\n    'findTriggers'\n];\n\n/**\n * -----------------------------------------------------------------------------\n * Is Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isModule = function(element, moduleName) {\n    var arr = element.className.split(\" \");\n    var found = false;\n\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i].indexOf(moduleName)        > -1 &&\n            arr[i].indexOf(moduleName + \"_\") == -1 &&\n            arr[i].indexOf(moduleName + \"-\") == -1)\n        {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.addModule = function(moduleName) {\n    this.activeModules.push(this.toKebabCase(moduleName))\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To CamelCase\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toCamelCase = function(input) {\n    var arr, res;\n    res = \"\";\n    if (typeof input === \"string\") {\n        input = input.replace(/\\-/g,\" \");                                       // Replace all dashes with spaces\n        arr = input.split(\" \");\n    } else {\n        arr = input;                                                            // Assume it is an array\n    }\n\n\n\n    var i = 0;\n    for (var i in arr) {\n        if (typeof i != \"undefined\") {\n            res += arr[i][0].toUpperCase()+ arr[i].slice(1); // Capitalize first letter\n        }\n    }\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To kebab-case\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toKebabCase = function(input) {\n    var res, str;\n    res = \"\";\n\n    if (typeof input === \"string\") {\n        str = input;\n    } else {                                                                    // Assume it is an array\n        str = input.join(\" \");\n    }\n\n    // First change it to camelcase\n    str = this.toCamelCase(str);\n\n    var max = str.length;\n    for (var i=0; i < max; i++) {\n        // Check if character is uppercase\n        if (str[i] != str[i].toLowerCase()) {\n            if (i!==0) {\n                str = str.substr(0, i) + \"-\" + str.substr(i);\n                i++;\n            }\n        }\n    }\n\n    return res = str.toLowerCase();\n}\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get option\n * -----------------------------------------------------------------------------\n * @param  {string} name                                                        Keyname in optionList\n * @param  {array} optionList                                                   Array with all possible options\n * @return {}                                                                   Copy of the value (optionsList[name])\n */\nJssService.getOption = function(name, optionList) {\n    if (typeof optionList !== \"object\") {\n        return false;\n    }\n\n    var res;\n\n    switch (name) {\n\n        // Only set `addDefaults` to false when it is explicitly set.\n        case \"addDefaults\":\n            if (optionList[name] !== false || typeof optionList[name] === \"undefined\") {\n                res = true;\n            } else {\n                res = false;\n            }\n        break;\n        case \"fallback\":\n            if ( Array.isArray(optionList[name]) ) {\n                res = optionList[name];\n                if (res.length===0) {\n                    res = false;\n                }\n            } else if (typeof optionList[name] === \"string\"){\n                res = [optionList[name]];\n            }\n        break;\n        default:\n        res = optionList[name]\n    }\n\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Is Trigger\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isTrigger = function(element, moduleName) {\n    if (element.className.indexOf(moduleName + \"--\") > -1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get trigger name\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {string} Name of the trigger.\n */\nJssService.getTriggerName = function(element, moduleName) {\n    if (typeof element != \"object\") {\n        console.error('Required first argument `element` needs to be a domElement.');\n        return false;\n    }\n    if (typeof moduleName != \"string\") {\n        console.error('Required second argument `moduleName` needs to be a string.');\n        return false;\n    }\n\n    // As an example we assume that the value of element.className equals 'b module--triggerName'\n    var startPos = element.className.indexOf(moduleName + \"--\");                    // 2\n    var sliced = element.className.slice(startPos, element.className.length )       // 'module--triggerName'\n    var endPos = sliced.indexOf(\" \");                                               // -1       // not found\n    if (endPos != -1) {                                                             // 19\n        sliced = sliced.slice(0,endPos);                                            // if there is more after the string, this will remove it\n    }\n    return sliced.replace(moduleName + \"--\",\"\")\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger name is allowed\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} True if the triggername is allowed, otherwise false.\n */\nJssService.triggerNameIsAllowed = function(element, moduleName) {\n    if (JssService.forbiddenProperties.indexOf(this.getTriggerName(element, moduleName)) > -1) {      // This triggerName is a core property, throw error\n        console.error('Triggername `' + getTriggerName(element,moduleName) + '` is not allowed. Change the trigger so it does not corresponds any of these: ' + JssService.forbiddenProperties)\n        return false;\n    }\n    return true;\n}\n/**\n * @module Jss\n * @author      Jeffrey Arts <sjeffff@gmail.com>\n * @copyright   2015\n */\nJss = function(){};\n\nJss.prototype.type      = \"Jss\"\nJss.prototype.triggers  = false;\nJss.prototype.element   = undefined;                                              // {obj} domElement\nJss.prototype.state     = undefined;                                              // {str} State of module, is reflected by the css class __isState\n\n/**\n * -----------------------------------------------------------------------------\n * Find Triggers\n * -----------------------------------------------------------------------------\n *\n * @param {domElement} element\n * @return {undefined}\n */\nJss.prototype.findTriggers = function(element) {\n    this.triggers = [];                                                         // If this is not set, all modules will have the same reference point to this.triggers.\n    // Module is created, now look for any module triggers\n    this.searchTriggersRecursiveInnerFunction(this.element)\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger\n * -----------------------------------------------------------------------------\n */\nJss.prototype.trigger = function(which, fn) {\n    if (typeof this.triggers !== \"object\") {\n        console.info(\"No triggers are found, please specify them in the css as `module-name--trigger-name`.\");\n        return false;\n    }\n\n    if (typeof this.triggers[which] !== \"object\") {\n        console.info(\"You are trying to execute a function on a non existing trigger `\" + which + \"`\");\n        return false;\n    }\n\n    for (var i = 0; i < this.triggers[which].length; i++) {\n        fn(this.triggers[which][i])\n    }\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Search triggers recursive inner function\n * -----------------------------------------------------------------------------\n * Recursive function which is executed bij findTriggers;\n *\n * @return {undefined}\n */\nJss.prototype.searchTriggersRecursiveInnerFunction = function(element) {\n    var self = this;\n    if (typeof element == \"undefined\" ) {\n        element = this.element;\n    }\n    if ( element.hasChildNodes() ) {\n        for (var i=0; i < element.childNodes.length; i++) {\n\n            var childElement = element.childNodes[i];                           // Improve readability\n\n            if (childElement.nodeType == 1) {                                   // NodeType 1 == domElement\n\n                if (JssService.isTrigger(childElement, this.moduleName)) {\n\n                    // Add a child element\n                    if (JssService.triggerNameIsAllowed(childElement, this.moduleName)) {\n                        var triggerName = JssService.getTriggerName(childElement, this.moduleName)\n\n                        if (typeof self.triggers[triggerName] !== \"object\") {\n                            self.triggers[triggerName] = [];\n                        }\n\n                        var tmp = new JssTrigger(childElement, {\n                            module: self,\n                            moduleName: this.moduleName,\n                            triggerName: triggerName,\n                        });\n\n                        self.triggers[triggerName].push(tmp);\n                    }\n                }\n                if (childElement.hasChildNodes()) {\n                    self.searchTriggersRecursiveInnerFunction(childElement)\n                }\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Configure Trigger\n * -----------------------------------------------------------------------------\n *\n * @return {undefined}\n */\nJss.prototype.configureTrigger = function(trigger, fn) {\n    if ( typeof this.triggers[trigger] == \"object\") {\n\n        for (var i = 0; i < this.triggers[trigger].length; i++) {\n            //self.triggers[trigger][i]\n            fn(this.triggers[trigger][i]);\n        }\n\n    } else if (JssService.dev) {\n        console.error(\"You are trying to configure a trigger which has no attached domElement\")\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n *   Init\n * -----------------------------------------------------------------------------\n * Notice the user that a init function needs to be added for controlling the triggers\n *\n * @return {undefined}\n */\nJss.prototype.init = function(func) {\n    if (JssService.dev) {\n        console.info(this.moduleName + \": Add a prototype.init function to add triggers and stuff\")\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set element\n * -----------------------------------------------------------------------------\n * Add a domElement to `this`\n *\n * @return {undefined}\n */\nJss.prototype.setElement = function(element) {\n    if (typeof element == \"undefined\") {\n        if (JssService.dev) {\n            return console.error(\"First parameter of setElement needs to be a domElement\");\n        }\n    }\n    this.element = element;\n}\n/*******************************************************************************\n   *\n   *\tActions\n   *\n   *  \t@author      Jeffrey Arts <sjeffff@gmail.com>\n   *    @copyright   2015\n   *\n*******************************************************************************/\n/**\n * -----------------------------------------------------------------------------\n *   Validate action\n * -----------------------------------------------------------------------------\n * Checks if parameter is a valid action, and logs an error when not.\n *\n * @param {string} request                                                      The name of the request\n * @return {boolean} true if a action is valid, otherwise false.\n */\nJss.prototype.validateAction = function(request) {\n    var result;\n    request = this.getActionElement(request).request\n    for (var action in JssService.actions) {\n        if (JssService.actions[action].indexOf(request.toLowerCase()) > -1) {\n            result = action;\n            break;\n        }\n    }\n    if (result) {\n        return result;\n    } else {\n        console.error(\"validateAction: unknown request\", request);\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * \t Add Action\n * -----------------------------------------------------------------------------\n * Adds an action to the object, list of possible requests can be found in Jss.actions\n *\n * | Options\n * \t\t- addDefaults {boolean}                                                 True: add default classes, false: don't\n *\n *\n *\n * @param {string} request                                                      The name of the request\n * @param {function} fn                                                         The function which should be triggered\n * @param {object} options                                                      Object with option parameters\n * @return {boolean} true if a action is succesfully added, otherwise false.\n */\nJss.prototype.addAction = function(request, fn, options) {\n\n    var self        = this;\n    var action      = self.validateAction(request)\n    var actions     = [];\n    var t = self.getActionElement(request);\n    var element     = t.element;\n    var request     = t.request;\n    t = undefined;\n\n    // Options\n    var addDefaults = JssService.getOption(\"addDefaults\", options);\n\n\n\n    switch (action) {\n\n        case \"resize\":\n\n            actions.push(element.addEventListener(\"resize\", fn));\n\n        break;\n\n\n        case \"click\":\n            actions.push(element.addEventListener(\"click\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"click\", function(){\n                    self.setState(\"Clicked\")\n                }));\n                actions.push(window.addEventListener( \"click\", function(event) {\n                    if (event.target != self.element && self.hasState(\"Clicked\")) {\n                        self.removeState(\"Clicked\")\n                    }\n                }));\n            } // End addDefaults\n        break;\n\n\n        case \"change\":\n            actions.push(element.addEventListener(\"change\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"change\", function(){\n                    self.setState(\"Changed\")\n                    setTimeout(function(){self.removeState(\"Changed\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"hover\":\n            actions.push(element.addEventListener(\"mouseover\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseover\", function(){\n                    self.setState(\"Hover\")\n                }));\n                actions.push(element.addEventListener(\"mouseout\",  function(){\n                    self.removeState(\"Hover\")\n                }));\n            }\n        break;\n\n\n        case \"mouseIn\":\n\n            actions.push(element.addEventListener(\"mouseenter\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseenter\", function(){\n                    self.setState(\"MouseIn\")\n                    setTimeout(function(){self.removeState(\"MouseIn\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"mouseOut\":\n\n            actions.push(element.addEventListener(\"mouseleave\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseleave\", function(){\n                    self.setState(\"MouseOut\")\n                    setTimeout(function(){self.removeState(\"MouseOut\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n    }\n\n\n    if (actions.length > 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get action element\n * -----------------------------------------------------------------------------\n * @param  {string} request                                                     The request\n * @return {object}                                                             An object with 2 properties: request && element\n */\nJss.prototype.getActionElement = function(request) {\n    var self = this;\n    var prefix = false;\n    var newRequest  = request;\n    var element = self.element;\n    // Set prefix if it exists\n    if (request.indexOf(\".\") > 0) {\n        var t       = request.split(\".\"),\n        newRequest  = t[1];\n        prefix      = t[0];\n        t = undefined;\n    }\n\n    // Update element according the prefix (or skip it, if not set)\n    if (prefix !== false) {\n        switch (prefix) {\n            case \"screen\":\n            case \"window\":\n                element = window;\n            break;\n        }\n    }\n\n    // Return object\n    return {\n        request: newRequest,\n        element: element\n    }\n}\n/**\n * -----------------------------------------------------------------------------\n * Class name prefix\n * -----------------------------------------------------------------------------\n * The prefix equals the modulename, or - when it's a trigger object - modulename--triggername\n *\n * @return {string} The classname\n */\nJss.prototype.classNamePrefix = function() {\n    if (this.type == \"JssTrigger\") {\n        return this.moduleName + \"--\" + this.triggerName;\n    } else {\n        return this.moduleName;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Remove class name\n * -----------------------------------------------------------------------------\n * Removes the `this.element` classname\n * \t- \"all\" || undefined        > Removes ALL classnames\n *  - \"allStates\" || \"states\"   > Remove all STATES\n *  - all other strings remove that specific string from the className\n *\n * @param {string} input                                                        The classname (case-sensitive) which needs to be removed\n * @return {undefined}\n */\nJss.prototype.removeClassName = function(input) {\n\n    var classList  = [];\n\n    if (input == \"all\" || typeof input == \"undefined\") {\n\n        this.element.className = \"\";\n\n    } else if (input == \"states\" || input == \"allStates\") {\n\n        classList = this.element.className.split(\" \");\n        for (var i in classList) {\n            className = classList[i];\n            if (className.indexOf(\"__is\") > -1) {\n                delete classList[i];\n            }\n        }\n        this.element.className = classList.join(\" \");\n\n    } else if(typeof input == \"string\") {\n        this.element.className = this.element.className.replace(input,\"\");\n    } else {\n        console.error(\"removeClassName: parameter should be a string\");\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Add class name\n * -----------------------------------------------------------------------------\n * Adds a class name by string or array.\n * Does NOT check for duplicates\n *\n * @param  {string} The classname to be added\n * @return {undefined}\n */\nJss.prototype.addClassName = function(data) {\n    this.element.className += \" \";\n    if (typeof data == \"string\") {\n        this.element.className += data;\n    } else {\n        this.element.className += data.join(\" \")\n    }\n}\n\n/**\n * List where the keys corresponds with this[key], and where the value is the function to be executed when the var is changed.\n */\nJss.prototype.setterWatchList = {};\nJss.prototype.getterWatchList = {};\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add data\n * -----------------------------------------------------------------------------\n * Add a (default) value for the given attribute.\n *\n * @param {string} attribute                                                    The name of the attribute (this[attribute])\n * @param {*} value                                                             The value of this[attribute], could be anything...\n * @param {object} options\n *           \t\t- setterWatchFunction {function}\n *           \t\t- getterWatchFunction {function}\n */\nJss.prototype.addData = function(attribute, value, options) {\n\n\n    // watchList[key] = fn;\n    var setterWatchFunction = JssService.getOption('setterWatchFunction', options); // Function\n    var getterWatchFunction = JssService.getOption('getterWatchFunction', options); // Function\n\n    if (typeof setterWatchFunction === \"function\") {\n        this.setterWatchList[attribute] = setterWatchFunction;\n    }\n\n    if (typeof getterWatchFunction === \"function\") {\n        this.getterWatchList[attribute] = getterWatchFunction;\n    }\n\n    // Set the default value\n    return this[attribute] = value;\n}\n\n\n\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- ajax {string} url\n */\nJss.prototype.setData = function(attribute, value, options) {\n\n    this[attribute] = value;\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n\n    if (Array.isArray(fallback)) {\n\n        for (var i = 0; i < fallback.length; i++) {\n            var type = fallback[i];\n\n            if (value && value.length > 0) {\n                this['setData' + JssService.toCamelCase(type)](attribute, value); // Call this.addDataAttribute(value) || this.addDataCookie(value) etc...\n                this[attribute] = value;\n            }\n        }\n    }\n\n    // Call the setter watch function, if defined;\n    if (typeof this.setterWatchList[attribute] === \"function\") { // Use the watchlist to add functionality whenever a data attribute is updated\n        this.setterWatchList[attribute]();\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataDefault {boolean}\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- dataAjax {string} url\n */\nJss.prototype.getData = function(attribute, options) {\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n    var value = false;\n\n\n    if (!fallback) {\n        fallback = ['attribute'];\n    }\n\n\n    for (var i = 0; i < fallback.length; i++) {\n        var type = JssService.toCamelCase(fallback[i]);\n        var customOptions = false;\n\n        if (typeof options == \"object\") {\n            customOptions = options[fallback[i].toLowerCase()];\n        }\n\n        if (!value || value.length < 0) {\n            if (typeof this['getData' + type] !== \"function\") {\n                console.error('this.getData' + type + ' is not a function. Probably ' + type + ' is not a available data option');\n                continue;\n            }\n            value = this['getData' + type]( attribute, customOptions ); // Call this.getDataAttribute(value) || this.getDataCookie(value) || this.getDataAjax(value) etc...\n        }\n    }\n    console.log(this.getterWatchList);\n    // Call the getter watch function, if defined;\n    if (typeof this.getterWatchList[attribute] == \"function\") {\n        this.getterWatchList[attribute]();\n    }\n\n    return this[attribute] = value;\n}\n/**\n * -----------------------------------------------------------------------------\n * Get data: Ajax\n * -----------------------------------------------------------------------------\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n *\n * @param {string} attribute                                                    The NAME of the inner variable (this.NAME), is also used as the key for the GET Request {NAME: value}\n * @param {object} options                                                      Object with parameters used to make a GET request\n * @return {string}                                                             The value of the given attribute, or false if an erro occured.\n */\nJss.prototype.getDataAjax = function(attribute, options) {\n    var url = JssService.getOption(\"url\", options);\n    var jsonKey = JssService.getOption(\"jsonKey\", options) || attribute;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('GET', url);\n\n        return ajaxReturn.success(function(result){\n            if (typeof result === \"object\") {\n                if (result[jsonKey]) {\n                    return result[jsonKey];\n                }\n            }\n        }).error(function(errorObject){\n            console.log(errorObject);\n        });\n    }\n\n    return false;\n};\n\n/**\n * -----------------------------------------------------------------------------\n * Set data: Ajax\n * -----------------------------------------------------------------------------\n * Makes a post request to the options.url in a object {attribute: value}\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n */\nJss.prototype.setDataAjax = function(attribute, value, options) {\n    var url = JssService.getOption(\"url\", options);\n    var requestObject = {}\n        requestObject[attribute] = value;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('POST', url, requestObject);\n\n        return ajaxReturn.success(function(result){\n            return true;\n        }).error(function(errorObject){\n            console.log(errorObject);\n            return false;\n        });\n    }\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Ajax (helper function)\n * -----------------------------------------------------------------------------\n * Based on Atom.js by Todd Motto\n * http://toddmotto.com/writing-a-standalone-ajax-xhr-javascript-micro-library/\n */\nJss.prototype.ajaxHelper = {\n    // Parses json if possible, otherwise just return text\n    parse: function(req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return [result, req];\n    },\n\n    xhr: function(type, url, data) {\n        var ajaxHelper = this;\n\n        var methods = {\n            success: function() {},\n            error: function() {}\n        };\n        var XHR = XMLHttpRequest || ActiveXObject;\n        var request = new XHR('MSXML2.XMLHTTP.3.0');\n        request.open(type, url, true);\n        request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n\n        request.onreadystatechange = function() {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    methods.success.apply(methods, ajaxHelper.parse(request));\n                } else {\n                    methods.error.apply(methods, ajaxHelper.parse(request));\n                }\n            }\n        };\n        request.send(data);\n        return {\n            success: function(callback) {\n                methods.success = callback;\n                return methods;\n            },\n            error: function(callback) {\n                methods.error = callback;\n                return methods;\n            }\n        };\n    }\n};\n\nJss.prototype.ajax = {\n    // Get\n    get: function(src) {\n        console.log(this);\n    },\n\n    // Set\n    put: function(url, data) {\n        return this.ajaxHelper.xhr('PUT', url, data);\n    },\n\n    // Add\n    post: function(url, data) {\n        return this.ajaxHelper.xhr('POST', url, data);\n    }\n\n};\n/**\n * -----------------------------------------------------------------------------\n * Get data attribute value\n * -----------------------------------------------------------------------------\n * Returns the value of the requested attribute. Search first for a data-[ATTRIBUTE] value\n * If not found, it checks for the attribute in the default object. When that is not being\n * found neither, the normal this[attribute] value is being returned.\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME)\n * @return {string}                                                             The value of the given attribute\n */\nJss.prototype.getDataAttribute = function(attribute) {\n\n    return this.element.dataset[attribute];\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Update data attribute\n * -----------------------------------------------------------------------------\n * Set the value to the given attribute. And updates the data-[ATTRIBUTE] value\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME=\"value\")\n * @param {string} value                                                        The VALUE of the data attribute (data-name=\"VALUE\")\n * @return {undefined}\n */\n\nJss.prototype.setDataAttribute = function(attribute, value) {\n\n    // Update data attribute\n    if (typeof value !== \"undefined\") {\n        this.element.dataset[attribute] = this[attribute];\n    } else {\n        delete this.element.dataset[attribute];\n    }\n\n    return true;\n}\nJss.prototype.dataDefaultsCookie = {\n    'expireData': undefined\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get cookie value\n * -----------------------------------------------------------------------------\n * Returns cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @return {string}                                                             The VALUE of the given attribute\n */\nJss.prototype.getDataCookie = function(attribute) {\n\n    if (!attribute) { return null; }\n    return decodeURIComponent(document.cookie.replace(new RegExp(\"(?:(?:^|.*;)\\\\s*\" + encodeURIComponent(attribute).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"), \"$1\")) || null;\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data cookie\n * -----------------------------------------------------------------------------\n * Updates the cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @param {string} value                                                        The VALUE of the cookie\n * @return {undefined}\n */\n\nJss.prototype.setDataCookie = function(attribute, value, options) {\n    var endDate, path, domain, secureConnection;\n\n    if (typeof options === \"object\") {\n        endDate = JssService.getOption('endDate', options);\n        path    = JssService.getOption('path', options);\n        domain  = JssService.getOption('domain', options);\n        secureConnection = JssService.getOption('secureConnection', options);\n    }\n\n    if (!attribute || /^(?:expires|max\\-age|path|domain|secure)$/i.test(attribute)) { return false; }\n    var sExpires = \"\";\n    if (endDate) {\n      switch (endDate.constructor) {\n        case Number:\n          sExpires = endDate === Infinity ? \"; expires=Fri, 31 Dec 9999 23:59:59 GMT\" : \"; max-age=\" + endDate;\n          break;\n        case String:\n          sExpires = \"; expires=\" + endDate;\n          break;\n        case Date:\n          sExpires = \"; expires=\" + endDate.toUTCString();\n          break;\n      }\n    }\n\n    document.cookie = encodeURIComponent(attribute) + \"=\" + encodeURIComponent(value) + sExpires + (domain ? \"; domain=\" + domain : \"\") + (path ? \"; path=\" + path : \"\") + (secureConnection ? \"; secure\" : \"\");\n    return true;\n}\n/*******************************************************************************\n\n    Styles\n\n*******************************************************************************/\n\n/**\n * -----------------------------------------------------------------------------\n * Set height\n * -----------------------------------------------------------------------------\n * Sets the height of the `this.element` by the given input (height)\n *\n * @param  {number} height                                                      The height in pixels or percentage. Where numbers will be calculated to pixels so giving a height of 50 will result in a height of \"50px\". If you want percentages pass the variable with a percentage sign 50 + \"%\"\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setHeight = function(height) {\n    if (typeof height === \"number\") {\n        height += \"px\";\n    }\n\n    if (typeof height !== \"string\") {\n        throw(\"parameter height needs to be a string or integer\");\n    }\n\n    this.element.style.height = height;\n    return true;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get height\n * -----------------------------------------------------------------------------\n * Returns the height of the `this.element`\n *\n * @return {number}                                                             The height of the element in pixels\n */\nJss.prototype.getHeight = function() {\n    return this.element.offsetHeight;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set width\n * -----------------------------------------------------------------------------\n * Sets the width of the `this.element` by the given input (width)\n *\n * @param  {number} width                                                       The width in pixels or percentage. Where numbers will be calculated to pixels so giving a width of 50 will result in a width of \"50px\". If you want to set a percentage, just pass the variable with a percentage sign (\"50%\")\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setWidth = function(width) {\n    if (typeof width == \"number\") {\n        width += \"px\";\n    }\n\n    if (typeof width !== \"string\") {\n        throw(\"parameter width needs to be a string or integer\");\n    }\n    this.element.style.width = width;\n    return true;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get width\n * -----------------------------------------------------------------------------\n * Returns the width of the `this.element`\n *\n * @return {number}                                                             The width of the element in pixels\n */\nJss.prototype.getWidth = function() {\n    return this.element.offsetWidth;\n}\n/**\n * -----------------------------------------------------------------------------\n * Set State\n * -----------------------------------------------------------------------------\n * This updates the state of the object. States are being added to the class name prefix with a double underscore.\n * If you would have the module `envelope` and give it the state `open`. The class name `envelope__open` will be added.\n * Whenever you remove the state `open`, the according class name will be removed as well.\n *\n * @param  {string} str                                                         The name of the state which should be set (this is transformed to CamelCase)\n * @return {boolean}                                                            True on success, otherwise false (might already have the state)\n */\nJss.prototype.setState = function(str) {\n    var element, verifiedState, state, className;\n\n    element         = this.element;\n    state           = JssService.toCamelCase(str);\n    className       = this.classNamePrefix() + \"__is\" + state;\n\n    // Check if this.state is an array, and make it one if not.\n    if (Array.isArray(this.state) == false ) {\n        this.state = [];\n    }\n\n    // This if statement prevents that the same state is being set multiple times\n    if ( !this.hasState(str) ) {\n        this.addClassName(className)\n        this.state.push(state);\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Has state\n * -----------------------------------------------------------------------------\n * Checks if the parameter is already a state and returns true if so. Otherwise false.\n *\n * @param  {string} str                                                         The state which will be checked for\n * @return {boolean}                                                            True if it has the given state, otherwise false\n */\nJss.prototype.hasState = function(str) {\n    if (typeof this.state == \"object\" && this.state.indexOf(str) >= 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Remove state\n * -----------------------------------------------------------------------------\n * Removes the state from the states array, and from the element.className\n *\n * @param  {string} str                                                         The name of the state which should be removed\n * @return {undefined}\n */\nJss.prototype.removeState = function(str) {\n\n    var state      = JssService.toCamelCase(str);\n    var stateIndex = this.state.indexOf(state);\n\n    if (str == \"all\" || typeof str == \"undefined\") {\n        this.removeClassName(\"states\");\n    } else {\n        this.state.splice(stateIndex, 1);\n        if (typeof this.moduleAction != \"undefined\" && this.moduleAction.length > -1) {\n            this.removeClassName(this.classNamePrefix() + \"\" + this.moduleAction + \"__is\" + state);\n        } else {\n            this.removeClassName(this.classNamePrefix() + \"__is\" + state);\n        }\n    }\n}\n\n\n// A simple way to watch variables\n\n// addVar(keyName, value, watch_function)\n// setVar(keyName, value)\n// getVar(keyName)\n// Add -> new\n// Set -> update\n// Get -> return\nvar JssModule = function(){};\n\nJssModule.prototype.type               = \"JssModule\";\nJssModule.prototype.init               = Jss.prototype.init;\nJssModule.prototype.setElement         = Jss.prototype.setElement;\n\n// Triggers\nJssModule.prototype.findTriggers       = Jss.prototype.findTriggers;\nJssModule.prototype.configureTrigger      = Jss.prototype.configureTrigger;\n\n// Actions\n//JssModule.prototype.actions            = Object.create(Jss.prototype.actions);\nJssModule.prototype.validateAction     = Jss.prototype.validateAction;\nJssModule.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssModule.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssModule.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssModule.prototype.setState           = Jss.prototype.setState;\nJssModule.prototype.hasState           = Jss.prototype.hasState;\nJssModule.prototype.removeState        = Jss.prototype.removeState;\n\n// Data attributes\nJssModule.prototype.addData            = Jss.prototype.addData;\nJssModule.prototype.getData            = Jss.prototype.getData;\nJssModule.prototype.setData            = Jss.prototype.setData;\nvar JssTrigger = function(element, options) {\n    this.setElement(element);\n\n    if (typeof options === \"object\") {\n        if (typeof options.module === \"object\") {\n            this.module = options.module;\n        }\n        if (typeof options.moduleName === \"string\") {\n            this.moduleName = options.moduleName;\n        }\n        if (typeof options.triggerName === \"string\") {\n            this.triggerName = options.triggerName;\n        }\n    }\n}\n\n\nJssTrigger.prototype                    = Object.create(Jss.prototype);\nJssTrigger.prototype.type               = \"JssTrigger\";\nJssTrigger.prototype.setElement         = Jss.prototype.setElement;\n\n// Actions\n//JssTrigger.prototype.actions            = Object.create(Jss.prototype.actions);\nJssTrigger.prototype.validateAction     = Jss.prototype.validateAction;\nJssTrigger.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssTrigger.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssTrigger.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssTrigger.prototype.setState           = Jss.prototype.setState;\nJssTrigger.prototype.hasState           = Jss.prototype.hasState;\nJssTrigger.prototype.removeState        = Jss.prototype.removeState;\n\n\n\nvar  JssController = {};\nJssController.modules \t\t= []; // Result array with objects of all the found modules\nJssController.activeModules \t= JssService.activeModules;\n\nJssController.findModules = function() {\n    var allElements = document.getElementsByTagName(\"*\");                       // Array with all domElements\n    var test = [];\n    var self = this;\n    for (var i=0; i < allElements.length; i++) {\n\n        // Set default vars //\n        var element = allElements[i];                                           // Specific domElement\n        var tmp = false;\n\n        // Loop through the (active) modules array and add/instantiate them\n        self.activeModules.forEach(function(module){\n            if (JssService.isModule(element, module)) {\n                tmp = eval(\"new \" + JssService.toCamelCase(module) + \"(element)\"); // Dynamicly load modules\n\n                tmp.setElement(element);                                        // Add the domElement to the module\n                tmp.findTriggers();\t\t\t                                    // Search for module triggers\n\n                tmp.init();\t\t\t\t\t                                    // Executes everything within the init function\n                self.modules.push(tmp);\n\n            }\n        }); // End forEach\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    JssController.findModules();\n    console.log(JssController);\n});"
          },
          "params": [
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "attribute"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "AllLiteral"
              },
              "name": "value"
            },
            {
              "title": "param",
              "description": "dataAttribute {boolean}\n       \t\t\t\t- ajax {string} url",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "options"
            }
          ],
          "name": "setData",
          "kind": "function",
          "memberof": "Jss",
          "scope": "instance",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            "Jss",
            "setData"
          ]
        },
        {
          "description": "-----------------------------------------------------------------------------\nSet data: Ajax\n-----------------------------------------------------------------------------\nMakes a post request to the options.url in a object {attribute: value}\n\n\t\t| Options |\n\t\t- url      {string}                                                     The request url\n\t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.",
          "tags": [
            {
              "title": "name",
              "name": "setDataAjax"
            },
            {
              "title": "kind",
              "kind": "function"
            },
            {
              "title": "memberof",
              "description": "Jss"
            },
            {
              "title": "instance"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 823,
                "column": 0
              },
              "end": {
                "line": 850,
                "column": 0
              }
            },
            "file": "/Users/jeffreyarts/Documents/DEV/jss/lib/jss.js",
            "code": "JssService = {};\n\n// Edit this array to enable or disable default modules\nJssService.activeModules   = []\n\n// Set this to false in a live environment\nJssService.dev             = true;\n\n/**************************\n*\n*   Below are core properties defined, becarefull when you think of changing these...\n*\n**************************/\n\n\nJssService.actions = {\n    hover:      ['hover',    'mouseover',   'onmouseover'                       ], // Fixed\n    click:      ['click',    'onclick'                                          ], // Fixed\n    mouseIn:    ['mousein',  'onmousein', 'mouseenter', 'onmouseenter'          ], // Fixed\n    mouseOut:   ['mouseout', 'onmouseout', 'mouseleave', 'onmouseleave'         ], // Fixed\n    resize:     ['resize',   'onresize'                                         ], // Fixed\n    focus:      ['focus',    'onfocus'                                          ],\n    keyDown:    ['keydown',  'keypress'                                         ],\n    keyUp:      ['keyup',    'keyrelease'                                       ],\n    change:     ['change',   'onchange'                                         ],\n};\n\nJssService.enterDelay = 1000;                                                   // Amount of miliseconds which is used to remove the entered state. (see core.actions) JssService.enterDelay setTimeout\n\nJssService.forbiddenProperties = [\n    'type',\n    'triggers',\n    'configureTrigger',\n    'findTriggers'\n];\n\n/**\n * -----------------------------------------------------------------------------\n * Is Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isModule = function(element, moduleName) {\n    var arr = element.className.split(\" \");\n    var found = false;\n\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i].indexOf(moduleName)        > -1 &&\n            arr[i].indexOf(moduleName + \"_\") == -1 &&\n            arr[i].indexOf(moduleName + \"-\") == -1)\n        {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.addModule = function(moduleName) {\n    this.activeModules.push(this.toKebabCase(moduleName))\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To CamelCase\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toCamelCase = function(input) {\n    var arr, res;\n    res = \"\";\n    if (typeof input === \"string\") {\n        input = input.replace(/\\-/g,\" \");                                       // Replace all dashes with spaces\n        arr = input.split(\" \");\n    } else {\n        arr = input;                                                            // Assume it is an array\n    }\n\n\n\n    var i = 0;\n    for (var i in arr) {\n        if (typeof i != \"undefined\") {\n            res += arr[i][0].toUpperCase()+ arr[i].slice(1); // Capitalize first letter\n        }\n    }\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To kebab-case\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toKebabCase = function(input) {\n    var res, str;\n    res = \"\";\n\n    if (typeof input === \"string\") {\n        str = input;\n    } else {                                                                    // Assume it is an array\n        str = input.join(\" \");\n    }\n\n    // First change it to camelcase\n    str = this.toCamelCase(str);\n\n    var max = str.length;\n    for (var i=0; i < max; i++) {\n        // Check if character is uppercase\n        if (str[i] != str[i].toLowerCase()) {\n            if (i!==0) {\n                str = str.substr(0, i) + \"-\" + str.substr(i);\n                i++;\n            }\n        }\n    }\n\n    return res = str.toLowerCase();\n}\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get option\n * -----------------------------------------------------------------------------\n * @param  {string} name                                                        Keyname in optionList\n * @param  {array} optionList                                                   Array with all possible options\n * @return {}                                                                   Copy of the value (optionsList[name])\n */\nJssService.getOption = function(name, optionList) {\n    if (typeof optionList !== \"object\") {\n        return false;\n    }\n\n    var res;\n\n    switch (name) {\n\n        // Only set `addDefaults` to false when it is explicitly set.\n        case \"addDefaults\":\n            if (optionList[name] !== false || typeof optionList[name] === \"undefined\") {\n                res = true;\n            } else {\n                res = false;\n            }\n        break;\n        case \"fallback\":\n            if ( Array.isArray(optionList[name]) ) {\n                res = optionList[name];\n                if (res.length===0) {\n                    res = false;\n                }\n            } else if (typeof optionList[name] === \"string\"){\n                res = [optionList[name]];\n            }\n        break;\n        default:\n        res = optionList[name]\n    }\n\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Is Trigger\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isTrigger = function(element, moduleName) {\n    if (element.className.indexOf(moduleName + \"--\") > -1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get trigger name\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {string} Name of the trigger.\n */\nJssService.getTriggerName = function(element, moduleName) {\n    if (typeof element != \"object\") {\n        console.error('Required first argument `element` needs to be a domElement.');\n        return false;\n    }\n    if (typeof moduleName != \"string\") {\n        console.error('Required second argument `moduleName` needs to be a string.');\n        return false;\n    }\n\n    // As an example we assume that the value of element.className equals 'b module--triggerName'\n    var startPos = element.className.indexOf(moduleName + \"--\");                    // 2\n    var sliced = element.className.slice(startPos, element.className.length )       // 'module--triggerName'\n    var endPos = sliced.indexOf(\" \");                                               // -1       // not found\n    if (endPos != -1) {                                                             // 19\n        sliced = sliced.slice(0,endPos);                                            // if there is more after the string, this will remove it\n    }\n    return sliced.replace(moduleName + \"--\",\"\")\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger name is allowed\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} True if the triggername is allowed, otherwise false.\n */\nJssService.triggerNameIsAllowed = function(element, moduleName) {\n    if (JssService.forbiddenProperties.indexOf(this.getTriggerName(element, moduleName)) > -1) {      // This triggerName is a core property, throw error\n        console.error('Triggername `' + getTriggerName(element,moduleName) + '` is not allowed. Change the trigger so it does not corresponds any of these: ' + JssService.forbiddenProperties)\n        return false;\n    }\n    return true;\n}\n/**\n * @module Jss\n * @author      Jeffrey Arts <sjeffff@gmail.com>\n * @copyright   2015\n */\nJss = function(){};\n\nJss.prototype.type      = \"Jss\"\nJss.prototype.triggers  = false;\nJss.prototype.element   = undefined;                                              // {obj} domElement\nJss.prototype.state     = undefined;                                              // {str} State of module, is reflected by the css class __isState\n\n/**\n * -----------------------------------------------------------------------------\n * Find Triggers\n * -----------------------------------------------------------------------------\n *\n * @param {domElement} element\n * @return {undefined}\n */\nJss.prototype.findTriggers = function(element) {\n    this.triggers = [];                                                         // If this is not set, all modules will have the same reference point to this.triggers.\n    // Module is created, now look for any module triggers\n    this.searchTriggersRecursiveInnerFunction(this.element)\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger\n * -----------------------------------------------------------------------------\n */\nJss.prototype.trigger = function(which, fn) {\n    if (typeof this.triggers !== \"object\") {\n        console.info(\"No triggers are found, please specify them in the css as `module-name--trigger-name`.\");\n        return false;\n    }\n\n    if (typeof this.triggers[which] !== \"object\") {\n        console.info(\"You are trying to execute a function on a non existing trigger `\" + which + \"`\");\n        return false;\n    }\n\n    for (var i = 0; i < this.triggers[which].length; i++) {\n        fn(this.triggers[which][i])\n    }\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Search triggers recursive inner function\n * -----------------------------------------------------------------------------\n * Recursive function which is executed bij findTriggers;\n *\n * @return {undefined}\n */\nJss.prototype.searchTriggersRecursiveInnerFunction = function(element) {\n    var self = this;\n    if (typeof element == \"undefined\" ) {\n        element = this.element;\n    }\n    if ( element.hasChildNodes() ) {\n        for (var i=0; i < element.childNodes.length; i++) {\n\n            var childElement = element.childNodes[i];                           // Improve readability\n\n            if (childElement.nodeType == 1) {                                   // NodeType 1 == domElement\n\n                if (JssService.isTrigger(childElement, this.moduleName)) {\n\n                    // Add a child element\n                    if (JssService.triggerNameIsAllowed(childElement, this.moduleName)) {\n                        var triggerName = JssService.getTriggerName(childElement, this.moduleName)\n\n                        if (typeof self.triggers[triggerName] !== \"object\") {\n                            self.triggers[triggerName] = [];\n                        }\n\n                        var tmp = new JssTrigger(childElement, {\n                            module: self,\n                            moduleName: this.moduleName,\n                            triggerName: triggerName,\n                        });\n\n                        self.triggers[triggerName].push(tmp);\n                    }\n                }\n                if (childElement.hasChildNodes()) {\n                    self.searchTriggersRecursiveInnerFunction(childElement)\n                }\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Configure Trigger\n * -----------------------------------------------------------------------------\n *\n * @return {undefined}\n */\nJss.prototype.configureTrigger = function(trigger, fn) {\n    if ( typeof this.triggers[trigger] == \"object\") {\n\n        for (var i = 0; i < this.triggers[trigger].length; i++) {\n            //self.triggers[trigger][i]\n            fn(this.triggers[trigger][i]);\n        }\n\n    } else if (JssService.dev) {\n        console.error(\"You are trying to configure a trigger which has no attached domElement\")\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n *   Init\n * -----------------------------------------------------------------------------\n * Notice the user that a init function needs to be added for controlling the triggers\n *\n * @return {undefined}\n */\nJss.prototype.init = function(func) {\n    if (JssService.dev) {\n        console.info(this.moduleName + \": Add a prototype.init function to add triggers and stuff\")\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set element\n * -----------------------------------------------------------------------------\n * Add a domElement to `this`\n *\n * @return {undefined}\n */\nJss.prototype.setElement = function(element) {\n    if (typeof element == \"undefined\") {\n        if (JssService.dev) {\n            return console.error(\"First parameter of setElement needs to be a domElement\");\n        }\n    }\n    this.element = element;\n}\n/*******************************************************************************\n   *\n   *\tActions\n   *\n   *  \t@author      Jeffrey Arts <sjeffff@gmail.com>\n   *    @copyright   2015\n   *\n*******************************************************************************/\n/**\n * -----------------------------------------------------------------------------\n *   Validate action\n * -----------------------------------------------------------------------------\n * Checks if parameter is a valid action, and logs an error when not.\n *\n * @param {string} request                                                      The name of the request\n * @return {boolean} true if a action is valid, otherwise false.\n */\nJss.prototype.validateAction = function(request) {\n    var result;\n    request = this.getActionElement(request).request\n    for (var action in JssService.actions) {\n        if (JssService.actions[action].indexOf(request.toLowerCase()) > -1) {\n            result = action;\n            break;\n        }\n    }\n    if (result) {\n        return result;\n    } else {\n        console.error(\"validateAction: unknown request\", request);\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * \t Add Action\n * -----------------------------------------------------------------------------\n * Adds an action to the object, list of possible requests can be found in Jss.actions\n *\n * | Options\n * \t\t- addDefaults {boolean}                                                 True: add default classes, false: don't\n *\n *\n *\n * @param {string} request                                                      The name of the request\n * @param {function} fn                                                         The function which should be triggered\n * @param {object} options                                                      Object with option parameters\n * @return {boolean} true if a action is succesfully added, otherwise false.\n */\nJss.prototype.addAction = function(request, fn, options) {\n\n    var self        = this;\n    var action      = self.validateAction(request)\n    var actions     = [];\n    var t = self.getActionElement(request);\n    var element     = t.element;\n    var request     = t.request;\n    t = undefined;\n\n    // Options\n    var addDefaults = JssService.getOption(\"addDefaults\", options);\n\n\n\n    switch (action) {\n\n        case \"resize\":\n\n            actions.push(element.addEventListener(\"resize\", fn));\n\n        break;\n\n\n        case \"click\":\n            actions.push(element.addEventListener(\"click\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"click\", function(){\n                    self.setState(\"Clicked\")\n                }));\n                actions.push(window.addEventListener( \"click\", function(event) {\n                    if (event.target != self.element && self.hasState(\"Clicked\")) {\n                        self.removeState(\"Clicked\")\n                    }\n                }));\n            } // End addDefaults\n        break;\n\n\n        case \"change\":\n            actions.push(element.addEventListener(\"change\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"change\", function(){\n                    self.setState(\"Changed\")\n                    setTimeout(function(){self.removeState(\"Changed\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"hover\":\n            actions.push(element.addEventListener(\"mouseover\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseover\", function(){\n                    self.setState(\"Hover\")\n                }));\n                actions.push(element.addEventListener(\"mouseout\",  function(){\n                    self.removeState(\"Hover\")\n                }));\n            }\n        break;\n\n\n        case \"mouseIn\":\n\n            actions.push(element.addEventListener(\"mouseenter\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseenter\", function(){\n                    self.setState(\"MouseIn\")\n                    setTimeout(function(){self.removeState(\"MouseIn\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"mouseOut\":\n\n            actions.push(element.addEventListener(\"mouseleave\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseleave\", function(){\n                    self.setState(\"MouseOut\")\n                    setTimeout(function(){self.removeState(\"MouseOut\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n    }\n\n\n    if (actions.length > 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get action element\n * -----------------------------------------------------------------------------\n * @param  {string} request                                                     The request\n * @return {object}                                                             An object with 2 properties: request && element\n */\nJss.prototype.getActionElement = function(request) {\n    var self = this;\n    var prefix = false;\n    var newRequest  = request;\n    var element = self.element;\n    // Set prefix if it exists\n    if (request.indexOf(\".\") > 0) {\n        var t       = request.split(\".\"),\n        newRequest  = t[1];\n        prefix      = t[0];\n        t = undefined;\n    }\n\n    // Update element according the prefix (or skip it, if not set)\n    if (prefix !== false) {\n        switch (prefix) {\n            case \"screen\":\n            case \"window\":\n                element = window;\n            break;\n        }\n    }\n\n    // Return object\n    return {\n        request: newRequest,\n        element: element\n    }\n}\n/**\n * -----------------------------------------------------------------------------\n * Class name prefix\n * -----------------------------------------------------------------------------\n * The prefix equals the modulename, or - when it's a trigger object - modulename--triggername\n *\n * @return {string} The classname\n */\nJss.prototype.classNamePrefix = function() {\n    if (this.type == \"JssTrigger\") {\n        return this.moduleName + \"--\" + this.triggerName;\n    } else {\n        return this.moduleName;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Remove class name\n * -----------------------------------------------------------------------------\n * Removes the `this.element` classname\n * \t- \"all\" || undefined        > Removes ALL classnames\n *  - \"allStates\" || \"states\"   > Remove all STATES\n *  - all other strings remove that specific string from the className\n *\n * @param {string} input                                                        The classname (case-sensitive) which needs to be removed\n * @return {undefined}\n */\nJss.prototype.removeClassName = function(input) {\n\n    var classList  = [];\n\n    if (input == \"all\" || typeof input == \"undefined\") {\n\n        this.element.className = \"\";\n\n    } else if (input == \"states\" || input == \"allStates\") {\n\n        classList = this.element.className.split(\" \");\n        for (var i in classList) {\n            className = classList[i];\n            if (className.indexOf(\"__is\") > -1) {\n                delete classList[i];\n            }\n        }\n        this.element.className = classList.join(\" \");\n\n    } else if(typeof input == \"string\") {\n        this.element.className = this.element.className.replace(input,\"\");\n    } else {\n        console.error(\"removeClassName: parameter should be a string\");\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Add class name\n * -----------------------------------------------------------------------------\n * Adds a class name by string or array.\n * Does NOT check for duplicates\n *\n * @param  {string} The classname to be added\n * @return {undefined}\n */\nJss.prototype.addClassName = function(data) {\n    this.element.className += \" \";\n    if (typeof data == \"string\") {\n        this.element.className += data;\n    } else {\n        this.element.className += data.join(\" \")\n    }\n}\n\n/**\n * List where the keys corresponds with this[key], and where the value is the function to be executed when the var is changed.\n */\nJss.prototype.setterWatchList = {};\nJss.prototype.getterWatchList = {};\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add data\n * -----------------------------------------------------------------------------\n * Add a (default) value for the given attribute.\n *\n * @param {string} attribute                                                    The name of the attribute (this[attribute])\n * @param {*} value                                                             The value of this[attribute], could be anything...\n * @param {object} options\n *           \t\t- setterWatchFunction {function}\n *           \t\t- getterWatchFunction {function}\n */\nJss.prototype.addData = function(attribute, value, options) {\n\n\n    // watchList[key] = fn;\n    var setterWatchFunction = JssService.getOption('setterWatchFunction', options); // Function\n    var getterWatchFunction = JssService.getOption('getterWatchFunction', options); // Function\n\n    if (typeof setterWatchFunction === \"function\") {\n        this.setterWatchList[attribute] = setterWatchFunction;\n    }\n\n    if (typeof getterWatchFunction === \"function\") {\n        this.getterWatchList[attribute] = getterWatchFunction;\n    }\n\n    // Set the default value\n    return this[attribute] = value;\n}\n\n\n\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- ajax {string} url\n */\nJss.prototype.setData = function(attribute, value, options) {\n\n    this[attribute] = value;\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n\n    if (Array.isArray(fallback)) {\n\n        for (var i = 0; i < fallback.length; i++) {\n            var type = fallback[i];\n\n            if (value && value.length > 0) {\n                this['setData' + JssService.toCamelCase(type)](attribute, value); // Call this.addDataAttribute(value) || this.addDataCookie(value) etc...\n                this[attribute] = value;\n            }\n        }\n    }\n\n    // Call the setter watch function, if defined;\n    if (typeof this.setterWatchList[attribute] === \"function\") { // Use the watchlist to add functionality whenever a data attribute is updated\n        this.setterWatchList[attribute]();\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataDefault {boolean}\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- dataAjax {string} url\n */\nJss.prototype.getData = function(attribute, options) {\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n    var value = false;\n\n\n    if (!fallback) {\n        fallback = ['attribute'];\n    }\n\n\n    for (var i = 0; i < fallback.length; i++) {\n        var type = JssService.toCamelCase(fallback[i]);\n        var customOptions = false;\n\n        if (typeof options == \"object\") {\n            customOptions = options[fallback[i].toLowerCase()];\n        }\n\n        if (!value || value.length < 0) {\n            if (typeof this['getData' + type] !== \"function\") {\n                console.error('this.getData' + type + ' is not a function. Probably ' + type + ' is not a available data option');\n                continue;\n            }\n            value = this['getData' + type]( attribute, customOptions ); // Call this.getDataAttribute(value) || this.getDataCookie(value) || this.getDataAjax(value) etc...\n        }\n    }\n    console.log(this.getterWatchList);\n    // Call the getter watch function, if defined;\n    if (typeof this.getterWatchList[attribute] == \"function\") {\n        this.getterWatchList[attribute]();\n    }\n\n    return this[attribute] = value;\n}\n/**\n * -----------------------------------------------------------------------------\n * Get data: Ajax\n * -----------------------------------------------------------------------------\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n *\n * @param {string} attribute                                                    The NAME of the inner variable (this.NAME), is also used as the key for the GET Request {NAME: value}\n * @param {object} options                                                      Object with parameters used to make a GET request\n * @return {string}                                                             The value of the given attribute, or false if an erro occured.\n */\nJss.prototype.getDataAjax = function(attribute, options) {\n    var url = JssService.getOption(\"url\", options);\n    var jsonKey = JssService.getOption(\"jsonKey\", options) || attribute;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('GET', url);\n\n        return ajaxReturn.success(function(result){\n            if (typeof result === \"object\") {\n                if (result[jsonKey]) {\n                    return result[jsonKey];\n                }\n            }\n        }).error(function(errorObject){\n            console.log(errorObject);\n        });\n    }\n\n    return false;\n};\n\n/**\n * -----------------------------------------------------------------------------\n * Set data: Ajax\n * -----------------------------------------------------------------------------\n * Makes a post request to the options.url in a object {attribute: value}\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n */\nJss.prototype.setDataAjax = function(attribute, value, options) {\n    var url = JssService.getOption(\"url\", options);\n    var requestObject = {}\n        requestObject[attribute] = value;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('POST', url, requestObject);\n\n        return ajaxReturn.success(function(result){\n            return true;\n        }).error(function(errorObject){\n            console.log(errorObject);\n            return false;\n        });\n    }\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Ajax (helper function)\n * -----------------------------------------------------------------------------\n * Based on Atom.js by Todd Motto\n * http://toddmotto.com/writing-a-standalone-ajax-xhr-javascript-micro-library/\n */\nJss.prototype.ajaxHelper = {\n    // Parses json if possible, otherwise just return text\n    parse: function(req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return [result, req];\n    },\n\n    xhr: function(type, url, data) {\n        var ajaxHelper = this;\n\n        var methods = {\n            success: function() {},\n            error: function() {}\n        };\n        var XHR = XMLHttpRequest || ActiveXObject;\n        var request = new XHR('MSXML2.XMLHTTP.3.0');\n        request.open(type, url, true);\n        request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n\n        request.onreadystatechange = function() {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    methods.success.apply(methods, ajaxHelper.parse(request));\n                } else {\n                    methods.error.apply(methods, ajaxHelper.parse(request));\n                }\n            }\n        };\n        request.send(data);\n        return {\n            success: function(callback) {\n                methods.success = callback;\n                return methods;\n            },\n            error: function(callback) {\n                methods.error = callback;\n                return methods;\n            }\n        };\n    }\n};\n\nJss.prototype.ajax = {\n    // Get\n    get: function(src) {\n        console.log(this);\n    },\n\n    // Set\n    put: function(url, data) {\n        return this.ajaxHelper.xhr('PUT', url, data);\n    },\n\n    // Add\n    post: function(url, data) {\n        return this.ajaxHelper.xhr('POST', url, data);\n    }\n\n};\n/**\n * -----------------------------------------------------------------------------\n * Get data attribute value\n * -----------------------------------------------------------------------------\n * Returns the value of the requested attribute. Search first for a data-[ATTRIBUTE] value\n * If not found, it checks for the attribute in the default object. When that is not being\n * found neither, the normal this[attribute] value is being returned.\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME)\n * @return {string}                                                             The value of the given attribute\n */\nJss.prototype.getDataAttribute = function(attribute) {\n\n    return this.element.dataset[attribute];\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Update data attribute\n * -----------------------------------------------------------------------------\n * Set the value to the given attribute. And updates the data-[ATTRIBUTE] value\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME=\"value\")\n * @param {string} value                                                        The VALUE of the data attribute (data-name=\"VALUE\")\n * @return {undefined}\n */\n\nJss.prototype.setDataAttribute = function(attribute, value) {\n\n    // Update data attribute\n    if (typeof value !== \"undefined\") {\n        this.element.dataset[attribute] = this[attribute];\n    } else {\n        delete this.element.dataset[attribute];\n    }\n\n    return true;\n}\nJss.prototype.dataDefaultsCookie = {\n    'expireData': undefined\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get cookie value\n * -----------------------------------------------------------------------------\n * Returns cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @return {string}                                                             The VALUE of the given attribute\n */\nJss.prototype.getDataCookie = function(attribute) {\n\n    if (!attribute) { return null; }\n    return decodeURIComponent(document.cookie.replace(new RegExp(\"(?:(?:^|.*;)\\\\s*\" + encodeURIComponent(attribute).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"), \"$1\")) || null;\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data cookie\n * -----------------------------------------------------------------------------\n * Updates the cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @param {string} value                                                        The VALUE of the cookie\n * @return {undefined}\n */\n\nJss.prototype.setDataCookie = function(attribute, value, options) {\n    var endDate, path, domain, secureConnection;\n\n    if (typeof options === \"object\") {\n        endDate = JssService.getOption('endDate', options);\n        path    = JssService.getOption('path', options);\n        domain  = JssService.getOption('domain', options);\n        secureConnection = JssService.getOption('secureConnection', options);\n    }\n\n    if (!attribute || /^(?:expires|max\\-age|path|domain|secure)$/i.test(attribute)) { return false; }\n    var sExpires = \"\";\n    if (endDate) {\n      switch (endDate.constructor) {\n        case Number:\n          sExpires = endDate === Infinity ? \"; expires=Fri, 31 Dec 9999 23:59:59 GMT\" : \"; max-age=\" + endDate;\n          break;\n        case String:\n          sExpires = \"; expires=\" + endDate;\n          break;\n        case Date:\n          sExpires = \"; expires=\" + endDate.toUTCString();\n          break;\n      }\n    }\n\n    document.cookie = encodeURIComponent(attribute) + \"=\" + encodeURIComponent(value) + sExpires + (domain ? \"; domain=\" + domain : \"\") + (path ? \"; path=\" + path : \"\") + (secureConnection ? \"; secure\" : \"\");\n    return true;\n}\n/*******************************************************************************\n\n    Styles\n\n*******************************************************************************/\n\n/**\n * -----------------------------------------------------------------------------\n * Set height\n * -----------------------------------------------------------------------------\n * Sets the height of the `this.element` by the given input (height)\n *\n * @param  {number} height                                                      The height in pixels or percentage. Where numbers will be calculated to pixels so giving a height of 50 will result in a height of \"50px\". If you want percentages pass the variable with a percentage sign 50 + \"%\"\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setHeight = function(height) {\n    if (typeof height === \"number\") {\n        height += \"px\";\n    }\n\n    if (typeof height !== \"string\") {\n        throw(\"parameter height needs to be a string or integer\");\n    }\n\n    this.element.style.height = height;\n    return true;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get height\n * -----------------------------------------------------------------------------\n * Returns the height of the `this.element`\n *\n * @return {number}                                                             The height of the element in pixels\n */\nJss.prototype.getHeight = function() {\n    return this.element.offsetHeight;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set width\n * -----------------------------------------------------------------------------\n * Sets the width of the `this.element` by the given input (width)\n *\n * @param  {number} width                                                       The width in pixels or percentage. Where numbers will be calculated to pixels so giving a width of 50 will result in a width of \"50px\". If you want to set a percentage, just pass the variable with a percentage sign (\"50%\")\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setWidth = function(width) {\n    if (typeof width == \"number\") {\n        width += \"px\";\n    }\n\n    if (typeof width !== \"string\") {\n        throw(\"parameter width needs to be a string or integer\");\n    }\n    this.element.style.width = width;\n    return true;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get width\n * -----------------------------------------------------------------------------\n * Returns the width of the `this.element`\n *\n * @return {number}                                                             The width of the element in pixels\n */\nJss.prototype.getWidth = function() {\n    return this.element.offsetWidth;\n}\n/**\n * -----------------------------------------------------------------------------\n * Set State\n * -----------------------------------------------------------------------------\n * This updates the state of the object. States are being added to the class name prefix with a double underscore.\n * If you would have the module `envelope` and give it the state `open`. The class name `envelope__open` will be added.\n * Whenever you remove the state `open`, the according class name will be removed as well.\n *\n * @param  {string} str                                                         The name of the state which should be set (this is transformed to CamelCase)\n * @return {boolean}                                                            True on success, otherwise false (might already have the state)\n */\nJss.prototype.setState = function(str) {\n    var element, verifiedState, state, className;\n\n    element         = this.element;\n    state           = JssService.toCamelCase(str);\n    className       = this.classNamePrefix() + \"__is\" + state;\n\n    // Check if this.state is an array, and make it one if not.\n    if (Array.isArray(this.state) == false ) {\n        this.state = [];\n    }\n\n    // This if statement prevents that the same state is being set multiple times\n    if ( !this.hasState(str) ) {\n        this.addClassName(className)\n        this.state.push(state);\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Has state\n * -----------------------------------------------------------------------------\n * Checks if the parameter is already a state and returns true if so. Otherwise false.\n *\n * @param  {string} str                                                         The state which will be checked for\n * @return {boolean}                                                            True if it has the given state, otherwise false\n */\nJss.prototype.hasState = function(str) {\n    if (typeof this.state == \"object\" && this.state.indexOf(str) >= 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Remove state\n * -----------------------------------------------------------------------------\n * Removes the state from the states array, and from the element.className\n *\n * @param  {string} str                                                         The name of the state which should be removed\n * @return {undefined}\n */\nJss.prototype.removeState = function(str) {\n\n    var state      = JssService.toCamelCase(str);\n    var stateIndex = this.state.indexOf(state);\n\n    if (str == \"all\" || typeof str == \"undefined\") {\n        this.removeClassName(\"states\");\n    } else {\n        this.state.splice(stateIndex, 1);\n        if (typeof this.moduleAction != \"undefined\" && this.moduleAction.length > -1) {\n            this.removeClassName(this.classNamePrefix() + \"\" + this.moduleAction + \"__is\" + state);\n        } else {\n            this.removeClassName(this.classNamePrefix() + \"__is\" + state);\n        }\n    }\n}\n\n\n// A simple way to watch variables\n\n// addVar(keyName, value, watch_function)\n// setVar(keyName, value)\n// getVar(keyName)\n// Add -> new\n// Set -> update\n// Get -> return\nvar JssModule = function(){};\n\nJssModule.prototype.type               = \"JssModule\";\nJssModule.prototype.init               = Jss.prototype.init;\nJssModule.prototype.setElement         = Jss.prototype.setElement;\n\n// Triggers\nJssModule.prototype.findTriggers       = Jss.prototype.findTriggers;\nJssModule.prototype.configureTrigger      = Jss.prototype.configureTrigger;\n\n// Actions\n//JssModule.prototype.actions            = Object.create(Jss.prototype.actions);\nJssModule.prototype.validateAction     = Jss.prototype.validateAction;\nJssModule.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssModule.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssModule.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssModule.prototype.setState           = Jss.prototype.setState;\nJssModule.prototype.hasState           = Jss.prototype.hasState;\nJssModule.prototype.removeState        = Jss.prototype.removeState;\n\n// Data attributes\nJssModule.prototype.addData            = Jss.prototype.addData;\nJssModule.prototype.getData            = Jss.prototype.getData;\nJssModule.prototype.setData            = Jss.prototype.setData;\nvar JssTrigger = function(element, options) {\n    this.setElement(element);\n\n    if (typeof options === \"object\") {\n        if (typeof options.module === \"object\") {\n            this.module = options.module;\n        }\n        if (typeof options.moduleName === \"string\") {\n            this.moduleName = options.moduleName;\n        }\n        if (typeof options.triggerName === \"string\") {\n            this.triggerName = options.triggerName;\n        }\n    }\n}\n\n\nJssTrigger.prototype                    = Object.create(Jss.prototype);\nJssTrigger.prototype.type               = \"JssTrigger\";\nJssTrigger.prototype.setElement         = Jss.prototype.setElement;\n\n// Actions\n//JssTrigger.prototype.actions            = Object.create(Jss.prototype.actions);\nJssTrigger.prototype.validateAction     = Jss.prototype.validateAction;\nJssTrigger.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssTrigger.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssTrigger.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssTrigger.prototype.setState           = Jss.prototype.setState;\nJssTrigger.prototype.hasState           = Jss.prototype.hasState;\nJssTrigger.prototype.removeState        = Jss.prototype.removeState;\n\n\n\nvar  JssController = {};\nJssController.modules \t\t= []; // Result array with objects of all the found modules\nJssController.activeModules \t= JssService.activeModules;\n\nJssController.findModules = function() {\n    var allElements = document.getElementsByTagName(\"*\");                       // Array with all domElements\n    var test = [];\n    var self = this;\n    for (var i=0; i < allElements.length; i++) {\n\n        // Set default vars //\n        var element = allElements[i];                                           // Specific domElement\n        var tmp = false;\n\n        // Loop through the (active) modules array and add/instantiate them\n        self.activeModules.forEach(function(module){\n            if (JssService.isModule(element, module)) {\n                tmp = eval(\"new \" + JssService.toCamelCase(module) + \"(element)\"); // Dynamicly load modules\n\n                tmp.setElement(element);                                        // Add the domElement to the module\n                tmp.findTriggers();\t\t\t                                    // Search for module triggers\n\n                tmp.init();\t\t\t\t\t                                    // Executes everything within the init function\n                self.modules.push(tmp);\n\n            }\n        }); // End forEach\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    JssController.findModules();\n    console.log(JssController);\n});"
          },
          "name": "setDataAjax",
          "kind": "function",
          "memberof": "Jss",
          "scope": "instance",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            "Jss",
            "setDataAjax"
          ]
        },
        {
          "description": "-----------------------------------------------------------------------------\nUpdate data attribute\n-----------------------------------------------------------------------------\nSet the value to the given attribute. And updates the data-[ATTRIBUTE] value",
          "tags": [
            {
              "title": "param",
              "description": "The NAME of the data attribute (data-NAME=\"value\")",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "attribute"
            },
            {
              "title": "param",
              "description": "The VALUE of the data attribute (data-name=\"VALUE\")",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "value"
            },
            {
              "title": "returns",
              "description": null,
              "type": {
                "type": "UndefinedLiteral"
              }
            },
            {
              "title": "name",
              "name": "setDataAttribute"
            },
            {
              "title": "kind",
              "kind": "function"
            },
            {
              "title": "memberof",
              "description": "Jss"
            },
            {
              "title": "instance"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 942,
                "column": 0
              },
              "end": {
                "line": 953,
                "column": 0
              }
            },
            "file": "/Users/jeffreyarts/Documents/DEV/jss/lib/jss.js",
            "code": "JssService = {};\n\n// Edit this array to enable or disable default modules\nJssService.activeModules   = []\n\n// Set this to false in a live environment\nJssService.dev             = true;\n\n/**************************\n*\n*   Below are core properties defined, becarefull when you think of changing these...\n*\n**************************/\n\n\nJssService.actions = {\n    hover:      ['hover',    'mouseover',   'onmouseover'                       ], // Fixed\n    click:      ['click',    'onclick'                                          ], // Fixed\n    mouseIn:    ['mousein',  'onmousein', 'mouseenter', 'onmouseenter'          ], // Fixed\n    mouseOut:   ['mouseout', 'onmouseout', 'mouseleave', 'onmouseleave'         ], // Fixed\n    resize:     ['resize',   'onresize'                                         ], // Fixed\n    focus:      ['focus',    'onfocus'                                          ],\n    keyDown:    ['keydown',  'keypress'                                         ],\n    keyUp:      ['keyup',    'keyrelease'                                       ],\n    change:     ['change',   'onchange'                                         ],\n};\n\nJssService.enterDelay = 1000;                                                   // Amount of miliseconds which is used to remove the entered state. (see core.actions) JssService.enterDelay setTimeout\n\nJssService.forbiddenProperties = [\n    'type',\n    'triggers',\n    'configureTrigger',\n    'findTriggers'\n];\n\n/**\n * -----------------------------------------------------------------------------\n * Is Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isModule = function(element, moduleName) {\n    var arr = element.className.split(\" \");\n    var found = false;\n\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i].indexOf(moduleName)        > -1 &&\n            arr[i].indexOf(moduleName + \"_\") == -1 &&\n            arr[i].indexOf(moduleName + \"-\") == -1)\n        {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.addModule = function(moduleName) {\n    this.activeModules.push(this.toKebabCase(moduleName))\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To CamelCase\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toCamelCase = function(input) {\n    var arr, res;\n    res = \"\";\n    if (typeof input === \"string\") {\n        input = input.replace(/\\-/g,\" \");                                       // Replace all dashes with spaces\n        arr = input.split(\" \");\n    } else {\n        arr = input;                                                            // Assume it is an array\n    }\n\n\n\n    var i = 0;\n    for (var i in arr) {\n        if (typeof i != \"undefined\") {\n            res += arr[i][0].toUpperCase()+ arr[i].slice(1); // Capitalize first letter\n        }\n    }\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To kebab-case\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toKebabCase = function(input) {\n    var res, str;\n    res = \"\";\n\n    if (typeof input === \"string\") {\n        str = input;\n    } else {                                                                    // Assume it is an array\n        str = input.join(\" \");\n    }\n\n    // First change it to camelcase\n    str = this.toCamelCase(str);\n\n    var max = str.length;\n    for (var i=0; i < max; i++) {\n        // Check if character is uppercase\n        if (str[i] != str[i].toLowerCase()) {\n            if (i!==0) {\n                str = str.substr(0, i) + \"-\" + str.substr(i);\n                i++;\n            }\n        }\n    }\n\n    return res = str.toLowerCase();\n}\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get option\n * -----------------------------------------------------------------------------\n * @param  {string} name                                                        Keyname in optionList\n * @param  {array} optionList                                                   Array with all possible options\n * @return {}                                                                   Copy of the value (optionsList[name])\n */\nJssService.getOption = function(name, optionList) {\n    if (typeof optionList !== \"object\") {\n        return false;\n    }\n\n    var res;\n\n    switch (name) {\n\n        // Only set `addDefaults` to false when it is explicitly set.\n        case \"addDefaults\":\n            if (optionList[name] !== false || typeof optionList[name] === \"undefined\") {\n                res = true;\n            } else {\n                res = false;\n            }\n        break;\n        case \"fallback\":\n            if ( Array.isArray(optionList[name]) ) {\n                res = optionList[name];\n                if (res.length===0) {\n                    res = false;\n                }\n            } else if (typeof optionList[name] === \"string\"){\n                res = [optionList[name]];\n            }\n        break;\n        default:\n        res = optionList[name]\n    }\n\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Is Trigger\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isTrigger = function(element, moduleName) {\n    if (element.className.indexOf(moduleName + \"--\") > -1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get trigger name\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {string} Name of the trigger.\n */\nJssService.getTriggerName = function(element, moduleName) {\n    if (typeof element != \"object\") {\n        console.error('Required first argument `element` needs to be a domElement.');\n        return false;\n    }\n    if (typeof moduleName != \"string\") {\n        console.error('Required second argument `moduleName` needs to be a string.');\n        return false;\n    }\n\n    // As an example we assume that the value of element.className equals 'b module--triggerName'\n    var startPos = element.className.indexOf(moduleName + \"--\");                    // 2\n    var sliced = element.className.slice(startPos, element.className.length )       // 'module--triggerName'\n    var endPos = sliced.indexOf(\" \");                                               // -1       // not found\n    if (endPos != -1) {                                                             // 19\n        sliced = sliced.slice(0,endPos);                                            // if there is more after the string, this will remove it\n    }\n    return sliced.replace(moduleName + \"--\",\"\")\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger name is allowed\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} True if the triggername is allowed, otherwise false.\n */\nJssService.triggerNameIsAllowed = function(element, moduleName) {\n    if (JssService.forbiddenProperties.indexOf(this.getTriggerName(element, moduleName)) > -1) {      // This triggerName is a core property, throw error\n        console.error('Triggername `' + getTriggerName(element,moduleName) + '` is not allowed. Change the trigger so it does not corresponds any of these: ' + JssService.forbiddenProperties)\n        return false;\n    }\n    return true;\n}\n/**\n * @module Jss\n * @author      Jeffrey Arts <sjeffff@gmail.com>\n * @copyright   2015\n */\nJss = function(){};\n\nJss.prototype.type      = \"Jss\"\nJss.prototype.triggers  = false;\nJss.prototype.element   = undefined;                                              // {obj} domElement\nJss.prototype.state     = undefined;                                              // {str} State of module, is reflected by the css class __isState\n\n/**\n * -----------------------------------------------------------------------------\n * Find Triggers\n * -----------------------------------------------------------------------------\n *\n * @param {domElement} element\n * @return {undefined}\n */\nJss.prototype.findTriggers = function(element) {\n    this.triggers = [];                                                         // If this is not set, all modules will have the same reference point to this.triggers.\n    // Module is created, now look for any module triggers\n    this.searchTriggersRecursiveInnerFunction(this.element)\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger\n * -----------------------------------------------------------------------------\n */\nJss.prototype.trigger = function(which, fn) {\n    if (typeof this.triggers !== \"object\") {\n        console.info(\"No triggers are found, please specify them in the css as `module-name--trigger-name`.\");\n        return false;\n    }\n\n    if (typeof this.triggers[which] !== \"object\") {\n        console.info(\"You are trying to execute a function on a non existing trigger `\" + which + \"`\");\n        return false;\n    }\n\n    for (var i = 0; i < this.triggers[which].length; i++) {\n        fn(this.triggers[which][i])\n    }\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Search triggers recursive inner function\n * -----------------------------------------------------------------------------\n * Recursive function which is executed bij findTriggers;\n *\n * @return {undefined}\n */\nJss.prototype.searchTriggersRecursiveInnerFunction = function(element) {\n    var self = this;\n    if (typeof element == \"undefined\" ) {\n        element = this.element;\n    }\n    if ( element.hasChildNodes() ) {\n        for (var i=0; i < element.childNodes.length; i++) {\n\n            var childElement = element.childNodes[i];                           // Improve readability\n\n            if (childElement.nodeType == 1) {                                   // NodeType 1 == domElement\n\n                if (JssService.isTrigger(childElement, this.moduleName)) {\n\n                    // Add a child element\n                    if (JssService.triggerNameIsAllowed(childElement, this.moduleName)) {\n                        var triggerName = JssService.getTriggerName(childElement, this.moduleName)\n\n                        if (typeof self.triggers[triggerName] !== \"object\") {\n                            self.triggers[triggerName] = [];\n                        }\n\n                        var tmp = new JssTrigger(childElement, {\n                            module: self,\n                            moduleName: this.moduleName,\n                            triggerName: triggerName,\n                        });\n\n                        self.triggers[triggerName].push(tmp);\n                    }\n                }\n                if (childElement.hasChildNodes()) {\n                    self.searchTriggersRecursiveInnerFunction(childElement)\n                }\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Configure Trigger\n * -----------------------------------------------------------------------------\n *\n * @return {undefined}\n */\nJss.prototype.configureTrigger = function(trigger, fn) {\n    if ( typeof this.triggers[trigger] == \"object\") {\n\n        for (var i = 0; i < this.triggers[trigger].length; i++) {\n            //self.triggers[trigger][i]\n            fn(this.triggers[trigger][i]);\n        }\n\n    } else if (JssService.dev) {\n        console.error(\"You are trying to configure a trigger which has no attached domElement\")\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n *   Init\n * -----------------------------------------------------------------------------\n * Notice the user that a init function needs to be added for controlling the triggers\n *\n * @return {undefined}\n */\nJss.prototype.init = function(func) {\n    if (JssService.dev) {\n        console.info(this.moduleName + \": Add a prototype.init function to add triggers and stuff\")\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set element\n * -----------------------------------------------------------------------------\n * Add a domElement to `this`\n *\n * @return {undefined}\n */\nJss.prototype.setElement = function(element) {\n    if (typeof element == \"undefined\") {\n        if (JssService.dev) {\n            return console.error(\"First parameter of setElement needs to be a domElement\");\n        }\n    }\n    this.element = element;\n}\n/*******************************************************************************\n   *\n   *\tActions\n   *\n   *  \t@author      Jeffrey Arts <sjeffff@gmail.com>\n   *    @copyright   2015\n   *\n*******************************************************************************/\n/**\n * -----------------------------------------------------------------------------\n *   Validate action\n * -----------------------------------------------------------------------------\n * Checks if parameter is a valid action, and logs an error when not.\n *\n * @param {string} request                                                      The name of the request\n * @return {boolean} true if a action is valid, otherwise false.\n */\nJss.prototype.validateAction = function(request) {\n    var result;\n    request = this.getActionElement(request).request\n    for (var action in JssService.actions) {\n        if (JssService.actions[action].indexOf(request.toLowerCase()) > -1) {\n            result = action;\n            break;\n        }\n    }\n    if (result) {\n        return result;\n    } else {\n        console.error(\"validateAction: unknown request\", request);\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * \t Add Action\n * -----------------------------------------------------------------------------\n * Adds an action to the object, list of possible requests can be found in Jss.actions\n *\n * | Options\n * \t\t- addDefaults {boolean}                                                 True: add default classes, false: don't\n *\n *\n *\n * @param {string} request                                                      The name of the request\n * @param {function} fn                                                         The function which should be triggered\n * @param {object} options                                                      Object with option parameters\n * @return {boolean} true if a action is succesfully added, otherwise false.\n */\nJss.prototype.addAction = function(request, fn, options) {\n\n    var self        = this;\n    var action      = self.validateAction(request)\n    var actions     = [];\n    var t = self.getActionElement(request);\n    var element     = t.element;\n    var request     = t.request;\n    t = undefined;\n\n    // Options\n    var addDefaults = JssService.getOption(\"addDefaults\", options);\n\n\n\n    switch (action) {\n\n        case \"resize\":\n\n            actions.push(element.addEventListener(\"resize\", fn));\n\n        break;\n\n\n        case \"click\":\n            actions.push(element.addEventListener(\"click\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"click\", function(){\n                    self.setState(\"Clicked\")\n                }));\n                actions.push(window.addEventListener( \"click\", function(event) {\n                    if (event.target != self.element && self.hasState(\"Clicked\")) {\n                        self.removeState(\"Clicked\")\n                    }\n                }));\n            } // End addDefaults\n        break;\n\n\n        case \"change\":\n            actions.push(element.addEventListener(\"change\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"change\", function(){\n                    self.setState(\"Changed\")\n                    setTimeout(function(){self.removeState(\"Changed\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"hover\":\n            actions.push(element.addEventListener(\"mouseover\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseover\", function(){\n                    self.setState(\"Hover\")\n                }));\n                actions.push(element.addEventListener(\"mouseout\",  function(){\n                    self.removeState(\"Hover\")\n                }));\n            }\n        break;\n\n\n        case \"mouseIn\":\n\n            actions.push(element.addEventListener(\"mouseenter\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseenter\", function(){\n                    self.setState(\"MouseIn\")\n                    setTimeout(function(){self.removeState(\"MouseIn\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"mouseOut\":\n\n            actions.push(element.addEventListener(\"mouseleave\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseleave\", function(){\n                    self.setState(\"MouseOut\")\n                    setTimeout(function(){self.removeState(\"MouseOut\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n    }\n\n\n    if (actions.length > 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get action element\n * -----------------------------------------------------------------------------\n * @param  {string} request                                                     The request\n * @return {object}                                                             An object with 2 properties: request && element\n */\nJss.prototype.getActionElement = function(request) {\n    var self = this;\n    var prefix = false;\n    var newRequest  = request;\n    var element = self.element;\n    // Set prefix if it exists\n    if (request.indexOf(\".\") > 0) {\n        var t       = request.split(\".\"),\n        newRequest  = t[1];\n        prefix      = t[0];\n        t = undefined;\n    }\n\n    // Update element according the prefix (or skip it, if not set)\n    if (prefix !== false) {\n        switch (prefix) {\n            case \"screen\":\n            case \"window\":\n                element = window;\n            break;\n        }\n    }\n\n    // Return object\n    return {\n        request: newRequest,\n        element: element\n    }\n}\n/**\n * -----------------------------------------------------------------------------\n * Class name prefix\n * -----------------------------------------------------------------------------\n * The prefix equals the modulename, or - when it's a trigger object - modulename--triggername\n *\n * @return {string} The classname\n */\nJss.prototype.classNamePrefix = function() {\n    if (this.type == \"JssTrigger\") {\n        return this.moduleName + \"--\" + this.triggerName;\n    } else {\n        return this.moduleName;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Remove class name\n * -----------------------------------------------------------------------------\n * Removes the `this.element` classname\n * \t- \"all\" || undefined        > Removes ALL classnames\n *  - \"allStates\" || \"states\"   > Remove all STATES\n *  - all other strings remove that specific string from the className\n *\n * @param {string} input                                                        The classname (case-sensitive) which needs to be removed\n * @return {undefined}\n */\nJss.prototype.removeClassName = function(input) {\n\n    var classList  = [];\n\n    if (input == \"all\" || typeof input == \"undefined\") {\n\n        this.element.className = \"\";\n\n    } else if (input == \"states\" || input == \"allStates\") {\n\n        classList = this.element.className.split(\" \");\n        for (var i in classList) {\n            className = classList[i];\n            if (className.indexOf(\"__is\") > -1) {\n                delete classList[i];\n            }\n        }\n        this.element.className = classList.join(\" \");\n\n    } else if(typeof input == \"string\") {\n        this.element.className = this.element.className.replace(input,\"\");\n    } else {\n        console.error(\"removeClassName: parameter should be a string\");\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Add class name\n * -----------------------------------------------------------------------------\n * Adds a class name by string or array.\n * Does NOT check for duplicates\n *\n * @param  {string} The classname to be added\n * @return {undefined}\n */\nJss.prototype.addClassName = function(data) {\n    this.element.className += \" \";\n    if (typeof data == \"string\") {\n        this.element.className += data;\n    } else {\n        this.element.className += data.join(\" \")\n    }\n}\n\n/**\n * List where the keys corresponds with this[key], and where the value is the function to be executed when the var is changed.\n */\nJss.prototype.setterWatchList = {};\nJss.prototype.getterWatchList = {};\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add data\n * -----------------------------------------------------------------------------\n * Add a (default) value for the given attribute.\n *\n * @param {string} attribute                                                    The name of the attribute (this[attribute])\n * @param {*} value                                                             The value of this[attribute], could be anything...\n * @param {object} options\n *           \t\t- setterWatchFunction {function}\n *           \t\t- getterWatchFunction {function}\n */\nJss.prototype.addData = function(attribute, value, options) {\n\n\n    // watchList[key] = fn;\n    var setterWatchFunction = JssService.getOption('setterWatchFunction', options); // Function\n    var getterWatchFunction = JssService.getOption('getterWatchFunction', options); // Function\n\n    if (typeof setterWatchFunction === \"function\") {\n        this.setterWatchList[attribute] = setterWatchFunction;\n    }\n\n    if (typeof getterWatchFunction === \"function\") {\n        this.getterWatchList[attribute] = getterWatchFunction;\n    }\n\n    // Set the default value\n    return this[attribute] = value;\n}\n\n\n\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- ajax {string} url\n */\nJss.prototype.setData = function(attribute, value, options) {\n\n    this[attribute] = value;\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n\n    if (Array.isArray(fallback)) {\n\n        for (var i = 0; i < fallback.length; i++) {\n            var type = fallback[i];\n\n            if (value && value.length > 0) {\n                this['setData' + JssService.toCamelCase(type)](attribute, value); // Call this.addDataAttribute(value) || this.addDataCookie(value) etc...\n                this[attribute] = value;\n            }\n        }\n    }\n\n    // Call the setter watch function, if defined;\n    if (typeof this.setterWatchList[attribute] === \"function\") { // Use the watchlist to add functionality whenever a data attribute is updated\n        this.setterWatchList[attribute]();\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataDefault {boolean}\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- dataAjax {string} url\n */\nJss.prototype.getData = function(attribute, options) {\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n    var value = false;\n\n\n    if (!fallback) {\n        fallback = ['attribute'];\n    }\n\n\n    for (var i = 0; i < fallback.length; i++) {\n        var type = JssService.toCamelCase(fallback[i]);\n        var customOptions = false;\n\n        if (typeof options == \"object\") {\n            customOptions = options[fallback[i].toLowerCase()];\n        }\n\n        if (!value || value.length < 0) {\n            if (typeof this['getData' + type] !== \"function\") {\n                console.error('this.getData' + type + ' is not a function. Probably ' + type + ' is not a available data option');\n                continue;\n            }\n            value = this['getData' + type]( attribute, customOptions ); // Call this.getDataAttribute(value) || this.getDataCookie(value) || this.getDataAjax(value) etc...\n        }\n    }\n    console.log(this.getterWatchList);\n    // Call the getter watch function, if defined;\n    if (typeof this.getterWatchList[attribute] == \"function\") {\n        this.getterWatchList[attribute]();\n    }\n\n    return this[attribute] = value;\n}\n/**\n * -----------------------------------------------------------------------------\n * Get data: Ajax\n * -----------------------------------------------------------------------------\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n *\n * @param {string} attribute                                                    The NAME of the inner variable (this.NAME), is also used as the key for the GET Request {NAME: value}\n * @param {object} options                                                      Object with parameters used to make a GET request\n * @return {string}                                                             The value of the given attribute, or false if an erro occured.\n */\nJss.prototype.getDataAjax = function(attribute, options) {\n    var url = JssService.getOption(\"url\", options);\n    var jsonKey = JssService.getOption(\"jsonKey\", options) || attribute;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('GET', url);\n\n        return ajaxReturn.success(function(result){\n            if (typeof result === \"object\") {\n                if (result[jsonKey]) {\n                    return result[jsonKey];\n                }\n            }\n        }).error(function(errorObject){\n            console.log(errorObject);\n        });\n    }\n\n    return false;\n};\n\n/**\n * -----------------------------------------------------------------------------\n * Set data: Ajax\n * -----------------------------------------------------------------------------\n * Makes a post request to the options.url in a object {attribute: value}\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n */\nJss.prototype.setDataAjax = function(attribute, value, options) {\n    var url = JssService.getOption(\"url\", options);\n    var requestObject = {}\n        requestObject[attribute] = value;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('POST', url, requestObject);\n\n        return ajaxReturn.success(function(result){\n            return true;\n        }).error(function(errorObject){\n            console.log(errorObject);\n            return false;\n        });\n    }\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Ajax (helper function)\n * -----------------------------------------------------------------------------\n * Based on Atom.js by Todd Motto\n * http://toddmotto.com/writing-a-standalone-ajax-xhr-javascript-micro-library/\n */\nJss.prototype.ajaxHelper = {\n    // Parses json if possible, otherwise just return text\n    parse: function(req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return [result, req];\n    },\n\n    xhr: function(type, url, data) {\n        var ajaxHelper = this;\n\n        var methods = {\n            success: function() {},\n            error: function() {}\n        };\n        var XHR = XMLHttpRequest || ActiveXObject;\n        var request = new XHR('MSXML2.XMLHTTP.3.0');\n        request.open(type, url, true);\n        request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n\n        request.onreadystatechange = function() {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    methods.success.apply(methods, ajaxHelper.parse(request));\n                } else {\n                    methods.error.apply(methods, ajaxHelper.parse(request));\n                }\n            }\n        };\n        request.send(data);\n        return {\n            success: function(callback) {\n                methods.success = callback;\n                return methods;\n            },\n            error: function(callback) {\n                methods.error = callback;\n                return methods;\n            }\n        };\n    }\n};\n\nJss.prototype.ajax = {\n    // Get\n    get: function(src) {\n        console.log(this);\n    },\n\n    // Set\n    put: function(url, data) {\n        return this.ajaxHelper.xhr('PUT', url, data);\n    },\n\n    // Add\n    post: function(url, data) {\n        return this.ajaxHelper.xhr('POST', url, data);\n    }\n\n};\n/**\n * -----------------------------------------------------------------------------\n * Get data attribute value\n * -----------------------------------------------------------------------------\n * Returns the value of the requested attribute. Search first for a data-[ATTRIBUTE] value\n * If not found, it checks for the attribute in the default object. When that is not being\n * found neither, the normal this[attribute] value is being returned.\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME)\n * @return {string}                                                             The value of the given attribute\n */\nJss.prototype.getDataAttribute = function(attribute) {\n\n    return this.element.dataset[attribute];\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Update data attribute\n * -----------------------------------------------------------------------------\n * Set the value to the given attribute. And updates the data-[ATTRIBUTE] value\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME=\"value\")\n * @param {string} value                                                        The VALUE of the data attribute (data-name=\"VALUE\")\n * @return {undefined}\n */\n\nJss.prototype.setDataAttribute = function(attribute, value) {\n\n    // Update data attribute\n    if (typeof value !== \"undefined\") {\n        this.element.dataset[attribute] = this[attribute];\n    } else {\n        delete this.element.dataset[attribute];\n    }\n\n    return true;\n}\nJss.prototype.dataDefaultsCookie = {\n    'expireData': undefined\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get cookie value\n * -----------------------------------------------------------------------------\n * Returns cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @return {string}                                                             The VALUE of the given attribute\n */\nJss.prototype.getDataCookie = function(attribute) {\n\n    if (!attribute) { return null; }\n    return decodeURIComponent(document.cookie.replace(new RegExp(\"(?:(?:^|.*;)\\\\s*\" + encodeURIComponent(attribute).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"), \"$1\")) || null;\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data cookie\n * -----------------------------------------------------------------------------\n * Updates the cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @param {string} value                                                        The VALUE of the cookie\n * @return {undefined}\n */\n\nJss.prototype.setDataCookie = function(attribute, value, options) {\n    var endDate, path, domain, secureConnection;\n\n    if (typeof options === \"object\") {\n        endDate = JssService.getOption('endDate', options);\n        path    = JssService.getOption('path', options);\n        domain  = JssService.getOption('domain', options);\n        secureConnection = JssService.getOption('secureConnection', options);\n    }\n\n    if (!attribute || /^(?:expires|max\\-age|path|domain|secure)$/i.test(attribute)) { return false; }\n    var sExpires = \"\";\n    if (endDate) {\n      switch (endDate.constructor) {\n        case Number:\n          sExpires = endDate === Infinity ? \"; expires=Fri, 31 Dec 9999 23:59:59 GMT\" : \"; max-age=\" + endDate;\n          break;\n        case String:\n          sExpires = \"; expires=\" + endDate;\n          break;\n        case Date:\n          sExpires = \"; expires=\" + endDate.toUTCString();\n          break;\n      }\n    }\n\n    document.cookie = encodeURIComponent(attribute) + \"=\" + encodeURIComponent(value) + sExpires + (domain ? \"; domain=\" + domain : \"\") + (path ? \"; path=\" + path : \"\") + (secureConnection ? \"; secure\" : \"\");\n    return true;\n}\n/*******************************************************************************\n\n    Styles\n\n*******************************************************************************/\n\n/**\n * -----------------------------------------------------------------------------\n * Set height\n * -----------------------------------------------------------------------------\n * Sets the height of the `this.element` by the given input (height)\n *\n * @param  {number} height                                                      The height in pixels or percentage. Where numbers will be calculated to pixels so giving a height of 50 will result in a height of \"50px\". If you want percentages pass the variable with a percentage sign 50 + \"%\"\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setHeight = function(height) {\n    if (typeof height === \"number\") {\n        height += \"px\";\n    }\n\n    if (typeof height !== \"string\") {\n        throw(\"parameter height needs to be a string or integer\");\n    }\n\n    this.element.style.height = height;\n    return true;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get height\n * -----------------------------------------------------------------------------\n * Returns the height of the `this.element`\n *\n * @return {number}                                                             The height of the element in pixels\n */\nJss.prototype.getHeight = function() {\n    return this.element.offsetHeight;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set width\n * -----------------------------------------------------------------------------\n * Sets the width of the `this.element` by the given input (width)\n *\n * @param  {number} width                                                       The width in pixels or percentage. Where numbers will be calculated to pixels so giving a width of 50 will result in a width of \"50px\". If you want to set a percentage, just pass the variable with a percentage sign (\"50%\")\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setWidth = function(width) {\n    if (typeof width == \"number\") {\n        width += \"px\";\n    }\n\n    if (typeof width !== \"string\") {\n        throw(\"parameter width needs to be a string or integer\");\n    }\n    this.element.style.width = width;\n    return true;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get width\n * -----------------------------------------------------------------------------\n * Returns the width of the `this.element`\n *\n * @return {number}                                                             The width of the element in pixels\n */\nJss.prototype.getWidth = function() {\n    return this.element.offsetWidth;\n}\n/**\n * -----------------------------------------------------------------------------\n * Set State\n * -----------------------------------------------------------------------------\n * This updates the state of the object. States are being added to the class name prefix with a double underscore.\n * If you would have the module `envelope` and give it the state `open`. The class name `envelope__open` will be added.\n * Whenever you remove the state `open`, the according class name will be removed as well.\n *\n * @param  {string} str                                                         The name of the state which should be set (this is transformed to CamelCase)\n * @return {boolean}                                                            True on success, otherwise false (might already have the state)\n */\nJss.prototype.setState = function(str) {\n    var element, verifiedState, state, className;\n\n    element         = this.element;\n    state           = JssService.toCamelCase(str);\n    className       = this.classNamePrefix() + \"__is\" + state;\n\n    // Check if this.state is an array, and make it one if not.\n    if (Array.isArray(this.state) == false ) {\n        this.state = [];\n    }\n\n    // This if statement prevents that the same state is being set multiple times\n    if ( !this.hasState(str) ) {\n        this.addClassName(className)\n        this.state.push(state);\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Has state\n * -----------------------------------------------------------------------------\n * Checks if the parameter is already a state and returns true if so. Otherwise false.\n *\n * @param  {string} str                                                         The state which will be checked for\n * @return {boolean}                                                            True if it has the given state, otherwise false\n */\nJss.prototype.hasState = function(str) {\n    if (typeof this.state == \"object\" && this.state.indexOf(str) >= 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Remove state\n * -----------------------------------------------------------------------------\n * Removes the state from the states array, and from the element.className\n *\n * @param  {string} str                                                         The name of the state which should be removed\n * @return {undefined}\n */\nJss.prototype.removeState = function(str) {\n\n    var state      = JssService.toCamelCase(str);\n    var stateIndex = this.state.indexOf(state);\n\n    if (str == \"all\" || typeof str == \"undefined\") {\n        this.removeClassName(\"states\");\n    } else {\n        this.state.splice(stateIndex, 1);\n        if (typeof this.moduleAction != \"undefined\" && this.moduleAction.length > -1) {\n            this.removeClassName(this.classNamePrefix() + \"\" + this.moduleAction + \"__is\" + state);\n        } else {\n            this.removeClassName(this.classNamePrefix() + \"__is\" + state);\n        }\n    }\n}\n\n\n// A simple way to watch variables\n\n// addVar(keyName, value, watch_function)\n// setVar(keyName, value)\n// getVar(keyName)\n// Add -> new\n// Set -> update\n// Get -> return\nvar JssModule = function(){};\n\nJssModule.prototype.type               = \"JssModule\";\nJssModule.prototype.init               = Jss.prototype.init;\nJssModule.prototype.setElement         = Jss.prototype.setElement;\n\n// Triggers\nJssModule.prototype.findTriggers       = Jss.prototype.findTriggers;\nJssModule.prototype.configureTrigger      = Jss.prototype.configureTrigger;\n\n// Actions\n//JssModule.prototype.actions            = Object.create(Jss.prototype.actions);\nJssModule.prototype.validateAction     = Jss.prototype.validateAction;\nJssModule.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssModule.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssModule.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssModule.prototype.setState           = Jss.prototype.setState;\nJssModule.prototype.hasState           = Jss.prototype.hasState;\nJssModule.prototype.removeState        = Jss.prototype.removeState;\n\n// Data attributes\nJssModule.prototype.addData            = Jss.prototype.addData;\nJssModule.prototype.getData            = Jss.prototype.getData;\nJssModule.prototype.setData            = Jss.prototype.setData;\nvar JssTrigger = function(element, options) {\n    this.setElement(element);\n\n    if (typeof options === \"object\") {\n        if (typeof options.module === \"object\") {\n            this.module = options.module;\n        }\n        if (typeof options.moduleName === \"string\") {\n            this.moduleName = options.moduleName;\n        }\n        if (typeof options.triggerName === \"string\") {\n            this.triggerName = options.triggerName;\n        }\n    }\n}\n\n\nJssTrigger.prototype                    = Object.create(Jss.prototype);\nJssTrigger.prototype.type               = \"JssTrigger\";\nJssTrigger.prototype.setElement         = Jss.prototype.setElement;\n\n// Actions\n//JssTrigger.prototype.actions            = Object.create(Jss.prototype.actions);\nJssTrigger.prototype.validateAction     = Jss.prototype.validateAction;\nJssTrigger.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssTrigger.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssTrigger.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssTrigger.prototype.setState           = Jss.prototype.setState;\nJssTrigger.prototype.hasState           = Jss.prototype.hasState;\nJssTrigger.prototype.removeState        = Jss.prototype.removeState;\n\n\n\nvar  JssController = {};\nJssController.modules \t\t= []; // Result array with objects of all the found modules\nJssController.activeModules \t= JssService.activeModules;\n\nJssController.findModules = function() {\n    var allElements = document.getElementsByTagName(\"*\");                       // Array with all domElements\n    var test = [];\n    var self = this;\n    for (var i=0; i < allElements.length; i++) {\n\n        // Set default vars //\n        var element = allElements[i];                                           // Specific domElement\n        var tmp = false;\n\n        // Loop through the (active) modules array and add/instantiate them\n        self.activeModules.forEach(function(module){\n            if (JssService.isModule(element, module)) {\n                tmp = eval(\"new \" + JssService.toCamelCase(module) + \"(element)\"); // Dynamicly load modules\n\n                tmp.setElement(element);                                        // Add the domElement to the module\n                tmp.findTriggers();\t\t\t                                    // Search for module triggers\n\n                tmp.init();\t\t\t\t\t                                    // Executes everything within the init function\n                self.modules.push(tmp);\n\n            }\n        }); // End forEach\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    JssController.findModules();\n    console.log(JssController);\n});"
          },
          "params": [
            {
              "title": "param",
              "description": "The NAME of the data attribute (data-NAME=\"value\")",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "attribute"
            },
            {
              "title": "param",
              "description": "The VALUE of the data attribute (data-name=\"VALUE\")",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "value"
            }
          ],
          "returns": [
            {
              "title": "returns",
              "description": null,
              "type": {
                "type": "UndefinedLiteral"
              }
            }
          ],
          "name": "setDataAttribute",
          "kind": "function",
          "memberof": "Jss",
          "scope": "instance",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            "Jss",
            "setDataAttribute"
          ]
        },
        {
          "description": "-----------------------------------------------------------------------------\nSet data cookie\n-----------------------------------------------------------------------------\nUpdates the cookie value.\nOriginal code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)",
          "tags": [
            {
              "title": "param",
              "description": "The NAME of the cookie",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "attribute"
            },
            {
              "title": "param",
              "description": "The VALUE of the cookie",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "value"
            },
            {
              "title": "returns",
              "description": null,
              "type": {
                "type": "UndefinedLiteral"
              }
            },
            {
              "title": "name",
              "name": "setDataCookie"
            },
            {
              "title": "kind",
              "kind": "function"
            },
            {
              "title": "memberof",
              "description": "Jss"
            },
            {
              "title": "instance"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 987,
                "column": 0
              },
              "end": {
                "line": 1031,
                "column": 0
              }
            },
            "file": "/Users/jeffreyarts/Documents/DEV/jss/lib/jss.js",
            "code": "JssService = {};\n\n// Edit this array to enable or disable default modules\nJssService.activeModules   = []\n\n// Set this to false in a live environment\nJssService.dev             = true;\n\n/**************************\n*\n*   Below are core properties defined, becarefull when you think of changing these...\n*\n**************************/\n\n\nJssService.actions = {\n    hover:      ['hover',    'mouseover',   'onmouseover'                       ], // Fixed\n    click:      ['click',    'onclick'                                          ], // Fixed\n    mouseIn:    ['mousein',  'onmousein', 'mouseenter', 'onmouseenter'          ], // Fixed\n    mouseOut:   ['mouseout', 'onmouseout', 'mouseleave', 'onmouseleave'         ], // Fixed\n    resize:     ['resize',   'onresize'                                         ], // Fixed\n    focus:      ['focus',    'onfocus'                                          ],\n    keyDown:    ['keydown',  'keypress'                                         ],\n    keyUp:      ['keyup',    'keyrelease'                                       ],\n    change:     ['change',   'onchange'                                         ],\n};\n\nJssService.enterDelay = 1000;                                                   // Amount of miliseconds which is used to remove the entered state. (see core.actions) JssService.enterDelay setTimeout\n\nJssService.forbiddenProperties = [\n    'type',\n    'triggers',\n    'configureTrigger',\n    'findTriggers'\n];\n\n/**\n * -----------------------------------------------------------------------------\n * Is Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isModule = function(element, moduleName) {\n    var arr = element.className.split(\" \");\n    var found = false;\n\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i].indexOf(moduleName)        > -1 &&\n            arr[i].indexOf(moduleName + \"_\") == -1 &&\n            arr[i].indexOf(moduleName + \"-\") == -1)\n        {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.addModule = function(moduleName) {\n    this.activeModules.push(this.toKebabCase(moduleName))\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To CamelCase\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toCamelCase = function(input) {\n    var arr, res;\n    res = \"\";\n    if (typeof input === \"string\") {\n        input = input.replace(/\\-/g,\" \");                                       // Replace all dashes with spaces\n        arr = input.split(\" \");\n    } else {\n        arr = input;                                                            // Assume it is an array\n    }\n\n\n\n    var i = 0;\n    for (var i in arr) {\n        if (typeof i != \"undefined\") {\n            res += arr[i][0].toUpperCase()+ arr[i].slice(1); // Capitalize first letter\n        }\n    }\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To kebab-case\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toKebabCase = function(input) {\n    var res, str;\n    res = \"\";\n\n    if (typeof input === \"string\") {\n        str = input;\n    } else {                                                                    // Assume it is an array\n        str = input.join(\" \");\n    }\n\n    // First change it to camelcase\n    str = this.toCamelCase(str);\n\n    var max = str.length;\n    for (var i=0; i < max; i++) {\n        // Check if character is uppercase\n        if (str[i] != str[i].toLowerCase()) {\n            if (i!==0) {\n                str = str.substr(0, i) + \"-\" + str.substr(i);\n                i++;\n            }\n        }\n    }\n\n    return res = str.toLowerCase();\n}\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get option\n * -----------------------------------------------------------------------------\n * @param  {string} name                                                        Keyname in optionList\n * @param  {array} optionList                                                   Array with all possible options\n * @return {}                                                                   Copy of the value (optionsList[name])\n */\nJssService.getOption = function(name, optionList) {\n    if (typeof optionList !== \"object\") {\n        return false;\n    }\n\n    var res;\n\n    switch (name) {\n\n        // Only set `addDefaults` to false when it is explicitly set.\n        case \"addDefaults\":\n            if (optionList[name] !== false || typeof optionList[name] === \"undefined\") {\n                res = true;\n            } else {\n                res = false;\n            }\n        break;\n        case \"fallback\":\n            if ( Array.isArray(optionList[name]) ) {\n                res = optionList[name];\n                if (res.length===0) {\n                    res = false;\n                }\n            } else if (typeof optionList[name] === \"string\"){\n                res = [optionList[name]];\n            }\n        break;\n        default:\n        res = optionList[name]\n    }\n\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Is Trigger\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isTrigger = function(element, moduleName) {\n    if (element.className.indexOf(moduleName + \"--\") > -1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get trigger name\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {string} Name of the trigger.\n */\nJssService.getTriggerName = function(element, moduleName) {\n    if (typeof element != \"object\") {\n        console.error('Required first argument `element` needs to be a domElement.');\n        return false;\n    }\n    if (typeof moduleName != \"string\") {\n        console.error('Required second argument `moduleName` needs to be a string.');\n        return false;\n    }\n\n    // As an example we assume that the value of element.className equals 'b module--triggerName'\n    var startPos = element.className.indexOf(moduleName + \"--\");                    // 2\n    var sliced = element.className.slice(startPos, element.className.length )       // 'module--triggerName'\n    var endPos = sliced.indexOf(\" \");                                               // -1       // not found\n    if (endPos != -1) {                                                             // 19\n        sliced = sliced.slice(0,endPos);                                            // if there is more after the string, this will remove it\n    }\n    return sliced.replace(moduleName + \"--\",\"\")\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger name is allowed\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} True if the triggername is allowed, otherwise false.\n */\nJssService.triggerNameIsAllowed = function(element, moduleName) {\n    if (JssService.forbiddenProperties.indexOf(this.getTriggerName(element, moduleName)) > -1) {      // This triggerName is a core property, throw error\n        console.error('Triggername `' + getTriggerName(element,moduleName) + '` is not allowed. Change the trigger so it does not corresponds any of these: ' + JssService.forbiddenProperties)\n        return false;\n    }\n    return true;\n}\n/**\n * @module Jss\n * @author      Jeffrey Arts <sjeffff@gmail.com>\n * @copyright   2015\n */\nJss = function(){};\n\nJss.prototype.type      = \"Jss\"\nJss.prototype.triggers  = false;\nJss.prototype.element   = undefined;                                              // {obj} domElement\nJss.prototype.state     = undefined;                                              // {str} State of module, is reflected by the css class __isState\n\n/**\n * -----------------------------------------------------------------------------\n * Find Triggers\n * -----------------------------------------------------------------------------\n *\n * @param {domElement} element\n * @return {undefined}\n */\nJss.prototype.findTriggers = function(element) {\n    this.triggers = [];                                                         // If this is not set, all modules will have the same reference point to this.triggers.\n    // Module is created, now look for any module triggers\n    this.searchTriggersRecursiveInnerFunction(this.element)\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger\n * -----------------------------------------------------------------------------\n */\nJss.prototype.trigger = function(which, fn) {\n    if (typeof this.triggers !== \"object\") {\n        console.info(\"No triggers are found, please specify them in the css as `module-name--trigger-name`.\");\n        return false;\n    }\n\n    if (typeof this.triggers[which] !== \"object\") {\n        console.info(\"You are trying to execute a function on a non existing trigger `\" + which + \"`\");\n        return false;\n    }\n\n    for (var i = 0; i < this.triggers[which].length; i++) {\n        fn(this.triggers[which][i])\n    }\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Search triggers recursive inner function\n * -----------------------------------------------------------------------------\n * Recursive function which is executed bij findTriggers;\n *\n * @return {undefined}\n */\nJss.prototype.searchTriggersRecursiveInnerFunction = function(element) {\n    var self = this;\n    if (typeof element == \"undefined\" ) {\n        element = this.element;\n    }\n    if ( element.hasChildNodes() ) {\n        for (var i=0; i < element.childNodes.length; i++) {\n\n            var childElement = element.childNodes[i];                           // Improve readability\n\n            if (childElement.nodeType == 1) {                                   // NodeType 1 == domElement\n\n                if (JssService.isTrigger(childElement, this.moduleName)) {\n\n                    // Add a child element\n                    if (JssService.triggerNameIsAllowed(childElement, this.moduleName)) {\n                        var triggerName = JssService.getTriggerName(childElement, this.moduleName)\n\n                        if (typeof self.triggers[triggerName] !== \"object\") {\n                            self.triggers[triggerName] = [];\n                        }\n\n                        var tmp = new JssTrigger(childElement, {\n                            module: self,\n                            moduleName: this.moduleName,\n                            triggerName: triggerName,\n                        });\n\n                        self.triggers[triggerName].push(tmp);\n                    }\n                }\n                if (childElement.hasChildNodes()) {\n                    self.searchTriggersRecursiveInnerFunction(childElement)\n                }\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Configure Trigger\n * -----------------------------------------------------------------------------\n *\n * @return {undefined}\n */\nJss.prototype.configureTrigger = function(trigger, fn) {\n    if ( typeof this.triggers[trigger] == \"object\") {\n\n        for (var i = 0; i < this.triggers[trigger].length; i++) {\n            //self.triggers[trigger][i]\n            fn(this.triggers[trigger][i]);\n        }\n\n    } else if (JssService.dev) {\n        console.error(\"You are trying to configure a trigger which has no attached domElement\")\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n *   Init\n * -----------------------------------------------------------------------------\n * Notice the user that a init function needs to be added for controlling the triggers\n *\n * @return {undefined}\n */\nJss.prototype.init = function(func) {\n    if (JssService.dev) {\n        console.info(this.moduleName + \": Add a prototype.init function to add triggers and stuff\")\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set element\n * -----------------------------------------------------------------------------\n * Add a domElement to `this`\n *\n * @return {undefined}\n */\nJss.prototype.setElement = function(element) {\n    if (typeof element == \"undefined\") {\n        if (JssService.dev) {\n            return console.error(\"First parameter of setElement needs to be a domElement\");\n        }\n    }\n    this.element = element;\n}\n/*******************************************************************************\n   *\n   *\tActions\n   *\n   *  \t@author      Jeffrey Arts <sjeffff@gmail.com>\n   *    @copyright   2015\n   *\n*******************************************************************************/\n/**\n * -----------------------------------------------------------------------------\n *   Validate action\n * -----------------------------------------------------------------------------\n * Checks if parameter is a valid action, and logs an error when not.\n *\n * @param {string} request                                                      The name of the request\n * @return {boolean} true if a action is valid, otherwise false.\n */\nJss.prototype.validateAction = function(request) {\n    var result;\n    request = this.getActionElement(request).request\n    for (var action in JssService.actions) {\n        if (JssService.actions[action].indexOf(request.toLowerCase()) > -1) {\n            result = action;\n            break;\n        }\n    }\n    if (result) {\n        return result;\n    } else {\n        console.error(\"validateAction: unknown request\", request);\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * \t Add Action\n * -----------------------------------------------------------------------------\n * Adds an action to the object, list of possible requests can be found in Jss.actions\n *\n * | Options\n * \t\t- addDefaults {boolean}                                                 True: add default classes, false: don't\n *\n *\n *\n * @param {string} request                                                      The name of the request\n * @param {function} fn                                                         The function which should be triggered\n * @param {object} options                                                      Object with option parameters\n * @return {boolean} true if a action is succesfully added, otherwise false.\n */\nJss.prototype.addAction = function(request, fn, options) {\n\n    var self        = this;\n    var action      = self.validateAction(request)\n    var actions     = [];\n    var t = self.getActionElement(request);\n    var element     = t.element;\n    var request     = t.request;\n    t = undefined;\n\n    // Options\n    var addDefaults = JssService.getOption(\"addDefaults\", options);\n\n\n\n    switch (action) {\n\n        case \"resize\":\n\n            actions.push(element.addEventListener(\"resize\", fn));\n\n        break;\n\n\n        case \"click\":\n            actions.push(element.addEventListener(\"click\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"click\", function(){\n                    self.setState(\"Clicked\")\n                }));\n                actions.push(window.addEventListener( \"click\", function(event) {\n                    if (event.target != self.element && self.hasState(\"Clicked\")) {\n                        self.removeState(\"Clicked\")\n                    }\n                }));\n            } // End addDefaults\n        break;\n\n\n        case \"change\":\n            actions.push(element.addEventListener(\"change\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"change\", function(){\n                    self.setState(\"Changed\")\n                    setTimeout(function(){self.removeState(\"Changed\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"hover\":\n            actions.push(element.addEventListener(\"mouseover\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseover\", function(){\n                    self.setState(\"Hover\")\n                }));\n                actions.push(element.addEventListener(\"mouseout\",  function(){\n                    self.removeState(\"Hover\")\n                }));\n            }\n        break;\n\n\n        case \"mouseIn\":\n\n            actions.push(element.addEventListener(\"mouseenter\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseenter\", function(){\n                    self.setState(\"MouseIn\")\n                    setTimeout(function(){self.removeState(\"MouseIn\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"mouseOut\":\n\n            actions.push(element.addEventListener(\"mouseleave\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseleave\", function(){\n                    self.setState(\"MouseOut\")\n                    setTimeout(function(){self.removeState(\"MouseOut\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n    }\n\n\n    if (actions.length > 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get action element\n * -----------------------------------------------------------------------------\n * @param  {string} request                                                     The request\n * @return {object}                                                             An object with 2 properties: request && element\n */\nJss.prototype.getActionElement = function(request) {\n    var self = this;\n    var prefix = false;\n    var newRequest  = request;\n    var element = self.element;\n    // Set prefix if it exists\n    if (request.indexOf(\".\") > 0) {\n        var t       = request.split(\".\"),\n        newRequest  = t[1];\n        prefix      = t[0];\n        t = undefined;\n    }\n\n    // Update element according the prefix (or skip it, if not set)\n    if (prefix !== false) {\n        switch (prefix) {\n            case \"screen\":\n            case \"window\":\n                element = window;\n            break;\n        }\n    }\n\n    // Return object\n    return {\n        request: newRequest,\n        element: element\n    }\n}\n/**\n * -----------------------------------------------------------------------------\n * Class name prefix\n * -----------------------------------------------------------------------------\n * The prefix equals the modulename, or - when it's a trigger object - modulename--triggername\n *\n * @return {string} The classname\n */\nJss.prototype.classNamePrefix = function() {\n    if (this.type == \"JssTrigger\") {\n        return this.moduleName + \"--\" + this.triggerName;\n    } else {\n        return this.moduleName;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Remove class name\n * -----------------------------------------------------------------------------\n * Removes the `this.element` classname\n * \t- \"all\" || undefined        > Removes ALL classnames\n *  - \"allStates\" || \"states\"   > Remove all STATES\n *  - all other strings remove that specific string from the className\n *\n * @param {string} input                                                        The classname (case-sensitive) which needs to be removed\n * @return {undefined}\n */\nJss.prototype.removeClassName = function(input) {\n\n    var classList  = [];\n\n    if (input == \"all\" || typeof input == \"undefined\") {\n\n        this.element.className = \"\";\n\n    } else if (input == \"states\" || input == \"allStates\") {\n\n        classList = this.element.className.split(\" \");\n        for (var i in classList) {\n            className = classList[i];\n            if (className.indexOf(\"__is\") > -1) {\n                delete classList[i];\n            }\n        }\n        this.element.className = classList.join(\" \");\n\n    } else if(typeof input == \"string\") {\n        this.element.className = this.element.className.replace(input,\"\");\n    } else {\n        console.error(\"removeClassName: parameter should be a string\");\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Add class name\n * -----------------------------------------------------------------------------\n * Adds a class name by string or array.\n * Does NOT check for duplicates\n *\n * @param  {string} The classname to be added\n * @return {undefined}\n */\nJss.prototype.addClassName = function(data) {\n    this.element.className += \" \";\n    if (typeof data == \"string\") {\n        this.element.className += data;\n    } else {\n        this.element.className += data.join(\" \")\n    }\n}\n\n/**\n * List where the keys corresponds with this[key], and where the value is the function to be executed when the var is changed.\n */\nJss.prototype.setterWatchList = {};\nJss.prototype.getterWatchList = {};\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add data\n * -----------------------------------------------------------------------------\n * Add a (default) value for the given attribute.\n *\n * @param {string} attribute                                                    The name of the attribute (this[attribute])\n * @param {*} value                                                             The value of this[attribute], could be anything...\n * @param {object} options\n *           \t\t- setterWatchFunction {function}\n *           \t\t- getterWatchFunction {function}\n */\nJss.prototype.addData = function(attribute, value, options) {\n\n\n    // watchList[key] = fn;\n    var setterWatchFunction = JssService.getOption('setterWatchFunction', options); // Function\n    var getterWatchFunction = JssService.getOption('getterWatchFunction', options); // Function\n\n    if (typeof setterWatchFunction === \"function\") {\n        this.setterWatchList[attribute] = setterWatchFunction;\n    }\n\n    if (typeof getterWatchFunction === \"function\") {\n        this.getterWatchList[attribute] = getterWatchFunction;\n    }\n\n    // Set the default value\n    return this[attribute] = value;\n}\n\n\n\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- ajax {string} url\n */\nJss.prototype.setData = function(attribute, value, options) {\n\n    this[attribute] = value;\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n\n    if (Array.isArray(fallback)) {\n\n        for (var i = 0; i < fallback.length; i++) {\n            var type = fallback[i];\n\n            if (value && value.length > 0) {\n                this['setData' + JssService.toCamelCase(type)](attribute, value); // Call this.addDataAttribute(value) || this.addDataCookie(value) etc...\n                this[attribute] = value;\n            }\n        }\n    }\n\n    // Call the setter watch function, if defined;\n    if (typeof this.setterWatchList[attribute] === \"function\") { // Use the watchlist to add functionality whenever a data attribute is updated\n        this.setterWatchList[attribute]();\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataDefault {boolean}\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- dataAjax {string} url\n */\nJss.prototype.getData = function(attribute, options) {\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n    var value = false;\n\n\n    if (!fallback) {\n        fallback = ['attribute'];\n    }\n\n\n    for (var i = 0; i < fallback.length; i++) {\n        var type = JssService.toCamelCase(fallback[i]);\n        var customOptions = false;\n\n        if (typeof options == \"object\") {\n            customOptions = options[fallback[i].toLowerCase()];\n        }\n\n        if (!value || value.length < 0) {\n            if (typeof this['getData' + type] !== \"function\") {\n                console.error('this.getData' + type + ' is not a function. Probably ' + type + ' is not a available data option');\n                continue;\n            }\n            value = this['getData' + type]( attribute, customOptions ); // Call this.getDataAttribute(value) || this.getDataCookie(value) || this.getDataAjax(value) etc...\n        }\n    }\n    console.log(this.getterWatchList);\n    // Call the getter watch function, if defined;\n    if (typeof this.getterWatchList[attribute] == \"function\") {\n        this.getterWatchList[attribute]();\n    }\n\n    return this[attribute] = value;\n}\n/**\n * -----------------------------------------------------------------------------\n * Get data: Ajax\n * -----------------------------------------------------------------------------\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n *\n * @param {string} attribute                                                    The NAME of the inner variable (this.NAME), is also used as the key for the GET Request {NAME: value}\n * @param {object} options                                                      Object with parameters used to make a GET request\n * @return {string}                                                             The value of the given attribute, or false if an erro occured.\n */\nJss.prototype.getDataAjax = function(attribute, options) {\n    var url = JssService.getOption(\"url\", options);\n    var jsonKey = JssService.getOption(\"jsonKey\", options) || attribute;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('GET', url);\n\n        return ajaxReturn.success(function(result){\n            if (typeof result === \"object\") {\n                if (result[jsonKey]) {\n                    return result[jsonKey];\n                }\n            }\n        }).error(function(errorObject){\n            console.log(errorObject);\n        });\n    }\n\n    return false;\n};\n\n/**\n * -----------------------------------------------------------------------------\n * Set data: Ajax\n * -----------------------------------------------------------------------------\n * Makes a post request to the options.url in a object {attribute: value}\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n */\nJss.prototype.setDataAjax = function(attribute, value, options) {\n    var url = JssService.getOption(\"url\", options);\n    var requestObject = {}\n        requestObject[attribute] = value;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('POST', url, requestObject);\n\n        return ajaxReturn.success(function(result){\n            return true;\n        }).error(function(errorObject){\n            console.log(errorObject);\n            return false;\n        });\n    }\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Ajax (helper function)\n * -----------------------------------------------------------------------------\n * Based on Atom.js by Todd Motto\n * http://toddmotto.com/writing-a-standalone-ajax-xhr-javascript-micro-library/\n */\nJss.prototype.ajaxHelper = {\n    // Parses json if possible, otherwise just return text\n    parse: function(req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return [result, req];\n    },\n\n    xhr: function(type, url, data) {\n        var ajaxHelper = this;\n\n        var methods = {\n            success: function() {},\n            error: function() {}\n        };\n        var XHR = XMLHttpRequest || ActiveXObject;\n        var request = new XHR('MSXML2.XMLHTTP.3.0');\n        request.open(type, url, true);\n        request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n\n        request.onreadystatechange = function() {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    methods.success.apply(methods, ajaxHelper.parse(request));\n                } else {\n                    methods.error.apply(methods, ajaxHelper.parse(request));\n                }\n            }\n        };\n        request.send(data);\n        return {\n            success: function(callback) {\n                methods.success = callback;\n                return methods;\n            },\n            error: function(callback) {\n                methods.error = callback;\n                return methods;\n            }\n        };\n    }\n};\n\nJss.prototype.ajax = {\n    // Get\n    get: function(src) {\n        console.log(this);\n    },\n\n    // Set\n    put: function(url, data) {\n        return this.ajaxHelper.xhr('PUT', url, data);\n    },\n\n    // Add\n    post: function(url, data) {\n        return this.ajaxHelper.xhr('POST', url, data);\n    }\n\n};\n/**\n * -----------------------------------------------------------------------------\n * Get data attribute value\n * -----------------------------------------------------------------------------\n * Returns the value of the requested attribute. Search first for a data-[ATTRIBUTE] value\n * If not found, it checks for the attribute in the default object. When that is not being\n * found neither, the normal this[attribute] value is being returned.\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME)\n * @return {string}                                                             The value of the given attribute\n */\nJss.prototype.getDataAttribute = function(attribute) {\n\n    return this.element.dataset[attribute];\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Update data attribute\n * -----------------------------------------------------------------------------\n * Set the value to the given attribute. And updates the data-[ATTRIBUTE] value\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME=\"value\")\n * @param {string} value                                                        The VALUE of the data attribute (data-name=\"VALUE\")\n * @return {undefined}\n */\n\nJss.prototype.setDataAttribute = function(attribute, value) {\n\n    // Update data attribute\n    if (typeof value !== \"undefined\") {\n        this.element.dataset[attribute] = this[attribute];\n    } else {\n        delete this.element.dataset[attribute];\n    }\n\n    return true;\n}\nJss.prototype.dataDefaultsCookie = {\n    'expireData': undefined\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get cookie value\n * -----------------------------------------------------------------------------\n * Returns cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @return {string}                                                             The VALUE of the given attribute\n */\nJss.prototype.getDataCookie = function(attribute) {\n\n    if (!attribute) { return null; }\n    return decodeURIComponent(document.cookie.replace(new RegExp(\"(?:(?:^|.*;)\\\\s*\" + encodeURIComponent(attribute).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"), \"$1\")) || null;\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data cookie\n * -----------------------------------------------------------------------------\n * Updates the cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @param {string} value                                                        The VALUE of the cookie\n * @return {undefined}\n */\n\nJss.prototype.setDataCookie = function(attribute, value, options) {\n    var endDate, path, domain, secureConnection;\n\n    if (typeof options === \"object\") {\n        endDate = JssService.getOption('endDate', options);\n        path    = JssService.getOption('path', options);\n        domain  = JssService.getOption('domain', options);\n        secureConnection = JssService.getOption('secureConnection', options);\n    }\n\n    if (!attribute || /^(?:expires|max\\-age|path|domain|secure)$/i.test(attribute)) { return false; }\n    var sExpires = \"\";\n    if (endDate) {\n      switch (endDate.constructor) {\n        case Number:\n          sExpires = endDate === Infinity ? \"; expires=Fri, 31 Dec 9999 23:59:59 GMT\" : \"; max-age=\" + endDate;\n          break;\n        case String:\n          sExpires = \"; expires=\" + endDate;\n          break;\n        case Date:\n          sExpires = \"; expires=\" + endDate.toUTCString();\n          break;\n      }\n    }\n\n    document.cookie = encodeURIComponent(attribute) + \"=\" + encodeURIComponent(value) + sExpires + (domain ? \"; domain=\" + domain : \"\") + (path ? \"; path=\" + path : \"\") + (secureConnection ? \"; secure\" : \"\");\n    return true;\n}\n/*******************************************************************************\n\n    Styles\n\n*******************************************************************************/\n\n/**\n * -----------------------------------------------------------------------------\n * Set height\n * -----------------------------------------------------------------------------\n * Sets the height of the `this.element` by the given input (height)\n *\n * @param  {number} height                                                      The height in pixels or percentage. Where numbers will be calculated to pixels so giving a height of 50 will result in a height of \"50px\". If you want percentages pass the variable with a percentage sign 50 + \"%\"\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setHeight = function(height) {\n    if (typeof height === \"number\") {\n        height += \"px\";\n    }\n\n    if (typeof height !== \"string\") {\n        throw(\"parameter height needs to be a string or integer\");\n    }\n\n    this.element.style.height = height;\n    return true;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get height\n * -----------------------------------------------------------------------------\n * Returns the height of the `this.element`\n *\n * @return {number}                                                             The height of the element in pixels\n */\nJss.prototype.getHeight = function() {\n    return this.element.offsetHeight;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set width\n * -----------------------------------------------------------------------------\n * Sets the width of the `this.element` by the given input (width)\n *\n * @param  {number} width                                                       The width in pixels or percentage. Where numbers will be calculated to pixels so giving a width of 50 will result in a width of \"50px\". If you want to set a percentage, just pass the variable with a percentage sign (\"50%\")\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setWidth = function(width) {\n    if (typeof width == \"number\") {\n        width += \"px\";\n    }\n\n    if (typeof width !== \"string\") {\n        throw(\"parameter width needs to be a string or integer\");\n    }\n    this.element.style.width = width;\n    return true;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get width\n * -----------------------------------------------------------------------------\n * Returns the width of the `this.element`\n *\n * @return {number}                                                             The width of the element in pixels\n */\nJss.prototype.getWidth = function() {\n    return this.element.offsetWidth;\n}\n/**\n * -----------------------------------------------------------------------------\n * Set State\n * -----------------------------------------------------------------------------\n * This updates the state of the object. States are being added to the class name prefix with a double underscore.\n * If you would have the module `envelope` and give it the state `open`. The class name `envelope__open` will be added.\n * Whenever you remove the state `open`, the according class name will be removed as well.\n *\n * @param  {string} str                                                         The name of the state which should be set (this is transformed to CamelCase)\n * @return {boolean}                                                            True on success, otherwise false (might already have the state)\n */\nJss.prototype.setState = function(str) {\n    var element, verifiedState, state, className;\n\n    element         = this.element;\n    state           = JssService.toCamelCase(str);\n    className       = this.classNamePrefix() + \"__is\" + state;\n\n    // Check if this.state is an array, and make it one if not.\n    if (Array.isArray(this.state) == false ) {\n        this.state = [];\n    }\n\n    // This if statement prevents that the same state is being set multiple times\n    if ( !this.hasState(str) ) {\n        this.addClassName(className)\n        this.state.push(state);\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Has state\n * -----------------------------------------------------------------------------\n * Checks if the parameter is already a state and returns true if so. Otherwise false.\n *\n * @param  {string} str                                                         The state which will be checked for\n * @return {boolean}                                                            True if it has the given state, otherwise false\n */\nJss.prototype.hasState = function(str) {\n    if (typeof this.state == \"object\" && this.state.indexOf(str) >= 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Remove state\n * -----------------------------------------------------------------------------\n * Removes the state from the states array, and from the element.className\n *\n * @param  {string} str                                                         The name of the state which should be removed\n * @return {undefined}\n */\nJss.prototype.removeState = function(str) {\n\n    var state      = JssService.toCamelCase(str);\n    var stateIndex = this.state.indexOf(state);\n\n    if (str == \"all\" || typeof str == \"undefined\") {\n        this.removeClassName(\"states\");\n    } else {\n        this.state.splice(stateIndex, 1);\n        if (typeof this.moduleAction != \"undefined\" && this.moduleAction.length > -1) {\n            this.removeClassName(this.classNamePrefix() + \"\" + this.moduleAction + \"__is\" + state);\n        } else {\n            this.removeClassName(this.classNamePrefix() + \"__is\" + state);\n        }\n    }\n}\n\n\n// A simple way to watch variables\n\n// addVar(keyName, value, watch_function)\n// setVar(keyName, value)\n// getVar(keyName)\n// Add -> new\n// Set -> update\n// Get -> return\nvar JssModule = function(){};\n\nJssModule.prototype.type               = \"JssModule\";\nJssModule.prototype.init               = Jss.prototype.init;\nJssModule.prototype.setElement         = Jss.prototype.setElement;\n\n// Triggers\nJssModule.prototype.findTriggers       = Jss.prototype.findTriggers;\nJssModule.prototype.configureTrigger      = Jss.prototype.configureTrigger;\n\n// Actions\n//JssModule.prototype.actions            = Object.create(Jss.prototype.actions);\nJssModule.prototype.validateAction     = Jss.prototype.validateAction;\nJssModule.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssModule.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssModule.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssModule.prototype.setState           = Jss.prototype.setState;\nJssModule.prototype.hasState           = Jss.prototype.hasState;\nJssModule.prototype.removeState        = Jss.prototype.removeState;\n\n// Data attributes\nJssModule.prototype.addData            = Jss.prototype.addData;\nJssModule.prototype.getData            = Jss.prototype.getData;\nJssModule.prototype.setData            = Jss.prototype.setData;\nvar JssTrigger = function(element, options) {\n    this.setElement(element);\n\n    if (typeof options === \"object\") {\n        if (typeof options.module === \"object\") {\n            this.module = options.module;\n        }\n        if (typeof options.moduleName === \"string\") {\n            this.moduleName = options.moduleName;\n        }\n        if (typeof options.triggerName === \"string\") {\n            this.triggerName = options.triggerName;\n        }\n    }\n}\n\n\nJssTrigger.prototype                    = Object.create(Jss.prototype);\nJssTrigger.prototype.type               = \"JssTrigger\";\nJssTrigger.prototype.setElement         = Jss.prototype.setElement;\n\n// Actions\n//JssTrigger.prototype.actions            = Object.create(Jss.prototype.actions);\nJssTrigger.prototype.validateAction     = Jss.prototype.validateAction;\nJssTrigger.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssTrigger.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssTrigger.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssTrigger.prototype.setState           = Jss.prototype.setState;\nJssTrigger.prototype.hasState           = Jss.prototype.hasState;\nJssTrigger.prototype.removeState        = Jss.prototype.removeState;\n\n\n\nvar  JssController = {};\nJssController.modules \t\t= []; // Result array with objects of all the found modules\nJssController.activeModules \t= JssService.activeModules;\n\nJssController.findModules = function() {\n    var allElements = document.getElementsByTagName(\"*\");                       // Array with all domElements\n    var test = [];\n    var self = this;\n    for (var i=0; i < allElements.length; i++) {\n\n        // Set default vars //\n        var element = allElements[i];                                           // Specific domElement\n        var tmp = false;\n\n        // Loop through the (active) modules array and add/instantiate them\n        self.activeModules.forEach(function(module){\n            if (JssService.isModule(element, module)) {\n                tmp = eval(\"new \" + JssService.toCamelCase(module) + \"(element)\"); // Dynamicly load modules\n\n                tmp.setElement(element);                                        // Add the domElement to the module\n                tmp.findTriggers();\t\t\t                                    // Search for module triggers\n\n                tmp.init();\t\t\t\t\t                                    // Executes everything within the init function\n                self.modules.push(tmp);\n\n            }\n        }); // End forEach\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    JssController.findModules();\n    console.log(JssController);\n});"
          },
          "params": [
            {
              "title": "param",
              "description": "The NAME of the cookie",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "attribute"
            },
            {
              "title": "param",
              "description": "The VALUE of the cookie",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "value"
            }
          ],
          "returns": [
            {
              "title": "returns",
              "description": null,
              "type": {
                "type": "UndefinedLiteral"
              }
            }
          ],
          "name": "setDataCookie",
          "kind": "function",
          "memberof": "Jss",
          "scope": "instance",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            "Jss",
            "setDataCookie"
          ]
        },
        {
          "description": "-----------------------------------------------------------------------------\nSet element\n-----------------------------------------------------------------------------\nAdd a domElement to `this`",
          "tags": [
            {
              "title": "returns",
              "description": null,
              "type": {
                "type": "UndefinedLiteral"
              }
            },
            {
              "title": "name",
              "name": "setElement"
            },
            {
              "title": "kind",
              "kind": "function"
            },
            {
              "title": "memberof",
              "description": "Jss"
            },
            {
              "title": "instance"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 389,
                "column": 0
              },
              "end": {
                "line": 414,
                "column": 0
              }
            },
            "file": "/Users/jeffreyarts/Documents/DEV/jss/lib/jss.js",
            "code": "JssService = {};\n\n// Edit this array to enable or disable default modules\nJssService.activeModules   = []\n\n// Set this to false in a live environment\nJssService.dev             = true;\n\n/**************************\n*\n*   Below are core properties defined, becarefull when you think of changing these...\n*\n**************************/\n\n\nJssService.actions = {\n    hover:      ['hover',    'mouseover',   'onmouseover'                       ], // Fixed\n    click:      ['click',    'onclick'                                          ], // Fixed\n    mouseIn:    ['mousein',  'onmousein', 'mouseenter', 'onmouseenter'          ], // Fixed\n    mouseOut:   ['mouseout', 'onmouseout', 'mouseleave', 'onmouseleave'         ], // Fixed\n    resize:     ['resize',   'onresize'                                         ], // Fixed\n    focus:      ['focus',    'onfocus'                                          ],\n    keyDown:    ['keydown',  'keypress'                                         ],\n    keyUp:      ['keyup',    'keyrelease'                                       ],\n    change:     ['change',   'onchange'                                         ],\n};\n\nJssService.enterDelay = 1000;                                                   // Amount of miliseconds which is used to remove the entered state. (see core.actions) JssService.enterDelay setTimeout\n\nJssService.forbiddenProperties = [\n    'type',\n    'triggers',\n    'configureTrigger',\n    'findTriggers'\n];\n\n/**\n * -----------------------------------------------------------------------------\n * Is Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isModule = function(element, moduleName) {\n    var arr = element.className.split(\" \");\n    var found = false;\n\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i].indexOf(moduleName)        > -1 &&\n            arr[i].indexOf(moduleName + \"_\") == -1 &&\n            arr[i].indexOf(moduleName + \"-\") == -1)\n        {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.addModule = function(moduleName) {\n    this.activeModules.push(this.toKebabCase(moduleName))\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To CamelCase\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toCamelCase = function(input) {\n    var arr, res;\n    res = \"\";\n    if (typeof input === \"string\") {\n        input = input.replace(/\\-/g,\" \");                                       // Replace all dashes with spaces\n        arr = input.split(\" \");\n    } else {\n        arr = input;                                                            // Assume it is an array\n    }\n\n\n\n    var i = 0;\n    for (var i in arr) {\n        if (typeof i != \"undefined\") {\n            res += arr[i][0].toUpperCase()+ arr[i].slice(1); // Capitalize first letter\n        }\n    }\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To kebab-case\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toKebabCase = function(input) {\n    var res, str;\n    res = \"\";\n\n    if (typeof input === \"string\") {\n        str = input;\n    } else {                                                                    // Assume it is an array\n        str = input.join(\" \");\n    }\n\n    // First change it to camelcase\n    str = this.toCamelCase(str);\n\n    var max = str.length;\n    for (var i=0; i < max; i++) {\n        // Check if character is uppercase\n        if (str[i] != str[i].toLowerCase()) {\n            if (i!==0) {\n                str = str.substr(0, i) + \"-\" + str.substr(i);\n                i++;\n            }\n        }\n    }\n\n    return res = str.toLowerCase();\n}\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get option\n * -----------------------------------------------------------------------------\n * @param  {string} name                                                        Keyname in optionList\n * @param  {array} optionList                                                   Array with all possible options\n * @return {}                                                                   Copy of the value (optionsList[name])\n */\nJssService.getOption = function(name, optionList) {\n    if (typeof optionList !== \"object\") {\n        return false;\n    }\n\n    var res;\n\n    switch (name) {\n\n        // Only set `addDefaults` to false when it is explicitly set.\n        case \"addDefaults\":\n            if (optionList[name] !== false || typeof optionList[name] === \"undefined\") {\n                res = true;\n            } else {\n                res = false;\n            }\n        break;\n        case \"fallback\":\n            if ( Array.isArray(optionList[name]) ) {\n                res = optionList[name];\n                if (res.length===0) {\n                    res = false;\n                }\n            } else if (typeof optionList[name] === \"string\"){\n                res = [optionList[name]];\n            }\n        break;\n        default:\n        res = optionList[name]\n    }\n\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Is Trigger\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isTrigger = function(element, moduleName) {\n    if (element.className.indexOf(moduleName + \"--\") > -1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get trigger name\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {string} Name of the trigger.\n */\nJssService.getTriggerName = function(element, moduleName) {\n    if (typeof element != \"object\") {\n        console.error('Required first argument `element` needs to be a domElement.');\n        return false;\n    }\n    if (typeof moduleName != \"string\") {\n        console.error('Required second argument `moduleName` needs to be a string.');\n        return false;\n    }\n\n    // As an example we assume that the value of element.className equals 'b module--triggerName'\n    var startPos = element.className.indexOf(moduleName + \"--\");                    // 2\n    var sliced = element.className.slice(startPos, element.className.length )       // 'module--triggerName'\n    var endPos = sliced.indexOf(\" \");                                               // -1       // not found\n    if (endPos != -1) {                                                             // 19\n        sliced = sliced.slice(0,endPos);                                            // if there is more after the string, this will remove it\n    }\n    return sliced.replace(moduleName + \"--\",\"\")\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger name is allowed\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} True if the triggername is allowed, otherwise false.\n */\nJssService.triggerNameIsAllowed = function(element, moduleName) {\n    if (JssService.forbiddenProperties.indexOf(this.getTriggerName(element, moduleName)) > -1) {      // This triggerName is a core property, throw error\n        console.error('Triggername `' + getTriggerName(element,moduleName) + '` is not allowed. Change the trigger so it does not corresponds any of these: ' + JssService.forbiddenProperties)\n        return false;\n    }\n    return true;\n}\n/**\n * @module Jss\n * @author      Jeffrey Arts <sjeffff@gmail.com>\n * @copyright   2015\n */\nJss = function(){};\n\nJss.prototype.type      = \"Jss\"\nJss.prototype.triggers  = false;\nJss.prototype.element   = undefined;                                              // {obj} domElement\nJss.prototype.state     = undefined;                                              // {str} State of module, is reflected by the css class __isState\n\n/**\n * -----------------------------------------------------------------------------\n * Find Triggers\n * -----------------------------------------------------------------------------\n *\n * @param {domElement} element\n * @return {undefined}\n */\nJss.prototype.findTriggers = function(element) {\n    this.triggers = [];                                                         // If this is not set, all modules will have the same reference point to this.triggers.\n    // Module is created, now look for any module triggers\n    this.searchTriggersRecursiveInnerFunction(this.element)\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger\n * -----------------------------------------------------------------------------\n */\nJss.prototype.trigger = function(which, fn) {\n    if (typeof this.triggers !== \"object\") {\n        console.info(\"No triggers are found, please specify them in the css as `module-name--trigger-name`.\");\n        return false;\n    }\n\n    if (typeof this.triggers[which] !== \"object\") {\n        console.info(\"You are trying to execute a function on a non existing trigger `\" + which + \"`\");\n        return false;\n    }\n\n    for (var i = 0; i < this.triggers[which].length; i++) {\n        fn(this.triggers[which][i])\n    }\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Search triggers recursive inner function\n * -----------------------------------------------------------------------------\n * Recursive function which is executed bij findTriggers;\n *\n * @return {undefined}\n */\nJss.prototype.searchTriggersRecursiveInnerFunction = function(element) {\n    var self = this;\n    if (typeof element == \"undefined\" ) {\n        element = this.element;\n    }\n    if ( element.hasChildNodes() ) {\n        for (var i=0; i < element.childNodes.length; i++) {\n\n            var childElement = element.childNodes[i];                           // Improve readability\n\n            if (childElement.nodeType == 1) {                                   // NodeType 1 == domElement\n\n                if (JssService.isTrigger(childElement, this.moduleName)) {\n\n                    // Add a child element\n                    if (JssService.triggerNameIsAllowed(childElement, this.moduleName)) {\n                        var triggerName = JssService.getTriggerName(childElement, this.moduleName)\n\n                        if (typeof self.triggers[triggerName] !== \"object\") {\n                            self.triggers[triggerName] = [];\n                        }\n\n                        var tmp = new JssTrigger(childElement, {\n                            module: self,\n                            moduleName: this.moduleName,\n                            triggerName: triggerName,\n                        });\n\n                        self.triggers[triggerName].push(tmp);\n                    }\n                }\n                if (childElement.hasChildNodes()) {\n                    self.searchTriggersRecursiveInnerFunction(childElement)\n                }\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Configure Trigger\n * -----------------------------------------------------------------------------\n *\n * @return {undefined}\n */\nJss.prototype.configureTrigger = function(trigger, fn) {\n    if ( typeof this.triggers[trigger] == \"object\") {\n\n        for (var i = 0; i < this.triggers[trigger].length; i++) {\n            //self.triggers[trigger][i]\n            fn(this.triggers[trigger][i]);\n        }\n\n    } else if (JssService.dev) {\n        console.error(\"You are trying to configure a trigger which has no attached domElement\")\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n *   Init\n * -----------------------------------------------------------------------------\n * Notice the user that a init function needs to be added for controlling the triggers\n *\n * @return {undefined}\n */\nJss.prototype.init = function(func) {\n    if (JssService.dev) {\n        console.info(this.moduleName + \": Add a prototype.init function to add triggers and stuff\")\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set element\n * -----------------------------------------------------------------------------\n * Add a domElement to `this`\n *\n * @return {undefined}\n */\nJss.prototype.setElement = function(element) {\n    if (typeof element == \"undefined\") {\n        if (JssService.dev) {\n            return console.error(\"First parameter of setElement needs to be a domElement\");\n        }\n    }\n    this.element = element;\n}\n/*******************************************************************************\n   *\n   *\tActions\n   *\n   *  \t@author      Jeffrey Arts <sjeffff@gmail.com>\n   *    @copyright   2015\n   *\n*******************************************************************************/\n/**\n * -----------------------------------------------------------------------------\n *   Validate action\n * -----------------------------------------------------------------------------\n * Checks if parameter is a valid action, and logs an error when not.\n *\n * @param {string} request                                                      The name of the request\n * @return {boolean} true if a action is valid, otherwise false.\n */\nJss.prototype.validateAction = function(request) {\n    var result;\n    request = this.getActionElement(request).request\n    for (var action in JssService.actions) {\n        if (JssService.actions[action].indexOf(request.toLowerCase()) > -1) {\n            result = action;\n            break;\n        }\n    }\n    if (result) {\n        return result;\n    } else {\n        console.error(\"validateAction: unknown request\", request);\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * \t Add Action\n * -----------------------------------------------------------------------------\n * Adds an action to the object, list of possible requests can be found in Jss.actions\n *\n * | Options\n * \t\t- addDefaults {boolean}                                                 True: add default classes, false: don't\n *\n *\n *\n * @param {string} request                                                      The name of the request\n * @param {function} fn                                                         The function which should be triggered\n * @param {object} options                                                      Object with option parameters\n * @return {boolean} true if a action is succesfully added, otherwise false.\n */\nJss.prototype.addAction = function(request, fn, options) {\n\n    var self        = this;\n    var action      = self.validateAction(request)\n    var actions     = [];\n    var t = self.getActionElement(request);\n    var element     = t.element;\n    var request     = t.request;\n    t = undefined;\n\n    // Options\n    var addDefaults = JssService.getOption(\"addDefaults\", options);\n\n\n\n    switch (action) {\n\n        case \"resize\":\n\n            actions.push(element.addEventListener(\"resize\", fn));\n\n        break;\n\n\n        case \"click\":\n            actions.push(element.addEventListener(\"click\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"click\", function(){\n                    self.setState(\"Clicked\")\n                }));\n                actions.push(window.addEventListener( \"click\", function(event) {\n                    if (event.target != self.element && self.hasState(\"Clicked\")) {\n                        self.removeState(\"Clicked\")\n                    }\n                }));\n            } // End addDefaults\n        break;\n\n\n        case \"change\":\n            actions.push(element.addEventListener(\"change\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"change\", function(){\n                    self.setState(\"Changed\")\n                    setTimeout(function(){self.removeState(\"Changed\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"hover\":\n            actions.push(element.addEventListener(\"mouseover\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseover\", function(){\n                    self.setState(\"Hover\")\n                }));\n                actions.push(element.addEventListener(\"mouseout\",  function(){\n                    self.removeState(\"Hover\")\n                }));\n            }\n        break;\n\n\n        case \"mouseIn\":\n\n            actions.push(element.addEventListener(\"mouseenter\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseenter\", function(){\n                    self.setState(\"MouseIn\")\n                    setTimeout(function(){self.removeState(\"MouseIn\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"mouseOut\":\n\n            actions.push(element.addEventListener(\"mouseleave\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseleave\", function(){\n                    self.setState(\"MouseOut\")\n                    setTimeout(function(){self.removeState(\"MouseOut\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n    }\n\n\n    if (actions.length > 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get action element\n * -----------------------------------------------------------------------------\n * @param  {string} request                                                     The request\n * @return {object}                                                             An object with 2 properties: request && element\n */\nJss.prototype.getActionElement = function(request) {\n    var self = this;\n    var prefix = false;\n    var newRequest  = request;\n    var element = self.element;\n    // Set prefix if it exists\n    if (request.indexOf(\".\") > 0) {\n        var t       = request.split(\".\"),\n        newRequest  = t[1];\n        prefix      = t[0];\n        t = undefined;\n    }\n\n    // Update element according the prefix (or skip it, if not set)\n    if (prefix !== false) {\n        switch (prefix) {\n            case \"screen\":\n            case \"window\":\n                element = window;\n            break;\n        }\n    }\n\n    // Return object\n    return {\n        request: newRequest,\n        element: element\n    }\n}\n/**\n * -----------------------------------------------------------------------------\n * Class name prefix\n * -----------------------------------------------------------------------------\n * The prefix equals the modulename, or - when it's a trigger object - modulename--triggername\n *\n * @return {string} The classname\n */\nJss.prototype.classNamePrefix = function() {\n    if (this.type == \"JssTrigger\") {\n        return this.moduleName + \"--\" + this.triggerName;\n    } else {\n        return this.moduleName;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Remove class name\n * -----------------------------------------------------------------------------\n * Removes the `this.element` classname\n * \t- \"all\" || undefined        > Removes ALL classnames\n *  - \"allStates\" || \"states\"   > Remove all STATES\n *  - all other strings remove that specific string from the className\n *\n * @param {string} input                                                        The classname (case-sensitive) which needs to be removed\n * @return {undefined}\n */\nJss.prototype.removeClassName = function(input) {\n\n    var classList  = [];\n\n    if (input == \"all\" || typeof input == \"undefined\") {\n\n        this.element.className = \"\";\n\n    } else if (input == \"states\" || input == \"allStates\") {\n\n        classList = this.element.className.split(\" \");\n        for (var i in classList) {\n            className = classList[i];\n            if (className.indexOf(\"__is\") > -1) {\n                delete classList[i];\n            }\n        }\n        this.element.className = classList.join(\" \");\n\n    } else if(typeof input == \"string\") {\n        this.element.className = this.element.className.replace(input,\"\");\n    } else {\n        console.error(\"removeClassName: parameter should be a string\");\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Add class name\n * -----------------------------------------------------------------------------\n * Adds a class name by string or array.\n * Does NOT check for duplicates\n *\n * @param  {string} The classname to be added\n * @return {undefined}\n */\nJss.prototype.addClassName = function(data) {\n    this.element.className += \" \";\n    if (typeof data == \"string\") {\n        this.element.className += data;\n    } else {\n        this.element.className += data.join(\" \")\n    }\n}\n\n/**\n * List where the keys corresponds with this[key], and where the value is the function to be executed when the var is changed.\n */\nJss.prototype.setterWatchList = {};\nJss.prototype.getterWatchList = {};\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add data\n * -----------------------------------------------------------------------------\n * Add a (default) value for the given attribute.\n *\n * @param {string} attribute                                                    The name of the attribute (this[attribute])\n * @param {*} value                                                             The value of this[attribute], could be anything...\n * @param {object} options\n *           \t\t- setterWatchFunction {function}\n *           \t\t- getterWatchFunction {function}\n */\nJss.prototype.addData = function(attribute, value, options) {\n\n\n    // watchList[key] = fn;\n    var setterWatchFunction = JssService.getOption('setterWatchFunction', options); // Function\n    var getterWatchFunction = JssService.getOption('getterWatchFunction', options); // Function\n\n    if (typeof setterWatchFunction === \"function\") {\n        this.setterWatchList[attribute] = setterWatchFunction;\n    }\n\n    if (typeof getterWatchFunction === \"function\") {\n        this.getterWatchList[attribute] = getterWatchFunction;\n    }\n\n    // Set the default value\n    return this[attribute] = value;\n}\n\n\n\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- ajax {string} url\n */\nJss.prototype.setData = function(attribute, value, options) {\n\n    this[attribute] = value;\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n\n    if (Array.isArray(fallback)) {\n\n        for (var i = 0; i < fallback.length; i++) {\n            var type = fallback[i];\n\n            if (value && value.length > 0) {\n                this['setData' + JssService.toCamelCase(type)](attribute, value); // Call this.addDataAttribute(value) || this.addDataCookie(value) etc...\n                this[attribute] = value;\n            }\n        }\n    }\n\n    // Call the setter watch function, if defined;\n    if (typeof this.setterWatchList[attribute] === \"function\") { // Use the watchlist to add functionality whenever a data attribute is updated\n        this.setterWatchList[attribute]();\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataDefault {boolean}\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- dataAjax {string} url\n */\nJss.prototype.getData = function(attribute, options) {\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n    var value = false;\n\n\n    if (!fallback) {\n        fallback = ['attribute'];\n    }\n\n\n    for (var i = 0; i < fallback.length; i++) {\n        var type = JssService.toCamelCase(fallback[i]);\n        var customOptions = false;\n\n        if (typeof options == \"object\") {\n            customOptions = options[fallback[i].toLowerCase()];\n        }\n\n        if (!value || value.length < 0) {\n            if (typeof this['getData' + type] !== \"function\") {\n                console.error('this.getData' + type + ' is not a function. Probably ' + type + ' is not a available data option');\n                continue;\n            }\n            value = this['getData' + type]( attribute, customOptions ); // Call this.getDataAttribute(value) || this.getDataCookie(value) || this.getDataAjax(value) etc...\n        }\n    }\n    console.log(this.getterWatchList);\n    // Call the getter watch function, if defined;\n    if (typeof this.getterWatchList[attribute] == \"function\") {\n        this.getterWatchList[attribute]();\n    }\n\n    return this[attribute] = value;\n}\n/**\n * -----------------------------------------------------------------------------\n * Get data: Ajax\n * -----------------------------------------------------------------------------\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n *\n * @param {string} attribute                                                    The NAME of the inner variable (this.NAME), is also used as the key for the GET Request {NAME: value}\n * @param {object} options                                                      Object with parameters used to make a GET request\n * @return {string}                                                             The value of the given attribute, or false if an erro occured.\n */\nJss.prototype.getDataAjax = function(attribute, options) {\n    var url = JssService.getOption(\"url\", options);\n    var jsonKey = JssService.getOption(\"jsonKey\", options) || attribute;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('GET', url);\n\n        return ajaxReturn.success(function(result){\n            if (typeof result === \"object\") {\n                if (result[jsonKey]) {\n                    return result[jsonKey];\n                }\n            }\n        }).error(function(errorObject){\n            console.log(errorObject);\n        });\n    }\n\n    return false;\n};\n\n/**\n * -----------------------------------------------------------------------------\n * Set data: Ajax\n * -----------------------------------------------------------------------------\n * Makes a post request to the options.url in a object {attribute: value}\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n */\nJss.prototype.setDataAjax = function(attribute, value, options) {\n    var url = JssService.getOption(\"url\", options);\n    var requestObject = {}\n        requestObject[attribute] = value;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('POST', url, requestObject);\n\n        return ajaxReturn.success(function(result){\n            return true;\n        }).error(function(errorObject){\n            console.log(errorObject);\n            return false;\n        });\n    }\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Ajax (helper function)\n * -----------------------------------------------------------------------------\n * Based on Atom.js by Todd Motto\n * http://toddmotto.com/writing-a-standalone-ajax-xhr-javascript-micro-library/\n */\nJss.prototype.ajaxHelper = {\n    // Parses json if possible, otherwise just return text\n    parse: function(req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return [result, req];\n    },\n\n    xhr: function(type, url, data) {\n        var ajaxHelper = this;\n\n        var methods = {\n            success: function() {},\n            error: function() {}\n        };\n        var XHR = XMLHttpRequest || ActiveXObject;\n        var request = new XHR('MSXML2.XMLHTTP.3.0');\n        request.open(type, url, true);\n        request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n\n        request.onreadystatechange = function() {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    methods.success.apply(methods, ajaxHelper.parse(request));\n                } else {\n                    methods.error.apply(methods, ajaxHelper.parse(request));\n                }\n            }\n        };\n        request.send(data);\n        return {\n            success: function(callback) {\n                methods.success = callback;\n                return methods;\n            },\n            error: function(callback) {\n                methods.error = callback;\n                return methods;\n            }\n        };\n    }\n};\n\nJss.prototype.ajax = {\n    // Get\n    get: function(src) {\n        console.log(this);\n    },\n\n    // Set\n    put: function(url, data) {\n        return this.ajaxHelper.xhr('PUT', url, data);\n    },\n\n    // Add\n    post: function(url, data) {\n        return this.ajaxHelper.xhr('POST', url, data);\n    }\n\n};\n/**\n * -----------------------------------------------------------------------------\n * Get data attribute value\n * -----------------------------------------------------------------------------\n * Returns the value of the requested attribute. Search first for a data-[ATTRIBUTE] value\n * If not found, it checks for the attribute in the default object. When that is not being\n * found neither, the normal this[attribute] value is being returned.\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME)\n * @return {string}                                                             The value of the given attribute\n */\nJss.prototype.getDataAttribute = function(attribute) {\n\n    return this.element.dataset[attribute];\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Update data attribute\n * -----------------------------------------------------------------------------\n * Set the value to the given attribute. And updates the data-[ATTRIBUTE] value\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME=\"value\")\n * @param {string} value                                                        The VALUE of the data attribute (data-name=\"VALUE\")\n * @return {undefined}\n */\n\nJss.prototype.setDataAttribute = function(attribute, value) {\n\n    // Update data attribute\n    if (typeof value !== \"undefined\") {\n        this.element.dataset[attribute] = this[attribute];\n    } else {\n        delete this.element.dataset[attribute];\n    }\n\n    return true;\n}\nJss.prototype.dataDefaultsCookie = {\n    'expireData': undefined\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get cookie value\n * -----------------------------------------------------------------------------\n * Returns cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @return {string}                                                             The VALUE of the given attribute\n */\nJss.prototype.getDataCookie = function(attribute) {\n\n    if (!attribute) { return null; }\n    return decodeURIComponent(document.cookie.replace(new RegExp(\"(?:(?:^|.*;)\\\\s*\" + encodeURIComponent(attribute).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"), \"$1\")) || null;\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data cookie\n * -----------------------------------------------------------------------------\n * Updates the cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @param {string} value                                                        The VALUE of the cookie\n * @return {undefined}\n */\n\nJss.prototype.setDataCookie = function(attribute, value, options) {\n    var endDate, path, domain, secureConnection;\n\n    if (typeof options === \"object\") {\n        endDate = JssService.getOption('endDate', options);\n        path    = JssService.getOption('path', options);\n        domain  = JssService.getOption('domain', options);\n        secureConnection = JssService.getOption('secureConnection', options);\n    }\n\n    if (!attribute || /^(?:expires|max\\-age|path|domain|secure)$/i.test(attribute)) { return false; }\n    var sExpires = \"\";\n    if (endDate) {\n      switch (endDate.constructor) {\n        case Number:\n          sExpires = endDate === Infinity ? \"; expires=Fri, 31 Dec 9999 23:59:59 GMT\" : \"; max-age=\" + endDate;\n          break;\n        case String:\n          sExpires = \"; expires=\" + endDate;\n          break;\n        case Date:\n          sExpires = \"; expires=\" + endDate.toUTCString();\n          break;\n      }\n    }\n\n    document.cookie = encodeURIComponent(attribute) + \"=\" + encodeURIComponent(value) + sExpires + (domain ? \"; domain=\" + domain : \"\") + (path ? \"; path=\" + path : \"\") + (secureConnection ? \"; secure\" : \"\");\n    return true;\n}\n/*******************************************************************************\n\n    Styles\n\n*******************************************************************************/\n\n/**\n * -----------------------------------------------------------------------------\n * Set height\n * -----------------------------------------------------------------------------\n * Sets the height of the `this.element` by the given input (height)\n *\n * @param  {number} height                                                      The height in pixels or percentage. Where numbers will be calculated to pixels so giving a height of 50 will result in a height of \"50px\". If you want percentages pass the variable with a percentage sign 50 + \"%\"\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setHeight = function(height) {\n    if (typeof height === \"number\") {\n        height += \"px\";\n    }\n\n    if (typeof height !== \"string\") {\n        throw(\"parameter height needs to be a string or integer\");\n    }\n\n    this.element.style.height = height;\n    return true;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get height\n * -----------------------------------------------------------------------------\n * Returns the height of the `this.element`\n *\n * @return {number}                                                             The height of the element in pixels\n */\nJss.prototype.getHeight = function() {\n    return this.element.offsetHeight;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set width\n * -----------------------------------------------------------------------------\n * Sets the width of the `this.element` by the given input (width)\n *\n * @param  {number} width                                                       The width in pixels or percentage. Where numbers will be calculated to pixels so giving a width of 50 will result in a width of \"50px\". If you want to set a percentage, just pass the variable with a percentage sign (\"50%\")\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setWidth = function(width) {\n    if (typeof width == \"number\") {\n        width += \"px\";\n    }\n\n    if (typeof width !== \"string\") {\n        throw(\"parameter width needs to be a string or integer\");\n    }\n    this.element.style.width = width;\n    return true;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get width\n * -----------------------------------------------------------------------------\n * Returns the width of the `this.element`\n *\n * @return {number}                                                             The width of the element in pixels\n */\nJss.prototype.getWidth = function() {\n    return this.element.offsetWidth;\n}\n/**\n * -----------------------------------------------------------------------------\n * Set State\n * -----------------------------------------------------------------------------\n * This updates the state of the object. States are being added to the class name prefix with a double underscore.\n * If you would have the module `envelope` and give it the state `open`. The class name `envelope__open` will be added.\n * Whenever you remove the state `open`, the according class name will be removed as well.\n *\n * @param  {string} str                                                         The name of the state which should be set (this is transformed to CamelCase)\n * @return {boolean}                                                            True on success, otherwise false (might already have the state)\n */\nJss.prototype.setState = function(str) {\n    var element, verifiedState, state, className;\n\n    element         = this.element;\n    state           = JssService.toCamelCase(str);\n    className       = this.classNamePrefix() + \"__is\" + state;\n\n    // Check if this.state is an array, and make it one if not.\n    if (Array.isArray(this.state) == false ) {\n        this.state = [];\n    }\n\n    // This if statement prevents that the same state is being set multiple times\n    if ( !this.hasState(str) ) {\n        this.addClassName(className)\n        this.state.push(state);\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Has state\n * -----------------------------------------------------------------------------\n * Checks if the parameter is already a state and returns true if so. Otherwise false.\n *\n * @param  {string} str                                                         The state which will be checked for\n * @return {boolean}                                                            True if it has the given state, otherwise false\n */\nJss.prototype.hasState = function(str) {\n    if (typeof this.state == \"object\" && this.state.indexOf(str) >= 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Remove state\n * -----------------------------------------------------------------------------\n * Removes the state from the states array, and from the element.className\n *\n * @param  {string} str                                                         The name of the state which should be removed\n * @return {undefined}\n */\nJss.prototype.removeState = function(str) {\n\n    var state      = JssService.toCamelCase(str);\n    var stateIndex = this.state.indexOf(state);\n\n    if (str == \"all\" || typeof str == \"undefined\") {\n        this.removeClassName(\"states\");\n    } else {\n        this.state.splice(stateIndex, 1);\n        if (typeof this.moduleAction != \"undefined\" && this.moduleAction.length > -1) {\n            this.removeClassName(this.classNamePrefix() + \"\" + this.moduleAction + \"__is\" + state);\n        } else {\n            this.removeClassName(this.classNamePrefix() + \"__is\" + state);\n        }\n    }\n}\n\n\n// A simple way to watch variables\n\n// addVar(keyName, value, watch_function)\n// setVar(keyName, value)\n// getVar(keyName)\n// Add -> new\n// Set -> update\n// Get -> return\nvar JssModule = function(){};\n\nJssModule.prototype.type               = \"JssModule\";\nJssModule.prototype.init               = Jss.prototype.init;\nJssModule.prototype.setElement         = Jss.prototype.setElement;\n\n// Triggers\nJssModule.prototype.findTriggers       = Jss.prototype.findTriggers;\nJssModule.prototype.configureTrigger      = Jss.prototype.configureTrigger;\n\n// Actions\n//JssModule.prototype.actions            = Object.create(Jss.prototype.actions);\nJssModule.prototype.validateAction     = Jss.prototype.validateAction;\nJssModule.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssModule.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssModule.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssModule.prototype.setState           = Jss.prototype.setState;\nJssModule.prototype.hasState           = Jss.prototype.hasState;\nJssModule.prototype.removeState        = Jss.prototype.removeState;\n\n// Data attributes\nJssModule.prototype.addData            = Jss.prototype.addData;\nJssModule.prototype.getData            = Jss.prototype.getData;\nJssModule.prototype.setData            = Jss.prototype.setData;\nvar JssTrigger = function(element, options) {\n    this.setElement(element);\n\n    if (typeof options === \"object\") {\n        if (typeof options.module === \"object\") {\n            this.module = options.module;\n        }\n        if (typeof options.moduleName === \"string\") {\n            this.moduleName = options.moduleName;\n        }\n        if (typeof options.triggerName === \"string\") {\n            this.triggerName = options.triggerName;\n        }\n    }\n}\n\n\nJssTrigger.prototype                    = Object.create(Jss.prototype);\nJssTrigger.prototype.type               = \"JssTrigger\";\nJssTrigger.prototype.setElement         = Jss.prototype.setElement;\n\n// Actions\n//JssTrigger.prototype.actions            = Object.create(Jss.prototype.actions);\nJssTrigger.prototype.validateAction     = Jss.prototype.validateAction;\nJssTrigger.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssTrigger.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssTrigger.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssTrigger.prototype.setState           = Jss.prototype.setState;\nJssTrigger.prototype.hasState           = Jss.prototype.hasState;\nJssTrigger.prototype.removeState        = Jss.prototype.removeState;\n\n\n\nvar  JssController = {};\nJssController.modules \t\t= []; // Result array with objects of all the found modules\nJssController.activeModules \t= JssService.activeModules;\n\nJssController.findModules = function() {\n    var allElements = document.getElementsByTagName(\"*\");                       // Array with all domElements\n    var test = [];\n    var self = this;\n    for (var i=0; i < allElements.length; i++) {\n\n        // Set default vars //\n        var element = allElements[i];                                           // Specific domElement\n        var tmp = false;\n\n        // Loop through the (active) modules array and add/instantiate them\n        self.activeModules.forEach(function(module){\n            if (JssService.isModule(element, module)) {\n                tmp = eval(\"new \" + JssService.toCamelCase(module) + \"(element)\"); // Dynamicly load modules\n\n                tmp.setElement(element);                                        // Add the domElement to the module\n                tmp.findTriggers();\t\t\t                                    // Search for module triggers\n\n                tmp.init();\t\t\t\t\t                                    // Executes everything within the init function\n                self.modules.push(tmp);\n\n            }\n        }); // End forEach\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    JssController.findModules();\n    console.log(JssController);\n});"
          },
          "returns": [
            {
              "title": "returns",
              "description": null,
              "type": {
                "type": "UndefinedLiteral"
              }
            }
          ],
          "name": "setElement",
          "kind": "function",
          "memberof": "Jss",
          "scope": "instance",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            "Jss",
            "setElement"
          ]
        },
        {
          "description": "-----------------------------------------------------------------------------\nSet height\n-----------------------------------------------------------------------------\nSets the height of the `this.element` by the given input (height)",
          "tags": [
            {
              "title": "param",
              "description": "The height in pixels or percentage. Where numbers will be calculated to pixels so giving a height of 50 will result in a height of \"50px\". If you want percentages pass the variable with a percentage sign 50 + \"%\"",
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "height"
            },
            {
              "title": "returns",
              "description": "True if setting the height was succesfull, otherwise false.",
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            },
            {
              "title": "name",
              "name": "setHeight"
            },
            {
              "title": "kind",
              "kind": "function"
            },
            {
              "title": "memberof",
              "description": "Jss"
            },
            {
              "title": "instance"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 1031,
                "column": 0
              },
              "end": {
                "line": 1052,
                "column": 0
              }
            },
            "file": "/Users/jeffreyarts/Documents/DEV/jss/lib/jss.js",
            "code": "JssService = {};\n\n// Edit this array to enable or disable default modules\nJssService.activeModules   = []\n\n// Set this to false in a live environment\nJssService.dev             = true;\n\n/**************************\n*\n*   Below are core properties defined, becarefull when you think of changing these...\n*\n**************************/\n\n\nJssService.actions = {\n    hover:      ['hover',    'mouseover',   'onmouseover'                       ], // Fixed\n    click:      ['click',    'onclick'                                          ], // Fixed\n    mouseIn:    ['mousein',  'onmousein', 'mouseenter', 'onmouseenter'          ], // Fixed\n    mouseOut:   ['mouseout', 'onmouseout', 'mouseleave', 'onmouseleave'         ], // Fixed\n    resize:     ['resize',   'onresize'                                         ], // Fixed\n    focus:      ['focus',    'onfocus'                                          ],\n    keyDown:    ['keydown',  'keypress'                                         ],\n    keyUp:      ['keyup',    'keyrelease'                                       ],\n    change:     ['change',   'onchange'                                         ],\n};\n\nJssService.enterDelay = 1000;                                                   // Amount of miliseconds which is used to remove the entered state. (see core.actions) JssService.enterDelay setTimeout\n\nJssService.forbiddenProperties = [\n    'type',\n    'triggers',\n    'configureTrigger',\n    'findTriggers'\n];\n\n/**\n * -----------------------------------------------------------------------------\n * Is Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isModule = function(element, moduleName) {\n    var arr = element.className.split(\" \");\n    var found = false;\n\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i].indexOf(moduleName)        > -1 &&\n            arr[i].indexOf(moduleName + \"_\") == -1 &&\n            arr[i].indexOf(moduleName + \"-\") == -1)\n        {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.addModule = function(moduleName) {\n    this.activeModules.push(this.toKebabCase(moduleName))\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To CamelCase\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toCamelCase = function(input) {\n    var arr, res;\n    res = \"\";\n    if (typeof input === \"string\") {\n        input = input.replace(/\\-/g,\" \");                                       // Replace all dashes with spaces\n        arr = input.split(\" \");\n    } else {\n        arr = input;                                                            // Assume it is an array\n    }\n\n\n\n    var i = 0;\n    for (var i in arr) {\n        if (typeof i != \"undefined\") {\n            res += arr[i][0].toUpperCase()+ arr[i].slice(1); // Capitalize first letter\n        }\n    }\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To kebab-case\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toKebabCase = function(input) {\n    var res, str;\n    res = \"\";\n\n    if (typeof input === \"string\") {\n        str = input;\n    } else {                                                                    // Assume it is an array\n        str = input.join(\" \");\n    }\n\n    // First change it to camelcase\n    str = this.toCamelCase(str);\n\n    var max = str.length;\n    for (var i=0; i < max; i++) {\n        // Check if character is uppercase\n        if (str[i] != str[i].toLowerCase()) {\n            if (i!==0) {\n                str = str.substr(0, i) + \"-\" + str.substr(i);\n                i++;\n            }\n        }\n    }\n\n    return res = str.toLowerCase();\n}\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get option\n * -----------------------------------------------------------------------------\n * @param  {string} name                                                        Keyname in optionList\n * @param  {array} optionList                                                   Array with all possible options\n * @return {}                                                                   Copy of the value (optionsList[name])\n */\nJssService.getOption = function(name, optionList) {\n    if (typeof optionList !== \"object\") {\n        return false;\n    }\n\n    var res;\n\n    switch (name) {\n\n        // Only set `addDefaults` to false when it is explicitly set.\n        case \"addDefaults\":\n            if (optionList[name] !== false || typeof optionList[name] === \"undefined\") {\n                res = true;\n            } else {\n                res = false;\n            }\n        break;\n        case \"fallback\":\n            if ( Array.isArray(optionList[name]) ) {\n                res = optionList[name];\n                if (res.length===0) {\n                    res = false;\n                }\n            } else if (typeof optionList[name] === \"string\"){\n                res = [optionList[name]];\n            }\n        break;\n        default:\n        res = optionList[name]\n    }\n\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Is Trigger\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isTrigger = function(element, moduleName) {\n    if (element.className.indexOf(moduleName + \"--\") > -1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get trigger name\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {string} Name of the trigger.\n */\nJssService.getTriggerName = function(element, moduleName) {\n    if (typeof element != \"object\") {\n        console.error('Required first argument `element` needs to be a domElement.');\n        return false;\n    }\n    if (typeof moduleName != \"string\") {\n        console.error('Required second argument `moduleName` needs to be a string.');\n        return false;\n    }\n\n    // As an example we assume that the value of element.className equals 'b module--triggerName'\n    var startPos = element.className.indexOf(moduleName + \"--\");                    // 2\n    var sliced = element.className.slice(startPos, element.className.length )       // 'module--triggerName'\n    var endPos = sliced.indexOf(\" \");                                               // -1       // not found\n    if (endPos != -1) {                                                             // 19\n        sliced = sliced.slice(0,endPos);                                            // if there is more after the string, this will remove it\n    }\n    return sliced.replace(moduleName + \"--\",\"\")\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger name is allowed\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} True if the triggername is allowed, otherwise false.\n */\nJssService.triggerNameIsAllowed = function(element, moduleName) {\n    if (JssService.forbiddenProperties.indexOf(this.getTriggerName(element, moduleName)) > -1) {      // This triggerName is a core property, throw error\n        console.error('Triggername `' + getTriggerName(element,moduleName) + '` is not allowed. Change the trigger so it does not corresponds any of these: ' + JssService.forbiddenProperties)\n        return false;\n    }\n    return true;\n}\n/**\n * @module Jss\n * @author      Jeffrey Arts <sjeffff@gmail.com>\n * @copyright   2015\n */\nJss = function(){};\n\nJss.prototype.type      = \"Jss\"\nJss.prototype.triggers  = false;\nJss.prototype.element   = undefined;                                              // {obj} domElement\nJss.prototype.state     = undefined;                                              // {str} State of module, is reflected by the css class __isState\n\n/**\n * -----------------------------------------------------------------------------\n * Find Triggers\n * -----------------------------------------------------------------------------\n *\n * @param {domElement} element\n * @return {undefined}\n */\nJss.prototype.findTriggers = function(element) {\n    this.triggers = [];                                                         // If this is not set, all modules will have the same reference point to this.triggers.\n    // Module is created, now look for any module triggers\n    this.searchTriggersRecursiveInnerFunction(this.element)\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger\n * -----------------------------------------------------------------------------\n */\nJss.prototype.trigger = function(which, fn) {\n    if (typeof this.triggers !== \"object\") {\n        console.info(\"No triggers are found, please specify them in the css as `module-name--trigger-name`.\");\n        return false;\n    }\n\n    if (typeof this.triggers[which] !== \"object\") {\n        console.info(\"You are trying to execute a function on a non existing trigger `\" + which + \"`\");\n        return false;\n    }\n\n    for (var i = 0; i < this.triggers[which].length; i++) {\n        fn(this.triggers[which][i])\n    }\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Search triggers recursive inner function\n * -----------------------------------------------------------------------------\n * Recursive function which is executed bij findTriggers;\n *\n * @return {undefined}\n */\nJss.prototype.searchTriggersRecursiveInnerFunction = function(element) {\n    var self = this;\n    if (typeof element == \"undefined\" ) {\n        element = this.element;\n    }\n    if ( element.hasChildNodes() ) {\n        for (var i=0; i < element.childNodes.length; i++) {\n\n            var childElement = element.childNodes[i];                           // Improve readability\n\n            if (childElement.nodeType == 1) {                                   // NodeType 1 == domElement\n\n                if (JssService.isTrigger(childElement, this.moduleName)) {\n\n                    // Add a child element\n                    if (JssService.triggerNameIsAllowed(childElement, this.moduleName)) {\n                        var triggerName = JssService.getTriggerName(childElement, this.moduleName)\n\n                        if (typeof self.triggers[triggerName] !== \"object\") {\n                            self.triggers[triggerName] = [];\n                        }\n\n                        var tmp = new JssTrigger(childElement, {\n                            module: self,\n                            moduleName: this.moduleName,\n                            triggerName: triggerName,\n                        });\n\n                        self.triggers[triggerName].push(tmp);\n                    }\n                }\n                if (childElement.hasChildNodes()) {\n                    self.searchTriggersRecursiveInnerFunction(childElement)\n                }\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Configure Trigger\n * -----------------------------------------------------------------------------\n *\n * @return {undefined}\n */\nJss.prototype.configureTrigger = function(trigger, fn) {\n    if ( typeof this.triggers[trigger] == \"object\") {\n\n        for (var i = 0; i < this.triggers[trigger].length; i++) {\n            //self.triggers[trigger][i]\n            fn(this.triggers[trigger][i]);\n        }\n\n    } else if (JssService.dev) {\n        console.error(\"You are trying to configure a trigger which has no attached domElement\")\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n *   Init\n * -----------------------------------------------------------------------------\n * Notice the user that a init function needs to be added for controlling the triggers\n *\n * @return {undefined}\n */\nJss.prototype.init = function(func) {\n    if (JssService.dev) {\n        console.info(this.moduleName + \": Add a prototype.init function to add triggers and stuff\")\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set element\n * -----------------------------------------------------------------------------\n * Add a domElement to `this`\n *\n * @return {undefined}\n */\nJss.prototype.setElement = function(element) {\n    if (typeof element == \"undefined\") {\n        if (JssService.dev) {\n            return console.error(\"First parameter of setElement needs to be a domElement\");\n        }\n    }\n    this.element = element;\n}\n/*******************************************************************************\n   *\n   *\tActions\n   *\n   *  \t@author      Jeffrey Arts <sjeffff@gmail.com>\n   *    @copyright   2015\n   *\n*******************************************************************************/\n/**\n * -----------------------------------------------------------------------------\n *   Validate action\n * -----------------------------------------------------------------------------\n * Checks if parameter is a valid action, and logs an error when not.\n *\n * @param {string} request                                                      The name of the request\n * @return {boolean} true if a action is valid, otherwise false.\n */\nJss.prototype.validateAction = function(request) {\n    var result;\n    request = this.getActionElement(request).request\n    for (var action in JssService.actions) {\n        if (JssService.actions[action].indexOf(request.toLowerCase()) > -1) {\n            result = action;\n            break;\n        }\n    }\n    if (result) {\n        return result;\n    } else {\n        console.error(\"validateAction: unknown request\", request);\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * \t Add Action\n * -----------------------------------------------------------------------------\n * Adds an action to the object, list of possible requests can be found in Jss.actions\n *\n * | Options\n * \t\t- addDefaults {boolean}                                                 True: add default classes, false: don't\n *\n *\n *\n * @param {string} request                                                      The name of the request\n * @param {function} fn                                                         The function which should be triggered\n * @param {object} options                                                      Object with option parameters\n * @return {boolean} true if a action is succesfully added, otherwise false.\n */\nJss.prototype.addAction = function(request, fn, options) {\n\n    var self        = this;\n    var action      = self.validateAction(request)\n    var actions     = [];\n    var t = self.getActionElement(request);\n    var element     = t.element;\n    var request     = t.request;\n    t = undefined;\n\n    // Options\n    var addDefaults = JssService.getOption(\"addDefaults\", options);\n\n\n\n    switch (action) {\n\n        case \"resize\":\n\n            actions.push(element.addEventListener(\"resize\", fn));\n\n        break;\n\n\n        case \"click\":\n            actions.push(element.addEventListener(\"click\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"click\", function(){\n                    self.setState(\"Clicked\")\n                }));\n                actions.push(window.addEventListener( \"click\", function(event) {\n                    if (event.target != self.element && self.hasState(\"Clicked\")) {\n                        self.removeState(\"Clicked\")\n                    }\n                }));\n            } // End addDefaults\n        break;\n\n\n        case \"change\":\n            actions.push(element.addEventListener(\"change\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"change\", function(){\n                    self.setState(\"Changed\")\n                    setTimeout(function(){self.removeState(\"Changed\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"hover\":\n            actions.push(element.addEventListener(\"mouseover\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseover\", function(){\n                    self.setState(\"Hover\")\n                }));\n                actions.push(element.addEventListener(\"mouseout\",  function(){\n                    self.removeState(\"Hover\")\n                }));\n            }\n        break;\n\n\n        case \"mouseIn\":\n\n            actions.push(element.addEventListener(\"mouseenter\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseenter\", function(){\n                    self.setState(\"MouseIn\")\n                    setTimeout(function(){self.removeState(\"MouseIn\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"mouseOut\":\n\n            actions.push(element.addEventListener(\"mouseleave\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseleave\", function(){\n                    self.setState(\"MouseOut\")\n                    setTimeout(function(){self.removeState(\"MouseOut\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n    }\n\n\n    if (actions.length > 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get action element\n * -----------------------------------------------------------------------------\n * @param  {string} request                                                     The request\n * @return {object}                                                             An object with 2 properties: request && element\n */\nJss.prototype.getActionElement = function(request) {\n    var self = this;\n    var prefix = false;\n    var newRequest  = request;\n    var element = self.element;\n    // Set prefix if it exists\n    if (request.indexOf(\".\") > 0) {\n        var t       = request.split(\".\"),\n        newRequest  = t[1];\n        prefix      = t[0];\n        t = undefined;\n    }\n\n    // Update element according the prefix (or skip it, if not set)\n    if (prefix !== false) {\n        switch (prefix) {\n            case \"screen\":\n            case \"window\":\n                element = window;\n            break;\n        }\n    }\n\n    // Return object\n    return {\n        request: newRequest,\n        element: element\n    }\n}\n/**\n * -----------------------------------------------------------------------------\n * Class name prefix\n * -----------------------------------------------------------------------------\n * The prefix equals the modulename, or - when it's a trigger object - modulename--triggername\n *\n * @return {string} The classname\n */\nJss.prototype.classNamePrefix = function() {\n    if (this.type == \"JssTrigger\") {\n        return this.moduleName + \"--\" + this.triggerName;\n    } else {\n        return this.moduleName;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Remove class name\n * -----------------------------------------------------------------------------\n * Removes the `this.element` classname\n * \t- \"all\" || undefined        > Removes ALL classnames\n *  - \"allStates\" || \"states\"   > Remove all STATES\n *  - all other strings remove that specific string from the className\n *\n * @param {string} input                                                        The classname (case-sensitive) which needs to be removed\n * @return {undefined}\n */\nJss.prototype.removeClassName = function(input) {\n\n    var classList  = [];\n\n    if (input == \"all\" || typeof input == \"undefined\") {\n\n        this.element.className = \"\";\n\n    } else if (input == \"states\" || input == \"allStates\") {\n\n        classList = this.element.className.split(\" \");\n        for (var i in classList) {\n            className = classList[i];\n            if (className.indexOf(\"__is\") > -1) {\n                delete classList[i];\n            }\n        }\n        this.element.className = classList.join(\" \");\n\n    } else if(typeof input == \"string\") {\n        this.element.className = this.element.className.replace(input,\"\");\n    } else {\n        console.error(\"removeClassName: parameter should be a string\");\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Add class name\n * -----------------------------------------------------------------------------\n * Adds a class name by string or array.\n * Does NOT check for duplicates\n *\n * @param  {string} The classname to be added\n * @return {undefined}\n */\nJss.prototype.addClassName = function(data) {\n    this.element.className += \" \";\n    if (typeof data == \"string\") {\n        this.element.className += data;\n    } else {\n        this.element.className += data.join(\" \")\n    }\n}\n\n/**\n * List where the keys corresponds with this[key], and where the value is the function to be executed when the var is changed.\n */\nJss.prototype.setterWatchList = {};\nJss.prototype.getterWatchList = {};\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add data\n * -----------------------------------------------------------------------------\n * Add a (default) value for the given attribute.\n *\n * @param {string} attribute                                                    The name of the attribute (this[attribute])\n * @param {*} value                                                             The value of this[attribute], could be anything...\n * @param {object} options\n *           \t\t- setterWatchFunction {function}\n *           \t\t- getterWatchFunction {function}\n */\nJss.prototype.addData = function(attribute, value, options) {\n\n\n    // watchList[key] = fn;\n    var setterWatchFunction = JssService.getOption('setterWatchFunction', options); // Function\n    var getterWatchFunction = JssService.getOption('getterWatchFunction', options); // Function\n\n    if (typeof setterWatchFunction === \"function\") {\n        this.setterWatchList[attribute] = setterWatchFunction;\n    }\n\n    if (typeof getterWatchFunction === \"function\") {\n        this.getterWatchList[attribute] = getterWatchFunction;\n    }\n\n    // Set the default value\n    return this[attribute] = value;\n}\n\n\n\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- ajax {string} url\n */\nJss.prototype.setData = function(attribute, value, options) {\n\n    this[attribute] = value;\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n\n    if (Array.isArray(fallback)) {\n\n        for (var i = 0; i < fallback.length; i++) {\n            var type = fallback[i];\n\n            if (value && value.length > 0) {\n                this['setData' + JssService.toCamelCase(type)](attribute, value); // Call this.addDataAttribute(value) || this.addDataCookie(value) etc...\n                this[attribute] = value;\n            }\n        }\n    }\n\n    // Call the setter watch function, if defined;\n    if (typeof this.setterWatchList[attribute] === \"function\") { // Use the watchlist to add functionality whenever a data attribute is updated\n        this.setterWatchList[attribute]();\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataDefault {boolean}\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- dataAjax {string} url\n */\nJss.prototype.getData = function(attribute, options) {\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n    var value = false;\n\n\n    if (!fallback) {\n        fallback = ['attribute'];\n    }\n\n\n    for (var i = 0; i < fallback.length; i++) {\n        var type = JssService.toCamelCase(fallback[i]);\n        var customOptions = false;\n\n        if (typeof options == \"object\") {\n            customOptions = options[fallback[i].toLowerCase()];\n        }\n\n        if (!value || value.length < 0) {\n            if (typeof this['getData' + type] !== \"function\") {\n                console.error('this.getData' + type + ' is not a function. Probably ' + type + ' is not a available data option');\n                continue;\n            }\n            value = this['getData' + type]( attribute, customOptions ); // Call this.getDataAttribute(value) || this.getDataCookie(value) || this.getDataAjax(value) etc...\n        }\n    }\n    console.log(this.getterWatchList);\n    // Call the getter watch function, if defined;\n    if (typeof this.getterWatchList[attribute] == \"function\") {\n        this.getterWatchList[attribute]();\n    }\n\n    return this[attribute] = value;\n}\n/**\n * -----------------------------------------------------------------------------\n * Get data: Ajax\n * -----------------------------------------------------------------------------\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n *\n * @param {string} attribute                                                    The NAME of the inner variable (this.NAME), is also used as the key for the GET Request {NAME: value}\n * @param {object} options                                                      Object with parameters used to make a GET request\n * @return {string}                                                             The value of the given attribute, or false if an erro occured.\n */\nJss.prototype.getDataAjax = function(attribute, options) {\n    var url = JssService.getOption(\"url\", options);\n    var jsonKey = JssService.getOption(\"jsonKey\", options) || attribute;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('GET', url);\n\n        return ajaxReturn.success(function(result){\n            if (typeof result === \"object\") {\n                if (result[jsonKey]) {\n                    return result[jsonKey];\n                }\n            }\n        }).error(function(errorObject){\n            console.log(errorObject);\n        });\n    }\n\n    return false;\n};\n\n/**\n * -----------------------------------------------------------------------------\n * Set data: Ajax\n * -----------------------------------------------------------------------------\n * Makes a post request to the options.url in a object {attribute: value}\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n */\nJss.prototype.setDataAjax = function(attribute, value, options) {\n    var url = JssService.getOption(\"url\", options);\n    var requestObject = {}\n        requestObject[attribute] = value;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('POST', url, requestObject);\n\n        return ajaxReturn.success(function(result){\n            return true;\n        }).error(function(errorObject){\n            console.log(errorObject);\n            return false;\n        });\n    }\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Ajax (helper function)\n * -----------------------------------------------------------------------------\n * Based on Atom.js by Todd Motto\n * http://toddmotto.com/writing-a-standalone-ajax-xhr-javascript-micro-library/\n */\nJss.prototype.ajaxHelper = {\n    // Parses json if possible, otherwise just return text\n    parse: function(req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return [result, req];\n    },\n\n    xhr: function(type, url, data) {\n        var ajaxHelper = this;\n\n        var methods = {\n            success: function() {},\n            error: function() {}\n        };\n        var XHR = XMLHttpRequest || ActiveXObject;\n        var request = new XHR('MSXML2.XMLHTTP.3.0');\n        request.open(type, url, true);\n        request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n\n        request.onreadystatechange = function() {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    methods.success.apply(methods, ajaxHelper.parse(request));\n                } else {\n                    methods.error.apply(methods, ajaxHelper.parse(request));\n                }\n            }\n        };\n        request.send(data);\n        return {\n            success: function(callback) {\n                methods.success = callback;\n                return methods;\n            },\n            error: function(callback) {\n                methods.error = callback;\n                return methods;\n            }\n        };\n    }\n};\n\nJss.prototype.ajax = {\n    // Get\n    get: function(src) {\n        console.log(this);\n    },\n\n    // Set\n    put: function(url, data) {\n        return this.ajaxHelper.xhr('PUT', url, data);\n    },\n\n    // Add\n    post: function(url, data) {\n        return this.ajaxHelper.xhr('POST', url, data);\n    }\n\n};\n/**\n * -----------------------------------------------------------------------------\n * Get data attribute value\n * -----------------------------------------------------------------------------\n * Returns the value of the requested attribute. Search first for a data-[ATTRIBUTE] value\n * If not found, it checks for the attribute in the default object. When that is not being\n * found neither, the normal this[attribute] value is being returned.\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME)\n * @return {string}                                                             The value of the given attribute\n */\nJss.prototype.getDataAttribute = function(attribute) {\n\n    return this.element.dataset[attribute];\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Update data attribute\n * -----------------------------------------------------------------------------\n * Set the value to the given attribute. And updates the data-[ATTRIBUTE] value\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME=\"value\")\n * @param {string} value                                                        The VALUE of the data attribute (data-name=\"VALUE\")\n * @return {undefined}\n */\n\nJss.prototype.setDataAttribute = function(attribute, value) {\n\n    // Update data attribute\n    if (typeof value !== \"undefined\") {\n        this.element.dataset[attribute] = this[attribute];\n    } else {\n        delete this.element.dataset[attribute];\n    }\n\n    return true;\n}\nJss.prototype.dataDefaultsCookie = {\n    'expireData': undefined\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get cookie value\n * -----------------------------------------------------------------------------\n * Returns cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @return {string}                                                             The VALUE of the given attribute\n */\nJss.prototype.getDataCookie = function(attribute) {\n\n    if (!attribute) { return null; }\n    return decodeURIComponent(document.cookie.replace(new RegExp(\"(?:(?:^|.*;)\\\\s*\" + encodeURIComponent(attribute).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"), \"$1\")) || null;\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data cookie\n * -----------------------------------------------------------------------------\n * Updates the cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @param {string} value                                                        The VALUE of the cookie\n * @return {undefined}\n */\n\nJss.prototype.setDataCookie = function(attribute, value, options) {\n    var endDate, path, domain, secureConnection;\n\n    if (typeof options === \"object\") {\n        endDate = JssService.getOption('endDate', options);\n        path    = JssService.getOption('path', options);\n        domain  = JssService.getOption('domain', options);\n        secureConnection = JssService.getOption('secureConnection', options);\n    }\n\n    if (!attribute || /^(?:expires|max\\-age|path|domain|secure)$/i.test(attribute)) { return false; }\n    var sExpires = \"\";\n    if (endDate) {\n      switch (endDate.constructor) {\n        case Number:\n          sExpires = endDate === Infinity ? \"; expires=Fri, 31 Dec 9999 23:59:59 GMT\" : \"; max-age=\" + endDate;\n          break;\n        case String:\n          sExpires = \"; expires=\" + endDate;\n          break;\n        case Date:\n          sExpires = \"; expires=\" + endDate.toUTCString();\n          break;\n      }\n    }\n\n    document.cookie = encodeURIComponent(attribute) + \"=\" + encodeURIComponent(value) + sExpires + (domain ? \"; domain=\" + domain : \"\") + (path ? \"; path=\" + path : \"\") + (secureConnection ? \"; secure\" : \"\");\n    return true;\n}\n/*******************************************************************************\n\n    Styles\n\n*******************************************************************************/\n\n/**\n * -----------------------------------------------------------------------------\n * Set height\n * -----------------------------------------------------------------------------\n * Sets the height of the `this.element` by the given input (height)\n *\n * @param  {number} height                                                      The height in pixels or percentage. Where numbers will be calculated to pixels so giving a height of 50 will result in a height of \"50px\". If you want percentages pass the variable with a percentage sign 50 + \"%\"\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setHeight = function(height) {\n    if (typeof height === \"number\") {\n        height += \"px\";\n    }\n\n    if (typeof height !== \"string\") {\n        throw(\"parameter height needs to be a string or integer\");\n    }\n\n    this.element.style.height = height;\n    return true;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get height\n * -----------------------------------------------------------------------------\n * Returns the height of the `this.element`\n *\n * @return {number}                                                             The height of the element in pixels\n */\nJss.prototype.getHeight = function() {\n    return this.element.offsetHeight;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set width\n * -----------------------------------------------------------------------------\n * Sets the width of the `this.element` by the given input (width)\n *\n * @param  {number} width                                                       The width in pixels or percentage. Where numbers will be calculated to pixels so giving a width of 50 will result in a width of \"50px\". If you want to set a percentage, just pass the variable with a percentage sign (\"50%\")\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setWidth = function(width) {\n    if (typeof width == \"number\") {\n        width += \"px\";\n    }\n\n    if (typeof width !== \"string\") {\n        throw(\"parameter width needs to be a string or integer\");\n    }\n    this.element.style.width = width;\n    return true;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get width\n * -----------------------------------------------------------------------------\n * Returns the width of the `this.element`\n *\n * @return {number}                                                             The width of the element in pixels\n */\nJss.prototype.getWidth = function() {\n    return this.element.offsetWidth;\n}\n/**\n * -----------------------------------------------------------------------------\n * Set State\n * -----------------------------------------------------------------------------\n * This updates the state of the object. States are being added to the class name prefix with a double underscore.\n * If you would have the module `envelope` and give it the state `open`. The class name `envelope__open` will be added.\n * Whenever you remove the state `open`, the according class name will be removed as well.\n *\n * @param  {string} str                                                         The name of the state which should be set (this is transformed to CamelCase)\n * @return {boolean}                                                            True on success, otherwise false (might already have the state)\n */\nJss.prototype.setState = function(str) {\n    var element, verifiedState, state, className;\n\n    element         = this.element;\n    state           = JssService.toCamelCase(str);\n    className       = this.classNamePrefix() + \"__is\" + state;\n\n    // Check if this.state is an array, and make it one if not.\n    if (Array.isArray(this.state) == false ) {\n        this.state = [];\n    }\n\n    // This if statement prevents that the same state is being set multiple times\n    if ( !this.hasState(str) ) {\n        this.addClassName(className)\n        this.state.push(state);\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Has state\n * -----------------------------------------------------------------------------\n * Checks if the parameter is already a state and returns true if so. Otherwise false.\n *\n * @param  {string} str                                                         The state which will be checked for\n * @return {boolean}                                                            True if it has the given state, otherwise false\n */\nJss.prototype.hasState = function(str) {\n    if (typeof this.state == \"object\" && this.state.indexOf(str) >= 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Remove state\n * -----------------------------------------------------------------------------\n * Removes the state from the states array, and from the element.className\n *\n * @param  {string} str                                                         The name of the state which should be removed\n * @return {undefined}\n */\nJss.prototype.removeState = function(str) {\n\n    var state      = JssService.toCamelCase(str);\n    var stateIndex = this.state.indexOf(state);\n\n    if (str == \"all\" || typeof str == \"undefined\") {\n        this.removeClassName(\"states\");\n    } else {\n        this.state.splice(stateIndex, 1);\n        if (typeof this.moduleAction != \"undefined\" && this.moduleAction.length > -1) {\n            this.removeClassName(this.classNamePrefix() + \"\" + this.moduleAction + \"__is\" + state);\n        } else {\n            this.removeClassName(this.classNamePrefix() + \"__is\" + state);\n        }\n    }\n}\n\n\n// A simple way to watch variables\n\n// addVar(keyName, value, watch_function)\n// setVar(keyName, value)\n// getVar(keyName)\n// Add -> new\n// Set -> update\n// Get -> return\nvar JssModule = function(){};\n\nJssModule.prototype.type               = \"JssModule\";\nJssModule.prototype.init               = Jss.prototype.init;\nJssModule.prototype.setElement         = Jss.prototype.setElement;\n\n// Triggers\nJssModule.prototype.findTriggers       = Jss.prototype.findTriggers;\nJssModule.prototype.configureTrigger      = Jss.prototype.configureTrigger;\n\n// Actions\n//JssModule.prototype.actions            = Object.create(Jss.prototype.actions);\nJssModule.prototype.validateAction     = Jss.prototype.validateAction;\nJssModule.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssModule.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssModule.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssModule.prototype.setState           = Jss.prototype.setState;\nJssModule.prototype.hasState           = Jss.prototype.hasState;\nJssModule.prototype.removeState        = Jss.prototype.removeState;\n\n// Data attributes\nJssModule.prototype.addData            = Jss.prototype.addData;\nJssModule.prototype.getData            = Jss.prototype.getData;\nJssModule.prototype.setData            = Jss.prototype.setData;\nvar JssTrigger = function(element, options) {\n    this.setElement(element);\n\n    if (typeof options === \"object\") {\n        if (typeof options.module === \"object\") {\n            this.module = options.module;\n        }\n        if (typeof options.moduleName === \"string\") {\n            this.moduleName = options.moduleName;\n        }\n        if (typeof options.triggerName === \"string\") {\n            this.triggerName = options.triggerName;\n        }\n    }\n}\n\n\nJssTrigger.prototype                    = Object.create(Jss.prototype);\nJssTrigger.prototype.type               = \"JssTrigger\";\nJssTrigger.prototype.setElement         = Jss.prototype.setElement;\n\n// Actions\n//JssTrigger.prototype.actions            = Object.create(Jss.prototype.actions);\nJssTrigger.prototype.validateAction     = Jss.prototype.validateAction;\nJssTrigger.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssTrigger.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssTrigger.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssTrigger.prototype.setState           = Jss.prototype.setState;\nJssTrigger.prototype.hasState           = Jss.prototype.hasState;\nJssTrigger.prototype.removeState        = Jss.prototype.removeState;\n\n\n\nvar  JssController = {};\nJssController.modules \t\t= []; // Result array with objects of all the found modules\nJssController.activeModules \t= JssService.activeModules;\n\nJssController.findModules = function() {\n    var allElements = document.getElementsByTagName(\"*\");                       // Array with all domElements\n    var test = [];\n    var self = this;\n    for (var i=0; i < allElements.length; i++) {\n\n        // Set default vars //\n        var element = allElements[i];                                           // Specific domElement\n        var tmp = false;\n\n        // Loop through the (active) modules array and add/instantiate them\n        self.activeModules.forEach(function(module){\n            if (JssService.isModule(element, module)) {\n                tmp = eval(\"new \" + JssService.toCamelCase(module) + \"(element)\"); // Dynamicly load modules\n\n                tmp.setElement(element);                                        // Add the domElement to the module\n                tmp.findTriggers();\t\t\t                                    // Search for module triggers\n\n                tmp.init();\t\t\t\t\t                                    // Executes everything within the init function\n                self.modules.push(tmp);\n\n            }\n        }); // End forEach\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    JssController.findModules();\n    console.log(JssController);\n});"
          },
          "params": [
            {
              "title": "param",
              "description": "The height in pixels or percentage. Where numbers will be calculated to pixels so giving a height of 50 will result in a height of \"50px\". If you want percentages pass the variable with a percentage sign 50 + \"%\"",
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "height"
            }
          ],
          "returns": [
            {
              "title": "returns",
              "description": "True if setting the height was succesfull, otherwise false.",
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          ],
          "name": "setHeight",
          "kind": "function",
          "memberof": "Jss",
          "scope": "instance",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            "Jss",
            "setHeight"
          ]
        },
        {
          "description": "-----------------------------------------------------------------------------\nSet State\n-----------------------------------------------------------------------------\nThis updates the state of the object. States are being added to the class name prefix with a double underscore.\nIf you would have the module `envelope` and give it the state `open`. The class name `envelope__open` will be added.\nWhenever you remove the state `open`, the according class name will be removed as well.",
          "tags": [
            {
              "title": "param",
              "description": "The name of the state which should be set (this is transformed to CamelCase)",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "str"
            },
            {
              "title": "returns",
              "description": "True on success, otherwise false (might already have the state)",
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            },
            {
              "title": "name",
              "name": "setState"
            },
            {
              "title": "kind",
              "kind": "function"
            },
            {
              "title": "memberof",
              "description": "Jss"
            },
            {
              "title": "instance"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 1100,
                "column": 0
              },
              "end": {
                "line": 1131,
                "column": 0
              }
            },
            "file": "/Users/jeffreyarts/Documents/DEV/jss/lib/jss.js",
            "code": "JssService = {};\n\n// Edit this array to enable or disable default modules\nJssService.activeModules   = []\n\n// Set this to false in a live environment\nJssService.dev             = true;\n\n/**************************\n*\n*   Below are core properties defined, becarefull when you think of changing these...\n*\n**************************/\n\n\nJssService.actions = {\n    hover:      ['hover',    'mouseover',   'onmouseover'                       ], // Fixed\n    click:      ['click',    'onclick'                                          ], // Fixed\n    mouseIn:    ['mousein',  'onmousein', 'mouseenter', 'onmouseenter'          ], // Fixed\n    mouseOut:   ['mouseout', 'onmouseout', 'mouseleave', 'onmouseleave'         ], // Fixed\n    resize:     ['resize',   'onresize'                                         ], // Fixed\n    focus:      ['focus',    'onfocus'                                          ],\n    keyDown:    ['keydown',  'keypress'                                         ],\n    keyUp:      ['keyup',    'keyrelease'                                       ],\n    change:     ['change',   'onchange'                                         ],\n};\n\nJssService.enterDelay = 1000;                                                   // Amount of miliseconds which is used to remove the entered state. (see core.actions) JssService.enterDelay setTimeout\n\nJssService.forbiddenProperties = [\n    'type',\n    'triggers',\n    'configureTrigger',\n    'findTriggers'\n];\n\n/**\n * -----------------------------------------------------------------------------\n * Is Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isModule = function(element, moduleName) {\n    var arr = element.className.split(\" \");\n    var found = false;\n\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i].indexOf(moduleName)        > -1 &&\n            arr[i].indexOf(moduleName + \"_\") == -1 &&\n            arr[i].indexOf(moduleName + \"-\") == -1)\n        {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.addModule = function(moduleName) {\n    this.activeModules.push(this.toKebabCase(moduleName))\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To CamelCase\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toCamelCase = function(input) {\n    var arr, res;\n    res = \"\";\n    if (typeof input === \"string\") {\n        input = input.replace(/\\-/g,\" \");                                       // Replace all dashes with spaces\n        arr = input.split(\" \");\n    } else {\n        arr = input;                                                            // Assume it is an array\n    }\n\n\n\n    var i = 0;\n    for (var i in arr) {\n        if (typeof i != \"undefined\") {\n            res += arr[i][0].toUpperCase()+ arr[i].slice(1); // Capitalize first letter\n        }\n    }\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To kebab-case\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toKebabCase = function(input) {\n    var res, str;\n    res = \"\";\n\n    if (typeof input === \"string\") {\n        str = input;\n    } else {                                                                    // Assume it is an array\n        str = input.join(\" \");\n    }\n\n    // First change it to camelcase\n    str = this.toCamelCase(str);\n\n    var max = str.length;\n    for (var i=0; i < max; i++) {\n        // Check if character is uppercase\n        if (str[i] != str[i].toLowerCase()) {\n            if (i!==0) {\n                str = str.substr(0, i) + \"-\" + str.substr(i);\n                i++;\n            }\n        }\n    }\n\n    return res = str.toLowerCase();\n}\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get option\n * -----------------------------------------------------------------------------\n * @param  {string} name                                                        Keyname in optionList\n * @param  {array} optionList                                                   Array with all possible options\n * @return {}                                                                   Copy of the value (optionsList[name])\n */\nJssService.getOption = function(name, optionList) {\n    if (typeof optionList !== \"object\") {\n        return false;\n    }\n\n    var res;\n\n    switch (name) {\n\n        // Only set `addDefaults` to false when it is explicitly set.\n        case \"addDefaults\":\n            if (optionList[name] !== false || typeof optionList[name] === \"undefined\") {\n                res = true;\n            } else {\n                res = false;\n            }\n        break;\n        case \"fallback\":\n            if ( Array.isArray(optionList[name]) ) {\n                res = optionList[name];\n                if (res.length===0) {\n                    res = false;\n                }\n            } else if (typeof optionList[name] === \"string\"){\n                res = [optionList[name]];\n            }\n        break;\n        default:\n        res = optionList[name]\n    }\n\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Is Trigger\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isTrigger = function(element, moduleName) {\n    if (element.className.indexOf(moduleName + \"--\") > -1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get trigger name\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {string} Name of the trigger.\n */\nJssService.getTriggerName = function(element, moduleName) {\n    if (typeof element != \"object\") {\n        console.error('Required first argument `element` needs to be a domElement.');\n        return false;\n    }\n    if (typeof moduleName != \"string\") {\n        console.error('Required second argument `moduleName` needs to be a string.');\n        return false;\n    }\n\n    // As an example we assume that the value of element.className equals 'b module--triggerName'\n    var startPos = element.className.indexOf(moduleName + \"--\");                    // 2\n    var sliced = element.className.slice(startPos, element.className.length )       // 'module--triggerName'\n    var endPos = sliced.indexOf(\" \");                                               // -1       // not found\n    if (endPos != -1) {                                                             // 19\n        sliced = sliced.slice(0,endPos);                                            // if there is more after the string, this will remove it\n    }\n    return sliced.replace(moduleName + \"--\",\"\")\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger name is allowed\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} True if the triggername is allowed, otherwise false.\n */\nJssService.triggerNameIsAllowed = function(element, moduleName) {\n    if (JssService.forbiddenProperties.indexOf(this.getTriggerName(element, moduleName)) > -1) {      // This triggerName is a core property, throw error\n        console.error('Triggername `' + getTriggerName(element,moduleName) + '` is not allowed. Change the trigger so it does not corresponds any of these: ' + JssService.forbiddenProperties)\n        return false;\n    }\n    return true;\n}\n/**\n * @module Jss\n * @author      Jeffrey Arts <sjeffff@gmail.com>\n * @copyright   2015\n */\nJss = function(){};\n\nJss.prototype.type      = \"Jss\"\nJss.prototype.triggers  = false;\nJss.prototype.element   = undefined;                                              // {obj} domElement\nJss.prototype.state     = undefined;                                              // {str} State of module, is reflected by the css class __isState\n\n/**\n * -----------------------------------------------------------------------------\n * Find Triggers\n * -----------------------------------------------------------------------------\n *\n * @param {domElement} element\n * @return {undefined}\n */\nJss.prototype.findTriggers = function(element) {\n    this.triggers = [];                                                         // If this is not set, all modules will have the same reference point to this.triggers.\n    // Module is created, now look for any module triggers\n    this.searchTriggersRecursiveInnerFunction(this.element)\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger\n * -----------------------------------------------------------------------------\n */\nJss.prototype.trigger = function(which, fn) {\n    if (typeof this.triggers !== \"object\") {\n        console.info(\"No triggers are found, please specify them in the css as `module-name--trigger-name`.\");\n        return false;\n    }\n\n    if (typeof this.triggers[which] !== \"object\") {\n        console.info(\"You are trying to execute a function on a non existing trigger `\" + which + \"`\");\n        return false;\n    }\n\n    for (var i = 0; i < this.triggers[which].length; i++) {\n        fn(this.triggers[which][i])\n    }\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Search triggers recursive inner function\n * -----------------------------------------------------------------------------\n * Recursive function which is executed bij findTriggers;\n *\n * @return {undefined}\n */\nJss.prototype.searchTriggersRecursiveInnerFunction = function(element) {\n    var self = this;\n    if (typeof element == \"undefined\" ) {\n        element = this.element;\n    }\n    if ( element.hasChildNodes() ) {\n        for (var i=0; i < element.childNodes.length; i++) {\n\n            var childElement = element.childNodes[i];                           // Improve readability\n\n            if (childElement.nodeType == 1) {                                   // NodeType 1 == domElement\n\n                if (JssService.isTrigger(childElement, this.moduleName)) {\n\n                    // Add a child element\n                    if (JssService.triggerNameIsAllowed(childElement, this.moduleName)) {\n                        var triggerName = JssService.getTriggerName(childElement, this.moduleName)\n\n                        if (typeof self.triggers[triggerName] !== \"object\") {\n                            self.triggers[triggerName] = [];\n                        }\n\n                        var tmp = new JssTrigger(childElement, {\n                            module: self,\n                            moduleName: this.moduleName,\n                            triggerName: triggerName,\n                        });\n\n                        self.triggers[triggerName].push(tmp);\n                    }\n                }\n                if (childElement.hasChildNodes()) {\n                    self.searchTriggersRecursiveInnerFunction(childElement)\n                }\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Configure Trigger\n * -----------------------------------------------------------------------------\n *\n * @return {undefined}\n */\nJss.prototype.configureTrigger = function(trigger, fn) {\n    if ( typeof this.triggers[trigger] == \"object\") {\n\n        for (var i = 0; i < this.triggers[trigger].length; i++) {\n            //self.triggers[trigger][i]\n            fn(this.triggers[trigger][i]);\n        }\n\n    } else if (JssService.dev) {\n        console.error(\"You are trying to configure a trigger which has no attached domElement\")\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n *   Init\n * -----------------------------------------------------------------------------\n * Notice the user that a init function needs to be added for controlling the triggers\n *\n * @return {undefined}\n */\nJss.prototype.init = function(func) {\n    if (JssService.dev) {\n        console.info(this.moduleName + \": Add a prototype.init function to add triggers and stuff\")\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set element\n * -----------------------------------------------------------------------------\n * Add a domElement to `this`\n *\n * @return {undefined}\n */\nJss.prototype.setElement = function(element) {\n    if (typeof element == \"undefined\") {\n        if (JssService.dev) {\n            return console.error(\"First parameter of setElement needs to be a domElement\");\n        }\n    }\n    this.element = element;\n}\n/*******************************************************************************\n   *\n   *\tActions\n   *\n   *  \t@author      Jeffrey Arts <sjeffff@gmail.com>\n   *    @copyright   2015\n   *\n*******************************************************************************/\n/**\n * -----------------------------------------------------------------------------\n *   Validate action\n * -----------------------------------------------------------------------------\n * Checks if parameter is a valid action, and logs an error when not.\n *\n * @param {string} request                                                      The name of the request\n * @return {boolean} true if a action is valid, otherwise false.\n */\nJss.prototype.validateAction = function(request) {\n    var result;\n    request = this.getActionElement(request).request\n    for (var action in JssService.actions) {\n        if (JssService.actions[action].indexOf(request.toLowerCase()) > -1) {\n            result = action;\n            break;\n        }\n    }\n    if (result) {\n        return result;\n    } else {\n        console.error(\"validateAction: unknown request\", request);\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * \t Add Action\n * -----------------------------------------------------------------------------\n * Adds an action to the object, list of possible requests can be found in Jss.actions\n *\n * | Options\n * \t\t- addDefaults {boolean}                                                 True: add default classes, false: don't\n *\n *\n *\n * @param {string} request                                                      The name of the request\n * @param {function} fn                                                         The function which should be triggered\n * @param {object} options                                                      Object with option parameters\n * @return {boolean} true if a action is succesfully added, otherwise false.\n */\nJss.prototype.addAction = function(request, fn, options) {\n\n    var self        = this;\n    var action      = self.validateAction(request)\n    var actions     = [];\n    var t = self.getActionElement(request);\n    var element     = t.element;\n    var request     = t.request;\n    t = undefined;\n\n    // Options\n    var addDefaults = JssService.getOption(\"addDefaults\", options);\n\n\n\n    switch (action) {\n\n        case \"resize\":\n\n            actions.push(element.addEventListener(\"resize\", fn));\n\n        break;\n\n\n        case \"click\":\n            actions.push(element.addEventListener(\"click\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"click\", function(){\n                    self.setState(\"Clicked\")\n                }));\n                actions.push(window.addEventListener( \"click\", function(event) {\n                    if (event.target != self.element && self.hasState(\"Clicked\")) {\n                        self.removeState(\"Clicked\")\n                    }\n                }));\n            } // End addDefaults\n        break;\n\n\n        case \"change\":\n            actions.push(element.addEventListener(\"change\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"change\", function(){\n                    self.setState(\"Changed\")\n                    setTimeout(function(){self.removeState(\"Changed\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"hover\":\n            actions.push(element.addEventListener(\"mouseover\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseover\", function(){\n                    self.setState(\"Hover\")\n                }));\n                actions.push(element.addEventListener(\"mouseout\",  function(){\n                    self.removeState(\"Hover\")\n                }));\n            }\n        break;\n\n\n        case \"mouseIn\":\n\n            actions.push(element.addEventListener(\"mouseenter\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseenter\", function(){\n                    self.setState(\"MouseIn\")\n                    setTimeout(function(){self.removeState(\"MouseIn\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"mouseOut\":\n\n            actions.push(element.addEventListener(\"mouseleave\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseleave\", function(){\n                    self.setState(\"MouseOut\")\n                    setTimeout(function(){self.removeState(\"MouseOut\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n    }\n\n\n    if (actions.length > 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get action element\n * -----------------------------------------------------------------------------\n * @param  {string} request                                                     The request\n * @return {object}                                                             An object with 2 properties: request && element\n */\nJss.prototype.getActionElement = function(request) {\n    var self = this;\n    var prefix = false;\n    var newRequest  = request;\n    var element = self.element;\n    // Set prefix if it exists\n    if (request.indexOf(\".\") > 0) {\n        var t       = request.split(\".\"),\n        newRequest  = t[1];\n        prefix      = t[0];\n        t = undefined;\n    }\n\n    // Update element according the prefix (or skip it, if not set)\n    if (prefix !== false) {\n        switch (prefix) {\n            case \"screen\":\n            case \"window\":\n                element = window;\n            break;\n        }\n    }\n\n    // Return object\n    return {\n        request: newRequest,\n        element: element\n    }\n}\n/**\n * -----------------------------------------------------------------------------\n * Class name prefix\n * -----------------------------------------------------------------------------\n * The prefix equals the modulename, or - when it's a trigger object - modulename--triggername\n *\n * @return {string} The classname\n */\nJss.prototype.classNamePrefix = function() {\n    if (this.type == \"JssTrigger\") {\n        return this.moduleName + \"--\" + this.triggerName;\n    } else {\n        return this.moduleName;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Remove class name\n * -----------------------------------------------------------------------------\n * Removes the `this.element` classname\n * \t- \"all\" || undefined        > Removes ALL classnames\n *  - \"allStates\" || \"states\"   > Remove all STATES\n *  - all other strings remove that specific string from the className\n *\n * @param {string} input                                                        The classname (case-sensitive) which needs to be removed\n * @return {undefined}\n */\nJss.prototype.removeClassName = function(input) {\n\n    var classList  = [];\n\n    if (input == \"all\" || typeof input == \"undefined\") {\n\n        this.element.className = \"\";\n\n    } else if (input == \"states\" || input == \"allStates\") {\n\n        classList = this.element.className.split(\" \");\n        for (var i in classList) {\n            className = classList[i];\n            if (className.indexOf(\"__is\") > -1) {\n                delete classList[i];\n            }\n        }\n        this.element.className = classList.join(\" \");\n\n    } else if(typeof input == \"string\") {\n        this.element.className = this.element.className.replace(input,\"\");\n    } else {\n        console.error(\"removeClassName: parameter should be a string\");\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Add class name\n * -----------------------------------------------------------------------------\n * Adds a class name by string or array.\n * Does NOT check for duplicates\n *\n * @param  {string} The classname to be added\n * @return {undefined}\n */\nJss.prototype.addClassName = function(data) {\n    this.element.className += \" \";\n    if (typeof data == \"string\") {\n        this.element.className += data;\n    } else {\n        this.element.className += data.join(\" \")\n    }\n}\n\n/**\n * List where the keys corresponds with this[key], and where the value is the function to be executed when the var is changed.\n */\nJss.prototype.setterWatchList = {};\nJss.prototype.getterWatchList = {};\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add data\n * -----------------------------------------------------------------------------\n * Add a (default) value for the given attribute.\n *\n * @param {string} attribute                                                    The name of the attribute (this[attribute])\n * @param {*} value                                                             The value of this[attribute], could be anything...\n * @param {object} options\n *           \t\t- setterWatchFunction {function}\n *           \t\t- getterWatchFunction {function}\n */\nJss.prototype.addData = function(attribute, value, options) {\n\n\n    // watchList[key] = fn;\n    var setterWatchFunction = JssService.getOption('setterWatchFunction', options); // Function\n    var getterWatchFunction = JssService.getOption('getterWatchFunction', options); // Function\n\n    if (typeof setterWatchFunction === \"function\") {\n        this.setterWatchList[attribute] = setterWatchFunction;\n    }\n\n    if (typeof getterWatchFunction === \"function\") {\n        this.getterWatchList[attribute] = getterWatchFunction;\n    }\n\n    // Set the default value\n    return this[attribute] = value;\n}\n\n\n\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- ajax {string} url\n */\nJss.prototype.setData = function(attribute, value, options) {\n\n    this[attribute] = value;\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n\n    if (Array.isArray(fallback)) {\n\n        for (var i = 0; i < fallback.length; i++) {\n            var type = fallback[i];\n\n            if (value && value.length > 0) {\n                this['setData' + JssService.toCamelCase(type)](attribute, value); // Call this.addDataAttribute(value) || this.addDataCookie(value) etc...\n                this[attribute] = value;\n            }\n        }\n    }\n\n    // Call the setter watch function, if defined;\n    if (typeof this.setterWatchList[attribute] === \"function\") { // Use the watchlist to add functionality whenever a data attribute is updated\n        this.setterWatchList[attribute]();\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataDefault {boolean}\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- dataAjax {string} url\n */\nJss.prototype.getData = function(attribute, options) {\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n    var value = false;\n\n\n    if (!fallback) {\n        fallback = ['attribute'];\n    }\n\n\n    for (var i = 0; i < fallback.length; i++) {\n        var type = JssService.toCamelCase(fallback[i]);\n        var customOptions = false;\n\n        if (typeof options == \"object\") {\n            customOptions = options[fallback[i].toLowerCase()];\n        }\n\n        if (!value || value.length < 0) {\n            if (typeof this['getData' + type] !== \"function\") {\n                console.error('this.getData' + type + ' is not a function. Probably ' + type + ' is not a available data option');\n                continue;\n            }\n            value = this['getData' + type]( attribute, customOptions ); // Call this.getDataAttribute(value) || this.getDataCookie(value) || this.getDataAjax(value) etc...\n        }\n    }\n    console.log(this.getterWatchList);\n    // Call the getter watch function, if defined;\n    if (typeof this.getterWatchList[attribute] == \"function\") {\n        this.getterWatchList[attribute]();\n    }\n\n    return this[attribute] = value;\n}\n/**\n * -----------------------------------------------------------------------------\n * Get data: Ajax\n * -----------------------------------------------------------------------------\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n *\n * @param {string} attribute                                                    The NAME of the inner variable (this.NAME), is also used as the key for the GET Request {NAME: value}\n * @param {object} options                                                      Object with parameters used to make a GET request\n * @return {string}                                                             The value of the given attribute, or false if an erro occured.\n */\nJss.prototype.getDataAjax = function(attribute, options) {\n    var url = JssService.getOption(\"url\", options);\n    var jsonKey = JssService.getOption(\"jsonKey\", options) || attribute;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('GET', url);\n\n        return ajaxReturn.success(function(result){\n            if (typeof result === \"object\") {\n                if (result[jsonKey]) {\n                    return result[jsonKey];\n                }\n            }\n        }).error(function(errorObject){\n            console.log(errorObject);\n        });\n    }\n\n    return false;\n};\n\n/**\n * -----------------------------------------------------------------------------\n * Set data: Ajax\n * -----------------------------------------------------------------------------\n * Makes a post request to the options.url in a object {attribute: value}\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n */\nJss.prototype.setDataAjax = function(attribute, value, options) {\n    var url = JssService.getOption(\"url\", options);\n    var requestObject = {}\n        requestObject[attribute] = value;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('POST', url, requestObject);\n\n        return ajaxReturn.success(function(result){\n            return true;\n        }).error(function(errorObject){\n            console.log(errorObject);\n            return false;\n        });\n    }\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Ajax (helper function)\n * -----------------------------------------------------------------------------\n * Based on Atom.js by Todd Motto\n * http://toddmotto.com/writing-a-standalone-ajax-xhr-javascript-micro-library/\n */\nJss.prototype.ajaxHelper = {\n    // Parses json if possible, otherwise just return text\n    parse: function(req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return [result, req];\n    },\n\n    xhr: function(type, url, data) {\n        var ajaxHelper = this;\n\n        var methods = {\n            success: function() {},\n            error: function() {}\n        };\n        var XHR = XMLHttpRequest || ActiveXObject;\n        var request = new XHR('MSXML2.XMLHTTP.3.0');\n        request.open(type, url, true);\n        request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n\n        request.onreadystatechange = function() {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    methods.success.apply(methods, ajaxHelper.parse(request));\n                } else {\n                    methods.error.apply(methods, ajaxHelper.parse(request));\n                }\n            }\n        };\n        request.send(data);\n        return {\n            success: function(callback) {\n                methods.success = callback;\n                return methods;\n            },\n            error: function(callback) {\n                methods.error = callback;\n                return methods;\n            }\n        };\n    }\n};\n\nJss.prototype.ajax = {\n    // Get\n    get: function(src) {\n        console.log(this);\n    },\n\n    // Set\n    put: function(url, data) {\n        return this.ajaxHelper.xhr('PUT', url, data);\n    },\n\n    // Add\n    post: function(url, data) {\n        return this.ajaxHelper.xhr('POST', url, data);\n    }\n\n};\n/**\n * -----------------------------------------------------------------------------\n * Get data attribute value\n * -----------------------------------------------------------------------------\n * Returns the value of the requested attribute. Search first for a data-[ATTRIBUTE] value\n * If not found, it checks for the attribute in the default object. When that is not being\n * found neither, the normal this[attribute] value is being returned.\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME)\n * @return {string}                                                             The value of the given attribute\n */\nJss.prototype.getDataAttribute = function(attribute) {\n\n    return this.element.dataset[attribute];\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Update data attribute\n * -----------------------------------------------------------------------------\n * Set the value to the given attribute. And updates the data-[ATTRIBUTE] value\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME=\"value\")\n * @param {string} value                                                        The VALUE of the data attribute (data-name=\"VALUE\")\n * @return {undefined}\n */\n\nJss.prototype.setDataAttribute = function(attribute, value) {\n\n    // Update data attribute\n    if (typeof value !== \"undefined\") {\n        this.element.dataset[attribute] = this[attribute];\n    } else {\n        delete this.element.dataset[attribute];\n    }\n\n    return true;\n}\nJss.prototype.dataDefaultsCookie = {\n    'expireData': undefined\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get cookie value\n * -----------------------------------------------------------------------------\n * Returns cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @return {string}                                                             The VALUE of the given attribute\n */\nJss.prototype.getDataCookie = function(attribute) {\n\n    if (!attribute) { return null; }\n    return decodeURIComponent(document.cookie.replace(new RegExp(\"(?:(?:^|.*;)\\\\s*\" + encodeURIComponent(attribute).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"), \"$1\")) || null;\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data cookie\n * -----------------------------------------------------------------------------\n * Updates the cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @param {string} value                                                        The VALUE of the cookie\n * @return {undefined}\n */\n\nJss.prototype.setDataCookie = function(attribute, value, options) {\n    var endDate, path, domain, secureConnection;\n\n    if (typeof options === \"object\") {\n        endDate = JssService.getOption('endDate', options);\n        path    = JssService.getOption('path', options);\n        domain  = JssService.getOption('domain', options);\n        secureConnection = JssService.getOption('secureConnection', options);\n    }\n\n    if (!attribute || /^(?:expires|max\\-age|path|domain|secure)$/i.test(attribute)) { return false; }\n    var sExpires = \"\";\n    if (endDate) {\n      switch (endDate.constructor) {\n        case Number:\n          sExpires = endDate === Infinity ? \"; expires=Fri, 31 Dec 9999 23:59:59 GMT\" : \"; max-age=\" + endDate;\n          break;\n        case String:\n          sExpires = \"; expires=\" + endDate;\n          break;\n        case Date:\n          sExpires = \"; expires=\" + endDate.toUTCString();\n          break;\n      }\n    }\n\n    document.cookie = encodeURIComponent(attribute) + \"=\" + encodeURIComponent(value) + sExpires + (domain ? \"; domain=\" + domain : \"\") + (path ? \"; path=\" + path : \"\") + (secureConnection ? \"; secure\" : \"\");\n    return true;\n}\n/*******************************************************************************\n\n    Styles\n\n*******************************************************************************/\n\n/**\n * -----------------------------------------------------------------------------\n * Set height\n * -----------------------------------------------------------------------------\n * Sets the height of the `this.element` by the given input (height)\n *\n * @param  {number} height                                                      The height in pixels or percentage. Where numbers will be calculated to pixels so giving a height of 50 will result in a height of \"50px\". If you want percentages pass the variable with a percentage sign 50 + \"%\"\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setHeight = function(height) {\n    if (typeof height === \"number\") {\n        height += \"px\";\n    }\n\n    if (typeof height !== \"string\") {\n        throw(\"parameter height needs to be a string or integer\");\n    }\n\n    this.element.style.height = height;\n    return true;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get height\n * -----------------------------------------------------------------------------\n * Returns the height of the `this.element`\n *\n * @return {number}                                                             The height of the element in pixels\n */\nJss.prototype.getHeight = function() {\n    return this.element.offsetHeight;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set width\n * -----------------------------------------------------------------------------\n * Sets the width of the `this.element` by the given input (width)\n *\n * @param  {number} width                                                       The width in pixels or percentage. Where numbers will be calculated to pixels so giving a width of 50 will result in a width of \"50px\". If you want to set a percentage, just pass the variable with a percentage sign (\"50%\")\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setWidth = function(width) {\n    if (typeof width == \"number\") {\n        width += \"px\";\n    }\n\n    if (typeof width !== \"string\") {\n        throw(\"parameter width needs to be a string or integer\");\n    }\n    this.element.style.width = width;\n    return true;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get width\n * -----------------------------------------------------------------------------\n * Returns the width of the `this.element`\n *\n * @return {number}                                                             The width of the element in pixels\n */\nJss.prototype.getWidth = function() {\n    return this.element.offsetWidth;\n}\n/**\n * -----------------------------------------------------------------------------\n * Set State\n * -----------------------------------------------------------------------------\n * This updates the state of the object. States are being added to the class name prefix with a double underscore.\n * If you would have the module `envelope` and give it the state `open`. The class name `envelope__open` will be added.\n * Whenever you remove the state `open`, the according class name will be removed as well.\n *\n * @param  {string} str                                                         The name of the state which should be set (this is transformed to CamelCase)\n * @return {boolean}                                                            True on success, otherwise false (might already have the state)\n */\nJss.prototype.setState = function(str) {\n    var element, verifiedState, state, className;\n\n    element         = this.element;\n    state           = JssService.toCamelCase(str);\n    className       = this.classNamePrefix() + \"__is\" + state;\n\n    // Check if this.state is an array, and make it one if not.\n    if (Array.isArray(this.state) == false ) {\n        this.state = [];\n    }\n\n    // This if statement prevents that the same state is being set multiple times\n    if ( !this.hasState(str) ) {\n        this.addClassName(className)\n        this.state.push(state);\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Has state\n * -----------------------------------------------------------------------------\n * Checks if the parameter is already a state and returns true if so. Otherwise false.\n *\n * @param  {string} str                                                         The state which will be checked for\n * @return {boolean}                                                            True if it has the given state, otherwise false\n */\nJss.prototype.hasState = function(str) {\n    if (typeof this.state == \"object\" && this.state.indexOf(str) >= 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Remove state\n * -----------------------------------------------------------------------------\n * Removes the state from the states array, and from the element.className\n *\n * @param  {string} str                                                         The name of the state which should be removed\n * @return {undefined}\n */\nJss.prototype.removeState = function(str) {\n\n    var state      = JssService.toCamelCase(str);\n    var stateIndex = this.state.indexOf(state);\n\n    if (str == \"all\" || typeof str == \"undefined\") {\n        this.removeClassName(\"states\");\n    } else {\n        this.state.splice(stateIndex, 1);\n        if (typeof this.moduleAction != \"undefined\" && this.moduleAction.length > -1) {\n            this.removeClassName(this.classNamePrefix() + \"\" + this.moduleAction + \"__is\" + state);\n        } else {\n            this.removeClassName(this.classNamePrefix() + \"__is\" + state);\n        }\n    }\n}\n\n\n// A simple way to watch variables\n\n// addVar(keyName, value, watch_function)\n// setVar(keyName, value)\n// getVar(keyName)\n// Add -> new\n// Set -> update\n// Get -> return\nvar JssModule = function(){};\n\nJssModule.prototype.type               = \"JssModule\";\nJssModule.prototype.init               = Jss.prototype.init;\nJssModule.prototype.setElement         = Jss.prototype.setElement;\n\n// Triggers\nJssModule.prototype.findTriggers       = Jss.prototype.findTriggers;\nJssModule.prototype.configureTrigger      = Jss.prototype.configureTrigger;\n\n// Actions\n//JssModule.prototype.actions            = Object.create(Jss.prototype.actions);\nJssModule.prototype.validateAction     = Jss.prototype.validateAction;\nJssModule.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssModule.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssModule.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssModule.prototype.setState           = Jss.prototype.setState;\nJssModule.prototype.hasState           = Jss.prototype.hasState;\nJssModule.prototype.removeState        = Jss.prototype.removeState;\n\n// Data attributes\nJssModule.prototype.addData            = Jss.prototype.addData;\nJssModule.prototype.getData            = Jss.prototype.getData;\nJssModule.prototype.setData            = Jss.prototype.setData;\nvar JssTrigger = function(element, options) {\n    this.setElement(element);\n\n    if (typeof options === \"object\") {\n        if (typeof options.module === \"object\") {\n            this.module = options.module;\n        }\n        if (typeof options.moduleName === \"string\") {\n            this.moduleName = options.moduleName;\n        }\n        if (typeof options.triggerName === \"string\") {\n            this.triggerName = options.triggerName;\n        }\n    }\n}\n\n\nJssTrigger.prototype                    = Object.create(Jss.prototype);\nJssTrigger.prototype.type               = \"JssTrigger\";\nJssTrigger.prototype.setElement         = Jss.prototype.setElement;\n\n// Actions\n//JssTrigger.prototype.actions            = Object.create(Jss.prototype.actions);\nJssTrigger.prototype.validateAction     = Jss.prototype.validateAction;\nJssTrigger.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssTrigger.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssTrigger.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssTrigger.prototype.setState           = Jss.prototype.setState;\nJssTrigger.prototype.hasState           = Jss.prototype.hasState;\nJssTrigger.prototype.removeState        = Jss.prototype.removeState;\n\n\n\nvar  JssController = {};\nJssController.modules \t\t= []; // Result array with objects of all the found modules\nJssController.activeModules \t= JssService.activeModules;\n\nJssController.findModules = function() {\n    var allElements = document.getElementsByTagName(\"*\");                       // Array with all domElements\n    var test = [];\n    var self = this;\n    for (var i=0; i < allElements.length; i++) {\n\n        // Set default vars //\n        var element = allElements[i];                                           // Specific domElement\n        var tmp = false;\n\n        // Loop through the (active) modules array and add/instantiate them\n        self.activeModules.forEach(function(module){\n            if (JssService.isModule(element, module)) {\n                tmp = eval(\"new \" + JssService.toCamelCase(module) + \"(element)\"); // Dynamicly load modules\n\n                tmp.setElement(element);                                        // Add the domElement to the module\n                tmp.findTriggers();\t\t\t                                    // Search for module triggers\n\n                tmp.init();\t\t\t\t\t                                    // Executes everything within the init function\n                self.modules.push(tmp);\n\n            }\n        }); // End forEach\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    JssController.findModules();\n    console.log(JssController);\n});"
          },
          "params": [
            {
              "title": "param",
              "description": "The name of the state which should be set (this is transformed to CamelCase)",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "str"
            }
          ],
          "returns": [
            {
              "title": "returns",
              "description": "True on success, otherwise false (might already have the state)",
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          ],
          "name": "setState",
          "kind": "function",
          "memberof": "Jss",
          "scope": "instance",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            "Jss",
            "setState"
          ]
        },
        {
          "description": "List where the keys corresponds with this[key], and where the value is the function to be executed when the var is changed.",
          "tags": [
            {
              "title": "name",
              "name": "setterWatchList"
            },
            {
              "title": "memberof",
              "description": "Jss"
            },
            {
              "title": "instance"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 657,
                "column": 0
              },
              "end": {
                "line": 657,
                "column": 35
              }
            },
            "file": "/Users/jeffreyarts/Documents/DEV/jss/lib/jss.js",
            "code": "JssService = {};\n\n// Edit this array to enable or disable default modules\nJssService.activeModules   = []\n\n// Set this to false in a live environment\nJssService.dev             = true;\n\n/**************************\n*\n*   Below are core properties defined, becarefull when you think of changing these...\n*\n**************************/\n\n\nJssService.actions = {\n    hover:      ['hover',    'mouseover',   'onmouseover'                       ], // Fixed\n    click:      ['click',    'onclick'                                          ], // Fixed\n    mouseIn:    ['mousein',  'onmousein', 'mouseenter', 'onmouseenter'          ], // Fixed\n    mouseOut:   ['mouseout', 'onmouseout', 'mouseleave', 'onmouseleave'         ], // Fixed\n    resize:     ['resize',   'onresize'                                         ], // Fixed\n    focus:      ['focus',    'onfocus'                                          ],\n    keyDown:    ['keydown',  'keypress'                                         ],\n    keyUp:      ['keyup',    'keyrelease'                                       ],\n    change:     ['change',   'onchange'                                         ],\n};\n\nJssService.enterDelay = 1000;                                                   // Amount of miliseconds which is used to remove the entered state. (see core.actions) JssService.enterDelay setTimeout\n\nJssService.forbiddenProperties = [\n    'type',\n    'triggers',\n    'configureTrigger',\n    'findTriggers'\n];\n\n/**\n * -----------------------------------------------------------------------------\n * Is Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isModule = function(element, moduleName) {\n    var arr = element.className.split(\" \");\n    var found = false;\n\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i].indexOf(moduleName)        > -1 &&\n            arr[i].indexOf(moduleName + \"_\") == -1 &&\n            arr[i].indexOf(moduleName + \"-\") == -1)\n        {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.addModule = function(moduleName) {\n    this.activeModules.push(this.toKebabCase(moduleName))\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To CamelCase\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toCamelCase = function(input) {\n    var arr, res;\n    res = \"\";\n    if (typeof input === \"string\") {\n        input = input.replace(/\\-/g,\" \");                                       // Replace all dashes with spaces\n        arr = input.split(\" \");\n    } else {\n        arr = input;                                                            // Assume it is an array\n    }\n\n\n\n    var i = 0;\n    for (var i in arr) {\n        if (typeof i != \"undefined\") {\n            res += arr[i][0].toUpperCase()+ arr[i].slice(1); // Capitalize first letter\n        }\n    }\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To kebab-case\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toKebabCase = function(input) {\n    var res, str;\n    res = \"\";\n\n    if (typeof input === \"string\") {\n        str = input;\n    } else {                                                                    // Assume it is an array\n        str = input.join(\" \");\n    }\n\n    // First change it to camelcase\n    str = this.toCamelCase(str);\n\n    var max = str.length;\n    for (var i=0; i < max; i++) {\n        // Check if character is uppercase\n        if (str[i] != str[i].toLowerCase()) {\n            if (i!==0) {\n                str = str.substr(0, i) + \"-\" + str.substr(i);\n                i++;\n            }\n        }\n    }\n\n    return res = str.toLowerCase();\n}\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get option\n * -----------------------------------------------------------------------------\n * @param  {string} name                                                        Keyname in optionList\n * @param  {array} optionList                                                   Array with all possible options\n * @return {}                                                                   Copy of the value (optionsList[name])\n */\nJssService.getOption = function(name, optionList) {\n    if (typeof optionList !== \"object\") {\n        return false;\n    }\n\n    var res;\n\n    switch (name) {\n\n        // Only set `addDefaults` to false when it is explicitly set.\n        case \"addDefaults\":\n            if (optionList[name] !== false || typeof optionList[name] === \"undefined\") {\n                res = true;\n            } else {\n                res = false;\n            }\n        break;\n        case \"fallback\":\n            if ( Array.isArray(optionList[name]) ) {\n                res = optionList[name];\n                if (res.length===0) {\n                    res = false;\n                }\n            } else if (typeof optionList[name] === \"string\"){\n                res = [optionList[name]];\n            }\n        break;\n        default:\n        res = optionList[name]\n    }\n\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Is Trigger\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isTrigger = function(element, moduleName) {\n    if (element.className.indexOf(moduleName + \"--\") > -1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get trigger name\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {string} Name of the trigger.\n */\nJssService.getTriggerName = function(element, moduleName) {\n    if (typeof element != \"object\") {\n        console.error('Required first argument `element` needs to be a domElement.');\n        return false;\n    }\n    if (typeof moduleName != \"string\") {\n        console.error('Required second argument `moduleName` needs to be a string.');\n        return false;\n    }\n\n    // As an example we assume that the value of element.className equals 'b module--triggerName'\n    var startPos = element.className.indexOf(moduleName + \"--\");                    // 2\n    var sliced = element.className.slice(startPos, element.className.length )       // 'module--triggerName'\n    var endPos = sliced.indexOf(\" \");                                               // -1       // not found\n    if (endPos != -1) {                                                             // 19\n        sliced = sliced.slice(0,endPos);                                            // if there is more after the string, this will remove it\n    }\n    return sliced.replace(moduleName + \"--\",\"\")\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger name is allowed\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} True if the triggername is allowed, otherwise false.\n */\nJssService.triggerNameIsAllowed = function(element, moduleName) {\n    if (JssService.forbiddenProperties.indexOf(this.getTriggerName(element, moduleName)) > -1) {      // This triggerName is a core property, throw error\n        console.error('Triggername `' + getTriggerName(element,moduleName) + '` is not allowed. Change the trigger so it does not corresponds any of these: ' + JssService.forbiddenProperties)\n        return false;\n    }\n    return true;\n}\n/**\n * @module Jss\n * @author      Jeffrey Arts <sjeffff@gmail.com>\n * @copyright   2015\n */\nJss = function(){};\n\nJss.prototype.type      = \"Jss\"\nJss.prototype.triggers  = false;\nJss.prototype.element   = undefined;                                              // {obj} domElement\nJss.prototype.state     = undefined;                                              // {str} State of module, is reflected by the css class __isState\n\n/**\n * -----------------------------------------------------------------------------\n * Find Triggers\n * -----------------------------------------------------------------------------\n *\n * @param {domElement} element\n * @return {undefined}\n */\nJss.prototype.findTriggers = function(element) {\n    this.triggers = [];                                                         // If this is not set, all modules will have the same reference point to this.triggers.\n    // Module is created, now look for any module triggers\n    this.searchTriggersRecursiveInnerFunction(this.element)\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger\n * -----------------------------------------------------------------------------\n */\nJss.prototype.trigger = function(which, fn) {\n    if (typeof this.triggers !== \"object\") {\n        console.info(\"No triggers are found, please specify them in the css as `module-name--trigger-name`.\");\n        return false;\n    }\n\n    if (typeof this.triggers[which] !== \"object\") {\n        console.info(\"You are trying to execute a function on a non existing trigger `\" + which + \"`\");\n        return false;\n    }\n\n    for (var i = 0; i < this.triggers[which].length; i++) {\n        fn(this.triggers[which][i])\n    }\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Search triggers recursive inner function\n * -----------------------------------------------------------------------------\n * Recursive function which is executed bij findTriggers;\n *\n * @return {undefined}\n */\nJss.prototype.searchTriggersRecursiveInnerFunction = function(element) {\n    var self = this;\n    if (typeof element == \"undefined\" ) {\n        element = this.element;\n    }\n    if ( element.hasChildNodes() ) {\n        for (var i=0; i < element.childNodes.length; i++) {\n\n            var childElement = element.childNodes[i];                           // Improve readability\n\n            if (childElement.nodeType == 1) {                                   // NodeType 1 == domElement\n\n                if (JssService.isTrigger(childElement, this.moduleName)) {\n\n                    // Add a child element\n                    if (JssService.triggerNameIsAllowed(childElement, this.moduleName)) {\n                        var triggerName = JssService.getTriggerName(childElement, this.moduleName)\n\n                        if (typeof self.triggers[triggerName] !== \"object\") {\n                            self.triggers[triggerName] = [];\n                        }\n\n                        var tmp = new JssTrigger(childElement, {\n                            module: self,\n                            moduleName: this.moduleName,\n                            triggerName: triggerName,\n                        });\n\n                        self.triggers[triggerName].push(tmp);\n                    }\n                }\n                if (childElement.hasChildNodes()) {\n                    self.searchTriggersRecursiveInnerFunction(childElement)\n                }\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Configure Trigger\n * -----------------------------------------------------------------------------\n *\n * @return {undefined}\n */\nJss.prototype.configureTrigger = function(trigger, fn) {\n    if ( typeof this.triggers[trigger] == \"object\") {\n\n        for (var i = 0; i < this.triggers[trigger].length; i++) {\n            //self.triggers[trigger][i]\n            fn(this.triggers[trigger][i]);\n        }\n\n    } else if (JssService.dev) {\n        console.error(\"You are trying to configure a trigger which has no attached domElement\")\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n *   Init\n * -----------------------------------------------------------------------------\n * Notice the user that a init function needs to be added for controlling the triggers\n *\n * @return {undefined}\n */\nJss.prototype.init = function(func) {\n    if (JssService.dev) {\n        console.info(this.moduleName + \": Add a prototype.init function to add triggers and stuff\")\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set element\n * -----------------------------------------------------------------------------\n * Add a domElement to `this`\n *\n * @return {undefined}\n */\nJss.prototype.setElement = function(element) {\n    if (typeof element == \"undefined\") {\n        if (JssService.dev) {\n            return console.error(\"First parameter of setElement needs to be a domElement\");\n        }\n    }\n    this.element = element;\n}\n/*******************************************************************************\n   *\n   *\tActions\n   *\n   *  \t@author      Jeffrey Arts <sjeffff@gmail.com>\n   *    @copyright   2015\n   *\n*******************************************************************************/\n/**\n * -----------------------------------------------------------------------------\n *   Validate action\n * -----------------------------------------------------------------------------\n * Checks if parameter is a valid action, and logs an error when not.\n *\n * @param {string} request                                                      The name of the request\n * @return {boolean} true if a action is valid, otherwise false.\n */\nJss.prototype.validateAction = function(request) {\n    var result;\n    request = this.getActionElement(request).request\n    for (var action in JssService.actions) {\n        if (JssService.actions[action].indexOf(request.toLowerCase()) > -1) {\n            result = action;\n            break;\n        }\n    }\n    if (result) {\n        return result;\n    } else {\n        console.error(\"validateAction: unknown request\", request);\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * \t Add Action\n * -----------------------------------------------------------------------------\n * Adds an action to the object, list of possible requests can be found in Jss.actions\n *\n * | Options\n * \t\t- addDefaults {boolean}                                                 True: add default classes, false: don't\n *\n *\n *\n * @param {string} request                                                      The name of the request\n * @param {function} fn                                                         The function which should be triggered\n * @param {object} options                                                      Object with option parameters\n * @return {boolean} true if a action is succesfully added, otherwise false.\n */\nJss.prototype.addAction = function(request, fn, options) {\n\n    var self        = this;\n    var action      = self.validateAction(request)\n    var actions     = [];\n    var t = self.getActionElement(request);\n    var element     = t.element;\n    var request     = t.request;\n    t = undefined;\n\n    // Options\n    var addDefaults = JssService.getOption(\"addDefaults\", options);\n\n\n\n    switch (action) {\n\n        case \"resize\":\n\n            actions.push(element.addEventListener(\"resize\", fn));\n\n        break;\n\n\n        case \"click\":\n            actions.push(element.addEventListener(\"click\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"click\", function(){\n                    self.setState(\"Clicked\")\n                }));\n                actions.push(window.addEventListener( \"click\", function(event) {\n                    if (event.target != self.element && self.hasState(\"Clicked\")) {\n                        self.removeState(\"Clicked\")\n                    }\n                }));\n            } // End addDefaults\n        break;\n\n\n        case \"change\":\n            actions.push(element.addEventListener(\"change\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"change\", function(){\n                    self.setState(\"Changed\")\n                    setTimeout(function(){self.removeState(\"Changed\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"hover\":\n            actions.push(element.addEventListener(\"mouseover\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseover\", function(){\n                    self.setState(\"Hover\")\n                }));\n                actions.push(element.addEventListener(\"mouseout\",  function(){\n                    self.removeState(\"Hover\")\n                }));\n            }\n        break;\n\n\n        case \"mouseIn\":\n\n            actions.push(element.addEventListener(\"mouseenter\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseenter\", function(){\n                    self.setState(\"MouseIn\")\n                    setTimeout(function(){self.removeState(\"MouseIn\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"mouseOut\":\n\n            actions.push(element.addEventListener(\"mouseleave\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseleave\", function(){\n                    self.setState(\"MouseOut\")\n                    setTimeout(function(){self.removeState(\"MouseOut\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n    }\n\n\n    if (actions.length > 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get action element\n * -----------------------------------------------------------------------------\n * @param  {string} request                                                     The request\n * @return {object}                                                             An object with 2 properties: request && element\n */\nJss.prototype.getActionElement = function(request) {\n    var self = this;\n    var prefix = false;\n    var newRequest  = request;\n    var element = self.element;\n    // Set prefix if it exists\n    if (request.indexOf(\".\") > 0) {\n        var t       = request.split(\".\"),\n        newRequest  = t[1];\n        prefix      = t[0];\n        t = undefined;\n    }\n\n    // Update element according the prefix (or skip it, if not set)\n    if (prefix !== false) {\n        switch (prefix) {\n            case \"screen\":\n            case \"window\":\n                element = window;\n            break;\n        }\n    }\n\n    // Return object\n    return {\n        request: newRequest,\n        element: element\n    }\n}\n/**\n * -----------------------------------------------------------------------------\n * Class name prefix\n * -----------------------------------------------------------------------------\n * The prefix equals the modulename, or - when it's a trigger object - modulename--triggername\n *\n * @return {string} The classname\n */\nJss.prototype.classNamePrefix = function() {\n    if (this.type == \"JssTrigger\") {\n        return this.moduleName + \"--\" + this.triggerName;\n    } else {\n        return this.moduleName;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Remove class name\n * -----------------------------------------------------------------------------\n * Removes the `this.element` classname\n * \t- \"all\" || undefined        > Removes ALL classnames\n *  - \"allStates\" || \"states\"   > Remove all STATES\n *  - all other strings remove that specific string from the className\n *\n * @param {string} input                                                        The classname (case-sensitive) which needs to be removed\n * @return {undefined}\n */\nJss.prototype.removeClassName = function(input) {\n\n    var classList  = [];\n\n    if (input == \"all\" || typeof input == \"undefined\") {\n\n        this.element.className = \"\";\n\n    } else if (input == \"states\" || input == \"allStates\") {\n\n        classList = this.element.className.split(\" \");\n        for (var i in classList) {\n            className = classList[i];\n            if (className.indexOf(\"__is\") > -1) {\n                delete classList[i];\n            }\n        }\n        this.element.className = classList.join(\" \");\n\n    } else if(typeof input == \"string\") {\n        this.element.className = this.element.className.replace(input,\"\");\n    } else {\n        console.error(\"removeClassName: parameter should be a string\");\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Add class name\n * -----------------------------------------------------------------------------\n * Adds a class name by string or array.\n * Does NOT check for duplicates\n *\n * @param  {string} The classname to be added\n * @return {undefined}\n */\nJss.prototype.addClassName = function(data) {\n    this.element.className += \" \";\n    if (typeof data == \"string\") {\n        this.element.className += data;\n    } else {\n        this.element.className += data.join(\" \")\n    }\n}\n\n/**\n * List where the keys corresponds with this[key], and where the value is the function to be executed when the var is changed.\n */\nJss.prototype.setterWatchList = {};\nJss.prototype.getterWatchList = {};\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add data\n * -----------------------------------------------------------------------------\n * Add a (default) value for the given attribute.\n *\n * @param {string} attribute                                                    The name of the attribute (this[attribute])\n * @param {*} value                                                             The value of this[attribute], could be anything...\n * @param {object} options\n *           \t\t- setterWatchFunction {function}\n *           \t\t- getterWatchFunction {function}\n */\nJss.prototype.addData = function(attribute, value, options) {\n\n\n    // watchList[key] = fn;\n    var setterWatchFunction = JssService.getOption('setterWatchFunction', options); // Function\n    var getterWatchFunction = JssService.getOption('getterWatchFunction', options); // Function\n\n    if (typeof setterWatchFunction === \"function\") {\n        this.setterWatchList[attribute] = setterWatchFunction;\n    }\n\n    if (typeof getterWatchFunction === \"function\") {\n        this.getterWatchList[attribute] = getterWatchFunction;\n    }\n\n    // Set the default value\n    return this[attribute] = value;\n}\n\n\n\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- ajax {string} url\n */\nJss.prototype.setData = function(attribute, value, options) {\n\n    this[attribute] = value;\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n\n    if (Array.isArray(fallback)) {\n\n        for (var i = 0; i < fallback.length; i++) {\n            var type = fallback[i];\n\n            if (value && value.length > 0) {\n                this['setData' + JssService.toCamelCase(type)](attribute, value); // Call this.addDataAttribute(value) || this.addDataCookie(value) etc...\n                this[attribute] = value;\n            }\n        }\n    }\n\n    // Call the setter watch function, if defined;\n    if (typeof this.setterWatchList[attribute] === \"function\") { // Use the watchlist to add functionality whenever a data attribute is updated\n        this.setterWatchList[attribute]();\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataDefault {boolean}\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- dataAjax {string} url\n */\nJss.prototype.getData = function(attribute, options) {\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n    var value = false;\n\n\n    if (!fallback) {\n        fallback = ['attribute'];\n    }\n\n\n    for (var i = 0; i < fallback.length; i++) {\n        var type = JssService.toCamelCase(fallback[i]);\n        var customOptions = false;\n\n        if (typeof options == \"object\") {\n            customOptions = options[fallback[i].toLowerCase()];\n        }\n\n        if (!value || value.length < 0) {\n            if (typeof this['getData' + type] !== \"function\") {\n                console.error('this.getData' + type + ' is not a function. Probably ' + type + ' is not a available data option');\n                continue;\n            }\n            value = this['getData' + type]( attribute, customOptions ); // Call this.getDataAttribute(value) || this.getDataCookie(value) || this.getDataAjax(value) etc...\n        }\n    }\n    console.log(this.getterWatchList);\n    // Call the getter watch function, if defined;\n    if (typeof this.getterWatchList[attribute] == \"function\") {\n        this.getterWatchList[attribute]();\n    }\n\n    return this[attribute] = value;\n}\n/**\n * -----------------------------------------------------------------------------\n * Get data: Ajax\n * -----------------------------------------------------------------------------\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n *\n * @param {string} attribute                                                    The NAME of the inner variable (this.NAME), is also used as the key for the GET Request {NAME: value}\n * @param {object} options                                                      Object with parameters used to make a GET request\n * @return {string}                                                             The value of the given attribute, or false if an erro occured.\n */\nJss.prototype.getDataAjax = function(attribute, options) {\n    var url = JssService.getOption(\"url\", options);\n    var jsonKey = JssService.getOption(\"jsonKey\", options) || attribute;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('GET', url);\n\n        return ajaxReturn.success(function(result){\n            if (typeof result === \"object\") {\n                if (result[jsonKey]) {\n                    return result[jsonKey];\n                }\n            }\n        }).error(function(errorObject){\n            console.log(errorObject);\n        });\n    }\n\n    return false;\n};\n\n/**\n * -----------------------------------------------------------------------------\n * Set data: Ajax\n * -----------------------------------------------------------------------------\n * Makes a post request to the options.url in a object {attribute: value}\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n */\nJss.prototype.setDataAjax = function(attribute, value, options) {\n    var url = JssService.getOption(\"url\", options);\n    var requestObject = {}\n        requestObject[attribute] = value;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('POST', url, requestObject);\n\n        return ajaxReturn.success(function(result){\n            return true;\n        }).error(function(errorObject){\n            console.log(errorObject);\n            return false;\n        });\n    }\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Ajax (helper function)\n * -----------------------------------------------------------------------------\n * Based on Atom.js by Todd Motto\n * http://toddmotto.com/writing-a-standalone-ajax-xhr-javascript-micro-library/\n */\nJss.prototype.ajaxHelper = {\n    // Parses json if possible, otherwise just return text\n    parse: function(req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return [result, req];\n    },\n\n    xhr: function(type, url, data) {\n        var ajaxHelper = this;\n\n        var methods = {\n            success: function() {},\n            error: function() {}\n        };\n        var XHR = XMLHttpRequest || ActiveXObject;\n        var request = new XHR('MSXML2.XMLHTTP.3.0');\n        request.open(type, url, true);\n        request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n\n        request.onreadystatechange = function() {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    methods.success.apply(methods, ajaxHelper.parse(request));\n                } else {\n                    methods.error.apply(methods, ajaxHelper.parse(request));\n                }\n            }\n        };\n        request.send(data);\n        return {\n            success: function(callback) {\n                methods.success = callback;\n                return methods;\n            },\n            error: function(callback) {\n                methods.error = callback;\n                return methods;\n            }\n        };\n    }\n};\n\nJss.prototype.ajax = {\n    // Get\n    get: function(src) {\n        console.log(this);\n    },\n\n    // Set\n    put: function(url, data) {\n        return this.ajaxHelper.xhr('PUT', url, data);\n    },\n\n    // Add\n    post: function(url, data) {\n        return this.ajaxHelper.xhr('POST', url, data);\n    }\n\n};\n/**\n * -----------------------------------------------------------------------------\n * Get data attribute value\n * -----------------------------------------------------------------------------\n * Returns the value of the requested attribute. Search first for a data-[ATTRIBUTE] value\n * If not found, it checks for the attribute in the default object. When that is not being\n * found neither, the normal this[attribute] value is being returned.\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME)\n * @return {string}                                                             The value of the given attribute\n */\nJss.prototype.getDataAttribute = function(attribute) {\n\n    return this.element.dataset[attribute];\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Update data attribute\n * -----------------------------------------------------------------------------\n * Set the value to the given attribute. And updates the data-[ATTRIBUTE] value\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME=\"value\")\n * @param {string} value                                                        The VALUE of the data attribute (data-name=\"VALUE\")\n * @return {undefined}\n */\n\nJss.prototype.setDataAttribute = function(attribute, value) {\n\n    // Update data attribute\n    if (typeof value !== \"undefined\") {\n        this.element.dataset[attribute] = this[attribute];\n    } else {\n        delete this.element.dataset[attribute];\n    }\n\n    return true;\n}\nJss.prototype.dataDefaultsCookie = {\n    'expireData': undefined\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get cookie value\n * -----------------------------------------------------------------------------\n * Returns cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @return {string}                                                             The VALUE of the given attribute\n */\nJss.prototype.getDataCookie = function(attribute) {\n\n    if (!attribute) { return null; }\n    return decodeURIComponent(document.cookie.replace(new RegExp(\"(?:(?:^|.*;)\\\\s*\" + encodeURIComponent(attribute).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"), \"$1\")) || null;\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data cookie\n * -----------------------------------------------------------------------------\n * Updates the cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @param {string} value                                                        The VALUE of the cookie\n * @return {undefined}\n */\n\nJss.prototype.setDataCookie = function(attribute, value, options) {\n    var endDate, path, domain, secureConnection;\n\n    if (typeof options === \"object\") {\n        endDate = JssService.getOption('endDate', options);\n        path    = JssService.getOption('path', options);\n        domain  = JssService.getOption('domain', options);\n        secureConnection = JssService.getOption('secureConnection', options);\n    }\n\n    if (!attribute || /^(?:expires|max\\-age|path|domain|secure)$/i.test(attribute)) { return false; }\n    var sExpires = \"\";\n    if (endDate) {\n      switch (endDate.constructor) {\n        case Number:\n          sExpires = endDate === Infinity ? \"; expires=Fri, 31 Dec 9999 23:59:59 GMT\" : \"; max-age=\" + endDate;\n          break;\n        case String:\n          sExpires = \"; expires=\" + endDate;\n          break;\n        case Date:\n          sExpires = \"; expires=\" + endDate.toUTCString();\n          break;\n      }\n    }\n\n    document.cookie = encodeURIComponent(attribute) + \"=\" + encodeURIComponent(value) + sExpires + (domain ? \"; domain=\" + domain : \"\") + (path ? \"; path=\" + path : \"\") + (secureConnection ? \"; secure\" : \"\");\n    return true;\n}\n/*******************************************************************************\n\n    Styles\n\n*******************************************************************************/\n\n/**\n * -----------------------------------------------------------------------------\n * Set height\n * -----------------------------------------------------------------------------\n * Sets the height of the `this.element` by the given input (height)\n *\n * @param  {number} height                                                      The height in pixels or percentage. Where numbers will be calculated to pixels so giving a height of 50 will result in a height of \"50px\". If you want percentages pass the variable with a percentage sign 50 + \"%\"\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setHeight = function(height) {\n    if (typeof height === \"number\") {\n        height += \"px\";\n    }\n\n    if (typeof height !== \"string\") {\n        throw(\"parameter height needs to be a string or integer\");\n    }\n\n    this.element.style.height = height;\n    return true;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get height\n * -----------------------------------------------------------------------------\n * Returns the height of the `this.element`\n *\n * @return {number}                                                             The height of the element in pixels\n */\nJss.prototype.getHeight = function() {\n    return this.element.offsetHeight;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set width\n * -----------------------------------------------------------------------------\n * Sets the width of the `this.element` by the given input (width)\n *\n * @param  {number} width                                                       The width in pixels or percentage. Where numbers will be calculated to pixels so giving a width of 50 will result in a width of \"50px\". If you want to set a percentage, just pass the variable with a percentage sign (\"50%\")\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setWidth = function(width) {\n    if (typeof width == \"number\") {\n        width += \"px\";\n    }\n\n    if (typeof width !== \"string\") {\n        throw(\"parameter width needs to be a string or integer\");\n    }\n    this.element.style.width = width;\n    return true;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get width\n * -----------------------------------------------------------------------------\n * Returns the width of the `this.element`\n *\n * @return {number}                                                             The width of the element in pixels\n */\nJss.prototype.getWidth = function() {\n    return this.element.offsetWidth;\n}\n/**\n * -----------------------------------------------------------------------------\n * Set State\n * -----------------------------------------------------------------------------\n * This updates the state of the object. States are being added to the class name prefix with a double underscore.\n * If you would have the module `envelope` and give it the state `open`. The class name `envelope__open` will be added.\n * Whenever you remove the state `open`, the according class name will be removed as well.\n *\n * @param  {string} str                                                         The name of the state which should be set (this is transformed to CamelCase)\n * @return {boolean}                                                            True on success, otherwise false (might already have the state)\n */\nJss.prototype.setState = function(str) {\n    var element, verifiedState, state, className;\n\n    element         = this.element;\n    state           = JssService.toCamelCase(str);\n    className       = this.classNamePrefix() + \"__is\" + state;\n\n    // Check if this.state is an array, and make it one if not.\n    if (Array.isArray(this.state) == false ) {\n        this.state = [];\n    }\n\n    // This if statement prevents that the same state is being set multiple times\n    if ( !this.hasState(str) ) {\n        this.addClassName(className)\n        this.state.push(state);\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Has state\n * -----------------------------------------------------------------------------\n * Checks if the parameter is already a state and returns true if so. Otherwise false.\n *\n * @param  {string} str                                                         The state which will be checked for\n * @return {boolean}                                                            True if it has the given state, otherwise false\n */\nJss.prototype.hasState = function(str) {\n    if (typeof this.state == \"object\" && this.state.indexOf(str) >= 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Remove state\n * -----------------------------------------------------------------------------\n * Removes the state from the states array, and from the element.className\n *\n * @param  {string} str                                                         The name of the state which should be removed\n * @return {undefined}\n */\nJss.prototype.removeState = function(str) {\n\n    var state      = JssService.toCamelCase(str);\n    var stateIndex = this.state.indexOf(state);\n\n    if (str == \"all\" || typeof str == \"undefined\") {\n        this.removeClassName(\"states\");\n    } else {\n        this.state.splice(stateIndex, 1);\n        if (typeof this.moduleAction != \"undefined\" && this.moduleAction.length > -1) {\n            this.removeClassName(this.classNamePrefix() + \"\" + this.moduleAction + \"__is\" + state);\n        } else {\n            this.removeClassName(this.classNamePrefix() + \"__is\" + state);\n        }\n    }\n}\n\n\n// A simple way to watch variables\n\n// addVar(keyName, value, watch_function)\n// setVar(keyName, value)\n// getVar(keyName)\n// Add -> new\n// Set -> update\n// Get -> return\nvar JssModule = function(){};\n\nJssModule.prototype.type               = \"JssModule\";\nJssModule.prototype.init               = Jss.prototype.init;\nJssModule.prototype.setElement         = Jss.prototype.setElement;\n\n// Triggers\nJssModule.prototype.findTriggers       = Jss.prototype.findTriggers;\nJssModule.prototype.configureTrigger      = Jss.prototype.configureTrigger;\n\n// Actions\n//JssModule.prototype.actions            = Object.create(Jss.prototype.actions);\nJssModule.prototype.validateAction     = Jss.prototype.validateAction;\nJssModule.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssModule.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssModule.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssModule.prototype.setState           = Jss.prototype.setState;\nJssModule.prototype.hasState           = Jss.prototype.hasState;\nJssModule.prototype.removeState        = Jss.prototype.removeState;\n\n// Data attributes\nJssModule.prototype.addData            = Jss.prototype.addData;\nJssModule.prototype.getData            = Jss.prototype.getData;\nJssModule.prototype.setData            = Jss.prototype.setData;\nvar JssTrigger = function(element, options) {\n    this.setElement(element);\n\n    if (typeof options === \"object\") {\n        if (typeof options.module === \"object\") {\n            this.module = options.module;\n        }\n        if (typeof options.moduleName === \"string\") {\n            this.moduleName = options.moduleName;\n        }\n        if (typeof options.triggerName === \"string\") {\n            this.triggerName = options.triggerName;\n        }\n    }\n}\n\n\nJssTrigger.prototype                    = Object.create(Jss.prototype);\nJssTrigger.prototype.type               = \"JssTrigger\";\nJssTrigger.prototype.setElement         = Jss.prototype.setElement;\n\n// Actions\n//JssTrigger.prototype.actions            = Object.create(Jss.prototype.actions);\nJssTrigger.prototype.validateAction     = Jss.prototype.validateAction;\nJssTrigger.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssTrigger.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssTrigger.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssTrigger.prototype.setState           = Jss.prototype.setState;\nJssTrigger.prototype.hasState           = Jss.prototype.hasState;\nJssTrigger.prototype.removeState        = Jss.prototype.removeState;\n\n\n\nvar  JssController = {};\nJssController.modules \t\t= []; // Result array with objects of all the found modules\nJssController.activeModules \t= JssService.activeModules;\n\nJssController.findModules = function() {\n    var allElements = document.getElementsByTagName(\"*\");                       // Array with all domElements\n    var test = [];\n    var self = this;\n    for (var i=0; i < allElements.length; i++) {\n\n        // Set default vars //\n        var element = allElements[i];                                           // Specific domElement\n        var tmp = false;\n\n        // Loop through the (active) modules array and add/instantiate them\n        self.activeModules.forEach(function(module){\n            if (JssService.isModule(element, module)) {\n                tmp = eval(\"new \" + JssService.toCamelCase(module) + \"(element)\"); // Dynamicly load modules\n\n                tmp.setElement(element);                                        // Add the domElement to the module\n                tmp.findTriggers();\t\t\t                                    // Search for module triggers\n\n                tmp.init();\t\t\t\t\t                                    // Executes everything within the init function\n                self.modules.push(tmp);\n\n            }\n        }); // End forEach\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    JssController.findModules();\n    console.log(JssController);\n});"
          },
          "name": "setterWatchList",
          "memberof": "Jss",
          "scope": "instance",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            "Jss",
            "setterWatchList"
          ]
        },
        {
          "description": "-----------------------------------------------------------------------------\nSet width\n-----------------------------------------------------------------------------\nSets the width of the `this.element` by the given input (width)",
          "tags": [
            {
              "title": "param",
              "description": "The width in pixels or percentage. Where numbers will be calculated to pixels so giving a width of 50 will result in a width of \"50px\". If you want to set a percentage, just pass the variable with a percentage sign (\"50%\")",
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "width"
            },
            {
              "title": "returns",
              "description": "True if setting the height was succesfull, otherwise false.",
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            },
            {
              "title": "name",
              "name": "setWidth"
            },
            {
              "title": "kind",
              "kind": "function"
            },
            {
              "title": "memberof",
              "description": "Jss"
            },
            {
              "title": "instance"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 1065,
                "column": 0
              },
              "end": {
                "line": 1086,
                "column": 0
              }
            },
            "file": "/Users/jeffreyarts/Documents/DEV/jss/lib/jss.js",
            "code": "JssService = {};\n\n// Edit this array to enable or disable default modules\nJssService.activeModules   = []\n\n// Set this to false in a live environment\nJssService.dev             = true;\n\n/**************************\n*\n*   Below are core properties defined, becarefull when you think of changing these...\n*\n**************************/\n\n\nJssService.actions = {\n    hover:      ['hover',    'mouseover',   'onmouseover'                       ], // Fixed\n    click:      ['click',    'onclick'                                          ], // Fixed\n    mouseIn:    ['mousein',  'onmousein', 'mouseenter', 'onmouseenter'          ], // Fixed\n    mouseOut:   ['mouseout', 'onmouseout', 'mouseleave', 'onmouseleave'         ], // Fixed\n    resize:     ['resize',   'onresize'                                         ], // Fixed\n    focus:      ['focus',    'onfocus'                                          ],\n    keyDown:    ['keydown',  'keypress'                                         ],\n    keyUp:      ['keyup',    'keyrelease'                                       ],\n    change:     ['change',   'onchange'                                         ],\n};\n\nJssService.enterDelay = 1000;                                                   // Amount of miliseconds which is used to remove the entered state. (see core.actions) JssService.enterDelay setTimeout\n\nJssService.forbiddenProperties = [\n    'type',\n    'triggers',\n    'configureTrigger',\n    'findTriggers'\n];\n\n/**\n * -----------------------------------------------------------------------------\n * Is Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isModule = function(element, moduleName) {\n    var arr = element.className.split(\" \");\n    var found = false;\n\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i].indexOf(moduleName)        > -1 &&\n            arr[i].indexOf(moduleName + \"_\") == -1 &&\n            arr[i].indexOf(moduleName + \"-\") == -1)\n        {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.addModule = function(moduleName) {\n    this.activeModules.push(this.toKebabCase(moduleName))\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To CamelCase\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toCamelCase = function(input) {\n    var arr, res;\n    res = \"\";\n    if (typeof input === \"string\") {\n        input = input.replace(/\\-/g,\" \");                                       // Replace all dashes with spaces\n        arr = input.split(\" \");\n    } else {\n        arr = input;                                                            // Assume it is an array\n    }\n\n\n\n    var i = 0;\n    for (var i in arr) {\n        if (typeof i != \"undefined\") {\n            res += arr[i][0].toUpperCase()+ arr[i].slice(1); // Capitalize first letter\n        }\n    }\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To kebab-case\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toKebabCase = function(input) {\n    var res, str;\n    res = \"\";\n\n    if (typeof input === \"string\") {\n        str = input;\n    } else {                                                                    // Assume it is an array\n        str = input.join(\" \");\n    }\n\n    // First change it to camelcase\n    str = this.toCamelCase(str);\n\n    var max = str.length;\n    for (var i=0; i < max; i++) {\n        // Check if character is uppercase\n        if (str[i] != str[i].toLowerCase()) {\n            if (i!==0) {\n                str = str.substr(0, i) + \"-\" + str.substr(i);\n                i++;\n            }\n        }\n    }\n\n    return res = str.toLowerCase();\n}\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get option\n * -----------------------------------------------------------------------------\n * @param  {string} name                                                        Keyname in optionList\n * @param  {array} optionList                                                   Array with all possible options\n * @return {}                                                                   Copy of the value (optionsList[name])\n */\nJssService.getOption = function(name, optionList) {\n    if (typeof optionList !== \"object\") {\n        return false;\n    }\n\n    var res;\n\n    switch (name) {\n\n        // Only set `addDefaults` to false when it is explicitly set.\n        case \"addDefaults\":\n            if (optionList[name] !== false || typeof optionList[name] === \"undefined\") {\n                res = true;\n            } else {\n                res = false;\n            }\n        break;\n        case \"fallback\":\n            if ( Array.isArray(optionList[name]) ) {\n                res = optionList[name];\n                if (res.length===0) {\n                    res = false;\n                }\n            } else if (typeof optionList[name] === \"string\"){\n                res = [optionList[name]];\n            }\n        break;\n        default:\n        res = optionList[name]\n    }\n\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Is Trigger\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isTrigger = function(element, moduleName) {\n    if (element.className.indexOf(moduleName + \"--\") > -1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get trigger name\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {string} Name of the trigger.\n */\nJssService.getTriggerName = function(element, moduleName) {\n    if (typeof element != \"object\") {\n        console.error('Required first argument `element` needs to be a domElement.');\n        return false;\n    }\n    if (typeof moduleName != \"string\") {\n        console.error('Required second argument `moduleName` needs to be a string.');\n        return false;\n    }\n\n    // As an example we assume that the value of element.className equals 'b module--triggerName'\n    var startPos = element.className.indexOf(moduleName + \"--\");                    // 2\n    var sliced = element.className.slice(startPos, element.className.length )       // 'module--triggerName'\n    var endPos = sliced.indexOf(\" \");                                               // -1       // not found\n    if (endPos != -1) {                                                             // 19\n        sliced = sliced.slice(0,endPos);                                            // if there is more after the string, this will remove it\n    }\n    return sliced.replace(moduleName + \"--\",\"\")\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger name is allowed\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} True if the triggername is allowed, otherwise false.\n */\nJssService.triggerNameIsAllowed = function(element, moduleName) {\n    if (JssService.forbiddenProperties.indexOf(this.getTriggerName(element, moduleName)) > -1) {      // This triggerName is a core property, throw error\n        console.error('Triggername `' + getTriggerName(element,moduleName) + '` is not allowed. Change the trigger so it does not corresponds any of these: ' + JssService.forbiddenProperties)\n        return false;\n    }\n    return true;\n}\n/**\n * @module Jss\n * @author      Jeffrey Arts <sjeffff@gmail.com>\n * @copyright   2015\n */\nJss = function(){};\n\nJss.prototype.type      = \"Jss\"\nJss.prototype.triggers  = false;\nJss.prototype.element   = undefined;                                              // {obj} domElement\nJss.prototype.state     = undefined;                                              // {str} State of module, is reflected by the css class __isState\n\n/**\n * -----------------------------------------------------------------------------\n * Find Triggers\n * -----------------------------------------------------------------------------\n *\n * @param {domElement} element\n * @return {undefined}\n */\nJss.prototype.findTriggers = function(element) {\n    this.triggers = [];                                                         // If this is not set, all modules will have the same reference point to this.triggers.\n    // Module is created, now look for any module triggers\n    this.searchTriggersRecursiveInnerFunction(this.element)\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger\n * -----------------------------------------------------------------------------\n */\nJss.prototype.trigger = function(which, fn) {\n    if (typeof this.triggers !== \"object\") {\n        console.info(\"No triggers are found, please specify them in the css as `module-name--trigger-name`.\");\n        return false;\n    }\n\n    if (typeof this.triggers[which] !== \"object\") {\n        console.info(\"You are trying to execute a function on a non existing trigger `\" + which + \"`\");\n        return false;\n    }\n\n    for (var i = 0; i < this.triggers[which].length; i++) {\n        fn(this.triggers[which][i])\n    }\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Search triggers recursive inner function\n * -----------------------------------------------------------------------------\n * Recursive function which is executed bij findTriggers;\n *\n * @return {undefined}\n */\nJss.prototype.searchTriggersRecursiveInnerFunction = function(element) {\n    var self = this;\n    if (typeof element == \"undefined\" ) {\n        element = this.element;\n    }\n    if ( element.hasChildNodes() ) {\n        for (var i=0; i < element.childNodes.length; i++) {\n\n            var childElement = element.childNodes[i];                           // Improve readability\n\n            if (childElement.nodeType == 1) {                                   // NodeType 1 == domElement\n\n                if (JssService.isTrigger(childElement, this.moduleName)) {\n\n                    // Add a child element\n                    if (JssService.triggerNameIsAllowed(childElement, this.moduleName)) {\n                        var triggerName = JssService.getTriggerName(childElement, this.moduleName)\n\n                        if (typeof self.triggers[triggerName] !== \"object\") {\n                            self.triggers[triggerName] = [];\n                        }\n\n                        var tmp = new JssTrigger(childElement, {\n                            module: self,\n                            moduleName: this.moduleName,\n                            triggerName: triggerName,\n                        });\n\n                        self.triggers[triggerName].push(tmp);\n                    }\n                }\n                if (childElement.hasChildNodes()) {\n                    self.searchTriggersRecursiveInnerFunction(childElement)\n                }\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Configure Trigger\n * -----------------------------------------------------------------------------\n *\n * @return {undefined}\n */\nJss.prototype.configureTrigger = function(trigger, fn) {\n    if ( typeof this.triggers[trigger] == \"object\") {\n\n        for (var i = 0; i < this.triggers[trigger].length; i++) {\n            //self.triggers[trigger][i]\n            fn(this.triggers[trigger][i]);\n        }\n\n    } else if (JssService.dev) {\n        console.error(\"You are trying to configure a trigger which has no attached domElement\")\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n *   Init\n * -----------------------------------------------------------------------------\n * Notice the user that a init function needs to be added for controlling the triggers\n *\n * @return {undefined}\n */\nJss.prototype.init = function(func) {\n    if (JssService.dev) {\n        console.info(this.moduleName + \": Add a prototype.init function to add triggers and stuff\")\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set element\n * -----------------------------------------------------------------------------\n * Add a domElement to `this`\n *\n * @return {undefined}\n */\nJss.prototype.setElement = function(element) {\n    if (typeof element == \"undefined\") {\n        if (JssService.dev) {\n            return console.error(\"First parameter of setElement needs to be a domElement\");\n        }\n    }\n    this.element = element;\n}\n/*******************************************************************************\n   *\n   *\tActions\n   *\n   *  \t@author      Jeffrey Arts <sjeffff@gmail.com>\n   *    @copyright   2015\n   *\n*******************************************************************************/\n/**\n * -----------------------------------------------------------------------------\n *   Validate action\n * -----------------------------------------------------------------------------\n * Checks if parameter is a valid action, and logs an error when not.\n *\n * @param {string} request                                                      The name of the request\n * @return {boolean} true if a action is valid, otherwise false.\n */\nJss.prototype.validateAction = function(request) {\n    var result;\n    request = this.getActionElement(request).request\n    for (var action in JssService.actions) {\n        if (JssService.actions[action].indexOf(request.toLowerCase()) > -1) {\n            result = action;\n            break;\n        }\n    }\n    if (result) {\n        return result;\n    } else {\n        console.error(\"validateAction: unknown request\", request);\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * \t Add Action\n * -----------------------------------------------------------------------------\n * Adds an action to the object, list of possible requests can be found in Jss.actions\n *\n * | Options\n * \t\t- addDefaults {boolean}                                                 True: add default classes, false: don't\n *\n *\n *\n * @param {string} request                                                      The name of the request\n * @param {function} fn                                                         The function which should be triggered\n * @param {object} options                                                      Object with option parameters\n * @return {boolean} true if a action is succesfully added, otherwise false.\n */\nJss.prototype.addAction = function(request, fn, options) {\n\n    var self        = this;\n    var action      = self.validateAction(request)\n    var actions     = [];\n    var t = self.getActionElement(request);\n    var element     = t.element;\n    var request     = t.request;\n    t = undefined;\n\n    // Options\n    var addDefaults = JssService.getOption(\"addDefaults\", options);\n\n\n\n    switch (action) {\n\n        case \"resize\":\n\n            actions.push(element.addEventListener(\"resize\", fn));\n\n        break;\n\n\n        case \"click\":\n            actions.push(element.addEventListener(\"click\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"click\", function(){\n                    self.setState(\"Clicked\")\n                }));\n                actions.push(window.addEventListener( \"click\", function(event) {\n                    if (event.target != self.element && self.hasState(\"Clicked\")) {\n                        self.removeState(\"Clicked\")\n                    }\n                }));\n            } // End addDefaults\n        break;\n\n\n        case \"change\":\n            actions.push(element.addEventListener(\"change\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"change\", function(){\n                    self.setState(\"Changed\")\n                    setTimeout(function(){self.removeState(\"Changed\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"hover\":\n            actions.push(element.addEventListener(\"mouseover\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseover\", function(){\n                    self.setState(\"Hover\")\n                }));\n                actions.push(element.addEventListener(\"mouseout\",  function(){\n                    self.removeState(\"Hover\")\n                }));\n            }\n        break;\n\n\n        case \"mouseIn\":\n\n            actions.push(element.addEventListener(\"mouseenter\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseenter\", function(){\n                    self.setState(\"MouseIn\")\n                    setTimeout(function(){self.removeState(\"MouseIn\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"mouseOut\":\n\n            actions.push(element.addEventListener(\"mouseleave\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseleave\", function(){\n                    self.setState(\"MouseOut\")\n                    setTimeout(function(){self.removeState(\"MouseOut\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n    }\n\n\n    if (actions.length > 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get action element\n * -----------------------------------------------------------------------------\n * @param  {string} request                                                     The request\n * @return {object}                                                             An object with 2 properties: request && element\n */\nJss.prototype.getActionElement = function(request) {\n    var self = this;\n    var prefix = false;\n    var newRequest  = request;\n    var element = self.element;\n    // Set prefix if it exists\n    if (request.indexOf(\".\") > 0) {\n        var t       = request.split(\".\"),\n        newRequest  = t[1];\n        prefix      = t[0];\n        t = undefined;\n    }\n\n    // Update element according the prefix (or skip it, if not set)\n    if (prefix !== false) {\n        switch (prefix) {\n            case \"screen\":\n            case \"window\":\n                element = window;\n            break;\n        }\n    }\n\n    // Return object\n    return {\n        request: newRequest,\n        element: element\n    }\n}\n/**\n * -----------------------------------------------------------------------------\n * Class name prefix\n * -----------------------------------------------------------------------------\n * The prefix equals the modulename, or - when it's a trigger object - modulename--triggername\n *\n * @return {string} The classname\n */\nJss.prototype.classNamePrefix = function() {\n    if (this.type == \"JssTrigger\") {\n        return this.moduleName + \"--\" + this.triggerName;\n    } else {\n        return this.moduleName;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Remove class name\n * -----------------------------------------------------------------------------\n * Removes the `this.element` classname\n * \t- \"all\" || undefined        > Removes ALL classnames\n *  - \"allStates\" || \"states\"   > Remove all STATES\n *  - all other strings remove that specific string from the className\n *\n * @param {string} input                                                        The classname (case-sensitive) which needs to be removed\n * @return {undefined}\n */\nJss.prototype.removeClassName = function(input) {\n\n    var classList  = [];\n\n    if (input == \"all\" || typeof input == \"undefined\") {\n\n        this.element.className = \"\";\n\n    } else if (input == \"states\" || input == \"allStates\") {\n\n        classList = this.element.className.split(\" \");\n        for (var i in classList) {\n            className = classList[i];\n            if (className.indexOf(\"__is\") > -1) {\n                delete classList[i];\n            }\n        }\n        this.element.className = classList.join(\" \");\n\n    } else if(typeof input == \"string\") {\n        this.element.className = this.element.className.replace(input,\"\");\n    } else {\n        console.error(\"removeClassName: parameter should be a string\");\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Add class name\n * -----------------------------------------------------------------------------\n * Adds a class name by string or array.\n * Does NOT check for duplicates\n *\n * @param  {string} The classname to be added\n * @return {undefined}\n */\nJss.prototype.addClassName = function(data) {\n    this.element.className += \" \";\n    if (typeof data == \"string\") {\n        this.element.className += data;\n    } else {\n        this.element.className += data.join(\" \")\n    }\n}\n\n/**\n * List where the keys corresponds with this[key], and where the value is the function to be executed when the var is changed.\n */\nJss.prototype.setterWatchList = {};\nJss.prototype.getterWatchList = {};\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add data\n * -----------------------------------------------------------------------------\n * Add a (default) value for the given attribute.\n *\n * @param {string} attribute                                                    The name of the attribute (this[attribute])\n * @param {*} value                                                             The value of this[attribute], could be anything...\n * @param {object} options\n *           \t\t- setterWatchFunction {function}\n *           \t\t- getterWatchFunction {function}\n */\nJss.prototype.addData = function(attribute, value, options) {\n\n\n    // watchList[key] = fn;\n    var setterWatchFunction = JssService.getOption('setterWatchFunction', options); // Function\n    var getterWatchFunction = JssService.getOption('getterWatchFunction', options); // Function\n\n    if (typeof setterWatchFunction === \"function\") {\n        this.setterWatchList[attribute] = setterWatchFunction;\n    }\n\n    if (typeof getterWatchFunction === \"function\") {\n        this.getterWatchList[attribute] = getterWatchFunction;\n    }\n\n    // Set the default value\n    return this[attribute] = value;\n}\n\n\n\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- ajax {string} url\n */\nJss.prototype.setData = function(attribute, value, options) {\n\n    this[attribute] = value;\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n\n    if (Array.isArray(fallback)) {\n\n        for (var i = 0; i < fallback.length; i++) {\n            var type = fallback[i];\n\n            if (value && value.length > 0) {\n                this['setData' + JssService.toCamelCase(type)](attribute, value); // Call this.addDataAttribute(value) || this.addDataCookie(value) etc...\n                this[attribute] = value;\n            }\n        }\n    }\n\n    // Call the setter watch function, if defined;\n    if (typeof this.setterWatchList[attribute] === \"function\") { // Use the watchlist to add functionality whenever a data attribute is updated\n        this.setterWatchList[attribute]();\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataDefault {boolean}\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- dataAjax {string} url\n */\nJss.prototype.getData = function(attribute, options) {\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n    var value = false;\n\n\n    if (!fallback) {\n        fallback = ['attribute'];\n    }\n\n\n    for (var i = 0; i < fallback.length; i++) {\n        var type = JssService.toCamelCase(fallback[i]);\n        var customOptions = false;\n\n        if (typeof options == \"object\") {\n            customOptions = options[fallback[i].toLowerCase()];\n        }\n\n        if (!value || value.length < 0) {\n            if (typeof this['getData' + type] !== \"function\") {\n                console.error('this.getData' + type + ' is not a function. Probably ' + type + ' is not a available data option');\n                continue;\n            }\n            value = this['getData' + type]( attribute, customOptions ); // Call this.getDataAttribute(value) || this.getDataCookie(value) || this.getDataAjax(value) etc...\n        }\n    }\n    console.log(this.getterWatchList);\n    // Call the getter watch function, if defined;\n    if (typeof this.getterWatchList[attribute] == \"function\") {\n        this.getterWatchList[attribute]();\n    }\n\n    return this[attribute] = value;\n}\n/**\n * -----------------------------------------------------------------------------\n * Get data: Ajax\n * -----------------------------------------------------------------------------\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n *\n * @param {string} attribute                                                    The NAME of the inner variable (this.NAME), is also used as the key for the GET Request {NAME: value}\n * @param {object} options                                                      Object with parameters used to make a GET request\n * @return {string}                                                             The value of the given attribute, or false if an erro occured.\n */\nJss.prototype.getDataAjax = function(attribute, options) {\n    var url = JssService.getOption(\"url\", options);\n    var jsonKey = JssService.getOption(\"jsonKey\", options) || attribute;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('GET', url);\n\n        return ajaxReturn.success(function(result){\n            if (typeof result === \"object\") {\n                if (result[jsonKey]) {\n                    return result[jsonKey];\n                }\n            }\n        }).error(function(errorObject){\n            console.log(errorObject);\n        });\n    }\n\n    return false;\n};\n\n/**\n * -----------------------------------------------------------------------------\n * Set data: Ajax\n * -----------------------------------------------------------------------------\n * Makes a post request to the options.url in a object {attribute: value}\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n */\nJss.prototype.setDataAjax = function(attribute, value, options) {\n    var url = JssService.getOption(\"url\", options);\n    var requestObject = {}\n        requestObject[attribute] = value;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('POST', url, requestObject);\n\n        return ajaxReturn.success(function(result){\n            return true;\n        }).error(function(errorObject){\n            console.log(errorObject);\n            return false;\n        });\n    }\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Ajax (helper function)\n * -----------------------------------------------------------------------------\n * Based on Atom.js by Todd Motto\n * http://toddmotto.com/writing-a-standalone-ajax-xhr-javascript-micro-library/\n */\nJss.prototype.ajaxHelper = {\n    // Parses json if possible, otherwise just return text\n    parse: function(req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return [result, req];\n    },\n\n    xhr: function(type, url, data) {\n        var ajaxHelper = this;\n\n        var methods = {\n            success: function() {},\n            error: function() {}\n        };\n        var XHR = XMLHttpRequest || ActiveXObject;\n        var request = new XHR('MSXML2.XMLHTTP.3.0');\n        request.open(type, url, true);\n        request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n\n        request.onreadystatechange = function() {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    methods.success.apply(methods, ajaxHelper.parse(request));\n                } else {\n                    methods.error.apply(methods, ajaxHelper.parse(request));\n                }\n            }\n        };\n        request.send(data);\n        return {\n            success: function(callback) {\n                methods.success = callback;\n                return methods;\n            },\n            error: function(callback) {\n                methods.error = callback;\n                return methods;\n            }\n        };\n    }\n};\n\nJss.prototype.ajax = {\n    // Get\n    get: function(src) {\n        console.log(this);\n    },\n\n    // Set\n    put: function(url, data) {\n        return this.ajaxHelper.xhr('PUT', url, data);\n    },\n\n    // Add\n    post: function(url, data) {\n        return this.ajaxHelper.xhr('POST', url, data);\n    }\n\n};\n/**\n * -----------------------------------------------------------------------------\n * Get data attribute value\n * -----------------------------------------------------------------------------\n * Returns the value of the requested attribute. Search first for a data-[ATTRIBUTE] value\n * If not found, it checks for the attribute in the default object. When that is not being\n * found neither, the normal this[attribute] value is being returned.\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME)\n * @return {string}                                                             The value of the given attribute\n */\nJss.prototype.getDataAttribute = function(attribute) {\n\n    return this.element.dataset[attribute];\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Update data attribute\n * -----------------------------------------------------------------------------\n * Set the value to the given attribute. And updates the data-[ATTRIBUTE] value\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME=\"value\")\n * @param {string} value                                                        The VALUE of the data attribute (data-name=\"VALUE\")\n * @return {undefined}\n */\n\nJss.prototype.setDataAttribute = function(attribute, value) {\n\n    // Update data attribute\n    if (typeof value !== \"undefined\") {\n        this.element.dataset[attribute] = this[attribute];\n    } else {\n        delete this.element.dataset[attribute];\n    }\n\n    return true;\n}\nJss.prototype.dataDefaultsCookie = {\n    'expireData': undefined\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get cookie value\n * -----------------------------------------------------------------------------\n * Returns cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @return {string}                                                             The VALUE of the given attribute\n */\nJss.prototype.getDataCookie = function(attribute) {\n\n    if (!attribute) { return null; }\n    return decodeURIComponent(document.cookie.replace(new RegExp(\"(?:(?:^|.*;)\\\\s*\" + encodeURIComponent(attribute).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"), \"$1\")) || null;\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data cookie\n * -----------------------------------------------------------------------------\n * Updates the cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @param {string} value                                                        The VALUE of the cookie\n * @return {undefined}\n */\n\nJss.prototype.setDataCookie = function(attribute, value, options) {\n    var endDate, path, domain, secureConnection;\n\n    if (typeof options === \"object\") {\n        endDate = JssService.getOption('endDate', options);\n        path    = JssService.getOption('path', options);\n        domain  = JssService.getOption('domain', options);\n        secureConnection = JssService.getOption('secureConnection', options);\n    }\n\n    if (!attribute || /^(?:expires|max\\-age|path|domain|secure)$/i.test(attribute)) { return false; }\n    var sExpires = \"\";\n    if (endDate) {\n      switch (endDate.constructor) {\n        case Number:\n          sExpires = endDate === Infinity ? \"; expires=Fri, 31 Dec 9999 23:59:59 GMT\" : \"; max-age=\" + endDate;\n          break;\n        case String:\n          sExpires = \"; expires=\" + endDate;\n          break;\n        case Date:\n          sExpires = \"; expires=\" + endDate.toUTCString();\n          break;\n      }\n    }\n\n    document.cookie = encodeURIComponent(attribute) + \"=\" + encodeURIComponent(value) + sExpires + (domain ? \"; domain=\" + domain : \"\") + (path ? \"; path=\" + path : \"\") + (secureConnection ? \"; secure\" : \"\");\n    return true;\n}\n/*******************************************************************************\n\n    Styles\n\n*******************************************************************************/\n\n/**\n * -----------------------------------------------------------------------------\n * Set height\n * -----------------------------------------------------------------------------\n * Sets the height of the `this.element` by the given input (height)\n *\n * @param  {number} height                                                      The height in pixels or percentage. Where numbers will be calculated to pixels so giving a height of 50 will result in a height of \"50px\". If you want percentages pass the variable with a percentage sign 50 + \"%\"\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setHeight = function(height) {\n    if (typeof height === \"number\") {\n        height += \"px\";\n    }\n\n    if (typeof height !== \"string\") {\n        throw(\"parameter height needs to be a string or integer\");\n    }\n\n    this.element.style.height = height;\n    return true;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get height\n * -----------------------------------------------------------------------------\n * Returns the height of the `this.element`\n *\n * @return {number}                                                             The height of the element in pixels\n */\nJss.prototype.getHeight = function() {\n    return this.element.offsetHeight;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set width\n * -----------------------------------------------------------------------------\n * Sets the width of the `this.element` by the given input (width)\n *\n * @param  {number} width                                                       The width in pixels or percentage. Where numbers will be calculated to pixels so giving a width of 50 will result in a width of \"50px\". If you want to set a percentage, just pass the variable with a percentage sign (\"50%\")\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setWidth = function(width) {\n    if (typeof width == \"number\") {\n        width += \"px\";\n    }\n\n    if (typeof width !== \"string\") {\n        throw(\"parameter width needs to be a string or integer\");\n    }\n    this.element.style.width = width;\n    return true;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get width\n * -----------------------------------------------------------------------------\n * Returns the width of the `this.element`\n *\n * @return {number}                                                             The width of the element in pixels\n */\nJss.prototype.getWidth = function() {\n    return this.element.offsetWidth;\n}\n/**\n * -----------------------------------------------------------------------------\n * Set State\n * -----------------------------------------------------------------------------\n * This updates the state of the object. States are being added to the class name prefix with a double underscore.\n * If you would have the module `envelope` and give it the state `open`. The class name `envelope__open` will be added.\n * Whenever you remove the state `open`, the according class name will be removed as well.\n *\n * @param  {string} str                                                         The name of the state which should be set (this is transformed to CamelCase)\n * @return {boolean}                                                            True on success, otherwise false (might already have the state)\n */\nJss.prototype.setState = function(str) {\n    var element, verifiedState, state, className;\n\n    element         = this.element;\n    state           = JssService.toCamelCase(str);\n    className       = this.classNamePrefix() + \"__is\" + state;\n\n    // Check if this.state is an array, and make it one if not.\n    if (Array.isArray(this.state) == false ) {\n        this.state = [];\n    }\n\n    // This if statement prevents that the same state is being set multiple times\n    if ( !this.hasState(str) ) {\n        this.addClassName(className)\n        this.state.push(state);\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Has state\n * -----------------------------------------------------------------------------\n * Checks if the parameter is already a state and returns true if so. Otherwise false.\n *\n * @param  {string} str                                                         The state which will be checked for\n * @return {boolean}                                                            True if it has the given state, otherwise false\n */\nJss.prototype.hasState = function(str) {\n    if (typeof this.state == \"object\" && this.state.indexOf(str) >= 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Remove state\n * -----------------------------------------------------------------------------\n * Removes the state from the states array, and from the element.className\n *\n * @param  {string} str                                                         The name of the state which should be removed\n * @return {undefined}\n */\nJss.prototype.removeState = function(str) {\n\n    var state      = JssService.toCamelCase(str);\n    var stateIndex = this.state.indexOf(state);\n\n    if (str == \"all\" || typeof str == \"undefined\") {\n        this.removeClassName(\"states\");\n    } else {\n        this.state.splice(stateIndex, 1);\n        if (typeof this.moduleAction != \"undefined\" && this.moduleAction.length > -1) {\n            this.removeClassName(this.classNamePrefix() + \"\" + this.moduleAction + \"__is\" + state);\n        } else {\n            this.removeClassName(this.classNamePrefix() + \"__is\" + state);\n        }\n    }\n}\n\n\n// A simple way to watch variables\n\n// addVar(keyName, value, watch_function)\n// setVar(keyName, value)\n// getVar(keyName)\n// Add -> new\n// Set -> update\n// Get -> return\nvar JssModule = function(){};\n\nJssModule.prototype.type               = \"JssModule\";\nJssModule.prototype.init               = Jss.prototype.init;\nJssModule.prototype.setElement         = Jss.prototype.setElement;\n\n// Triggers\nJssModule.prototype.findTriggers       = Jss.prototype.findTriggers;\nJssModule.prototype.configureTrigger      = Jss.prototype.configureTrigger;\n\n// Actions\n//JssModule.prototype.actions            = Object.create(Jss.prototype.actions);\nJssModule.prototype.validateAction     = Jss.prototype.validateAction;\nJssModule.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssModule.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssModule.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssModule.prototype.setState           = Jss.prototype.setState;\nJssModule.prototype.hasState           = Jss.prototype.hasState;\nJssModule.prototype.removeState        = Jss.prototype.removeState;\n\n// Data attributes\nJssModule.prototype.addData            = Jss.prototype.addData;\nJssModule.prototype.getData            = Jss.prototype.getData;\nJssModule.prototype.setData            = Jss.prototype.setData;\nvar JssTrigger = function(element, options) {\n    this.setElement(element);\n\n    if (typeof options === \"object\") {\n        if (typeof options.module === \"object\") {\n            this.module = options.module;\n        }\n        if (typeof options.moduleName === \"string\") {\n            this.moduleName = options.moduleName;\n        }\n        if (typeof options.triggerName === \"string\") {\n            this.triggerName = options.triggerName;\n        }\n    }\n}\n\n\nJssTrigger.prototype                    = Object.create(Jss.prototype);\nJssTrigger.prototype.type               = \"JssTrigger\";\nJssTrigger.prototype.setElement         = Jss.prototype.setElement;\n\n// Actions\n//JssTrigger.prototype.actions            = Object.create(Jss.prototype.actions);\nJssTrigger.prototype.validateAction     = Jss.prototype.validateAction;\nJssTrigger.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssTrigger.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssTrigger.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssTrigger.prototype.setState           = Jss.prototype.setState;\nJssTrigger.prototype.hasState           = Jss.prototype.hasState;\nJssTrigger.prototype.removeState        = Jss.prototype.removeState;\n\n\n\nvar  JssController = {};\nJssController.modules \t\t= []; // Result array with objects of all the found modules\nJssController.activeModules \t= JssService.activeModules;\n\nJssController.findModules = function() {\n    var allElements = document.getElementsByTagName(\"*\");                       // Array with all domElements\n    var test = [];\n    var self = this;\n    for (var i=0; i < allElements.length; i++) {\n\n        // Set default vars //\n        var element = allElements[i];                                           // Specific domElement\n        var tmp = false;\n\n        // Loop through the (active) modules array and add/instantiate them\n        self.activeModules.forEach(function(module){\n            if (JssService.isModule(element, module)) {\n                tmp = eval(\"new \" + JssService.toCamelCase(module) + \"(element)\"); // Dynamicly load modules\n\n                tmp.setElement(element);                                        // Add the domElement to the module\n                tmp.findTriggers();\t\t\t                                    // Search for module triggers\n\n                tmp.init();\t\t\t\t\t                                    // Executes everything within the init function\n                self.modules.push(tmp);\n\n            }\n        }); // End forEach\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    JssController.findModules();\n    console.log(JssController);\n});"
          },
          "params": [
            {
              "title": "param",
              "description": "The width in pixels or percentage. Where numbers will be calculated to pixels so giving a width of 50 will result in a width of \"50px\". If you want to set a percentage, just pass the variable with a percentage sign (\"50%\")",
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "width"
            }
          ],
          "returns": [
            {
              "title": "returns",
              "description": "True if setting the height was succesfull, otherwise false.",
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          ],
          "name": "setWidth",
          "kind": "function",
          "memberof": "Jss",
          "scope": "instance",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            "Jss",
            "setWidth"
          ]
        },
        {
          "description": "-----------------------------------------------------------------------------\nTrigger\n-----------------------------------------------------------------------------",
          "tags": [
            {
              "title": "name",
              "name": "trigger"
            },
            {
              "title": "kind",
              "kind": "function"
            },
            {
              "title": "memberof",
              "description": "Jss"
            },
            {
              "title": "instance"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 281,
                "column": 0
              },
              "end": {
                "line": 306,
                "column": 0
              }
            },
            "file": "/Users/jeffreyarts/Documents/DEV/jss/lib/jss.js",
            "code": "JssService = {};\n\n// Edit this array to enable or disable default modules\nJssService.activeModules   = []\n\n// Set this to false in a live environment\nJssService.dev             = true;\n\n/**************************\n*\n*   Below are core properties defined, becarefull when you think of changing these...\n*\n**************************/\n\n\nJssService.actions = {\n    hover:      ['hover',    'mouseover',   'onmouseover'                       ], // Fixed\n    click:      ['click',    'onclick'                                          ], // Fixed\n    mouseIn:    ['mousein',  'onmousein', 'mouseenter', 'onmouseenter'          ], // Fixed\n    mouseOut:   ['mouseout', 'onmouseout', 'mouseleave', 'onmouseleave'         ], // Fixed\n    resize:     ['resize',   'onresize'                                         ], // Fixed\n    focus:      ['focus',    'onfocus'                                          ],\n    keyDown:    ['keydown',  'keypress'                                         ],\n    keyUp:      ['keyup',    'keyrelease'                                       ],\n    change:     ['change',   'onchange'                                         ],\n};\n\nJssService.enterDelay = 1000;                                                   // Amount of miliseconds which is used to remove the entered state. (see core.actions) JssService.enterDelay setTimeout\n\nJssService.forbiddenProperties = [\n    'type',\n    'triggers',\n    'configureTrigger',\n    'findTriggers'\n];\n\n/**\n * -----------------------------------------------------------------------------\n * Is Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isModule = function(element, moduleName) {\n    var arr = element.className.split(\" \");\n    var found = false;\n\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i].indexOf(moduleName)        > -1 &&\n            arr[i].indexOf(moduleName + \"_\") == -1 &&\n            arr[i].indexOf(moduleName + \"-\") == -1)\n        {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.addModule = function(moduleName) {\n    this.activeModules.push(this.toKebabCase(moduleName))\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To CamelCase\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toCamelCase = function(input) {\n    var arr, res;\n    res = \"\";\n    if (typeof input === \"string\") {\n        input = input.replace(/\\-/g,\" \");                                       // Replace all dashes with spaces\n        arr = input.split(\" \");\n    } else {\n        arr = input;                                                            // Assume it is an array\n    }\n\n\n\n    var i = 0;\n    for (var i in arr) {\n        if (typeof i != \"undefined\") {\n            res += arr[i][0].toUpperCase()+ arr[i].slice(1); // Capitalize first letter\n        }\n    }\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To kebab-case\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toKebabCase = function(input) {\n    var res, str;\n    res = \"\";\n\n    if (typeof input === \"string\") {\n        str = input;\n    } else {                                                                    // Assume it is an array\n        str = input.join(\" \");\n    }\n\n    // First change it to camelcase\n    str = this.toCamelCase(str);\n\n    var max = str.length;\n    for (var i=0; i < max; i++) {\n        // Check if character is uppercase\n        if (str[i] != str[i].toLowerCase()) {\n            if (i!==0) {\n                str = str.substr(0, i) + \"-\" + str.substr(i);\n                i++;\n            }\n        }\n    }\n\n    return res = str.toLowerCase();\n}\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get option\n * -----------------------------------------------------------------------------\n * @param  {string} name                                                        Keyname in optionList\n * @param  {array} optionList                                                   Array with all possible options\n * @return {}                                                                   Copy of the value (optionsList[name])\n */\nJssService.getOption = function(name, optionList) {\n    if (typeof optionList !== \"object\") {\n        return false;\n    }\n\n    var res;\n\n    switch (name) {\n\n        // Only set `addDefaults` to false when it is explicitly set.\n        case \"addDefaults\":\n            if (optionList[name] !== false || typeof optionList[name] === \"undefined\") {\n                res = true;\n            } else {\n                res = false;\n            }\n        break;\n        case \"fallback\":\n            if ( Array.isArray(optionList[name]) ) {\n                res = optionList[name];\n                if (res.length===0) {\n                    res = false;\n                }\n            } else if (typeof optionList[name] === \"string\"){\n                res = [optionList[name]];\n            }\n        break;\n        default:\n        res = optionList[name]\n    }\n\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Is Trigger\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isTrigger = function(element, moduleName) {\n    if (element.className.indexOf(moduleName + \"--\") > -1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get trigger name\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {string} Name of the trigger.\n */\nJssService.getTriggerName = function(element, moduleName) {\n    if (typeof element != \"object\") {\n        console.error('Required first argument `element` needs to be a domElement.');\n        return false;\n    }\n    if (typeof moduleName != \"string\") {\n        console.error('Required second argument `moduleName` needs to be a string.');\n        return false;\n    }\n\n    // As an example we assume that the value of element.className equals 'b module--triggerName'\n    var startPos = element.className.indexOf(moduleName + \"--\");                    // 2\n    var sliced = element.className.slice(startPos, element.className.length )       // 'module--triggerName'\n    var endPos = sliced.indexOf(\" \");                                               // -1       // not found\n    if (endPos != -1) {                                                             // 19\n        sliced = sliced.slice(0,endPos);                                            // if there is more after the string, this will remove it\n    }\n    return sliced.replace(moduleName + \"--\",\"\")\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger name is allowed\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} True if the triggername is allowed, otherwise false.\n */\nJssService.triggerNameIsAllowed = function(element, moduleName) {\n    if (JssService.forbiddenProperties.indexOf(this.getTriggerName(element, moduleName)) > -1) {      // This triggerName is a core property, throw error\n        console.error('Triggername `' + getTriggerName(element,moduleName) + '` is not allowed. Change the trigger so it does not corresponds any of these: ' + JssService.forbiddenProperties)\n        return false;\n    }\n    return true;\n}\n/**\n * @module Jss\n * @author      Jeffrey Arts <sjeffff@gmail.com>\n * @copyright   2015\n */\nJss = function(){};\n\nJss.prototype.type      = \"Jss\"\nJss.prototype.triggers  = false;\nJss.prototype.element   = undefined;                                              // {obj} domElement\nJss.prototype.state     = undefined;                                              // {str} State of module, is reflected by the css class __isState\n\n/**\n * -----------------------------------------------------------------------------\n * Find Triggers\n * -----------------------------------------------------------------------------\n *\n * @param {domElement} element\n * @return {undefined}\n */\nJss.prototype.findTriggers = function(element) {\n    this.triggers = [];                                                         // If this is not set, all modules will have the same reference point to this.triggers.\n    // Module is created, now look for any module triggers\n    this.searchTriggersRecursiveInnerFunction(this.element)\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger\n * -----------------------------------------------------------------------------\n */\nJss.prototype.trigger = function(which, fn) {\n    if (typeof this.triggers !== \"object\") {\n        console.info(\"No triggers are found, please specify them in the css as `module-name--trigger-name`.\");\n        return false;\n    }\n\n    if (typeof this.triggers[which] !== \"object\") {\n        console.info(\"You are trying to execute a function on a non existing trigger `\" + which + \"`\");\n        return false;\n    }\n\n    for (var i = 0; i < this.triggers[which].length; i++) {\n        fn(this.triggers[which][i])\n    }\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Search triggers recursive inner function\n * -----------------------------------------------------------------------------\n * Recursive function which is executed bij findTriggers;\n *\n * @return {undefined}\n */\nJss.prototype.searchTriggersRecursiveInnerFunction = function(element) {\n    var self = this;\n    if (typeof element == \"undefined\" ) {\n        element = this.element;\n    }\n    if ( element.hasChildNodes() ) {\n        for (var i=0; i < element.childNodes.length; i++) {\n\n            var childElement = element.childNodes[i];                           // Improve readability\n\n            if (childElement.nodeType == 1) {                                   // NodeType 1 == domElement\n\n                if (JssService.isTrigger(childElement, this.moduleName)) {\n\n                    // Add a child element\n                    if (JssService.triggerNameIsAllowed(childElement, this.moduleName)) {\n                        var triggerName = JssService.getTriggerName(childElement, this.moduleName)\n\n                        if (typeof self.triggers[triggerName] !== \"object\") {\n                            self.triggers[triggerName] = [];\n                        }\n\n                        var tmp = new JssTrigger(childElement, {\n                            module: self,\n                            moduleName: this.moduleName,\n                            triggerName: triggerName,\n                        });\n\n                        self.triggers[triggerName].push(tmp);\n                    }\n                }\n                if (childElement.hasChildNodes()) {\n                    self.searchTriggersRecursiveInnerFunction(childElement)\n                }\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Configure Trigger\n * -----------------------------------------------------------------------------\n *\n * @return {undefined}\n */\nJss.prototype.configureTrigger = function(trigger, fn) {\n    if ( typeof this.triggers[trigger] == \"object\") {\n\n        for (var i = 0; i < this.triggers[trigger].length; i++) {\n            //self.triggers[trigger][i]\n            fn(this.triggers[trigger][i]);\n        }\n\n    } else if (JssService.dev) {\n        console.error(\"You are trying to configure a trigger which has no attached domElement\")\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n *   Init\n * -----------------------------------------------------------------------------\n * Notice the user that a init function needs to be added for controlling the triggers\n *\n * @return {undefined}\n */\nJss.prototype.init = function(func) {\n    if (JssService.dev) {\n        console.info(this.moduleName + \": Add a prototype.init function to add triggers and stuff\")\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set element\n * -----------------------------------------------------------------------------\n * Add a domElement to `this`\n *\n * @return {undefined}\n */\nJss.prototype.setElement = function(element) {\n    if (typeof element == \"undefined\") {\n        if (JssService.dev) {\n            return console.error(\"First parameter of setElement needs to be a domElement\");\n        }\n    }\n    this.element = element;\n}\n/*******************************************************************************\n   *\n   *\tActions\n   *\n   *  \t@author      Jeffrey Arts <sjeffff@gmail.com>\n   *    @copyright   2015\n   *\n*******************************************************************************/\n/**\n * -----------------------------------------------------------------------------\n *   Validate action\n * -----------------------------------------------------------------------------\n * Checks if parameter is a valid action, and logs an error when not.\n *\n * @param {string} request                                                      The name of the request\n * @return {boolean} true if a action is valid, otherwise false.\n */\nJss.prototype.validateAction = function(request) {\n    var result;\n    request = this.getActionElement(request).request\n    for (var action in JssService.actions) {\n        if (JssService.actions[action].indexOf(request.toLowerCase()) > -1) {\n            result = action;\n            break;\n        }\n    }\n    if (result) {\n        return result;\n    } else {\n        console.error(\"validateAction: unknown request\", request);\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * \t Add Action\n * -----------------------------------------------------------------------------\n * Adds an action to the object, list of possible requests can be found in Jss.actions\n *\n * | Options\n * \t\t- addDefaults {boolean}                                                 True: add default classes, false: don't\n *\n *\n *\n * @param {string} request                                                      The name of the request\n * @param {function} fn                                                         The function which should be triggered\n * @param {object} options                                                      Object with option parameters\n * @return {boolean} true if a action is succesfully added, otherwise false.\n */\nJss.prototype.addAction = function(request, fn, options) {\n\n    var self        = this;\n    var action      = self.validateAction(request)\n    var actions     = [];\n    var t = self.getActionElement(request);\n    var element     = t.element;\n    var request     = t.request;\n    t = undefined;\n\n    // Options\n    var addDefaults = JssService.getOption(\"addDefaults\", options);\n\n\n\n    switch (action) {\n\n        case \"resize\":\n\n            actions.push(element.addEventListener(\"resize\", fn));\n\n        break;\n\n\n        case \"click\":\n            actions.push(element.addEventListener(\"click\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"click\", function(){\n                    self.setState(\"Clicked\")\n                }));\n                actions.push(window.addEventListener( \"click\", function(event) {\n                    if (event.target != self.element && self.hasState(\"Clicked\")) {\n                        self.removeState(\"Clicked\")\n                    }\n                }));\n            } // End addDefaults\n        break;\n\n\n        case \"change\":\n            actions.push(element.addEventListener(\"change\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"change\", function(){\n                    self.setState(\"Changed\")\n                    setTimeout(function(){self.removeState(\"Changed\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"hover\":\n            actions.push(element.addEventListener(\"mouseover\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseover\", function(){\n                    self.setState(\"Hover\")\n                }));\n                actions.push(element.addEventListener(\"mouseout\",  function(){\n                    self.removeState(\"Hover\")\n                }));\n            }\n        break;\n\n\n        case \"mouseIn\":\n\n            actions.push(element.addEventListener(\"mouseenter\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseenter\", function(){\n                    self.setState(\"MouseIn\")\n                    setTimeout(function(){self.removeState(\"MouseIn\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"mouseOut\":\n\n            actions.push(element.addEventListener(\"mouseleave\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseleave\", function(){\n                    self.setState(\"MouseOut\")\n                    setTimeout(function(){self.removeState(\"MouseOut\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n    }\n\n\n    if (actions.length > 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get action element\n * -----------------------------------------------------------------------------\n * @param  {string} request                                                     The request\n * @return {object}                                                             An object with 2 properties: request && element\n */\nJss.prototype.getActionElement = function(request) {\n    var self = this;\n    var prefix = false;\n    var newRequest  = request;\n    var element = self.element;\n    // Set prefix if it exists\n    if (request.indexOf(\".\") > 0) {\n        var t       = request.split(\".\"),\n        newRequest  = t[1];\n        prefix      = t[0];\n        t = undefined;\n    }\n\n    // Update element according the prefix (or skip it, if not set)\n    if (prefix !== false) {\n        switch (prefix) {\n            case \"screen\":\n            case \"window\":\n                element = window;\n            break;\n        }\n    }\n\n    // Return object\n    return {\n        request: newRequest,\n        element: element\n    }\n}\n/**\n * -----------------------------------------------------------------------------\n * Class name prefix\n * -----------------------------------------------------------------------------\n * The prefix equals the modulename, or - when it's a trigger object - modulename--triggername\n *\n * @return {string} The classname\n */\nJss.prototype.classNamePrefix = function() {\n    if (this.type == \"JssTrigger\") {\n        return this.moduleName + \"--\" + this.triggerName;\n    } else {\n        return this.moduleName;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Remove class name\n * -----------------------------------------------------------------------------\n * Removes the `this.element` classname\n * \t- \"all\" || undefined        > Removes ALL classnames\n *  - \"allStates\" || \"states\"   > Remove all STATES\n *  - all other strings remove that specific string from the className\n *\n * @param {string} input                                                        The classname (case-sensitive) which needs to be removed\n * @return {undefined}\n */\nJss.prototype.removeClassName = function(input) {\n\n    var classList  = [];\n\n    if (input == \"all\" || typeof input == \"undefined\") {\n\n        this.element.className = \"\";\n\n    } else if (input == \"states\" || input == \"allStates\") {\n\n        classList = this.element.className.split(\" \");\n        for (var i in classList) {\n            className = classList[i];\n            if (className.indexOf(\"__is\") > -1) {\n                delete classList[i];\n            }\n        }\n        this.element.className = classList.join(\" \");\n\n    } else if(typeof input == \"string\") {\n        this.element.className = this.element.className.replace(input,\"\");\n    } else {\n        console.error(\"removeClassName: parameter should be a string\");\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Add class name\n * -----------------------------------------------------------------------------\n * Adds a class name by string or array.\n * Does NOT check for duplicates\n *\n * @param  {string} The classname to be added\n * @return {undefined}\n */\nJss.prototype.addClassName = function(data) {\n    this.element.className += \" \";\n    if (typeof data == \"string\") {\n        this.element.className += data;\n    } else {\n        this.element.className += data.join(\" \")\n    }\n}\n\n/**\n * List where the keys corresponds with this[key], and where the value is the function to be executed when the var is changed.\n */\nJss.prototype.setterWatchList = {};\nJss.prototype.getterWatchList = {};\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add data\n * -----------------------------------------------------------------------------\n * Add a (default) value for the given attribute.\n *\n * @param {string} attribute                                                    The name of the attribute (this[attribute])\n * @param {*} value                                                             The value of this[attribute], could be anything...\n * @param {object} options\n *           \t\t- setterWatchFunction {function}\n *           \t\t- getterWatchFunction {function}\n */\nJss.prototype.addData = function(attribute, value, options) {\n\n\n    // watchList[key] = fn;\n    var setterWatchFunction = JssService.getOption('setterWatchFunction', options); // Function\n    var getterWatchFunction = JssService.getOption('getterWatchFunction', options); // Function\n\n    if (typeof setterWatchFunction === \"function\") {\n        this.setterWatchList[attribute] = setterWatchFunction;\n    }\n\n    if (typeof getterWatchFunction === \"function\") {\n        this.getterWatchList[attribute] = getterWatchFunction;\n    }\n\n    // Set the default value\n    return this[attribute] = value;\n}\n\n\n\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- ajax {string} url\n */\nJss.prototype.setData = function(attribute, value, options) {\n\n    this[attribute] = value;\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n\n    if (Array.isArray(fallback)) {\n\n        for (var i = 0; i < fallback.length; i++) {\n            var type = fallback[i];\n\n            if (value && value.length > 0) {\n                this['setData' + JssService.toCamelCase(type)](attribute, value); // Call this.addDataAttribute(value) || this.addDataCookie(value) etc...\n                this[attribute] = value;\n            }\n        }\n    }\n\n    // Call the setter watch function, if defined;\n    if (typeof this.setterWatchList[attribute] === \"function\") { // Use the watchlist to add functionality whenever a data attribute is updated\n        this.setterWatchList[attribute]();\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataDefault {boolean}\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- dataAjax {string} url\n */\nJss.prototype.getData = function(attribute, options) {\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n    var value = false;\n\n\n    if (!fallback) {\n        fallback = ['attribute'];\n    }\n\n\n    for (var i = 0; i < fallback.length; i++) {\n        var type = JssService.toCamelCase(fallback[i]);\n        var customOptions = false;\n\n        if (typeof options == \"object\") {\n            customOptions = options[fallback[i].toLowerCase()];\n        }\n\n        if (!value || value.length < 0) {\n            if (typeof this['getData' + type] !== \"function\") {\n                console.error('this.getData' + type + ' is not a function. Probably ' + type + ' is not a available data option');\n                continue;\n            }\n            value = this['getData' + type]( attribute, customOptions ); // Call this.getDataAttribute(value) || this.getDataCookie(value) || this.getDataAjax(value) etc...\n        }\n    }\n    console.log(this.getterWatchList);\n    // Call the getter watch function, if defined;\n    if (typeof this.getterWatchList[attribute] == \"function\") {\n        this.getterWatchList[attribute]();\n    }\n\n    return this[attribute] = value;\n}\n/**\n * -----------------------------------------------------------------------------\n * Get data: Ajax\n * -----------------------------------------------------------------------------\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n *\n * @param {string} attribute                                                    The NAME of the inner variable (this.NAME), is also used as the key for the GET Request {NAME: value}\n * @param {object} options                                                      Object with parameters used to make a GET request\n * @return {string}                                                             The value of the given attribute, or false if an erro occured.\n */\nJss.prototype.getDataAjax = function(attribute, options) {\n    var url = JssService.getOption(\"url\", options);\n    var jsonKey = JssService.getOption(\"jsonKey\", options) || attribute;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('GET', url);\n\n        return ajaxReturn.success(function(result){\n            if (typeof result === \"object\") {\n                if (result[jsonKey]) {\n                    return result[jsonKey];\n                }\n            }\n        }).error(function(errorObject){\n            console.log(errorObject);\n        });\n    }\n\n    return false;\n};\n\n/**\n * -----------------------------------------------------------------------------\n * Set data: Ajax\n * -----------------------------------------------------------------------------\n * Makes a post request to the options.url in a object {attribute: value}\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n */\nJss.prototype.setDataAjax = function(attribute, value, options) {\n    var url = JssService.getOption(\"url\", options);\n    var requestObject = {}\n        requestObject[attribute] = value;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('POST', url, requestObject);\n\n        return ajaxReturn.success(function(result){\n            return true;\n        }).error(function(errorObject){\n            console.log(errorObject);\n            return false;\n        });\n    }\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Ajax (helper function)\n * -----------------------------------------------------------------------------\n * Based on Atom.js by Todd Motto\n * http://toddmotto.com/writing-a-standalone-ajax-xhr-javascript-micro-library/\n */\nJss.prototype.ajaxHelper = {\n    // Parses json if possible, otherwise just return text\n    parse: function(req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return [result, req];\n    },\n\n    xhr: function(type, url, data) {\n        var ajaxHelper = this;\n\n        var methods = {\n            success: function() {},\n            error: function() {}\n        };\n        var XHR = XMLHttpRequest || ActiveXObject;\n        var request = new XHR('MSXML2.XMLHTTP.3.0');\n        request.open(type, url, true);\n        request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n\n        request.onreadystatechange = function() {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    methods.success.apply(methods, ajaxHelper.parse(request));\n                } else {\n                    methods.error.apply(methods, ajaxHelper.parse(request));\n                }\n            }\n        };\n        request.send(data);\n        return {\n            success: function(callback) {\n                methods.success = callback;\n                return methods;\n            },\n            error: function(callback) {\n                methods.error = callback;\n                return methods;\n            }\n        };\n    }\n};\n\nJss.prototype.ajax = {\n    // Get\n    get: function(src) {\n        console.log(this);\n    },\n\n    // Set\n    put: function(url, data) {\n        return this.ajaxHelper.xhr('PUT', url, data);\n    },\n\n    // Add\n    post: function(url, data) {\n        return this.ajaxHelper.xhr('POST', url, data);\n    }\n\n};\n/**\n * -----------------------------------------------------------------------------\n * Get data attribute value\n * -----------------------------------------------------------------------------\n * Returns the value of the requested attribute. Search first for a data-[ATTRIBUTE] value\n * If not found, it checks for the attribute in the default object. When that is not being\n * found neither, the normal this[attribute] value is being returned.\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME)\n * @return {string}                                                             The value of the given attribute\n */\nJss.prototype.getDataAttribute = function(attribute) {\n\n    return this.element.dataset[attribute];\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Update data attribute\n * -----------------------------------------------------------------------------\n * Set the value to the given attribute. And updates the data-[ATTRIBUTE] value\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME=\"value\")\n * @param {string} value                                                        The VALUE of the data attribute (data-name=\"VALUE\")\n * @return {undefined}\n */\n\nJss.prototype.setDataAttribute = function(attribute, value) {\n\n    // Update data attribute\n    if (typeof value !== \"undefined\") {\n        this.element.dataset[attribute] = this[attribute];\n    } else {\n        delete this.element.dataset[attribute];\n    }\n\n    return true;\n}\nJss.prototype.dataDefaultsCookie = {\n    'expireData': undefined\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get cookie value\n * -----------------------------------------------------------------------------\n * Returns cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @return {string}                                                             The VALUE of the given attribute\n */\nJss.prototype.getDataCookie = function(attribute) {\n\n    if (!attribute) { return null; }\n    return decodeURIComponent(document.cookie.replace(new RegExp(\"(?:(?:^|.*;)\\\\s*\" + encodeURIComponent(attribute).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"), \"$1\")) || null;\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data cookie\n * -----------------------------------------------------------------------------\n * Updates the cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @param {string} value                                                        The VALUE of the cookie\n * @return {undefined}\n */\n\nJss.prototype.setDataCookie = function(attribute, value, options) {\n    var endDate, path, domain, secureConnection;\n\n    if (typeof options === \"object\") {\n        endDate = JssService.getOption('endDate', options);\n        path    = JssService.getOption('path', options);\n        domain  = JssService.getOption('domain', options);\n        secureConnection = JssService.getOption('secureConnection', options);\n    }\n\n    if (!attribute || /^(?:expires|max\\-age|path|domain|secure)$/i.test(attribute)) { return false; }\n    var sExpires = \"\";\n    if (endDate) {\n      switch (endDate.constructor) {\n        case Number:\n          sExpires = endDate === Infinity ? \"; expires=Fri, 31 Dec 9999 23:59:59 GMT\" : \"; max-age=\" + endDate;\n          break;\n        case String:\n          sExpires = \"; expires=\" + endDate;\n          break;\n        case Date:\n          sExpires = \"; expires=\" + endDate.toUTCString();\n          break;\n      }\n    }\n\n    document.cookie = encodeURIComponent(attribute) + \"=\" + encodeURIComponent(value) + sExpires + (domain ? \"; domain=\" + domain : \"\") + (path ? \"; path=\" + path : \"\") + (secureConnection ? \"; secure\" : \"\");\n    return true;\n}\n/*******************************************************************************\n\n    Styles\n\n*******************************************************************************/\n\n/**\n * -----------------------------------------------------------------------------\n * Set height\n * -----------------------------------------------------------------------------\n * Sets the height of the `this.element` by the given input (height)\n *\n * @param  {number} height                                                      The height in pixels or percentage. Where numbers will be calculated to pixels so giving a height of 50 will result in a height of \"50px\". If you want percentages pass the variable with a percentage sign 50 + \"%\"\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setHeight = function(height) {\n    if (typeof height === \"number\") {\n        height += \"px\";\n    }\n\n    if (typeof height !== \"string\") {\n        throw(\"parameter height needs to be a string or integer\");\n    }\n\n    this.element.style.height = height;\n    return true;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get height\n * -----------------------------------------------------------------------------\n * Returns the height of the `this.element`\n *\n * @return {number}                                                             The height of the element in pixels\n */\nJss.prototype.getHeight = function() {\n    return this.element.offsetHeight;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set width\n * -----------------------------------------------------------------------------\n * Sets the width of the `this.element` by the given input (width)\n *\n * @param  {number} width                                                       The width in pixels or percentage. Where numbers will be calculated to pixels so giving a width of 50 will result in a width of \"50px\". If you want to set a percentage, just pass the variable with a percentage sign (\"50%\")\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setWidth = function(width) {\n    if (typeof width == \"number\") {\n        width += \"px\";\n    }\n\n    if (typeof width !== \"string\") {\n        throw(\"parameter width needs to be a string or integer\");\n    }\n    this.element.style.width = width;\n    return true;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get width\n * -----------------------------------------------------------------------------\n * Returns the width of the `this.element`\n *\n * @return {number}                                                             The width of the element in pixels\n */\nJss.prototype.getWidth = function() {\n    return this.element.offsetWidth;\n}\n/**\n * -----------------------------------------------------------------------------\n * Set State\n * -----------------------------------------------------------------------------\n * This updates the state of the object. States are being added to the class name prefix with a double underscore.\n * If you would have the module `envelope` and give it the state `open`. The class name `envelope__open` will be added.\n * Whenever you remove the state `open`, the according class name will be removed as well.\n *\n * @param  {string} str                                                         The name of the state which should be set (this is transformed to CamelCase)\n * @return {boolean}                                                            True on success, otherwise false (might already have the state)\n */\nJss.prototype.setState = function(str) {\n    var element, verifiedState, state, className;\n\n    element         = this.element;\n    state           = JssService.toCamelCase(str);\n    className       = this.classNamePrefix() + \"__is\" + state;\n\n    // Check if this.state is an array, and make it one if not.\n    if (Array.isArray(this.state) == false ) {\n        this.state = [];\n    }\n\n    // This if statement prevents that the same state is being set multiple times\n    if ( !this.hasState(str) ) {\n        this.addClassName(className)\n        this.state.push(state);\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Has state\n * -----------------------------------------------------------------------------\n * Checks if the parameter is already a state and returns true if so. Otherwise false.\n *\n * @param  {string} str                                                         The state which will be checked for\n * @return {boolean}                                                            True if it has the given state, otherwise false\n */\nJss.prototype.hasState = function(str) {\n    if (typeof this.state == \"object\" && this.state.indexOf(str) >= 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Remove state\n * -----------------------------------------------------------------------------\n * Removes the state from the states array, and from the element.className\n *\n * @param  {string} str                                                         The name of the state which should be removed\n * @return {undefined}\n */\nJss.prototype.removeState = function(str) {\n\n    var state      = JssService.toCamelCase(str);\n    var stateIndex = this.state.indexOf(state);\n\n    if (str == \"all\" || typeof str == \"undefined\") {\n        this.removeClassName(\"states\");\n    } else {\n        this.state.splice(stateIndex, 1);\n        if (typeof this.moduleAction != \"undefined\" && this.moduleAction.length > -1) {\n            this.removeClassName(this.classNamePrefix() + \"\" + this.moduleAction + \"__is\" + state);\n        } else {\n            this.removeClassName(this.classNamePrefix() + \"__is\" + state);\n        }\n    }\n}\n\n\n// A simple way to watch variables\n\n// addVar(keyName, value, watch_function)\n// setVar(keyName, value)\n// getVar(keyName)\n// Add -> new\n// Set -> update\n// Get -> return\nvar JssModule = function(){};\n\nJssModule.prototype.type               = \"JssModule\";\nJssModule.prototype.init               = Jss.prototype.init;\nJssModule.prototype.setElement         = Jss.prototype.setElement;\n\n// Triggers\nJssModule.prototype.findTriggers       = Jss.prototype.findTriggers;\nJssModule.prototype.configureTrigger      = Jss.prototype.configureTrigger;\n\n// Actions\n//JssModule.prototype.actions            = Object.create(Jss.prototype.actions);\nJssModule.prototype.validateAction     = Jss.prototype.validateAction;\nJssModule.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssModule.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssModule.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssModule.prototype.setState           = Jss.prototype.setState;\nJssModule.prototype.hasState           = Jss.prototype.hasState;\nJssModule.prototype.removeState        = Jss.prototype.removeState;\n\n// Data attributes\nJssModule.prototype.addData            = Jss.prototype.addData;\nJssModule.prototype.getData            = Jss.prototype.getData;\nJssModule.prototype.setData            = Jss.prototype.setData;\nvar JssTrigger = function(element, options) {\n    this.setElement(element);\n\n    if (typeof options === \"object\") {\n        if (typeof options.module === \"object\") {\n            this.module = options.module;\n        }\n        if (typeof options.moduleName === \"string\") {\n            this.moduleName = options.moduleName;\n        }\n        if (typeof options.triggerName === \"string\") {\n            this.triggerName = options.triggerName;\n        }\n    }\n}\n\n\nJssTrigger.prototype                    = Object.create(Jss.prototype);\nJssTrigger.prototype.type               = \"JssTrigger\";\nJssTrigger.prototype.setElement         = Jss.prototype.setElement;\n\n// Actions\n//JssTrigger.prototype.actions            = Object.create(Jss.prototype.actions);\nJssTrigger.prototype.validateAction     = Jss.prototype.validateAction;\nJssTrigger.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssTrigger.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssTrigger.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssTrigger.prototype.setState           = Jss.prototype.setState;\nJssTrigger.prototype.hasState           = Jss.prototype.hasState;\nJssTrigger.prototype.removeState        = Jss.prototype.removeState;\n\n\n\nvar  JssController = {};\nJssController.modules \t\t= []; // Result array with objects of all the found modules\nJssController.activeModules \t= JssService.activeModules;\n\nJssController.findModules = function() {\n    var allElements = document.getElementsByTagName(\"*\");                       // Array with all domElements\n    var test = [];\n    var self = this;\n    for (var i=0; i < allElements.length; i++) {\n\n        // Set default vars //\n        var element = allElements[i];                                           // Specific domElement\n        var tmp = false;\n\n        // Loop through the (active) modules array and add/instantiate them\n        self.activeModules.forEach(function(module){\n            if (JssService.isModule(element, module)) {\n                tmp = eval(\"new \" + JssService.toCamelCase(module) + \"(element)\"); // Dynamicly load modules\n\n                tmp.setElement(element);                                        // Add the domElement to the module\n                tmp.findTriggers();\t\t\t                                    // Search for module triggers\n\n                tmp.init();\t\t\t\t\t                                    // Executes everything within the init function\n                self.modules.push(tmp);\n\n            }\n        }); // End forEach\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    JssController.findModules();\n    console.log(JssController);\n});"
          },
          "name": "trigger",
          "kind": "function",
          "memberof": "Jss",
          "scope": "instance",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            "Jss",
            "trigger"
          ]
        },
        {
          "description": "-----------------------------------------------------------------------------\n  Validate action\n-----------------------------------------------------------------------------\nChecks if parameter is a valid action, and logs an error when not.",
          "tags": [
            {
              "title": "param",
              "description": "The name of the request",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "request"
            },
            {
              "title": "returns",
              "description": "true if a action is valid, otherwise false.",
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            },
            {
              "title": "name",
              "name": "validateAction"
            },
            {
              "title": "kind",
              "kind": "function"
            },
            {
              "title": "memberof",
              "description": "Jss"
            },
            {
              "title": "instance"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 414,
                "column": 0
              },
              "end": {
                "line": 447,
                "column": 0
              }
            },
            "file": "/Users/jeffreyarts/Documents/DEV/jss/lib/jss.js",
            "code": "JssService = {};\n\n// Edit this array to enable or disable default modules\nJssService.activeModules   = []\n\n// Set this to false in a live environment\nJssService.dev             = true;\n\n/**************************\n*\n*   Below are core properties defined, becarefull when you think of changing these...\n*\n**************************/\n\n\nJssService.actions = {\n    hover:      ['hover',    'mouseover',   'onmouseover'                       ], // Fixed\n    click:      ['click',    'onclick'                                          ], // Fixed\n    mouseIn:    ['mousein',  'onmousein', 'mouseenter', 'onmouseenter'          ], // Fixed\n    mouseOut:   ['mouseout', 'onmouseout', 'mouseleave', 'onmouseleave'         ], // Fixed\n    resize:     ['resize',   'onresize'                                         ], // Fixed\n    focus:      ['focus',    'onfocus'                                          ],\n    keyDown:    ['keydown',  'keypress'                                         ],\n    keyUp:      ['keyup',    'keyrelease'                                       ],\n    change:     ['change',   'onchange'                                         ],\n};\n\nJssService.enterDelay = 1000;                                                   // Amount of miliseconds which is used to remove the entered state. (see core.actions) JssService.enterDelay setTimeout\n\nJssService.forbiddenProperties = [\n    'type',\n    'triggers',\n    'configureTrigger',\n    'findTriggers'\n];\n\n/**\n * -----------------------------------------------------------------------------\n * Is Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isModule = function(element, moduleName) {\n    var arr = element.className.split(\" \");\n    var found = false;\n\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i].indexOf(moduleName)        > -1 &&\n            arr[i].indexOf(moduleName + \"_\") == -1 &&\n            arr[i].indexOf(moduleName + \"-\") == -1)\n        {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.addModule = function(moduleName) {\n    this.activeModules.push(this.toKebabCase(moduleName))\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To CamelCase\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toCamelCase = function(input) {\n    var arr, res;\n    res = \"\";\n    if (typeof input === \"string\") {\n        input = input.replace(/\\-/g,\" \");                                       // Replace all dashes with spaces\n        arr = input.split(\" \");\n    } else {\n        arr = input;                                                            // Assume it is an array\n    }\n\n\n\n    var i = 0;\n    for (var i in arr) {\n        if (typeof i != \"undefined\") {\n            res += arr[i][0].toUpperCase()+ arr[i].slice(1); // Capitalize first letter\n        }\n    }\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To kebab-case\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toKebabCase = function(input) {\n    var res, str;\n    res = \"\";\n\n    if (typeof input === \"string\") {\n        str = input;\n    } else {                                                                    // Assume it is an array\n        str = input.join(\" \");\n    }\n\n    // First change it to camelcase\n    str = this.toCamelCase(str);\n\n    var max = str.length;\n    for (var i=0; i < max; i++) {\n        // Check if character is uppercase\n        if (str[i] != str[i].toLowerCase()) {\n            if (i!==0) {\n                str = str.substr(0, i) + \"-\" + str.substr(i);\n                i++;\n            }\n        }\n    }\n\n    return res = str.toLowerCase();\n}\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get option\n * -----------------------------------------------------------------------------\n * @param  {string} name                                                        Keyname in optionList\n * @param  {array} optionList                                                   Array with all possible options\n * @return {}                                                                   Copy of the value (optionsList[name])\n */\nJssService.getOption = function(name, optionList) {\n    if (typeof optionList !== \"object\") {\n        return false;\n    }\n\n    var res;\n\n    switch (name) {\n\n        // Only set `addDefaults` to false when it is explicitly set.\n        case \"addDefaults\":\n            if (optionList[name] !== false || typeof optionList[name] === \"undefined\") {\n                res = true;\n            } else {\n                res = false;\n            }\n        break;\n        case \"fallback\":\n            if ( Array.isArray(optionList[name]) ) {\n                res = optionList[name];\n                if (res.length===0) {\n                    res = false;\n                }\n            } else if (typeof optionList[name] === \"string\"){\n                res = [optionList[name]];\n            }\n        break;\n        default:\n        res = optionList[name]\n    }\n\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Is Trigger\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isTrigger = function(element, moduleName) {\n    if (element.className.indexOf(moduleName + \"--\") > -1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get trigger name\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {string} Name of the trigger.\n */\nJssService.getTriggerName = function(element, moduleName) {\n    if (typeof element != \"object\") {\n        console.error('Required first argument `element` needs to be a domElement.');\n        return false;\n    }\n    if (typeof moduleName != \"string\") {\n        console.error('Required second argument `moduleName` needs to be a string.');\n        return false;\n    }\n\n    // As an example we assume that the value of element.className equals 'b module--triggerName'\n    var startPos = element.className.indexOf(moduleName + \"--\");                    // 2\n    var sliced = element.className.slice(startPos, element.className.length )       // 'module--triggerName'\n    var endPos = sliced.indexOf(\" \");                                               // -1       // not found\n    if (endPos != -1) {                                                             // 19\n        sliced = sliced.slice(0,endPos);                                            // if there is more after the string, this will remove it\n    }\n    return sliced.replace(moduleName + \"--\",\"\")\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger name is allowed\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} True if the triggername is allowed, otherwise false.\n */\nJssService.triggerNameIsAllowed = function(element, moduleName) {\n    if (JssService.forbiddenProperties.indexOf(this.getTriggerName(element, moduleName)) > -1) {      // This triggerName is a core property, throw error\n        console.error('Triggername `' + getTriggerName(element,moduleName) + '` is not allowed. Change the trigger so it does not corresponds any of these: ' + JssService.forbiddenProperties)\n        return false;\n    }\n    return true;\n}\n/**\n * @module Jss\n * @author      Jeffrey Arts <sjeffff@gmail.com>\n * @copyright   2015\n */\nJss = function(){};\n\nJss.prototype.type      = \"Jss\"\nJss.prototype.triggers  = false;\nJss.prototype.element   = undefined;                                              // {obj} domElement\nJss.prototype.state     = undefined;                                              // {str} State of module, is reflected by the css class __isState\n\n/**\n * -----------------------------------------------------------------------------\n * Find Triggers\n * -----------------------------------------------------------------------------\n *\n * @param {domElement} element\n * @return {undefined}\n */\nJss.prototype.findTriggers = function(element) {\n    this.triggers = [];                                                         // If this is not set, all modules will have the same reference point to this.triggers.\n    // Module is created, now look for any module triggers\n    this.searchTriggersRecursiveInnerFunction(this.element)\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger\n * -----------------------------------------------------------------------------\n */\nJss.prototype.trigger = function(which, fn) {\n    if (typeof this.triggers !== \"object\") {\n        console.info(\"No triggers are found, please specify them in the css as `module-name--trigger-name`.\");\n        return false;\n    }\n\n    if (typeof this.triggers[which] !== \"object\") {\n        console.info(\"You are trying to execute a function on a non existing trigger `\" + which + \"`\");\n        return false;\n    }\n\n    for (var i = 0; i < this.triggers[which].length; i++) {\n        fn(this.triggers[which][i])\n    }\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Search triggers recursive inner function\n * -----------------------------------------------------------------------------\n * Recursive function which is executed bij findTriggers;\n *\n * @return {undefined}\n */\nJss.prototype.searchTriggersRecursiveInnerFunction = function(element) {\n    var self = this;\n    if (typeof element == \"undefined\" ) {\n        element = this.element;\n    }\n    if ( element.hasChildNodes() ) {\n        for (var i=0; i < element.childNodes.length; i++) {\n\n            var childElement = element.childNodes[i];                           // Improve readability\n\n            if (childElement.nodeType == 1) {                                   // NodeType 1 == domElement\n\n                if (JssService.isTrigger(childElement, this.moduleName)) {\n\n                    // Add a child element\n                    if (JssService.triggerNameIsAllowed(childElement, this.moduleName)) {\n                        var triggerName = JssService.getTriggerName(childElement, this.moduleName)\n\n                        if (typeof self.triggers[triggerName] !== \"object\") {\n                            self.triggers[triggerName] = [];\n                        }\n\n                        var tmp = new JssTrigger(childElement, {\n                            module: self,\n                            moduleName: this.moduleName,\n                            triggerName: triggerName,\n                        });\n\n                        self.triggers[triggerName].push(tmp);\n                    }\n                }\n                if (childElement.hasChildNodes()) {\n                    self.searchTriggersRecursiveInnerFunction(childElement)\n                }\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Configure Trigger\n * -----------------------------------------------------------------------------\n *\n * @return {undefined}\n */\nJss.prototype.configureTrigger = function(trigger, fn) {\n    if ( typeof this.triggers[trigger] == \"object\") {\n\n        for (var i = 0; i < this.triggers[trigger].length; i++) {\n            //self.triggers[trigger][i]\n            fn(this.triggers[trigger][i]);\n        }\n\n    } else if (JssService.dev) {\n        console.error(\"You are trying to configure a trigger which has no attached domElement\")\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n *   Init\n * -----------------------------------------------------------------------------\n * Notice the user that a init function needs to be added for controlling the triggers\n *\n * @return {undefined}\n */\nJss.prototype.init = function(func) {\n    if (JssService.dev) {\n        console.info(this.moduleName + \": Add a prototype.init function to add triggers and stuff\")\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set element\n * -----------------------------------------------------------------------------\n * Add a domElement to `this`\n *\n * @return {undefined}\n */\nJss.prototype.setElement = function(element) {\n    if (typeof element == \"undefined\") {\n        if (JssService.dev) {\n            return console.error(\"First parameter of setElement needs to be a domElement\");\n        }\n    }\n    this.element = element;\n}\n/*******************************************************************************\n   *\n   *\tActions\n   *\n   *  \t@author      Jeffrey Arts <sjeffff@gmail.com>\n   *    @copyright   2015\n   *\n*******************************************************************************/\n/**\n * -----------------------------------------------------------------------------\n *   Validate action\n * -----------------------------------------------------------------------------\n * Checks if parameter is a valid action, and logs an error when not.\n *\n * @param {string} request                                                      The name of the request\n * @return {boolean} true if a action is valid, otherwise false.\n */\nJss.prototype.validateAction = function(request) {\n    var result;\n    request = this.getActionElement(request).request\n    for (var action in JssService.actions) {\n        if (JssService.actions[action].indexOf(request.toLowerCase()) > -1) {\n            result = action;\n            break;\n        }\n    }\n    if (result) {\n        return result;\n    } else {\n        console.error(\"validateAction: unknown request\", request);\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * \t Add Action\n * -----------------------------------------------------------------------------\n * Adds an action to the object, list of possible requests can be found in Jss.actions\n *\n * | Options\n * \t\t- addDefaults {boolean}                                                 True: add default classes, false: don't\n *\n *\n *\n * @param {string} request                                                      The name of the request\n * @param {function} fn                                                         The function which should be triggered\n * @param {object} options                                                      Object with option parameters\n * @return {boolean} true if a action is succesfully added, otherwise false.\n */\nJss.prototype.addAction = function(request, fn, options) {\n\n    var self        = this;\n    var action      = self.validateAction(request)\n    var actions     = [];\n    var t = self.getActionElement(request);\n    var element     = t.element;\n    var request     = t.request;\n    t = undefined;\n\n    // Options\n    var addDefaults = JssService.getOption(\"addDefaults\", options);\n\n\n\n    switch (action) {\n\n        case \"resize\":\n\n            actions.push(element.addEventListener(\"resize\", fn));\n\n        break;\n\n\n        case \"click\":\n            actions.push(element.addEventListener(\"click\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"click\", function(){\n                    self.setState(\"Clicked\")\n                }));\n                actions.push(window.addEventListener( \"click\", function(event) {\n                    if (event.target != self.element && self.hasState(\"Clicked\")) {\n                        self.removeState(\"Clicked\")\n                    }\n                }));\n            } // End addDefaults\n        break;\n\n\n        case \"change\":\n            actions.push(element.addEventListener(\"change\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"change\", function(){\n                    self.setState(\"Changed\")\n                    setTimeout(function(){self.removeState(\"Changed\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"hover\":\n            actions.push(element.addEventListener(\"mouseover\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseover\", function(){\n                    self.setState(\"Hover\")\n                }));\n                actions.push(element.addEventListener(\"mouseout\",  function(){\n                    self.removeState(\"Hover\")\n                }));\n            }\n        break;\n\n\n        case \"mouseIn\":\n\n            actions.push(element.addEventListener(\"mouseenter\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseenter\", function(){\n                    self.setState(\"MouseIn\")\n                    setTimeout(function(){self.removeState(\"MouseIn\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"mouseOut\":\n\n            actions.push(element.addEventListener(\"mouseleave\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseleave\", function(){\n                    self.setState(\"MouseOut\")\n                    setTimeout(function(){self.removeState(\"MouseOut\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n    }\n\n\n    if (actions.length > 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get action element\n * -----------------------------------------------------------------------------\n * @param  {string} request                                                     The request\n * @return {object}                                                             An object with 2 properties: request && element\n */\nJss.prototype.getActionElement = function(request) {\n    var self = this;\n    var prefix = false;\n    var newRequest  = request;\n    var element = self.element;\n    // Set prefix if it exists\n    if (request.indexOf(\".\") > 0) {\n        var t       = request.split(\".\"),\n        newRequest  = t[1];\n        prefix      = t[0];\n        t = undefined;\n    }\n\n    // Update element according the prefix (or skip it, if not set)\n    if (prefix !== false) {\n        switch (prefix) {\n            case \"screen\":\n            case \"window\":\n                element = window;\n            break;\n        }\n    }\n\n    // Return object\n    return {\n        request: newRequest,\n        element: element\n    }\n}\n/**\n * -----------------------------------------------------------------------------\n * Class name prefix\n * -----------------------------------------------------------------------------\n * The prefix equals the modulename, or - when it's a trigger object - modulename--triggername\n *\n * @return {string} The classname\n */\nJss.prototype.classNamePrefix = function() {\n    if (this.type == \"JssTrigger\") {\n        return this.moduleName + \"--\" + this.triggerName;\n    } else {\n        return this.moduleName;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Remove class name\n * -----------------------------------------------------------------------------\n * Removes the `this.element` classname\n * \t- \"all\" || undefined        > Removes ALL classnames\n *  - \"allStates\" || \"states\"   > Remove all STATES\n *  - all other strings remove that specific string from the className\n *\n * @param {string} input                                                        The classname (case-sensitive) which needs to be removed\n * @return {undefined}\n */\nJss.prototype.removeClassName = function(input) {\n\n    var classList  = [];\n\n    if (input == \"all\" || typeof input == \"undefined\") {\n\n        this.element.className = \"\";\n\n    } else if (input == \"states\" || input == \"allStates\") {\n\n        classList = this.element.className.split(\" \");\n        for (var i in classList) {\n            className = classList[i];\n            if (className.indexOf(\"__is\") > -1) {\n                delete classList[i];\n            }\n        }\n        this.element.className = classList.join(\" \");\n\n    } else if(typeof input == \"string\") {\n        this.element.className = this.element.className.replace(input,\"\");\n    } else {\n        console.error(\"removeClassName: parameter should be a string\");\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Add class name\n * -----------------------------------------------------------------------------\n * Adds a class name by string or array.\n * Does NOT check for duplicates\n *\n * @param  {string} The classname to be added\n * @return {undefined}\n */\nJss.prototype.addClassName = function(data) {\n    this.element.className += \" \";\n    if (typeof data == \"string\") {\n        this.element.className += data;\n    } else {\n        this.element.className += data.join(\" \")\n    }\n}\n\n/**\n * List where the keys corresponds with this[key], and where the value is the function to be executed when the var is changed.\n */\nJss.prototype.setterWatchList = {};\nJss.prototype.getterWatchList = {};\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add data\n * -----------------------------------------------------------------------------\n * Add a (default) value for the given attribute.\n *\n * @param {string} attribute                                                    The name of the attribute (this[attribute])\n * @param {*} value                                                             The value of this[attribute], could be anything...\n * @param {object} options\n *           \t\t- setterWatchFunction {function}\n *           \t\t- getterWatchFunction {function}\n */\nJss.prototype.addData = function(attribute, value, options) {\n\n\n    // watchList[key] = fn;\n    var setterWatchFunction = JssService.getOption('setterWatchFunction', options); // Function\n    var getterWatchFunction = JssService.getOption('getterWatchFunction', options); // Function\n\n    if (typeof setterWatchFunction === \"function\") {\n        this.setterWatchList[attribute] = setterWatchFunction;\n    }\n\n    if (typeof getterWatchFunction === \"function\") {\n        this.getterWatchList[attribute] = getterWatchFunction;\n    }\n\n    // Set the default value\n    return this[attribute] = value;\n}\n\n\n\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- ajax {string} url\n */\nJss.prototype.setData = function(attribute, value, options) {\n\n    this[attribute] = value;\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n\n    if (Array.isArray(fallback)) {\n\n        for (var i = 0; i < fallback.length; i++) {\n            var type = fallback[i];\n\n            if (value && value.length > 0) {\n                this['setData' + JssService.toCamelCase(type)](attribute, value); // Call this.addDataAttribute(value) || this.addDataCookie(value) etc...\n                this[attribute] = value;\n            }\n        }\n    }\n\n    // Call the setter watch function, if defined;\n    if (typeof this.setterWatchList[attribute] === \"function\") { // Use the watchlist to add functionality whenever a data attribute is updated\n        this.setterWatchList[attribute]();\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataDefault {boolean}\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- dataAjax {string} url\n */\nJss.prototype.getData = function(attribute, options) {\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n    var value = false;\n\n\n    if (!fallback) {\n        fallback = ['attribute'];\n    }\n\n\n    for (var i = 0; i < fallback.length; i++) {\n        var type = JssService.toCamelCase(fallback[i]);\n        var customOptions = false;\n\n        if (typeof options == \"object\") {\n            customOptions = options[fallback[i].toLowerCase()];\n        }\n\n        if (!value || value.length < 0) {\n            if (typeof this['getData' + type] !== \"function\") {\n                console.error('this.getData' + type + ' is not a function. Probably ' + type + ' is not a available data option');\n                continue;\n            }\n            value = this['getData' + type]( attribute, customOptions ); // Call this.getDataAttribute(value) || this.getDataCookie(value) || this.getDataAjax(value) etc...\n        }\n    }\n    console.log(this.getterWatchList);\n    // Call the getter watch function, if defined;\n    if (typeof this.getterWatchList[attribute] == \"function\") {\n        this.getterWatchList[attribute]();\n    }\n\n    return this[attribute] = value;\n}\n/**\n * -----------------------------------------------------------------------------\n * Get data: Ajax\n * -----------------------------------------------------------------------------\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n *\n * @param {string} attribute                                                    The NAME of the inner variable (this.NAME), is also used as the key for the GET Request {NAME: value}\n * @param {object} options                                                      Object with parameters used to make a GET request\n * @return {string}                                                             The value of the given attribute, or false if an erro occured.\n */\nJss.prototype.getDataAjax = function(attribute, options) {\n    var url = JssService.getOption(\"url\", options);\n    var jsonKey = JssService.getOption(\"jsonKey\", options) || attribute;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('GET', url);\n\n        return ajaxReturn.success(function(result){\n            if (typeof result === \"object\") {\n                if (result[jsonKey]) {\n                    return result[jsonKey];\n                }\n            }\n        }).error(function(errorObject){\n            console.log(errorObject);\n        });\n    }\n\n    return false;\n};\n\n/**\n * -----------------------------------------------------------------------------\n * Set data: Ajax\n * -----------------------------------------------------------------------------\n * Makes a post request to the options.url in a object {attribute: value}\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n */\nJss.prototype.setDataAjax = function(attribute, value, options) {\n    var url = JssService.getOption(\"url\", options);\n    var requestObject = {}\n        requestObject[attribute] = value;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('POST', url, requestObject);\n\n        return ajaxReturn.success(function(result){\n            return true;\n        }).error(function(errorObject){\n            console.log(errorObject);\n            return false;\n        });\n    }\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Ajax (helper function)\n * -----------------------------------------------------------------------------\n * Based on Atom.js by Todd Motto\n * http://toddmotto.com/writing-a-standalone-ajax-xhr-javascript-micro-library/\n */\nJss.prototype.ajaxHelper = {\n    // Parses json if possible, otherwise just return text\n    parse: function(req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return [result, req];\n    },\n\n    xhr: function(type, url, data) {\n        var ajaxHelper = this;\n\n        var methods = {\n            success: function() {},\n            error: function() {}\n        };\n        var XHR = XMLHttpRequest || ActiveXObject;\n        var request = new XHR('MSXML2.XMLHTTP.3.0');\n        request.open(type, url, true);\n        request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n\n        request.onreadystatechange = function() {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    methods.success.apply(methods, ajaxHelper.parse(request));\n                } else {\n                    methods.error.apply(methods, ajaxHelper.parse(request));\n                }\n            }\n        };\n        request.send(data);\n        return {\n            success: function(callback) {\n                methods.success = callback;\n                return methods;\n            },\n            error: function(callback) {\n                methods.error = callback;\n                return methods;\n            }\n        };\n    }\n};\n\nJss.prototype.ajax = {\n    // Get\n    get: function(src) {\n        console.log(this);\n    },\n\n    // Set\n    put: function(url, data) {\n        return this.ajaxHelper.xhr('PUT', url, data);\n    },\n\n    // Add\n    post: function(url, data) {\n        return this.ajaxHelper.xhr('POST', url, data);\n    }\n\n};\n/**\n * -----------------------------------------------------------------------------\n * Get data attribute value\n * -----------------------------------------------------------------------------\n * Returns the value of the requested attribute. Search first for a data-[ATTRIBUTE] value\n * If not found, it checks for the attribute in the default object. When that is not being\n * found neither, the normal this[attribute] value is being returned.\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME)\n * @return {string}                                                             The value of the given attribute\n */\nJss.prototype.getDataAttribute = function(attribute) {\n\n    return this.element.dataset[attribute];\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Update data attribute\n * -----------------------------------------------------------------------------\n * Set the value to the given attribute. And updates the data-[ATTRIBUTE] value\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME=\"value\")\n * @param {string} value                                                        The VALUE of the data attribute (data-name=\"VALUE\")\n * @return {undefined}\n */\n\nJss.prototype.setDataAttribute = function(attribute, value) {\n\n    // Update data attribute\n    if (typeof value !== \"undefined\") {\n        this.element.dataset[attribute] = this[attribute];\n    } else {\n        delete this.element.dataset[attribute];\n    }\n\n    return true;\n}\nJss.prototype.dataDefaultsCookie = {\n    'expireData': undefined\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get cookie value\n * -----------------------------------------------------------------------------\n * Returns cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @return {string}                                                             The VALUE of the given attribute\n */\nJss.prototype.getDataCookie = function(attribute) {\n\n    if (!attribute) { return null; }\n    return decodeURIComponent(document.cookie.replace(new RegExp(\"(?:(?:^|.*;)\\\\s*\" + encodeURIComponent(attribute).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"), \"$1\")) || null;\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data cookie\n * -----------------------------------------------------------------------------\n * Updates the cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @param {string} value                                                        The VALUE of the cookie\n * @return {undefined}\n */\n\nJss.prototype.setDataCookie = function(attribute, value, options) {\n    var endDate, path, domain, secureConnection;\n\n    if (typeof options === \"object\") {\n        endDate = JssService.getOption('endDate', options);\n        path    = JssService.getOption('path', options);\n        domain  = JssService.getOption('domain', options);\n        secureConnection = JssService.getOption('secureConnection', options);\n    }\n\n    if (!attribute || /^(?:expires|max\\-age|path|domain|secure)$/i.test(attribute)) { return false; }\n    var sExpires = \"\";\n    if (endDate) {\n      switch (endDate.constructor) {\n        case Number:\n          sExpires = endDate === Infinity ? \"; expires=Fri, 31 Dec 9999 23:59:59 GMT\" : \"; max-age=\" + endDate;\n          break;\n        case String:\n          sExpires = \"; expires=\" + endDate;\n          break;\n        case Date:\n          sExpires = \"; expires=\" + endDate.toUTCString();\n          break;\n      }\n    }\n\n    document.cookie = encodeURIComponent(attribute) + \"=\" + encodeURIComponent(value) + sExpires + (domain ? \"; domain=\" + domain : \"\") + (path ? \"; path=\" + path : \"\") + (secureConnection ? \"; secure\" : \"\");\n    return true;\n}\n/*******************************************************************************\n\n    Styles\n\n*******************************************************************************/\n\n/**\n * -----------------------------------------------------------------------------\n * Set height\n * -----------------------------------------------------------------------------\n * Sets the height of the `this.element` by the given input (height)\n *\n * @param  {number} height                                                      The height in pixels or percentage. Where numbers will be calculated to pixels so giving a height of 50 will result in a height of \"50px\". If you want percentages pass the variable with a percentage sign 50 + \"%\"\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setHeight = function(height) {\n    if (typeof height === \"number\") {\n        height += \"px\";\n    }\n\n    if (typeof height !== \"string\") {\n        throw(\"parameter height needs to be a string or integer\");\n    }\n\n    this.element.style.height = height;\n    return true;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get height\n * -----------------------------------------------------------------------------\n * Returns the height of the `this.element`\n *\n * @return {number}                                                             The height of the element in pixels\n */\nJss.prototype.getHeight = function() {\n    return this.element.offsetHeight;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set width\n * -----------------------------------------------------------------------------\n * Sets the width of the `this.element` by the given input (width)\n *\n * @param  {number} width                                                       The width in pixels or percentage. Where numbers will be calculated to pixels so giving a width of 50 will result in a width of \"50px\". If you want to set a percentage, just pass the variable with a percentage sign (\"50%\")\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setWidth = function(width) {\n    if (typeof width == \"number\") {\n        width += \"px\";\n    }\n\n    if (typeof width !== \"string\") {\n        throw(\"parameter width needs to be a string or integer\");\n    }\n    this.element.style.width = width;\n    return true;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get width\n * -----------------------------------------------------------------------------\n * Returns the width of the `this.element`\n *\n * @return {number}                                                             The width of the element in pixels\n */\nJss.prototype.getWidth = function() {\n    return this.element.offsetWidth;\n}\n/**\n * -----------------------------------------------------------------------------\n * Set State\n * -----------------------------------------------------------------------------\n * This updates the state of the object. States are being added to the class name prefix with a double underscore.\n * If you would have the module `envelope` and give it the state `open`. The class name `envelope__open` will be added.\n * Whenever you remove the state `open`, the according class name will be removed as well.\n *\n * @param  {string} str                                                         The name of the state which should be set (this is transformed to CamelCase)\n * @return {boolean}                                                            True on success, otherwise false (might already have the state)\n */\nJss.prototype.setState = function(str) {\n    var element, verifiedState, state, className;\n\n    element         = this.element;\n    state           = JssService.toCamelCase(str);\n    className       = this.classNamePrefix() + \"__is\" + state;\n\n    // Check if this.state is an array, and make it one if not.\n    if (Array.isArray(this.state) == false ) {\n        this.state = [];\n    }\n\n    // This if statement prevents that the same state is being set multiple times\n    if ( !this.hasState(str) ) {\n        this.addClassName(className)\n        this.state.push(state);\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Has state\n * -----------------------------------------------------------------------------\n * Checks if the parameter is already a state and returns true if so. Otherwise false.\n *\n * @param  {string} str                                                         The state which will be checked for\n * @return {boolean}                                                            True if it has the given state, otherwise false\n */\nJss.prototype.hasState = function(str) {\n    if (typeof this.state == \"object\" && this.state.indexOf(str) >= 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Remove state\n * -----------------------------------------------------------------------------\n * Removes the state from the states array, and from the element.className\n *\n * @param  {string} str                                                         The name of the state which should be removed\n * @return {undefined}\n */\nJss.prototype.removeState = function(str) {\n\n    var state      = JssService.toCamelCase(str);\n    var stateIndex = this.state.indexOf(state);\n\n    if (str == \"all\" || typeof str == \"undefined\") {\n        this.removeClassName(\"states\");\n    } else {\n        this.state.splice(stateIndex, 1);\n        if (typeof this.moduleAction != \"undefined\" && this.moduleAction.length > -1) {\n            this.removeClassName(this.classNamePrefix() + \"\" + this.moduleAction + \"__is\" + state);\n        } else {\n            this.removeClassName(this.classNamePrefix() + \"__is\" + state);\n        }\n    }\n}\n\n\n// A simple way to watch variables\n\n// addVar(keyName, value, watch_function)\n// setVar(keyName, value)\n// getVar(keyName)\n// Add -> new\n// Set -> update\n// Get -> return\nvar JssModule = function(){};\n\nJssModule.prototype.type               = \"JssModule\";\nJssModule.prototype.init               = Jss.prototype.init;\nJssModule.prototype.setElement         = Jss.prototype.setElement;\n\n// Triggers\nJssModule.prototype.findTriggers       = Jss.prototype.findTriggers;\nJssModule.prototype.configureTrigger      = Jss.prototype.configureTrigger;\n\n// Actions\n//JssModule.prototype.actions            = Object.create(Jss.prototype.actions);\nJssModule.prototype.validateAction     = Jss.prototype.validateAction;\nJssModule.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssModule.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssModule.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssModule.prototype.setState           = Jss.prototype.setState;\nJssModule.prototype.hasState           = Jss.prototype.hasState;\nJssModule.prototype.removeState        = Jss.prototype.removeState;\n\n// Data attributes\nJssModule.prototype.addData            = Jss.prototype.addData;\nJssModule.prototype.getData            = Jss.prototype.getData;\nJssModule.prototype.setData            = Jss.prototype.setData;\nvar JssTrigger = function(element, options) {\n    this.setElement(element);\n\n    if (typeof options === \"object\") {\n        if (typeof options.module === \"object\") {\n            this.module = options.module;\n        }\n        if (typeof options.moduleName === \"string\") {\n            this.moduleName = options.moduleName;\n        }\n        if (typeof options.triggerName === \"string\") {\n            this.triggerName = options.triggerName;\n        }\n    }\n}\n\n\nJssTrigger.prototype                    = Object.create(Jss.prototype);\nJssTrigger.prototype.type               = \"JssTrigger\";\nJssTrigger.prototype.setElement         = Jss.prototype.setElement;\n\n// Actions\n//JssTrigger.prototype.actions            = Object.create(Jss.prototype.actions);\nJssTrigger.prototype.validateAction     = Jss.prototype.validateAction;\nJssTrigger.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssTrigger.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssTrigger.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssTrigger.prototype.setState           = Jss.prototype.setState;\nJssTrigger.prototype.hasState           = Jss.prototype.hasState;\nJssTrigger.prototype.removeState        = Jss.prototype.removeState;\n\n\n\nvar  JssController = {};\nJssController.modules \t\t= []; // Result array with objects of all the found modules\nJssController.activeModules \t= JssService.activeModules;\n\nJssController.findModules = function() {\n    var allElements = document.getElementsByTagName(\"*\");                       // Array with all domElements\n    var test = [];\n    var self = this;\n    for (var i=0; i < allElements.length; i++) {\n\n        // Set default vars //\n        var element = allElements[i];                                           // Specific domElement\n        var tmp = false;\n\n        // Loop through the (active) modules array and add/instantiate them\n        self.activeModules.forEach(function(module){\n            if (JssService.isModule(element, module)) {\n                tmp = eval(\"new \" + JssService.toCamelCase(module) + \"(element)\"); // Dynamicly load modules\n\n                tmp.setElement(element);                                        // Add the domElement to the module\n                tmp.findTriggers();\t\t\t                                    // Search for module triggers\n\n                tmp.init();\t\t\t\t\t                                    // Executes everything within the init function\n                self.modules.push(tmp);\n\n            }\n        }); // End forEach\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    JssController.findModules();\n    console.log(JssController);\n});"
          },
          "params": [
            {
              "title": "param",
              "description": "The name of the request",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "request"
            }
          ],
          "returns": [
            {
              "title": "returns",
              "description": "true if a action is valid, otherwise false.",
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          ],
          "name": "validateAction",
          "kind": "function",
          "memberof": "Jss",
          "scope": "instance",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            "Jss",
            "validateAction"
          ]
        }
      ],
      "static": []
    },
    "path": [
      "Jss"
    ]
  },
  {
    "description": "",
    "tags": [
      {
        "title": "module",
        "description": null,
        "type": null,
        "name": "JssService"
      },
      {
        "title": "name",
        "name": "JssService"
      },
      {
        "title": "kind",
        "kind": "module"
      }
    ],
    "context": {
      "loc": {
        "start": {
          "line": 4,
          "column": 0
        },
        "end": {
          "line": 4,
          "column": 16
        }
      },
      "file": "/Users/jeffreyarts/Documents/DEV/jss/lib/jss.js",
      "code": "JssService = {};\n\n// Edit this array to enable or disable default modules\nJssService.activeModules   = []\n\n// Set this to false in a live environment\nJssService.dev             = true;\n\n/**************************\n*\n*   Below are core properties defined, becarefull when you think of changing these...\n*\n**************************/\n\n\nJssService.actions = {\n    hover:      ['hover',    'mouseover',   'onmouseover'                       ], // Fixed\n    click:      ['click',    'onclick'                                          ], // Fixed\n    mouseIn:    ['mousein',  'onmousein', 'mouseenter', 'onmouseenter'          ], // Fixed\n    mouseOut:   ['mouseout', 'onmouseout', 'mouseleave', 'onmouseleave'         ], // Fixed\n    resize:     ['resize',   'onresize'                                         ], // Fixed\n    focus:      ['focus',    'onfocus'                                          ],\n    keyDown:    ['keydown',  'keypress'                                         ],\n    keyUp:      ['keyup',    'keyrelease'                                       ],\n    change:     ['change',   'onchange'                                         ],\n};\n\nJssService.enterDelay = 1000;                                                   // Amount of miliseconds which is used to remove the entered state. (see core.actions) JssService.enterDelay setTimeout\n\nJssService.forbiddenProperties = [\n    'type',\n    'triggers',\n    'configureTrigger',\n    'findTriggers'\n];\n\n/**\n * -----------------------------------------------------------------------------\n * Is Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isModule = function(element, moduleName) {\n    var arr = element.className.split(\" \");\n    var found = false;\n\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i].indexOf(moduleName)        > -1 &&\n            arr[i].indexOf(moduleName + \"_\") == -1 &&\n            arr[i].indexOf(moduleName + \"-\") == -1)\n        {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.addModule = function(moduleName) {\n    this.activeModules.push(this.toKebabCase(moduleName))\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To CamelCase\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toCamelCase = function(input) {\n    var arr, res;\n    res = \"\";\n    if (typeof input === \"string\") {\n        input = input.replace(/\\-/g,\" \");                                       // Replace all dashes with spaces\n        arr = input.split(\" \");\n    } else {\n        arr = input;                                                            // Assume it is an array\n    }\n\n\n\n    var i = 0;\n    for (var i in arr) {\n        if (typeof i != \"undefined\") {\n            res += arr[i][0].toUpperCase()+ arr[i].slice(1); // Capitalize first letter\n        }\n    }\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To kebab-case\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toKebabCase = function(input) {\n    var res, str;\n    res = \"\";\n\n    if (typeof input === \"string\") {\n        str = input;\n    } else {                                                                    // Assume it is an array\n        str = input.join(\" \");\n    }\n\n    // First change it to camelcase\n    str = this.toCamelCase(str);\n\n    var max = str.length;\n    for (var i=0; i < max; i++) {\n        // Check if character is uppercase\n        if (str[i] != str[i].toLowerCase()) {\n            if (i!==0) {\n                str = str.substr(0, i) + \"-\" + str.substr(i);\n                i++;\n            }\n        }\n    }\n\n    return res = str.toLowerCase();\n}\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get option\n * -----------------------------------------------------------------------------\n * @param  {string} name                                                        Keyname in optionList\n * @param  {array} optionList                                                   Array with all possible options\n * @return {}                                                                   Copy of the value (optionsList[name])\n */\nJssService.getOption = function(name, optionList) {\n    if (typeof optionList !== \"object\") {\n        return false;\n    }\n\n    var res;\n\n    switch (name) {\n\n        // Only set `addDefaults` to false when it is explicitly set.\n        case \"addDefaults\":\n            if (optionList[name] !== false || typeof optionList[name] === \"undefined\") {\n                res = true;\n            } else {\n                res = false;\n            }\n        break;\n        case \"fallback\":\n            if ( Array.isArray(optionList[name]) ) {\n                res = optionList[name];\n                if (res.length===0) {\n                    res = false;\n                }\n            } else if (typeof optionList[name] === \"string\"){\n                res = [optionList[name]];\n            }\n        break;\n        default:\n        res = optionList[name]\n    }\n\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Is Trigger\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isTrigger = function(element, moduleName) {\n    if (element.className.indexOf(moduleName + \"--\") > -1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get trigger name\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {string} Name of the trigger.\n */\nJssService.getTriggerName = function(element, moduleName) {\n    if (typeof element != \"object\") {\n        console.error('Required first argument `element` needs to be a domElement.');\n        return false;\n    }\n    if (typeof moduleName != \"string\") {\n        console.error('Required second argument `moduleName` needs to be a string.');\n        return false;\n    }\n\n    // As an example we assume that the value of element.className equals 'b module--triggerName'\n    var startPos = element.className.indexOf(moduleName + \"--\");                    // 2\n    var sliced = element.className.slice(startPos, element.className.length )       // 'module--triggerName'\n    var endPos = sliced.indexOf(\" \");                                               // -1       // not found\n    if (endPos != -1) {                                                             // 19\n        sliced = sliced.slice(0,endPos);                                            // if there is more after the string, this will remove it\n    }\n    return sliced.replace(moduleName + \"--\",\"\")\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger name is allowed\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} True if the triggername is allowed, otherwise false.\n */\nJssService.triggerNameIsAllowed = function(element, moduleName) {\n    if (JssService.forbiddenProperties.indexOf(this.getTriggerName(element, moduleName)) > -1) {      // This triggerName is a core property, throw error\n        console.error('Triggername `' + getTriggerName(element,moduleName) + '` is not allowed. Change the trigger so it does not corresponds any of these: ' + JssService.forbiddenProperties)\n        return false;\n    }\n    return true;\n}\n/**\n * @module Jss\n * @author      Jeffrey Arts <sjeffff@gmail.com>\n * @copyright   2015\n */\nJss = function(){};\n\nJss.prototype.type      = \"Jss\"\nJss.prototype.triggers  = false;\nJss.prototype.element   = undefined;                                              // {obj} domElement\nJss.prototype.state     = undefined;                                              // {str} State of module, is reflected by the css class __isState\n\n/**\n * -----------------------------------------------------------------------------\n * Find Triggers\n * -----------------------------------------------------------------------------\n *\n * @param {domElement} element\n * @return {undefined}\n */\nJss.prototype.findTriggers = function(element) {\n    this.triggers = [];                                                         // If this is not set, all modules will have the same reference point to this.triggers.\n    // Module is created, now look for any module triggers\n    this.searchTriggersRecursiveInnerFunction(this.element)\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger\n * -----------------------------------------------------------------------------\n */\nJss.prototype.trigger = function(which, fn) {\n    if (typeof this.triggers !== \"object\") {\n        console.info(\"No triggers are found, please specify them in the css as `module-name--trigger-name`.\");\n        return false;\n    }\n\n    if (typeof this.triggers[which] !== \"object\") {\n        console.info(\"You are trying to execute a function on a non existing trigger `\" + which + \"`\");\n        return false;\n    }\n\n    for (var i = 0; i < this.triggers[which].length; i++) {\n        fn(this.triggers[which][i])\n    }\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Search triggers recursive inner function\n * -----------------------------------------------------------------------------\n * Recursive function which is executed bij findTriggers;\n *\n * @return {undefined}\n */\nJss.prototype.searchTriggersRecursiveInnerFunction = function(element) {\n    var self = this;\n    if (typeof element == \"undefined\" ) {\n        element = this.element;\n    }\n    if ( element.hasChildNodes() ) {\n        for (var i=0; i < element.childNodes.length; i++) {\n\n            var childElement = element.childNodes[i];                           // Improve readability\n\n            if (childElement.nodeType == 1) {                                   // NodeType 1 == domElement\n\n                if (JssService.isTrigger(childElement, this.moduleName)) {\n\n                    // Add a child element\n                    if (JssService.triggerNameIsAllowed(childElement, this.moduleName)) {\n                        var triggerName = JssService.getTriggerName(childElement, this.moduleName)\n\n                        if (typeof self.triggers[triggerName] !== \"object\") {\n                            self.triggers[triggerName] = [];\n                        }\n\n                        var tmp = new JssTrigger(childElement, {\n                            module: self,\n                            moduleName: this.moduleName,\n                            triggerName: triggerName,\n                        });\n\n                        self.triggers[triggerName].push(tmp);\n                    }\n                }\n                if (childElement.hasChildNodes()) {\n                    self.searchTriggersRecursiveInnerFunction(childElement)\n                }\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Configure Trigger\n * -----------------------------------------------------------------------------\n *\n * @return {undefined}\n */\nJss.prototype.configureTrigger = function(trigger, fn) {\n    if ( typeof this.triggers[trigger] == \"object\") {\n\n        for (var i = 0; i < this.triggers[trigger].length; i++) {\n            //self.triggers[trigger][i]\n            fn(this.triggers[trigger][i]);\n        }\n\n    } else if (JssService.dev) {\n        console.error(\"You are trying to configure a trigger which has no attached domElement\")\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n *   Init\n * -----------------------------------------------------------------------------\n * Notice the user that a init function needs to be added for controlling the triggers\n *\n * @return {undefined}\n */\nJss.prototype.init = function(func) {\n    if (JssService.dev) {\n        console.info(this.moduleName + \": Add a prototype.init function to add triggers and stuff\")\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set element\n * -----------------------------------------------------------------------------\n * Add a domElement to `this`\n *\n * @return {undefined}\n */\nJss.prototype.setElement = function(element) {\n    if (typeof element == \"undefined\") {\n        if (JssService.dev) {\n            return console.error(\"First parameter of setElement needs to be a domElement\");\n        }\n    }\n    this.element = element;\n}\n/*******************************************************************************\n   *\n   *\tActions\n   *\n   *  \t@author      Jeffrey Arts <sjeffff@gmail.com>\n   *    @copyright   2015\n   *\n*******************************************************************************/\n/**\n * -----------------------------------------------------------------------------\n *   Validate action\n * -----------------------------------------------------------------------------\n * Checks if parameter is a valid action, and logs an error when not.\n *\n * @param {string} request                                                      The name of the request\n * @return {boolean} true if a action is valid, otherwise false.\n */\nJss.prototype.validateAction = function(request) {\n    var result;\n    request = this.getActionElement(request).request\n    for (var action in JssService.actions) {\n        if (JssService.actions[action].indexOf(request.toLowerCase()) > -1) {\n            result = action;\n            break;\n        }\n    }\n    if (result) {\n        return result;\n    } else {\n        console.error(\"validateAction: unknown request\", request);\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * \t Add Action\n * -----------------------------------------------------------------------------\n * Adds an action to the object, list of possible requests can be found in Jss.actions\n *\n * | Options\n * \t\t- addDefaults {boolean}                                                 True: add default classes, false: don't\n *\n *\n *\n * @param {string} request                                                      The name of the request\n * @param {function} fn                                                         The function which should be triggered\n * @param {object} options                                                      Object with option parameters\n * @return {boolean} true if a action is succesfully added, otherwise false.\n */\nJss.prototype.addAction = function(request, fn, options) {\n\n    var self        = this;\n    var action      = self.validateAction(request)\n    var actions     = [];\n    var t = self.getActionElement(request);\n    var element     = t.element;\n    var request     = t.request;\n    t = undefined;\n\n    // Options\n    var addDefaults = JssService.getOption(\"addDefaults\", options);\n\n\n\n    switch (action) {\n\n        case \"resize\":\n\n            actions.push(element.addEventListener(\"resize\", fn));\n\n        break;\n\n\n        case \"click\":\n            actions.push(element.addEventListener(\"click\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"click\", function(){\n                    self.setState(\"Clicked\")\n                }));\n                actions.push(window.addEventListener( \"click\", function(event) {\n                    if (event.target != self.element && self.hasState(\"Clicked\")) {\n                        self.removeState(\"Clicked\")\n                    }\n                }));\n            } // End addDefaults\n        break;\n\n\n        case \"change\":\n            actions.push(element.addEventListener(\"change\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"change\", function(){\n                    self.setState(\"Changed\")\n                    setTimeout(function(){self.removeState(\"Changed\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"hover\":\n            actions.push(element.addEventListener(\"mouseover\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseover\", function(){\n                    self.setState(\"Hover\")\n                }));\n                actions.push(element.addEventListener(\"mouseout\",  function(){\n                    self.removeState(\"Hover\")\n                }));\n            }\n        break;\n\n\n        case \"mouseIn\":\n\n            actions.push(element.addEventListener(\"mouseenter\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseenter\", function(){\n                    self.setState(\"MouseIn\")\n                    setTimeout(function(){self.removeState(\"MouseIn\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"mouseOut\":\n\n            actions.push(element.addEventListener(\"mouseleave\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseleave\", function(){\n                    self.setState(\"MouseOut\")\n                    setTimeout(function(){self.removeState(\"MouseOut\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n    }\n\n\n    if (actions.length > 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get action element\n * -----------------------------------------------------------------------------\n * @param  {string} request                                                     The request\n * @return {object}                                                             An object with 2 properties: request && element\n */\nJss.prototype.getActionElement = function(request) {\n    var self = this;\n    var prefix = false;\n    var newRequest  = request;\n    var element = self.element;\n    // Set prefix if it exists\n    if (request.indexOf(\".\") > 0) {\n        var t       = request.split(\".\"),\n        newRequest  = t[1];\n        prefix      = t[0];\n        t = undefined;\n    }\n\n    // Update element according the prefix (or skip it, if not set)\n    if (prefix !== false) {\n        switch (prefix) {\n            case \"screen\":\n            case \"window\":\n                element = window;\n            break;\n        }\n    }\n\n    // Return object\n    return {\n        request: newRequest,\n        element: element\n    }\n}\n/**\n * -----------------------------------------------------------------------------\n * Class name prefix\n * -----------------------------------------------------------------------------\n * The prefix equals the modulename, or - when it's a trigger object - modulename--triggername\n *\n * @return {string} The classname\n */\nJss.prototype.classNamePrefix = function() {\n    if (this.type == \"JssTrigger\") {\n        return this.moduleName + \"--\" + this.triggerName;\n    } else {\n        return this.moduleName;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Remove class name\n * -----------------------------------------------------------------------------\n * Removes the `this.element` classname\n * \t- \"all\" || undefined        > Removes ALL classnames\n *  - \"allStates\" || \"states\"   > Remove all STATES\n *  - all other strings remove that specific string from the className\n *\n * @param {string} input                                                        The classname (case-sensitive) which needs to be removed\n * @return {undefined}\n */\nJss.prototype.removeClassName = function(input) {\n\n    var classList  = [];\n\n    if (input == \"all\" || typeof input == \"undefined\") {\n\n        this.element.className = \"\";\n\n    } else if (input == \"states\" || input == \"allStates\") {\n\n        classList = this.element.className.split(\" \");\n        for (var i in classList) {\n            className = classList[i];\n            if (className.indexOf(\"__is\") > -1) {\n                delete classList[i];\n            }\n        }\n        this.element.className = classList.join(\" \");\n\n    } else if(typeof input == \"string\") {\n        this.element.className = this.element.className.replace(input,\"\");\n    } else {\n        console.error(\"removeClassName: parameter should be a string\");\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Add class name\n * -----------------------------------------------------------------------------\n * Adds a class name by string or array.\n * Does NOT check for duplicates\n *\n * @param  {string} The classname to be added\n * @return {undefined}\n */\nJss.prototype.addClassName = function(data) {\n    this.element.className += \" \";\n    if (typeof data == \"string\") {\n        this.element.className += data;\n    } else {\n        this.element.className += data.join(\" \")\n    }\n}\n\n/**\n * List where the keys corresponds with this[key], and where the value is the function to be executed when the var is changed.\n */\nJss.prototype.setterWatchList = {};\nJss.prototype.getterWatchList = {};\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add data\n * -----------------------------------------------------------------------------\n * Add a (default) value for the given attribute.\n *\n * @param {string} attribute                                                    The name of the attribute (this[attribute])\n * @param {*} value                                                             The value of this[attribute], could be anything...\n * @param {object} options\n *           \t\t- setterWatchFunction {function}\n *           \t\t- getterWatchFunction {function}\n */\nJss.prototype.addData = function(attribute, value, options) {\n\n\n    // watchList[key] = fn;\n    var setterWatchFunction = JssService.getOption('setterWatchFunction', options); // Function\n    var getterWatchFunction = JssService.getOption('getterWatchFunction', options); // Function\n\n    if (typeof setterWatchFunction === \"function\") {\n        this.setterWatchList[attribute] = setterWatchFunction;\n    }\n\n    if (typeof getterWatchFunction === \"function\") {\n        this.getterWatchList[attribute] = getterWatchFunction;\n    }\n\n    // Set the default value\n    return this[attribute] = value;\n}\n\n\n\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- ajax {string} url\n */\nJss.prototype.setData = function(attribute, value, options) {\n\n    this[attribute] = value;\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n\n    if (Array.isArray(fallback)) {\n\n        for (var i = 0; i < fallback.length; i++) {\n            var type = fallback[i];\n\n            if (value && value.length > 0) {\n                this['setData' + JssService.toCamelCase(type)](attribute, value); // Call this.addDataAttribute(value) || this.addDataCookie(value) etc...\n                this[attribute] = value;\n            }\n        }\n    }\n\n    // Call the setter watch function, if defined;\n    if (typeof this.setterWatchList[attribute] === \"function\") { // Use the watchlist to add functionality whenever a data attribute is updated\n        this.setterWatchList[attribute]();\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataDefault {boolean}\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- dataAjax {string} url\n */\nJss.prototype.getData = function(attribute, options) {\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n    var value = false;\n\n\n    if (!fallback) {\n        fallback = ['attribute'];\n    }\n\n\n    for (var i = 0; i < fallback.length; i++) {\n        var type = JssService.toCamelCase(fallback[i]);\n        var customOptions = false;\n\n        if (typeof options == \"object\") {\n            customOptions = options[fallback[i].toLowerCase()];\n        }\n\n        if (!value || value.length < 0) {\n            if (typeof this['getData' + type] !== \"function\") {\n                console.error('this.getData' + type + ' is not a function. Probably ' + type + ' is not a available data option');\n                continue;\n            }\n            value = this['getData' + type]( attribute, customOptions ); // Call this.getDataAttribute(value) || this.getDataCookie(value) || this.getDataAjax(value) etc...\n        }\n    }\n    console.log(this.getterWatchList);\n    // Call the getter watch function, if defined;\n    if (typeof this.getterWatchList[attribute] == \"function\") {\n        this.getterWatchList[attribute]();\n    }\n\n    return this[attribute] = value;\n}\n/**\n * -----------------------------------------------------------------------------\n * Get data: Ajax\n * -----------------------------------------------------------------------------\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n *\n * @param {string} attribute                                                    The NAME of the inner variable (this.NAME), is also used as the key for the GET Request {NAME: value}\n * @param {object} options                                                      Object with parameters used to make a GET request\n * @return {string}                                                             The value of the given attribute, or false if an erro occured.\n */\nJss.prototype.getDataAjax = function(attribute, options) {\n    var url = JssService.getOption(\"url\", options);\n    var jsonKey = JssService.getOption(\"jsonKey\", options) || attribute;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('GET', url);\n\n        return ajaxReturn.success(function(result){\n            if (typeof result === \"object\") {\n                if (result[jsonKey]) {\n                    return result[jsonKey];\n                }\n            }\n        }).error(function(errorObject){\n            console.log(errorObject);\n        });\n    }\n\n    return false;\n};\n\n/**\n * -----------------------------------------------------------------------------\n * Set data: Ajax\n * -----------------------------------------------------------------------------\n * Makes a post request to the options.url in a object {attribute: value}\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n */\nJss.prototype.setDataAjax = function(attribute, value, options) {\n    var url = JssService.getOption(\"url\", options);\n    var requestObject = {}\n        requestObject[attribute] = value;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('POST', url, requestObject);\n\n        return ajaxReturn.success(function(result){\n            return true;\n        }).error(function(errorObject){\n            console.log(errorObject);\n            return false;\n        });\n    }\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Ajax (helper function)\n * -----------------------------------------------------------------------------\n * Based on Atom.js by Todd Motto\n * http://toddmotto.com/writing-a-standalone-ajax-xhr-javascript-micro-library/\n */\nJss.prototype.ajaxHelper = {\n    // Parses json if possible, otherwise just return text\n    parse: function(req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return [result, req];\n    },\n\n    xhr: function(type, url, data) {\n        var ajaxHelper = this;\n\n        var methods = {\n            success: function() {},\n            error: function() {}\n        };\n        var XHR = XMLHttpRequest || ActiveXObject;\n        var request = new XHR('MSXML2.XMLHTTP.3.0');\n        request.open(type, url, true);\n        request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n\n        request.onreadystatechange = function() {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    methods.success.apply(methods, ajaxHelper.parse(request));\n                } else {\n                    methods.error.apply(methods, ajaxHelper.parse(request));\n                }\n            }\n        };\n        request.send(data);\n        return {\n            success: function(callback) {\n                methods.success = callback;\n                return methods;\n            },\n            error: function(callback) {\n                methods.error = callback;\n                return methods;\n            }\n        };\n    }\n};\n\nJss.prototype.ajax = {\n    // Get\n    get: function(src) {\n        console.log(this);\n    },\n\n    // Set\n    put: function(url, data) {\n        return this.ajaxHelper.xhr('PUT', url, data);\n    },\n\n    // Add\n    post: function(url, data) {\n        return this.ajaxHelper.xhr('POST', url, data);\n    }\n\n};\n/**\n * -----------------------------------------------------------------------------\n * Get data attribute value\n * -----------------------------------------------------------------------------\n * Returns the value of the requested attribute. Search first for a data-[ATTRIBUTE] value\n * If not found, it checks for the attribute in the default object. When that is not being\n * found neither, the normal this[attribute] value is being returned.\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME)\n * @return {string}                                                             The value of the given attribute\n */\nJss.prototype.getDataAttribute = function(attribute) {\n\n    return this.element.dataset[attribute];\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Update data attribute\n * -----------------------------------------------------------------------------\n * Set the value to the given attribute. And updates the data-[ATTRIBUTE] value\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME=\"value\")\n * @param {string} value                                                        The VALUE of the data attribute (data-name=\"VALUE\")\n * @return {undefined}\n */\n\nJss.prototype.setDataAttribute = function(attribute, value) {\n\n    // Update data attribute\n    if (typeof value !== \"undefined\") {\n        this.element.dataset[attribute] = this[attribute];\n    } else {\n        delete this.element.dataset[attribute];\n    }\n\n    return true;\n}\nJss.prototype.dataDefaultsCookie = {\n    'expireData': undefined\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get cookie value\n * -----------------------------------------------------------------------------\n * Returns cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @return {string}                                                             The VALUE of the given attribute\n */\nJss.prototype.getDataCookie = function(attribute) {\n\n    if (!attribute) { return null; }\n    return decodeURIComponent(document.cookie.replace(new RegExp(\"(?:(?:^|.*;)\\\\s*\" + encodeURIComponent(attribute).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"), \"$1\")) || null;\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data cookie\n * -----------------------------------------------------------------------------\n * Updates the cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @param {string} value                                                        The VALUE of the cookie\n * @return {undefined}\n */\n\nJss.prototype.setDataCookie = function(attribute, value, options) {\n    var endDate, path, domain, secureConnection;\n\n    if (typeof options === \"object\") {\n        endDate = JssService.getOption('endDate', options);\n        path    = JssService.getOption('path', options);\n        domain  = JssService.getOption('domain', options);\n        secureConnection = JssService.getOption('secureConnection', options);\n    }\n\n    if (!attribute || /^(?:expires|max\\-age|path|domain|secure)$/i.test(attribute)) { return false; }\n    var sExpires = \"\";\n    if (endDate) {\n      switch (endDate.constructor) {\n        case Number:\n          sExpires = endDate === Infinity ? \"; expires=Fri, 31 Dec 9999 23:59:59 GMT\" : \"; max-age=\" + endDate;\n          break;\n        case String:\n          sExpires = \"; expires=\" + endDate;\n          break;\n        case Date:\n          sExpires = \"; expires=\" + endDate.toUTCString();\n          break;\n      }\n    }\n\n    document.cookie = encodeURIComponent(attribute) + \"=\" + encodeURIComponent(value) + sExpires + (domain ? \"; domain=\" + domain : \"\") + (path ? \"; path=\" + path : \"\") + (secureConnection ? \"; secure\" : \"\");\n    return true;\n}\n/*******************************************************************************\n\n    Styles\n\n*******************************************************************************/\n\n/**\n * -----------------------------------------------------------------------------\n * Set height\n * -----------------------------------------------------------------------------\n * Sets the height of the `this.element` by the given input (height)\n *\n * @param  {number} height                                                      The height in pixels or percentage. Where numbers will be calculated to pixels so giving a height of 50 will result in a height of \"50px\". If you want percentages pass the variable with a percentage sign 50 + \"%\"\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setHeight = function(height) {\n    if (typeof height === \"number\") {\n        height += \"px\";\n    }\n\n    if (typeof height !== \"string\") {\n        throw(\"parameter height needs to be a string or integer\");\n    }\n\n    this.element.style.height = height;\n    return true;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get height\n * -----------------------------------------------------------------------------\n * Returns the height of the `this.element`\n *\n * @return {number}                                                             The height of the element in pixels\n */\nJss.prototype.getHeight = function() {\n    return this.element.offsetHeight;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set width\n * -----------------------------------------------------------------------------\n * Sets the width of the `this.element` by the given input (width)\n *\n * @param  {number} width                                                       The width in pixels or percentage. Where numbers will be calculated to pixels so giving a width of 50 will result in a width of \"50px\". If you want to set a percentage, just pass the variable with a percentage sign (\"50%\")\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setWidth = function(width) {\n    if (typeof width == \"number\") {\n        width += \"px\";\n    }\n\n    if (typeof width !== \"string\") {\n        throw(\"parameter width needs to be a string or integer\");\n    }\n    this.element.style.width = width;\n    return true;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get width\n * -----------------------------------------------------------------------------\n * Returns the width of the `this.element`\n *\n * @return {number}                                                             The width of the element in pixels\n */\nJss.prototype.getWidth = function() {\n    return this.element.offsetWidth;\n}\n/**\n * -----------------------------------------------------------------------------\n * Set State\n * -----------------------------------------------------------------------------\n * This updates the state of the object. States are being added to the class name prefix with a double underscore.\n * If you would have the module `envelope` and give it the state `open`. The class name `envelope__open` will be added.\n * Whenever you remove the state `open`, the according class name will be removed as well.\n *\n * @param  {string} str                                                         The name of the state which should be set (this is transformed to CamelCase)\n * @return {boolean}                                                            True on success, otherwise false (might already have the state)\n */\nJss.prototype.setState = function(str) {\n    var element, verifiedState, state, className;\n\n    element         = this.element;\n    state           = JssService.toCamelCase(str);\n    className       = this.classNamePrefix() + \"__is\" + state;\n\n    // Check if this.state is an array, and make it one if not.\n    if (Array.isArray(this.state) == false ) {\n        this.state = [];\n    }\n\n    // This if statement prevents that the same state is being set multiple times\n    if ( !this.hasState(str) ) {\n        this.addClassName(className)\n        this.state.push(state);\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Has state\n * -----------------------------------------------------------------------------\n * Checks if the parameter is already a state and returns true if so. Otherwise false.\n *\n * @param  {string} str                                                         The state which will be checked for\n * @return {boolean}                                                            True if it has the given state, otherwise false\n */\nJss.prototype.hasState = function(str) {\n    if (typeof this.state == \"object\" && this.state.indexOf(str) >= 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Remove state\n * -----------------------------------------------------------------------------\n * Removes the state from the states array, and from the element.className\n *\n * @param  {string} str                                                         The name of the state which should be removed\n * @return {undefined}\n */\nJss.prototype.removeState = function(str) {\n\n    var state      = JssService.toCamelCase(str);\n    var stateIndex = this.state.indexOf(state);\n\n    if (str == \"all\" || typeof str == \"undefined\") {\n        this.removeClassName(\"states\");\n    } else {\n        this.state.splice(stateIndex, 1);\n        if (typeof this.moduleAction != \"undefined\" && this.moduleAction.length > -1) {\n            this.removeClassName(this.classNamePrefix() + \"\" + this.moduleAction + \"__is\" + state);\n        } else {\n            this.removeClassName(this.classNamePrefix() + \"__is\" + state);\n        }\n    }\n}\n\n\n// A simple way to watch variables\n\n// addVar(keyName, value, watch_function)\n// setVar(keyName, value)\n// getVar(keyName)\n// Add -> new\n// Set -> update\n// Get -> return\nvar JssModule = function(){};\n\nJssModule.prototype.type               = \"JssModule\";\nJssModule.prototype.init               = Jss.prototype.init;\nJssModule.prototype.setElement         = Jss.prototype.setElement;\n\n// Triggers\nJssModule.prototype.findTriggers       = Jss.prototype.findTriggers;\nJssModule.prototype.configureTrigger      = Jss.prototype.configureTrigger;\n\n// Actions\n//JssModule.prototype.actions            = Object.create(Jss.prototype.actions);\nJssModule.prototype.validateAction     = Jss.prototype.validateAction;\nJssModule.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssModule.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssModule.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssModule.prototype.setState           = Jss.prototype.setState;\nJssModule.prototype.hasState           = Jss.prototype.hasState;\nJssModule.prototype.removeState        = Jss.prototype.removeState;\n\n// Data attributes\nJssModule.prototype.addData            = Jss.prototype.addData;\nJssModule.prototype.getData            = Jss.prototype.getData;\nJssModule.prototype.setData            = Jss.prototype.setData;\nvar JssTrigger = function(element, options) {\n    this.setElement(element);\n\n    if (typeof options === \"object\") {\n        if (typeof options.module === \"object\") {\n            this.module = options.module;\n        }\n        if (typeof options.moduleName === \"string\") {\n            this.moduleName = options.moduleName;\n        }\n        if (typeof options.triggerName === \"string\") {\n            this.triggerName = options.triggerName;\n        }\n    }\n}\n\n\nJssTrigger.prototype                    = Object.create(Jss.prototype);\nJssTrigger.prototype.type               = \"JssTrigger\";\nJssTrigger.prototype.setElement         = Jss.prototype.setElement;\n\n// Actions\n//JssTrigger.prototype.actions            = Object.create(Jss.prototype.actions);\nJssTrigger.prototype.validateAction     = Jss.prototype.validateAction;\nJssTrigger.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssTrigger.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssTrigger.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssTrigger.prototype.setState           = Jss.prototype.setState;\nJssTrigger.prototype.hasState           = Jss.prototype.hasState;\nJssTrigger.prototype.removeState        = Jss.prototype.removeState;\n\n\n\nvar  JssController = {};\nJssController.modules \t\t= []; // Result array with objects of all the found modules\nJssController.activeModules \t= JssService.activeModules;\n\nJssController.findModules = function() {\n    var allElements = document.getElementsByTagName(\"*\");                       // Array with all domElements\n    var test = [];\n    var self = this;\n    for (var i=0; i < allElements.length; i++) {\n\n        // Set default vars //\n        var element = allElements[i];                                           // Specific domElement\n        var tmp = false;\n\n        // Loop through the (active) modules array and add/instantiate them\n        self.activeModules.forEach(function(module){\n            if (JssService.isModule(element, module)) {\n                tmp = eval(\"new \" + JssService.toCamelCase(module) + \"(element)\"); // Dynamicly load modules\n\n                tmp.setElement(element);                                        // Add the domElement to the module\n                tmp.findTriggers();\t\t\t                                    // Search for module triggers\n\n                tmp.init();\t\t\t\t\t                                    // Executes everything within the init function\n                self.modules.push(tmp);\n\n            }\n        }); // End forEach\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    JssController.findModules();\n    console.log(JssController);\n});"
    },
    "name": "JssService",
    "kind": "module",
    "members": {
      "instance": [],
      "static": [
        {
          "description": "-----------------------------------------------------------------------------\nAdd Module\n-----------------------------------------------------------------------------",
          "tags": [
            {
              "title": "param",
              "description": "domElement",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "element"
            },
            {
              "title": "param",
              "description": "Name of the module",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "moduleName"
            },
            {
              "title": "returns",
              "description": "true if element is a module, otherwise false",
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            },
            {
              "title": "name",
              "name": "addModule"
            },
            {
              "title": "kind",
              "kind": "function"
            },
            {
              "title": "memberof",
              "description": "JssService"
            },
            {
              "title": "static"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 75,
                "column": 0
              },
              "end": {
                "line": 87,
                "column": 0
              }
            },
            "file": "/Users/jeffreyarts/Documents/DEV/jss/lib/jss.js",
            "code": "JssService = {};\n\n// Edit this array to enable or disable default modules\nJssService.activeModules   = []\n\n// Set this to false in a live environment\nJssService.dev             = true;\n\n/**************************\n*\n*   Below are core properties defined, becarefull when you think of changing these...\n*\n**************************/\n\n\nJssService.actions = {\n    hover:      ['hover',    'mouseover',   'onmouseover'                       ], // Fixed\n    click:      ['click',    'onclick'                                          ], // Fixed\n    mouseIn:    ['mousein',  'onmousein', 'mouseenter', 'onmouseenter'          ], // Fixed\n    mouseOut:   ['mouseout', 'onmouseout', 'mouseleave', 'onmouseleave'         ], // Fixed\n    resize:     ['resize',   'onresize'                                         ], // Fixed\n    focus:      ['focus',    'onfocus'                                          ],\n    keyDown:    ['keydown',  'keypress'                                         ],\n    keyUp:      ['keyup',    'keyrelease'                                       ],\n    change:     ['change',   'onchange'                                         ],\n};\n\nJssService.enterDelay = 1000;                                                   // Amount of miliseconds which is used to remove the entered state. (see core.actions) JssService.enterDelay setTimeout\n\nJssService.forbiddenProperties = [\n    'type',\n    'triggers',\n    'configureTrigger',\n    'findTriggers'\n];\n\n/**\n * -----------------------------------------------------------------------------\n * Is Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isModule = function(element, moduleName) {\n    var arr = element.className.split(\" \");\n    var found = false;\n\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i].indexOf(moduleName)        > -1 &&\n            arr[i].indexOf(moduleName + \"_\") == -1 &&\n            arr[i].indexOf(moduleName + \"-\") == -1)\n        {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.addModule = function(moduleName) {\n    this.activeModules.push(this.toKebabCase(moduleName))\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To CamelCase\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toCamelCase = function(input) {\n    var arr, res;\n    res = \"\";\n    if (typeof input === \"string\") {\n        input = input.replace(/\\-/g,\" \");                                       // Replace all dashes with spaces\n        arr = input.split(\" \");\n    } else {\n        arr = input;                                                            // Assume it is an array\n    }\n\n\n\n    var i = 0;\n    for (var i in arr) {\n        if (typeof i != \"undefined\") {\n            res += arr[i][0].toUpperCase()+ arr[i].slice(1); // Capitalize first letter\n        }\n    }\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To kebab-case\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toKebabCase = function(input) {\n    var res, str;\n    res = \"\";\n\n    if (typeof input === \"string\") {\n        str = input;\n    } else {                                                                    // Assume it is an array\n        str = input.join(\" \");\n    }\n\n    // First change it to camelcase\n    str = this.toCamelCase(str);\n\n    var max = str.length;\n    for (var i=0; i < max; i++) {\n        // Check if character is uppercase\n        if (str[i] != str[i].toLowerCase()) {\n            if (i!==0) {\n                str = str.substr(0, i) + \"-\" + str.substr(i);\n                i++;\n            }\n        }\n    }\n\n    return res = str.toLowerCase();\n}\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get option\n * -----------------------------------------------------------------------------\n * @param  {string} name                                                        Keyname in optionList\n * @param  {array} optionList                                                   Array with all possible options\n * @return {}                                                                   Copy of the value (optionsList[name])\n */\nJssService.getOption = function(name, optionList) {\n    if (typeof optionList !== \"object\") {\n        return false;\n    }\n\n    var res;\n\n    switch (name) {\n\n        // Only set `addDefaults` to false when it is explicitly set.\n        case \"addDefaults\":\n            if (optionList[name] !== false || typeof optionList[name] === \"undefined\") {\n                res = true;\n            } else {\n                res = false;\n            }\n        break;\n        case \"fallback\":\n            if ( Array.isArray(optionList[name]) ) {\n                res = optionList[name];\n                if (res.length===0) {\n                    res = false;\n                }\n            } else if (typeof optionList[name] === \"string\"){\n                res = [optionList[name]];\n            }\n        break;\n        default:\n        res = optionList[name]\n    }\n\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Is Trigger\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isTrigger = function(element, moduleName) {\n    if (element.className.indexOf(moduleName + \"--\") > -1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get trigger name\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {string} Name of the trigger.\n */\nJssService.getTriggerName = function(element, moduleName) {\n    if (typeof element != \"object\") {\n        console.error('Required first argument `element` needs to be a domElement.');\n        return false;\n    }\n    if (typeof moduleName != \"string\") {\n        console.error('Required second argument `moduleName` needs to be a string.');\n        return false;\n    }\n\n    // As an example we assume that the value of element.className equals 'b module--triggerName'\n    var startPos = element.className.indexOf(moduleName + \"--\");                    // 2\n    var sliced = element.className.slice(startPos, element.className.length )       // 'module--triggerName'\n    var endPos = sliced.indexOf(\" \");                                               // -1       // not found\n    if (endPos != -1) {                                                             // 19\n        sliced = sliced.slice(0,endPos);                                            // if there is more after the string, this will remove it\n    }\n    return sliced.replace(moduleName + \"--\",\"\")\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger name is allowed\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} True if the triggername is allowed, otherwise false.\n */\nJssService.triggerNameIsAllowed = function(element, moduleName) {\n    if (JssService.forbiddenProperties.indexOf(this.getTriggerName(element, moduleName)) > -1) {      // This triggerName is a core property, throw error\n        console.error('Triggername `' + getTriggerName(element,moduleName) + '` is not allowed. Change the trigger so it does not corresponds any of these: ' + JssService.forbiddenProperties)\n        return false;\n    }\n    return true;\n}\n/**\n * @module Jss\n * @author      Jeffrey Arts <sjeffff@gmail.com>\n * @copyright   2015\n */\nJss = function(){};\n\nJss.prototype.type      = \"Jss\"\nJss.prototype.triggers  = false;\nJss.prototype.element   = undefined;                                              // {obj} domElement\nJss.prototype.state     = undefined;                                              // {str} State of module, is reflected by the css class __isState\n\n/**\n * -----------------------------------------------------------------------------\n * Find Triggers\n * -----------------------------------------------------------------------------\n *\n * @param {domElement} element\n * @return {undefined}\n */\nJss.prototype.findTriggers = function(element) {\n    this.triggers = [];                                                         // If this is not set, all modules will have the same reference point to this.triggers.\n    // Module is created, now look for any module triggers\n    this.searchTriggersRecursiveInnerFunction(this.element)\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger\n * -----------------------------------------------------------------------------\n */\nJss.prototype.trigger = function(which, fn) {\n    if (typeof this.triggers !== \"object\") {\n        console.info(\"No triggers are found, please specify them in the css as `module-name--trigger-name`.\");\n        return false;\n    }\n\n    if (typeof this.triggers[which] !== \"object\") {\n        console.info(\"You are trying to execute a function on a non existing trigger `\" + which + \"`\");\n        return false;\n    }\n\n    for (var i = 0; i < this.triggers[which].length; i++) {\n        fn(this.triggers[which][i])\n    }\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Search triggers recursive inner function\n * -----------------------------------------------------------------------------\n * Recursive function which is executed bij findTriggers;\n *\n * @return {undefined}\n */\nJss.prototype.searchTriggersRecursiveInnerFunction = function(element) {\n    var self = this;\n    if (typeof element == \"undefined\" ) {\n        element = this.element;\n    }\n    if ( element.hasChildNodes() ) {\n        for (var i=0; i < element.childNodes.length; i++) {\n\n            var childElement = element.childNodes[i];                           // Improve readability\n\n            if (childElement.nodeType == 1) {                                   // NodeType 1 == domElement\n\n                if (JssService.isTrigger(childElement, this.moduleName)) {\n\n                    // Add a child element\n                    if (JssService.triggerNameIsAllowed(childElement, this.moduleName)) {\n                        var triggerName = JssService.getTriggerName(childElement, this.moduleName)\n\n                        if (typeof self.triggers[triggerName] !== \"object\") {\n                            self.triggers[triggerName] = [];\n                        }\n\n                        var tmp = new JssTrigger(childElement, {\n                            module: self,\n                            moduleName: this.moduleName,\n                            triggerName: triggerName,\n                        });\n\n                        self.triggers[triggerName].push(tmp);\n                    }\n                }\n                if (childElement.hasChildNodes()) {\n                    self.searchTriggersRecursiveInnerFunction(childElement)\n                }\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Configure Trigger\n * -----------------------------------------------------------------------------\n *\n * @return {undefined}\n */\nJss.prototype.configureTrigger = function(trigger, fn) {\n    if ( typeof this.triggers[trigger] == \"object\") {\n\n        for (var i = 0; i < this.triggers[trigger].length; i++) {\n            //self.triggers[trigger][i]\n            fn(this.triggers[trigger][i]);\n        }\n\n    } else if (JssService.dev) {\n        console.error(\"You are trying to configure a trigger which has no attached domElement\")\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n *   Init\n * -----------------------------------------------------------------------------\n * Notice the user that a init function needs to be added for controlling the triggers\n *\n * @return {undefined}\n */\nJss.prototype.init = function(func) {\n    if (JssService.dev) {\n        console.info(this.moduleName + \": Add a prototype.init function to add triggers and stuff\")\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set element\n * -----------------------------------------------------------------------------\n * Add a domElement to `this`\n *\n * @return {undefined}\n */\nJss.prototype.setElement = function(element) {\n    if (typeof element == \"undefined\") {\n        if (JssService.dev) {\n            return console.error(\"First parameter of setElement needs to be a domElement\");\n        }\n    }\n    this.element = element;\n}\n/*******************************************************************************\n   *\n   *\tActions\n   *\n   *  \t@author      Jeffrey Arts <sjeffff@gmail.com>\n   *    @copyright   2015\n   *\n*******************************************************************************/\n/**\n * -----------------------------------------------------------------------------\n *   Validate action\n * -----------------------------------------------------------------------------\n * Checks if parameter is a valid action, and logs an error when not.\n *\n * @param {string} request                                                      The name of the request\n * @return {boolean} true if a action is valid, otherwise false.\n */\nJss.prototype.validateAction = function(request) {\n    var result;\n    request = this.getActionElement(request).request\n    for (var action in JssService.actions) {\n        if (JssService.actions[action].indexOf(request.toLowerCase()) > -1) {\n            result = action;\n            break;\n        }\n    }\n    if (result) {\n        return result;\n    } else {\n        console.error(\"validateAction: unknown request\", request);\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * \t Add Action\n * -----------------------------------------------------------------------------\n * Adds an action to the object, list of possible requests can be found in Jss.actions\n *\n * | Options\n * \t\t- addDefaults {boolean}                                                 True: add default classes, false: don't\n *\n *\n *\n * @param {string} request                                                      The name of the request\n * @param {function} fn                                                         The function which should be triggered\n * @param {object} options                                                      Object with option parameters\n * @return {boolean} true if a action is succesfully added, otherwise false.\n */\nJss.prototype.addAction = function(request, fn, options) {\n\n    var self        = this;\n    var action      = self.validateAction(request)\n    var actions     = [];\n    var t = self.getActionElement(request);\n    var element     = t.element;\n    var request     = t.request;\n    t = undefined;\n\n    // Options\n    var addDefaults = JssService.getOption(\"addDefaults\", options);\n\n\n\n    switch (action) {\n\n        case \"resize\":\n\n            actions.push(element.addEventListener(\"resize\", fn));\n\n        break;\n\n\n        case \"click\":\n            actions.push(element.addEventListener(\"click\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"click\", function(){\n                    self.setState(\"Clicked\")\n                }));\n                actions.push(window.addEventListener( \"click\", function(event) {\n                    if (event.target != self.element && self.hasState(\"Clicked\")) {\n                        self.removeState(\"Clicked\")\n                    }\n                }));\n            } // End addDefaults\n        break;\n\n\n        case \"change\":\n            actions.push(element.addEventListener(\"change\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"change\", function(){\n                    self.setState(\"Changed\")\n                    setTimeout(function(){self.removeState(\"Changed\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"hover\":\n            actions.push(element.addEventListener(\"mouseover\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseover\", function(){\n                    self.setState(\"Hover\")\n                }));\n                actions.push(element.addEventListener(\"mouseout\",  function(){\n                    self.removeState(\"Hover\")\n                }));\n            }\n        break;\n\n\n        case \"mouseIn\":\n\n            actions.push(element.addEventListener(\"mouseenter\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseenter\", function(){\n                    self.setState(\"MouseIn\")\n                    setTimeout(function(){self.removeState(\"MouseIn\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"mouseOut\":\n\n            actions.push(element.addEventListener(\"mouseleave\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseleave\", function(){\n                    self.setState(\"MouseOut\")\n                    setTimeout(function(){self.removeState(\"MouseOut\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n    }\n\n\n    if (actions.length > 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get action element\n * -----------------------------------------------------------------------------\n * @param  {string} request                                                     The request\n * @return {object}                                                             An object with 2 properties: request && element\n */\nJss.prototype.getActionElement = function(request) {\n    var self = this;\n    var prefix = false;\n    var newRequest  = request;\n    var element = self.element;\n    // Set prefix if it exists\n    if (request.indexOf(\".\") > 0) {\n        var t       = request.split(\".\"),\n        newRequest  = t[1];\n        prefix      = t[0];\n        t = undefined;\n    }\n\n    // Update element according the prefix (or skip it, if not set)\n    if (prefix !== false) {\n        switch (prefix) {\n            case \"screen\":\n            case \"window\":\n                element = window;\n            break;\n        }\n    }\n\n    // Return object\n    return {\n        request: newRequest,\n        element: element\n    }\n}\n/**\n * -----------------------------------------------------------------------------\n * Class name prefix\n * -----------------------------------------------------------------------------\n * The prefix equals the modulename, or - when it's a trigger object - modulename--triggername\n *\n * @return {string} The classname\n */\nJss.prototype.classNamePrefix = function() {\n    if (this.type == \"JssTrigger\") {\n        return this.moduleName + \"--\" + this.triggerName;\n    } else {\n        return this.moduleName;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Remove class name\n * -----------------------------------------------------------------------------\n * Removes the `this.element` classname\n * \t- \"all\" || undefined        > Removes ALL classnames\n *  - \"allStates\" || \"states\"   > Remove all STATES\n *  - all other strings remove that specific string from the className\n *\n * @param {string} input                                                        The classname (case-sensitive) which needs to be removed\n * @return {undefined}\n */\nJss.prototype.removeClassName = function(input) {\n\n    var classList  = [];\n\n    if (input == \"all\" || typeof input == \"undefined\") {\n\n        this.element.className = \"\";\n\n    } else if (input == \"states\" || input == \"allStates\") {\n\n        classList = this.element.className.split(\" \");\n        for (var i in classList) {\n            className = classList[i];\n            if (className.indexOf(\"__is\") > -1) {\n                delete classList[i];\n            }\n        }\n        this.element.className = classList.join(\" \");\n\n    } else if(typeof input == \"string\") {\n        this.element.className = this.element.className.replace(input,\"\");\n    } else {\n        console.error(\"removeClassName: parameter should be a string\");\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Add class name\n * -----------------------------------------------------------------------------\n * Adds a class name by string or array.\n * Does NOT check for duplicates\n *\n * @param  {string} The classname to be added\n * @return {undefined}\n */\nJss.prototype.addClassName = function(data) {\n    this.element.className += \" \";\n    if (typeof data == \"string\") {\n        this.element.className += data;\n    } else {\n        this.element.className += data.join(\" \")\n    }\n}\n\n/**\n * List where the keys corresponds with this[key], and where the value is the function to be executed when the var is changed.\n */\nJss.prototype.setterWatchList = {};\nJss.prototype.getterWatchList = {};\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add data\n * -----------------------------------------------------------------------------\n * Add a (default) value for the given attribute.\n *\n * @param {string} attribute                                                    The name of the attribute (this[attribute])\n * @param {*} value                                                             The value of this[attribute], could be anything...\n * @param {object} options\n *           \t\t- setterWatchFunction {function}\n *           \t\t- getterWatchFunction {function}\n */\nJss.prototype.addData = function(attribute, value, options) {\n\n\n    // watchList[key] = fn;\n    var setterWatchFunction = JssService.getOption('setterWatchFunction', options); // Function\n    var getterWatchFunction = JssService.getOption('getterWatchFunction', options); // Function\n\n    if (typeof setterWatchFunction === \"function\") {\n        this.setterWatchList[attribute] = setterWatchFunction;\n    }\n\n    if (typeof getterWatchFunction === \"function\") {\n        this.getterWatchList[attribute] = getterWatchFunction;\n    }\n\n    // Set the default value\n    return this[attribute] = value;\n}\n\n\n\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- ajax {string} url\n */\nJss.prototype.setData = function(attribute, value, options) {\n\n    this[attribute] = value;\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n\n    if (Array.isArray(fallback)) {\n\n        for (var i = 0; i < fallback.length; i++) {\n            var type = fallback[i];\n\n            if (value && value.length > 0) {\n                this['setData' + JssService.toCamelCase(type)](attribute, value); // Call this.addDataAttribute(value) || this.addDataCookie(value) etc...\n                this[attribute] = value;\n            }\n        }\n    }\n\n    // Call the setter watch function, if defined;\n    if (typeof this.setterWatchList[attribute] === \"function\") { // Use the watchlist to add functionality whenever a data attribute is updated\n        this.setterWatchList[attribute]();\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataDefault {boolean}\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- dataAjax {string} url\n */\nJss.prototype.getData = function(attribute, options) {\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n    var value = false;\n\n\n    if (!fallback) {\n        fallback = ['attribute'];\n    }\n\n\n    for (var i = 0; i < fallback.length; i++) {\n        var type = JssService.toCamelCase(fallback[i]);\n        var customOptions = false;\n\n        if (typeof options == \"object\") {\n            customOptions = options[fallback[i].toLowerCase()];\n        }\n\n        if (!value || value.length < 0) {\n            if (typeof this['getData' + type] !== \"function\") {\n                console.error('this.getData' + type + ' is not a function. Probably ' + type + ' is not a available data option');\n                continue;\n            }\n            value = this['getData' + type]( attribute, customOptions ); // Call this.getDataAttribute(value) || this.getDataCookie(value) || this.getDataAjax(value) etc...\n        }\n    }\n    console.log(this.getterWatchList);\n    // Call the getter watch function, if defined;\n    if (typeof this.getterWatchList[attribute] == \"function\") {\n        this.getterWatchList[attribute]();\n    }\n\n    return this[attribute] = value;\n}\n/**\n * -----------------------------------------------------------------------------\n * Get data: Ajax\n * -----------------------------------------------------------------------------\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n *\n * @param {string} attribute                                                    The NAME of the inner variable (this.NAME), is also used as the key for the GET Request {NAME: value}\n * @param {object} options                                                      Object with parameters used to make a GET request\n * @return {string}                                                             The value of the given attribute, or false if an erro occured.\n */\nJss.prototype.getDataAjax = function(attribute, options) {\n    var url = JssService.getOption(\"url\", options);\n    var jsonKey = JssService.getOption(\"jsonKey\", options) || attribute;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('GET', url);\n\n        return ajaxReturn.success(function(result){\n            if (typeof result === \"object\") {\n                if (result[jsonKey]) {\n                    return result[jsonKey];\n                }\n            }\n        }).error(function(errorObject){\n            console.log(errorObject);\n        });\n    }\n\n    return false;\n};\n\n/**\n * -----------------------------------------------------------------------------\n * Set data: Ajax\n * -----------------------------------------------------------------------------\n * Makes a post request to the options.url in a object {attribute: value}\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n */\nJss.prototype.setDataAjax = function(attribute, value, options) {\n    var url = JssService.getOption(\"url\", options);\n    var requestObject = {}\n        requestObject[attribute] = value;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('POST', url, requestObject);\n\n        return ajaxReturn.success(function(result){\n            return true;\n        }).error(function(errorObject){\n            console.log(errorObject);\n            return false;\n        });\n    }\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Ajax (helper function)\n * -----------------------------------------------------------------------------\n * Based on Atom.js by Todd Motto\n * http://toddmotto.com/writing-a-standalone-ajax-xhr-javascript-micro-library/\n */\nJss.prototype.ajaxHelper = {\n    // Parses json if possible, otherwise just return text\n    parse: function(req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return [result, req];\n    },\n\n    xhr: function(type, url, data) {\n        var ajaxHelper = this;\n\n        var methods = {\n            success: function() {},\n            error: function() {}\n        };\n        var XHR = XMLHttpRequest || ActiveXObject;\n        var request = new XHR('MSXML2.XMLHTTP.3.0');\n        request.open(type, url, true);\n        request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n\n        request.onreadystatechange = function() {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    methods.success.apply(methods, ajaxHelper.parse(request));\n                } else {\n                    methods.error.apply(methods, ajaxHelper.parse(request));\n                }\n            }\n        };\n        request.send(data);\n        return {\n            success: function(callback) {\n                methods.success = callback;\n                return methods;\n            },\n            error: function(callback) {\n                methods.error = callback;\n                return methods;\n            }\n        };\n    }\n};\n\nJss.prototype.ajax = {\n    // Get\n    get: function(src) {\n        console.log(this);\n    },\n\n    // Set\n    put: function(url, data) {\n        return this.ajaxHelper.xhr('PUT', url, data);\n    },\n\n    // Add\n    post: function(url, data) {\n        return this.ajaxHelper.xhr('POST', url, data);\n    }\n\n};\n/**\n * -----------------------------------------------------------------------------\n * Get data attribute value\n * -----------------------------------------------------------------------------\n * Returns the value of the requested attribute. Search first for a data-[ATTRIBUTE] value\n * If not found, it checks for the attribute in the default object. When that is not being\n * found neither, the normal this[attribute] value is being returned.\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME)\n * @return {string}                                                             The value of the given attribute\n */\nJss.prototype.getDataAttribute = function(attribute) {\n\n    return this.element.dataset[attribute];\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Update data attribute\n * -----------------------------------------------------------------------------\n * Set the value to the given attribute. And updates the data-[ATTRIBUTE] value\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME=\"value\")\n * @param {string} value                                                        The VALUE of the data attribute (data-name=\"VALUE\")\n * @return {undefined}\n */\n\nJss.prototype.setDataAttribute = function(attribute, value) {\n\n    // Update data attribute\n    if (typeof value !== \"undefined\") {\n        this.element.dataset[attribute] = this[attribute];\n    } else {\n        delete this.element.dataset[attribute];\n    }\n\n    return true;\n}\nJss.prototype.dataDefaultsCookie = {\n    'expireData': undefined\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get cookie value\n * -----------------------------------------------------------------------------\n * Returns cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @return {string}                                                             The VALUE of the given attribute\n */\nJss.prototype.getDataCookie = function(attribute) {\n\n    if (!attribute) { return null; }\n    return decodeURIComponent(document.cookie.replace(new RegExp(\"(?:(?:^|.*;)\\\\s*\" + encodeURIComponent(attribute).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"), \"$1\")) || null;\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data cookie\n * -----------------------------------------------------------------------------\n * Updates the cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @param {string} value                                                        The VALUE of the cookie\n * @return {undefined}\n */\n\nJss.prototype.setDataCookie = function(attribute, value, options) {\n    var endDate, path, domain, secureConnection;\n\n    if (typeof options === \"object\") {\n        endDate = JssService.getOption('endDate', options);\n        path    = JssService.getOption('path', options);\n        domain  = JssService.getOption('domain', options);\n        secureConnection = JssService.getOption('secureConnection', options);\n    }\n\n    if (!attribute || /^(?:expires|max\\-age|path|domain|secure)$/i.test(attribute)) { return false; }\n    var sExpires = \"\";\n    if (endDate) {\n      switch (endDate.constructor) {\n        case Number:\n          sExpires = endDate === Infinity ? \"; expires=Fri, 31 Dec 9999 23:59:59 GMT\" : \"; max-age=\" + endDate;\n          break;\n        case String:\n          sExpires = \"; expires=\" + endDate;\n          break;\n        case Date:\n          sExpires = \"; expires=\" + endDate.toUTCString();\n          break;\n      }\n    }\n\n    document.cookie = encodeURIComponent(attribute) + \"=\" + encodeURIComponent(value) + sExpires + (domain ? \"; domain=\" + domain : \"\") + (path ? \"; path=\" + path : \"\") + (secureConnection ? \"; secure\" : \"\");\n    return true;\n}\n/*******************************************************************************\n\n    Styles\n\n*******************************************************************************/\n\n/**\n * -----------------------------------------------------------------------------\n * Set height\n * -----------------------------------------------------------------------------\n * Sets the height of the `this.element` by the given input (height)\n *\n * @param  {number} height                                                      The height in pixels or percentage. Where numbers will be calculated to pixels so giving a height of 50 will result in a height of \"50px\". If you want percentages pass the variable with a percentage sign 50 + \"%\"\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setHeight = function(height) {\n    if (typeof height === \"number\") {\n        height += \"px\";\n    }\n\n    if (typeof height !== \"string\") {\n        throw(\"parameter height needs to be a string or integer\");\n    }\n\n    this.element.style.height = height;\n    return true;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get height\n * -----------------------------------------------------------------------------\n * Returns the height of the `this.element`\n *\n * @return {number}                                                             The height of the element in pixels\n */\nJss.prototype.getHeight = function() {\n    return this.element.offsetHeight;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set width\n * -----------------------------------------------------------------------------\n * Sets the width of the `this.element` by the given input (width)\n *\n * @param  {number} width                                                       The width in pixels or percentage. Where numbers will be calculated to pixels so giving a width of 50 will result in a width of \"50px\". If you want to set a percentage, just pass the variable with a percentage sign (\"50%\")\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setWidth = function(width) {\n    if (typeof width == \"number\") {\n        width += \"px\";\n    }\n\n    if (typeof width !== \"string\") {\n        throw(\"parameter width needs to be a string or integer\");\n    }\n    this.element.style.width = width;\n    return true;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get width\n * -----------------------------------------------------------------------------\n * Returns the width of the `this.element`\n *\n * @return {number}                                                             The width of the element in pixels\n */\nJss.prototype.getWidth = function() {\n    return this.element.offsetWidth;\n}\n/**\n * -----------------------------------------------------------------------------\n * Set State\n * -----------------------------------------------------------------------------\n * This updates the state of the object. States are being added to the class name prefix with a double underscore.\n * If you would have the module `envelope` and give it the state `open`. The class name `envelope__open` will be added.\n * Whenever you remove the state `open`, the according class name will be removed as well.\n *\n * @param  {string} str                                                         The name of the state which should be set (this is transformed to CamelCase)\n * @return {boolean}                                                            True on success, otherwise false (might already have the state)\n */\nJss.prototype.setState = function(str) {\n    var element, verifiedState, state, className;\n\n    element         = this.element;\n    state           = JssService.toCamelCase(str);\n    className       = this.classNamePrefix() + \"__is\" + state;\n\n    // Check if this.state is an array, and make it one if not.\n    if (Array.isArray(this.state) == false ) {\n        this.state = [];\n    }\n\n    // This if statement prevents that the same state is being set multiple times\n    if ( !this.hasState(str) ) {\n        this.addClassName(className)\n        this.state.push(state);\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Has state\n * -----------------------------------------------------------------------------\n * Checks if the parameter is already a state and returns true if so. Otherwise false.\n *\n * @param  {string} str                                                         The state which will be checked for\n * @return {boolean}                                                            True if it has the given state, otherwise false\n */\nJss.prototype.hasState = function(str) {\n    if (typeof this.state == \"object\" && this.state.indexOf(str) >= 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Remove state\n * -----------------------------------------------------------------------------\n * Removes the state from the states array, and from the element.className\n *\n * @param  {string} str                                                         The name of the state which should be removed\n * @return {undefined}\n */\nJss.prototype.removeState = function(str) {\n\n    var state      = JssService.toCamelCase(str);\n    var stateIndex = this.state.indexOf(state);\n\n    if (str == \"all\" || typeof str == \"undefined\") {\n        this.removeClassName(\"states\");\n    } else {\n        this.state.splice(stateIndex, 1);\n        if (typeof this.moduleAction != \"undefined\" && this.moduleAction.length > -1) {\n            this.removeClassName(this.classNamePrefix() + \"\" + this.moduleAction + \"__is\" + state);\n        } else {\n            this.removeClassName(this.classNamePrefix() + \"__is\" + state);\n        }\n    }\n}\n\n\n// A simple way to watch variables\n\n// addVar(keyName, value, watch_function)\n// setVar(keyName, value)\n// getVar(keyName)\n// Add -> new\n// Set -> update\n// Get -> return\nvar JssModule = function(){};\n\nJssModule.prototype.type               = \"JssModule\";\nJssModule.prototype.init               = Jss.prototype.init;\nJssModule.prototype.setElement         = Jss.prototype.setElement;\n\n// Triggers\nJssModule.prototype.findTriggers       = Jss.prototype.findTriggers;\nJssModule.prototype.configureTrigger      = Jss.prototype.configureTrigger;\n\n// Actions\n//JssModule.prototype.actions            = Object.create(Jss.prototype.actions);\nJssModule.prototype.validateAction     = Jss.prototype.validateAction;\nJssModule.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssModule.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssModule.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssModule.prototype.setState           = Jss.prototype.setState;\nJssModule.prototype.hasState           = Jss.prototype.hasState;\nJssModule.prototype.removeState        = Jss.prototype.removeState;\n\n// Data attributes\nJssModule.prototype.addData            = Jss.prototype.addData;\nJssModule.prototype.getData            = Jss.prototype.getData;\nJssModule.prototype.setData            = Jss.prototype.setData;\nvar JssTrigger = function(element, options) {\n    this.setElement(element);\n\n    if (typeof options === \"object\") {\n        if (typeof options.module === \"object\") {\n            this.module = options.module;\n        }\n        if (typeof options.moduleName === \"string\") {\n            this.moduleName = options.moduleName;\n        }\n        if (typeof options.triggerName === \"string\") {\n            this.triggerName = options.triggerName;\n        }\n    }\n}\n\n\nJssTrigger.prototype                    = Object.create(Jss.prototype);\nJssTrigger.prototype.type               = \"JssTrigger\";\nJssTrigger.prototype.setElement         = Jss.prototype.setElement;\n\n// Actions\n//JssTrigger.prototype.actions            = Object.create(Jss.prototype.actions);\nJssTrigger.prototype.validateAction     = Jss.prototype.validateAction;\nJssTrigger.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssTrigger.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssTrigger.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssTrigger.prototype.setState           = Jss.prototype.setState;\nJssTrigger.prototype.hasState           = Jss.prototype.hasState;\nJssTrigger.prototype.removeState        = Jss.prototype.removeState;\n\n\n\nvar  JssController = {};\nJssController.modules \t\t= []; // Result array with objects of all the found modules\nJssController.activeModules \t= JssService.activeModules;\n\nJssController.findModules = function() {\n    var allElements = document.getElementsByTagName(\"*\");                       // Array with all domElements\n    var test = [];\n    var self = this;\n    for (var i=0; i < allElements.length; i++) {\n\n        // Set default vars //\n        var element = allElements[i];                                           // Specific domElement\n        var tmp = false;\n\n        // Loop through the (active) modules array and add/instantiate them\n        self.activeModules.forEach(function(module){\n            if (JssService.isModule(element, module)) {\n                tmp = eval(\"new \" + JssService.toCamelCase(module) + \"(element)\"); // Dynamicly load modules\n\n                tmp.setElement(element);                                        // Add the domElement to the module\n                tmp.findTriggers();\t\t\t                                    // Search for module triggers\n\n                tmp.init();\t\t\t\t\t                                    // Executes everything within the init function\n                self.modules.push(tmp);\n\n            }\n        }); // End forEach\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    JssController.findModules();\n    console.log(JssController);\n});"
          },
          "params": [
            {
              "title": "param",
              "description": "domElement",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "element"
            },
            {
              "title": "param",
              "description": "Name of the module",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "moduleName"
            }
          ],
          "returns": [
            {
              "title": "returns",
              "description": "true if element is a module, otherwise false",
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          ],
          "name": "addModule",
          "kind": "function",
          "memberof": "JssService",
          "scope": "static",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            "JssService",
            "addModule"
          ]
        },
        {
          "description": "-----------------------------------------------------------------------------\nGet option\n-----------------------------------------------------------------------------",
          "tags": [
            {
              "title": "param",
              "description": "Keyname in optionList",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "name"
            },
            {
              "title": "param",
              "description": "Array with all possible options",
              "type": {
                "type": "NameExpression",
                "name": "array"
              },
              "name": "optionList"
            },
            {
              "title": "name",
              "name": "getOption"
            },
            {
              "title": "kind",
              "kind": "function"
            },
            {
              "title": "memberof",
              "description": "JssService"
            },
            {
              "title": "static"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 153,
                "column": 0
              },
              "end": {
                "line": 196,
                "column": 0
              }
            },
            "file": "/Users/jeffreyarts/Documents/DEV/jss/lib/jss.js",
            "code": "JssService = {};\n\n// Edit this array to enable or disable default modules\nJssService.activeModules   = []\n\n// Set this to false in a live environment\nJssService.dev             = true;\n\n/**************************\n*\n*   Below are core properties defined, becarefull when you think of changing these...\n*\n**************************/\n\n\nJssService.actions = {\n    hover:      ['hover',    'mouseover',   'onmouseover'                       ], // Fixed\n    click:      ['click',    'onclick'                                          ], // Fixed\n    mouseIn:    ['mousein',  'onmousein', 'mouseenter', 'onmouseenter'          ], // Fixed\n    mouseOut:   ['mouseout', 'onmouseout', 'mouseleave', 'onmouseleave'         ], // Fixed\n    resize:     ['resize',   'onresize'                                         ], // Fixed\n    focus:      ['focus',    'onfocus'                                          ],\n    keyDown:    ['keydown',  'keypress'                                         ],\n    keyUp:      ['keyup',    'keyrelease'                                       ],\n    change:     ['change',   'onchange'                                         ],\n};\n\nJssService.enterDelay = 1000;                                                   // Amount of miliseconds which is used to remove the entered state. (see core.actions) JssService.enterDelay setTimeout\n\nJssService.forbiddenProperties = [\n    'type',\n    'triggers',\n    'configureTrigger',\n    'findTriggers'\n];\n\n/**\n * -----------------------------------------------------------------------------\n * Is Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isModule = function(element, moduleName) {\n    var arr = element.className.split(\" \");\n    var found = false;\n\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i].indexOf(moduleName)        > -1 &&\n            arr[i].indexOf(moduleName + \"_\") == -1 &&\n            arr[i].indexOf(moduleName + \"-\") == -1)\n        {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.addModule = function(moduleName) {\n    this.activeModules.push(this.toKebabCase(moduleName))\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To CamelCase\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toCamelCase = function(input) {\n    var arr, res;\n    res = \"\";\n    if (typeof input === \"string\") {\n        input = input.replace(/\\-/g,\" \");                                       // Replace all dashes with spaces\n        arr = input.split(\" \");\n    } else {\n        arr = input;                                                            // Assume it is an array\n    }\n\n\n\n    var i = 0;\n    for (var i in arr) {\n        if (typeof i != \"undefined\") {\n            res += arr[i][0].toUpperCase()+ arr[i].slice(1); // Capitalize first letter\n        }\n    }\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To kebab-case\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toKebabCase = function(input) {\n    var res, str;\n    res = \"\";\n\n    if (typeof input === \"string\") {\n        str = input;\n    } else {                                                                    // Assume it is an array\n        str = input.join(\" \");\n    }\n\n    // First change it to camelcase\n    str = this.toCamelCase(str);\n\n    var max = str.length;\n    for (var i=0; i < max; i++) {\n        // Check if character is uppercase\n        if (str[i] != str[i].toLowerCase()) {\n            if (i!==0) {\n                str = str.substr(0, i) + \"-\" + str.substr(i);\n                i++;\n            }\n        }\n    }\n\n    return res = str.toLowerCase();\n}\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get option\n * -----------------------------------------------------------------------------\n * @param  {string} name                                                        Keyname in optionList\n * @param  {array} optionList                                                   Array with all possible options\n * @return {}                                                                   Copy of the value (optionsList[name])\n */\nJssService.getOption = function(name, optionList) {\n    if (typeof optionList !== \"object\") {\n        return false;\n    }\n\n    var res;\n\n    switch (name) {\n\n        // Only set `addDefaults` to false when it is explicitly set.\n        case \"addDefaults\":\n            if (optionList[name] !== false || typeof optionList[name] === \"undefined\") {\n                res = true;\n            } else {\n                res = false;\n            }\n        break;\n        case \"fallback\":\n            if ( Array.isArray(optionList[name]) ) {\n                res = optionList[name];\n                if (res.length===0) {\n                    res = false;\n                }\n            } else if (typeof optionList[name] === \"string\"){\n                res = [optionList[name]];\n            }\n        break;\n        default:\n        res = optionList[name]\n    }\n\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Is Trigger\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isTrigger = function(element, moduleName) {\n    if (element.className.indexOf(moduleName + \"--\") > -1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get trigger name\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {string} Name of the trigger.\n */\nJssService.getTriggerName = function(element, moduleName) {\n    if (typeof element != \"object\") {\n        console.error('Required first argument `element` needs to be a domElement.');\n        return false;\n    }\n    if (typeof moduleName != \"string\") {\n        console.error('Required second argument `moduleName` needs to be a string.');\n        return false;\n    }\n\n    // As an example we assume that the value of element.className equals 'b module--triggerName'\n    var startPos = element.className.indexOf(moduleName + \"--\");                    // 2\n    var sliced = element.className.slice(startPos, element.className.length )       // 'module--triggerName'\n    var endPos = sliced.indexOf(\" \");                                               // -1       // not found\n    if (endPos != -1) {                                                             // 19\n        sliced = sliced.slice(0,endPos);                                            // if there is more after the string, this will remove it\n    }\n    return sliced.replace(moduleName + \"--\",\"\")\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger name is allowed\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} True if the triggername is allowed, otherwise false.\n */\nJssService.triggerNameIsAllowed = function(element, moduleName) {\n    if (JssService.forbiddenProperties.indexOf(this.getTriggerName(element, moduleName)) > -1) {      // This triggerName is a core property, throw error\n        console.error('Triggername `' + getTriggerName(element,moduleName) + '` is not allowed. Change the trigger so it does not corresponds any of these: ' + JssService.forbiddenProperties)\n        return false;\n    }\n    return true;\n}\n/**\n * @module Jss\n * @author      Jeffrey Arts <sjeffff@gmail.com>\n * @copyright   2015\n */\nJss = function(){};\n\nJss.prototype.type      = \"Jss\"\nJss.prototype.triggers  = false;\nJss.prototype.element   = undefined;                                              // {obj} domElement\nJss.prototype.state     = undefined;                                              // {str} State of module, is reflected by the css class __isState\n\n/**\n * -----------------------------------------------------------------------------\n * Find Triggers\n * -----------------------------------------------------------------------------\n *\n * @param {domElement} element\n * @return {undefined}\n */\nJss.prototype.findTriggers = function(element) {\n    this.triggers = [];                                                         // If this is not set, all modules will have the same reference point to this.triggers.\n    // Module is created, now look for any module triggers\n    this.searchTriggersRecursiveInnerFunction(this.element)\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger\n * -----------------------------------------------------------------------------\n */\nJss.prototype.trigger = function(which, fn) {\n    if (typeof this.triggers !== \"object\") {\n        console.info(\"No triggers are found, please specify them in the css as `module-name--trigger-name`.\");\n        return false;\n    }\n\n    if (typeof this.triggers[which] !== \"object\") {\n        console.info(\"You are trying to execute a function on a non existing trigger `\" + which + \"`\");\n        return false;\n    }\n\n    for (var i = 0; i < this.triggers[which].length; i++) {\n        fn(this.triggers[which][i])\n    }\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Search triggers recursive inner function\n * -----------------------------------------------------------------------------\n * Recursive function which is executed bij findTriggers;\n *\n * @return {undefined}\n */\nJss.prototype.searchTriggersRecursiveInnerFunction = function(element) {\n    var self = this;\n    if (typeof element == \"undefined\" ) {\n        element = this.element;\n    }\n    if ( element.hasChildNodes() ) {\n        for (var i=0; i < element.childNodes.length; i++) {\n\n            var childElement = element.childNodes[i];                           // Improve readability\n\n            if (childElement.nodeType == 1) {                                   // NodeType 1 == domElement\n\n                if (JssService.isTrigger(childElement, this.moduleName)) {\n\n                    // Add a child element\n                    if (JssService.triggerNameIsAllowed(childElement, this.moduleName)) {\n                        var triggerName = JssService.getTriggerName(childElement, this.moduleName)\n\n                        if (typeof self.triggers[triggerName] !== \"object\") {\n                            self.triggers[triggerName] = [];\n                        }\n\n                        var tmp = new JssTrigger(childElement, {\n                            module: self,\n                            moduleName: this.moduleName,\n                            triggerName: triggerName,\n                        });\n\n                        self.triggers[triggerName].push(tmp);\n                    }\n                }\n                if (childElement.hasChildNodes()) {\n                    self.searchTriggersRecursiveInnerFunction(childElement)\n                }\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Configure Trigger\n * -----------------------------------------------------------------------------\n *\n * @return {undefined}\n */\nJss.prototype.configureTrigger = function(trigger, fn) {\n    if ( typeof this.triggers[trigger] == \"object\") {\n\n        for (var i = 0; i < this.triggers[trigger].length; i++) {\n            //self.triggers[trigger][i]\n            fn(this.triggers[trigger][i]);\n        }\n\n    } else if (JssService.dev) {\n        console.error(\"You are trying to configure a trigger which has no attached domElement\")\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n *   Init\n * -----------------------------------------------------------------------------\n * Notice the user that a init function needs to be added for controlling the triggers\n *\n * @return {undefined}\n */\nJss.prototype.init = function(func) {\n    if (JssService.dev) {\n        console.info(this.moduleName + \": Add a prototype.init function to add triggers and stuff\")\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set element\n * -----------------------------------------------------------------------------\n * Add a domElement to `this`\n *\n * @return {undefined}\n */\nJss.prototype.setElement = function(element) {\n    if (typeof element == \"undefined\") {\n        if (JssService.dev) {\n            return console.error(\"First parameter of setElement needs to be a domElement\");\n        }\n    }\n    this.element = element;\n}\n/*******************************************************************************\n   *\n   *\tActions\n   *\n   *  \t@author      Jeffrey Arts <sjeffff@gmail.com>\n   *    @copyright   2015\n   *\n*******************************************************************************/\n/**\n * -----------------------------------------------------------------------------\n *   Validate action\n * -----------------------------------------------------------------------------\n * Checks if parameter is a valid action, and logs an error when not.\n *\n * @param {string} request                                                      The name of the request\n * @return {boolean} true if a action is valid, otherwise false.\n */\nJss.prototype.validateAction = function(request) {\n    var result;\n    request = this.getActionElement(request).request\n    for (var action in JssService.actions) {\n        if (JssService.actions[action].indexOf(request.toLowerCase()) > -1) {\n            result = action;\n            break;\n        }\n    }\n    if (result) {\n        return result;\n    } else {\n        console.error(\"validateAction: unknown request\", request);\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * \t Add Action\n * -----------------------------------------------------------------------------\n * Adds an action to the object, list of possible requests can be found in Jss.actions\n *\n * | Options\n * \t\t- addDefaults {boolean}                                                 True: add default classes, false: don't\n *\n *\n *\n * @param {string} request                                                      The name of the request\n * @param {function} fn                                                         The function which should be triggered\n * @param {object} options                                                      Object with option parameters\n * @return {boolean} true if a action is succesfully added, otherwise false.\n */\nJss.prototype.addAction = function(request, fn, options) {\n\n    var self        = this;\n    var action      = self.validateAction(request)\n    var actions     = [];\n    var t = self.getActionElement(request);\n    var element     = t.element;\n    var request     = t.request;\n    t = undefined;\n\n    // Options\n    var addDefaults = JssService.getOption(\"addDefaults\", options);\n\n\n\n    switch (action) {\n\n        case \"resize\":\n\n            actions.push(element.addEventListener(\"resize\", fn));\n\n        break;\n\n\n        case \"click\":\n            actions.push(element.addEventListener(\"click\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"click\", function(){\n                    self.setState(\"Clicked\")\n                }));\n                actions.push(window.addEventListener( \"click\", function(event) {\n                    if (event.target != self.element && self.hasState(\"Clicked\")) {\n                        self.removeState(\"Clicked\")\n                    }\n                }));\n            } // End addDefaults\n        break;\n\n\n        case \"change\":\n            actions.push(element.addEventListener(\"change\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"change\", function(){\n                    self.setState(\"Changed\")\n                    setTimeout(function(){self.removeState(\"Changed\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"hover\":\n            actions.push(element.addEventListener(\"mouseover\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseover\", function(){\n                    self.setState(\"Hover\")\n                }));\n                actions.push(element.addEventListener(\"mouseout\",  function(){\n                    self.removeState(\"Hover\")\n                }));\n            }\n        break;\n\n\n        case \"mouseIn\":\n\n            actions.push(element.addEventListener(\"mouseenter\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseenter\", function(){\n                    self.setState(\"MouseIn\")\n                    setTimeout(function(){self.removeState(\"MouseIn\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"mouseOut\":\n\n            actions.push(element.addEventListener(\"mouseleave\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseleave\", function(){\n                    self.setState(\"MouseOut\")\n                    setTimeout(function(){self.removeState(\"MouseOut\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n    }\n\n\n    if (actions.length > 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get action element\n * -----------------------------------------------------------------------------\n * @param  {string} request                                                     The request\n * @return {object}                                                             An object with 2 properties: request && element\n */\nJss.prototype.getActionElement = function(request) {\n    var self = this;\n    var prefix = false;\n    var newRequest  = request;\n    var element = self.element;\n    // Set prefix if it exists\n    if (request.indexOf(\".\") > 0) {\n        var t       = request.split(\".\"),\n        newRequest  = t[1];\n        prefix      = t[0];\n        t = undefined;\n    }\n\n    // Update element according the prefix (or skip it, if not set)\n    if (prefix !== false) {\n        switch (prefix) {\n            case \"screen\":\n            case \"window\":\n                element = window;\n            break;\n        }\n    }\n\n    // Return object\n    return {\n        request: newRequest,\n        element: element\n    }\n}\n/**\n * -----------------------------------------------------------------------------\n * Class name prefix\n * -----------------------------------------------------------------------------\n * The prefix equals the modulename, or - when it's a trigger object - modulename--triggername\n *\n * @return {string} The classname\n */\nJss.prototype.classNamePrefix = function() {\n    if (this.type == \"JssTrigger\") {\n        return this.moduleName + \"--\" + this.triggerName;\n    } else {\n        return this.moduleName;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Remove class name\n * -----------------------------------------------------------------------------\n * Removes the `this.element` classname\n * \t- \"all\" || undefined        > Removes ALL classnames\n *  - \"allStates\" || \"states\"   > Remove all STATES\n *  - all other strings remove that specific string from the className\n *\n * @param {string} input                                                        The classname (case-sensitive) which needs to be removed\n * @return {undefined}\n */\nJss.prototype.removeClassName = function(input) {\n\n    var classList  = [];\n\n    if (input == \"all\" || typeof input == \"undefined\") {\n\n        this.element.className = \"\";\n\n    } else if (input == \"states\" || input == \"allStates\") {\n\n        classList = this.element.className.split(\" \");\n        for (var i in classList) {\n            className = classList[i];\n            if (className.indexOf(\"__is\") > -1) {\n                delete classList[i];\n            }\n        }\n        this.element.className = classList.join(\" \");\n\n    } else if(typeof input == \"string\") {\n        this.element.className = this.element.className.replace(input,\"\");\n    } else {\n        console.error(\"removeClassName: parameter should be a string\");\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Add class name\n * -----------------------------------------------------------------------------\n * Adds a class name by string or array.\n * Does NOT check for duplicates\n *\n * @param  {string} The classname to be added\n * @return {undefined}\n */\nJss.prototype.addClassName = function(data) {\n    this.element.className += \" \";\n    if (typeof data == \"string\") {\n        this.element.className += data;\n    } else {\n        this.element.className += data.join(\" \")\n    }\n}\n\n/**\n * List where the keys corresponds with this[key], and where the value is the function to be executed when the var is changed.\n */\nJss.prototype.setterWatchList = {};\nJss.prototype.getterWatchList = {};\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add data\n * -----------------------------------------------------------------------------\n * Add a (default) value for the given attribute.\n *\n * @param {string} attribute                                                    The name of the attribute (this[attribute])\n * @param {*} value                                                             The value of this[attribute], could be anything...\n * @param {object} options\n *           \t\t- setterWatchFunction {function}\n *           \t\t- getterWatchFunction {function}\n */\nJss.prototype.addData = function(attribute, value, options) {\n\n\n    // watchList[key] = fn;\n    var setterWatchFunction = JssService.getOption('setterWatchFunction', options); // Function\n    var getterWatchFunction = JssService.getOption('getterWatchFunction', options); // Function\n\n    if (typeof setterWatchFunction === \"function\") {\n        this.setterWatchList[attribute] = setterWatchFunction;\n    }\n\n    if (typeof getterWatchFunction === \"function\") {\n        this.getterWatchList[attribute] = getterWatchFunction;\n    }\n\n    // Set the default value\n    return this[attribute] = value;\n}\n\n\n\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- ajax {string} url\n */\nJss.prototype.setData = function(attribute, value, options) {\n\n    this[attribute] = value;\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n\n    if (Array.isArray(fallback)) {\n\n        for (var i = 0; i < fallback.length; i++) {\n            var type = fallback[i];\n\n            if (value && value.length > 0) {\n                this['setData' + JssService.toCamelCase(type)](attribute, value); // Call this.addDataAttribute(value) || this.addDataCookie(value) etc...\n                this[attribute] = value;\n            }\n        }\n    }\n\n    // Call the setter watch function, if defined;\n    if (typeof this.setterWatchList[attribute] === \"function\") { // Use the watchlist to add functionality whenever a data attribute is updated\n        this.setterWatchList[attribute]();\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataDefault {boolean}\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- dataAjax {string} url\n */\nJss.prototype.getData = function(attribute, options) {\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n    var value = false;\n\n\n    if (!fallback) {\n        fallback = ['attribute'];\n    }\n\n\n    for (var i = 0; i < fallback.length; i++) {\n        var type = JssService.toCamelCase(fallback[i]);\n        var customOptions = false;\n\n        if (typeof options == \"object\") {\n            customOptions = options[fallback[i].toLowerCase()];\n        }\n\n        if (!value || value.length < 0) {\n            if (typeof this['getData' + type] !== \"function\") {\n                console.error('this.getData' + type + ' is not a function. Probably ' + type + ' is not a available data option');\n                continue;\n            }\n            value = this['getData' + type]( attribute, customOptions ); // Call this.getDataAttribute(value) || this.getDataCookie(value) || this.getDataAjax(value) etc...\n        }\n    }\n    console.log(this.getterWatchList);\n    // Call the getter watch function, if defined;\n    if (typeof this.getterWatchList[attribute] == \"function\") {\n        this.getterWatchList[attribute]();\n    }\n\n    return this[attribute] = value;\n}\n/**\n * -----------------------------------------------------------------------------\n * Get data: Ajax\n * -----------------------------------------------------------------------------\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n *\n * @param {string} attribute                                                    The NAME of the inner variable (this.NAME), is also used as the key for the GET Request {NAME: value}\n * @param {object} options                                                      Object with parameters used to make a GET request\n * @return {string}                                                             The value of the given attribute, or false if an erro occured.\n */\nJss.prototype.getDataAjax = function(attribute, options) {\n    var url = JssService.getOption(\"url\", options);\n    var jsonKey = JssService.getOption(\"jsonKey\", options) || attribute;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('GET', url);\n\n        return ajaxReturn.success(function(result){\n            if (typeof result === \"object\") {\n                if (result[jsonKey]) {\n                    return result[jsonKey];\n                }\n            }\n        }).error(function(errorObject){\n            console.log(errorObject);\n        });\n    }\n\n    return false;\n};\n\n/**\n * -----------------------------------------------------------------------------\n * Set data: Ajax\n * -----------------------------------------------------------------------------\n * Makes a post request to the options.url in a object {attribute: value}\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n */\nJss.prototype.setDataAjax = function(attribute, value, options) {\n    var url = JssService.getOption(\"url\", options);\n    var requestObject = {}\n        requestObject[attribute] = value;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('POST', url, requestObject);\n\n        return ajaxReturn.success(function(result){\n            return true;\n        }).error(function(errorObject){\n            console.log(errorObject);\n            return false;\n        });\n    }\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Ajax (helper function)\n * -----------------------------------------------------------------------------\n * Based on Atom.js by Todd Motto\n * http://toddmotto.com/writing-a-standalone-ajax-xhr-javascript-micro-library/\n */\nJss.prototype.ajaxHelper = {\n    // Parses json if possible, otherwise just return text\n    parse: function(req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return [result, req];\n    },\n\n    xhr: function(type, url, data) {\n        var ajaxHelper = this;\n\n        var methods = {\n            success: function() {},\n            error: function() {}\n        };\n        var XHR = XMLHttpRequest || ActiveXObject;\n        var request = new XHR('MSXML2.XMLHTTP.3.0');\n        request.open(type, url, true);\n        request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n\n        request.onreadystatechange = function() {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    methods.success.apply(methods, ajaxHelper.parse(request));\n                } else {\n                    methods.error.apply(methods, ajaxHelper.parse(request));\n                }\n            }\n        };\n        request.send(data);\n        return {\n            success: function(callback) {\n                methods.success = callback;\n                return methods;\n            },\n            error: function(callback) {\n                methods.error = callback;\n                return methods;\n            }\n        };\n    }\n};\n\nJss.prototype.ajax = {\n    // Get\n    get: function(src) {\n        console.log(this);\n    },\n\n    // Set\n    put: function(url, data) {\n        return this.ajaxHelper.xhr('PUT', url, data);\n    },\n\n    // Add\n    post: function(url, data) {\n        return this.ajaxHelper.xhr('POST', url, data);\n    }\n\n};\n/**\n * -----------------------------------------------------------------------------\n * Get data attribute value\n * -----------------------------------------------------------------------------\n * Returns the value of the requested attribute. Search first for a data-[ATTRIBUTE] value\n * If not found, it checks for the attribute in the default object. When that is not being\n * found neither, the normal this[attribute] value is being returned.\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME)\n * @return {string}                                                             The value of the given attribute\n */\nJss.prototype.getDataAttribute = function(attribute) {\n\n    return this.element.dataset[attribute];\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Update data attribute\n * -----------------------------------------------------------------------------\n * Set the value to the given attribute. And updates the data-[ATTRIBUTE] value\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME=\"value\")\n * @param {string} value                                                        The VALUE of the data attribute (data-name=\"VALUE\")\n * @return {undefined}\n */\n\nJss.prototype.setDataAttribute = function(attribute, value) {\n\n    // Update data attribute\n    if (typeof value !== \"undefined\") {\n        this.element.dataset[attribute] = this[attribute];\n    } else {\n        delete this.element.dataset[attribute];\n    }\n\n    return true;\n}\nJss.prototype.dataDefaultsCookie = {\n    'expireData': undefined\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get cookie value\n * -----------------------------------------------------------------------------\n * Returns cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @return {string}                                                             The VALUE of the given attribute\n */\nJss.prototype.getDataCookie = function(attribute) {\n\n    if (!attribute) { return null; }\n    return decodeURIComponent(document.cookie.replace(new RegExp(\"(?:(?:^|.*;)\\\\s*\" + encodeURIComponent(attribute).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"), \"$1\")) || null;\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data cookie\n * -----------------------------------------------------------------------------\n * Updates the cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @param {string} value                                                        The VALUE of the cookie\n * @return {undefined}\n */\n\nJss.prototype.setDataCookie = function(attribute, value, options) {\n    var endDate, path, domain, secureConnection;\n\n    if (typeof options === \"object\") {\n        endDate = JssService.getOption('endDate', options);\n        path    = JssService.getOption('path', options);\n        domain  = JssService.getOption('domain', options);\n        secureConnection = JssService.getOption('secureConnection', options);\n    }\n\n    if (!attribute || /^(?:expires|max\\-age|path|domain|secure)$/i.test(attribute)) { return false; }\n    var sExpires = \"\";\n    if (endDate) {\n      switch (endDate.constructor) {\n        case Number:\n          sExpires = endDate === Infinity ? \"; expires=Fri, 31 Dec 9999 23:59:59 GMT\" : \"; max-age=\" + endDate;\n          break;\n        case String:\n          sExpires = \"; expires=\" + endDate;\n          break;\n        case Date:\n          sExpires = \"; expires=\" + endDate.toUTCString();\n          break;\n      }\n    }\n\n    document.cookie = encodeURIComponent(attribute) + \"=\" + encodeURIComponent(value) + sExpires + (domain ? \"; domain=\" + domain : \"\") + (path ? \"; path=\" + path : \"\") + (secureConnection ? \"; secure\" : \"\");\n    return true;\n}\n/*******************************************************************************\n\n    Styles\n\n*******************************************************************************/\n\n/**\n * -----------------------------------------------------------------------------\n * Set height\n * -----------------------------------------------------------------------------\n * Sets the height of the `this.element` by the given input (height)\n *\n * @param  {number} height                                                      The height in pixels or percentage. Where numbers will be calculated to pixels so giving a height of 50 will result in a height of \"50px\". If you want percentages pass the variable with a percentage sign 50 + \"%\"\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setHeight = function(height) {\n    if (typeof height === \"number\") {\n        height += \"px\";\n    }\n\n    if (typeof height !== \"string\") {\n        throw(\"parameter height needs to be a string or integer\");\n    }\n\n    this.element.style.height = height;\n    return true;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get height\n * -----------------------------------------------------------------------------\n * Returns the height of the `this.element`\n *\n * @return {number}                                                             The height of the element in pixels\n */\nJss.prototype.getHeight = function() {\n    return this.element.offsetHeight;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set width\n * -----------------------------------------------------------------------------\n * Sets the width of the `this.element` by the given input (width)\n *\n * @param  {number} width                                                       The width in pixels or percentage. Where numbers will be calculated to pixels so giving a width of 50 will result in a width of \"50px\". If you want to set a percentage, just pass the variable with a percentage sign (\"50%\")\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setWidth = function(width) {\n    if (typeof width == \"number\") {\n        width += \"px\";\n    }\n\n    if (typeof width !== \"string\") {\n        throw(\"parameter width needs to be a string or integer\");\n    }\n    this.element.style.width = width;\n    return true;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get width\n * -----------------------------------------------------------------------------\n * Returns the width of the `this.element`\n *\n * @return {number}                                                             The width of the element in pixels\n */\nJss.prototype.getWidth = function() {\n    return this.element.offsetWidth;\n}\n/**\n * -----------------------------------------------------------------------------\n * Set State\n * -----------------------------------------------------------------------------\n * This updates the state of the object. States are being added to the class name prefix with a double underscore.\n * If you would have the module `envelope` and give it the state `open`. The class name `envelope__open` will be added.\n * Whenever you remove the state `open`, the according class name will be removed as well.\n *\n * @param  {string} str                                                         The name of the state which should be set (this is transformed to CamelCase)\n * @return {boolean}                                                            True on success, otherwise false (might already have the state)\n */\nJss.prototype.setState = function(str) {\n    var element, verifiedState, state, className;\n\n    element         = this.element;\n    state           = JssService.toCamelCase(str);\n    className       = this.classNamePrefix() + \"__is\" + state;\n\n    // Check if this.state is an array, and make it one if not.\n    if (Array.isArray(this.state) == false ) {\n        this.state = [];\n    }\n\n    // This if statement prevents that the same state is being set multiple times\n    if ( !this.hasState(str) ) {\n        this.addClassName(className)\n        this.state.push(state);\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Has state\n * -----------------------------------------------------------------------------\n * Checks if the parameter is already a state and returns true if so. Otherwise false.\n *\n * @param  {string} str                                                         The state which will be checked for\n * @return {boolean}                                                            True if it has the given state, otherwise false\n */\nJss.prototype.hasState = function(str) {\n    if (typeof this.state == \"object\" && this.state.indexOf(str) >= 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Remove state\n * -----------------------------------------------------------------------------\n * Removes the state from the states array, and from the element.className\n *\n * @param  {string} str                                                         The name of the state which should be removed\n * @return {undefined}\n */\nJss.prototype.removeState = function(str) {\n\n    var state      = JssService.toCamelCase(str);\n    var stateIndex = this.state.indexOf(state);\n\n    if (str == \"all\" || typeof str == \"undefined\") {\n        this.removeClassName(\"states\");\n    } else {\n        this.state.splice(stateIndex, 1);\n        if (typeof this.moduleAction != \"undefined\" && this.moduleAction.length > -1) {\n            this.removeClassName(this.classNamePrefix() + \"\" + this.moduleAction + \"__is\" + state);\n        } else {\n            this.removeClassName(this.classNamePrefix() + \"__is\" + state);\n        }\n    }\n}\n\n\n// A simple way to watch variables\n\n// addVar(keyName, value, watch_function)\n// setVar(keyName, value)\n// getVar(keyName)\n// Add -> new\n// Set -> update\n// Get -> return\nvar JssModule = function(){};\n\nJssModule.prototype.type               = \"JssModule\";\nJssModule.prototype.init               = Jss.prototype.init;\nJssModule.prototype.setElement         = Jss.prototype.setElement;\n\n// Triggers\nJssModule.prototype.findTriggers       = Jss.prototype.findTriggers;\nJssModule.prototype.configureTrigger      = Jss.prototype.configureTrigger;\n\n// Actions\n//JssModule.prototype.actions            = Object.create(Jss.prototype.actions);\nJssModule.prototype.validateAction     = Jss.prototype.validateAction;\nJssModule.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssModule.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssModule.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssModule.prototype.setState           = Jss.prototype.setState;\nJssModule.prototype.hasState           = Jss.prototype.hasState;\nJssModule.prototype.removeState        = Jss.prototype.removeState;\n\n// Data attributes\nJssModule.prototype.addData            = Jss.prototype.addData;\nJssModule.prototype.getData            = Jss.prototype.getData;\nJssModule.prototype.setData            = Jss.prototype.setData;\nvar JssTrigger = function(element, options) {\n    this.setElement(element);\n\n    if (typeof options === \"object\") {\n        if (typeof options.module === \"object\") {\n            this.module = options.module;\n        }\n        if (typeof options.moduleName === \"string\") {\n            this.moduleName = options.moduleName;\n        }\n        if (typeof options.triggerName === \"string\") {\n            this.triggerName = options.triggerName;\n        }\n    }\n}\n\n\nJssTrigger.prototype                    = Object.create(Jss.prototype);\nJssTrigger.prototype.type               = \"JssTrigger\";\nJssTrigger.prototype.setElement         = Jss.prototype.setElement;\n\n// Actions\n//JssTrigger.prototype.actions            = Object.create(Jss.prototype.actions);\nJssTrigger.prototype.validateAction     = Jss.prototype.validateAction;\nJssTrigger.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssTrigger.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssTrigger.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssTrigger.prototype.setState           = Jss.prototype.setState;\nJssTrigger.prototype.hasState           = Jss.prototype.hasState;\nJssTrigger.prototype.removeState        = Jss.prototype.removeState;\n\n\n\nvar  JssController = {};\nJssController.modules \t\t= []; // Result array with objects of all the found modules\nJssController.activeModules \t= JssService.activeModules;\n\nJssController.findModules = function() {\n    var allElements = document.getElementsByTagName(\"*\");                       // Array with all domElements\n    var test = [];\n    var self = this;\n    for (var i=0; i < allElements.length; i++) {\n\n        // Set default vars //\n        var element = allElements[i];                                           // Specific domElement\n        var tmp = false;\n\n        // Loop through the (active) modules array and add/instantiate them\n        self.activeModules.forEach(function(module){\n            if (JssService.isModule(element, module)) {\n                tmp = eval(\"new \" + JssService.toCamelCase(module) + \"(element)\"); // Dynamicly load modules\n\n                tmp.setElement(element);                                        // Add the domElement to the module\n                tmp.findTriggers();\t\t\t                                    // Search for module triggers\n\n                tmp.init();\t\t\t\t\t                                    // Executes everything within the init function\n                self.modules.push(tmp);\n\n            }\n        }); // End forEach\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    JssController.findModules();\n    console.log(JssController);\n});"
          },
          "params": [
            {
              "title": "param",
              "description": "Keyname in optionList",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "name"
            },
            {
              "title": "param",
              "description": "Array with all possible options",
              "type": {
                "type": "NameExpression",
                "name": "array"
              },
              "name": "optionList"
            }
          ],
          "name": "getOption",
          "kind": "function",
          "memberof": "JssService",
          "scope": "static",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            "JssService",
            "getOption"
          ]
        },
        {
          "description": "-----------------------------------------------------------------------------\nGet trigger name\n-----------------------------------------------------------------------------",
          "tags": [
            {
              "title": "param",
              "description": "domElement",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "element"
            },
            {
              "title": "param",
              "description": "Name of the module",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "moduleName"
            },
            {
              "title": "returns",
              "description": "Name of the trigger.",
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "name",
              "name": "getTriggerName"
            },
            {
              "title": "kind",
              "kind": "function"
            },
            {
              "title": "memberof",
              "description": "JssService"
            },
            {
              "title": "static"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 213,
                "column": 0
              },
              "end": {
                "line": 242,
                "column": 0
              }
            },
            "file": "/Users/jeffreyarts/Documents/DEV/jss/lib/jss.js",
            "code": "JssService = {};\n\n// Edit this array to enable or disable default modules\nJssService.activeModules   = []\n\n// Set this to false in a live environment\nJssService.dev             = true;\n\n/**************************\n*\n*   Below are core properties defined, becarefull when you think of changing these...\n*\n**************************/\n\n\nJssService.actions = {\n    hover:      ['hover',    'mouseover',   'onmouseover'                       ], // Fixed\n    click:      ['click',    'onclick'                                          ], // Fixed\n    mouseIn:    ['mousein',  'onmousein', 'mouseenter', 'onmouseenter'          ], // Fixed\n    mouseOut:   ['mouseout', 'onmouseout', 'mouseleave', 'onmouseleave'         ], // Fixed\n    resize:     ['resize',   'onresize'                                         ], // Fixed\n    focus:      ['focus',    'onfocus'                                          ],\n    keyDown:    ['keydown',  'keypress'                                         ],\n    keyUp:      ['keyup',    'keyrelease'                                       ],\n    change:     ['change',   'onchange'                                         ],\n};\n\nJssService.enterDelay = 1000;                                                   // Amount of miliseconds which is used to remove the entered state. (see core.actions) JssService.enterDelay setTimeout\n\nJssService.forbiddenProperties = [\n    'type',\n    'triggers',\n    'configureTrigger',\n    'findTriggers'\n];\n\n/**\n * -----------------------------------------------------------------------------\n * Is Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isModule = function(element, moduleName) {\n    var arr = element.className.split(\" \");\n    var found = false;\n\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i].indexOf(moduleName)        > -1 &&\n            arr[i].indexOf(moduleName + \"_\") == -1 &&\n            arr[i].indexOf(moduleName + \"-\") == -1)\n        {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.addModule = function(moduleName) {\n    this.activeModules.push(this.toKebabCase(moduleName))\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To CamelCase\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toCamelCase = function(input) {\n    var arr, res;\n    res = \"\";\n    if (typeof input === \"string\") {\n        input = input.replace(/\\-/g,\" \");                                       // Replace all dashes with spaces\n        arr = input.split(\" \");\n    } else {\n        arr = input;                                                            // Assume it is an array\n    }\n\n\n\n    var i = 0;\n    for (var i in arr) {\n        if (typeof i != \"undefined\") {\n            res += arr[i][0].toUpperCase()+ arr[i].slice(1); // Capitalize first letter\n        }\n    }\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To kebab-case\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toKebabCase = function(input) {\n    var res, str;\n    res = \"\";\n\n    if (typeof input === \"string\") {\n        str = input;\n    } else {                                                                    // Assume it is an array\n        str = input.join(\" \");\n    }\n\n    // First change it to camelcase\n    str = this.toCamelCase(str);\n\n    var max = str.length;\n    for (var i=0; i < max; i++) {\n        // Check if character is uppercase\n        if (str[i] != str[i].toLowerCase()) {\n            if (i!==0) {\n                str = str.substr(0, i) + \"-\" + str.substr(i);\n                i++;\n            }\n        }\n    }\n\n    return res = str.toLowerCase();\n}\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get option\n * -----------------------------------------------------------------------------\n * @param  {string} name                                                        Keyname in optionList\n * @param  {array} optionList                                                   Array with all possible options\n * @return {}                                                                   Copy of the value (optionsList[name])\n */\nJssService.getOption = function(name, optionList) {\n    if (typeof optionList !== \"object\") {\n        return false;\n    }\n\n    var res;\n\n    switch (name) {\n\n        // Only set `addDefaults` to false when it is explicitly set.\n        case \"addDefaults\":\n            if (optionList[name] !== false || typeof optionList[name] === \"undefined\") {\n                res = true;\n            } else {\n                res = false;\n            }\n        break;\n        case \"fallback\":\n            if ( Array.isArray(optionList[name]) ) {\n                res = optionList[name];\n                if (res.length===0) {\n                    res = false;\n                }\n            } else if (typeof optionList[name] === \"string\"){\n                res = [optionList[name]];\n            }\n        break;\n        default:\n        res = optionList[name]\n    }\n\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Is Trigger\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isTrigger = function(element, moduleName) {\n    if (element.className.indexOf(moduleName + \"--\") > -1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get trigger name\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {string} Name of the trigger.\n */\nJssService.getTriggerName = function(element, moduleName) {\n    if (typeof element != \"object\") {\n        console.error('Required first argument `element` needs to be a domElement.');\n        return false;\n    }\n    if (typeof moduleName != \"string\") {\n        console.error('Required second argument `moduleName` needs to be a string.');\n        return false;\n    }\n\n    // As an example we assume that the value of element.className equals 'b module--triggerName'\n    var startPos = element.className.indexOf(moduleName + \"--\");                    // 2\n    var sliced = element.className.slice(startPos, element.className.length )       // 'module--triggerName'\n    var endPos = sliced.indexOf(\" \");                                               // -1       // not found\n    if (endPos != -1) {                                                             // 19\n        sliced = sliced.slice(0,endPos);                                            // if there is more after the string, this will remove it\n    }\n    return sliced.replace(moduleName + \"--\",\"\")\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger name is allowed\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} True if the triggername is allowed, otherwise false.\n */\nJssService.triggerNameIsAllowed = function(element, moduleName) {\n    if (JssService.forbiddenProperties.indexOf(this.getTriggerName(element, moduleName)) > -1) {      // This triggerName is a core property, throw error\n        console.error('Triggername `' + getTriggerName(element,moduleName) + '` is not allowed. Change the trigger so it does not corresponds any of these: ' + JssService.forbiddenProperties)\n        return false;\n    }\n    return true;\n}\n/**\n * @module Jss\n * @author      Jeffrey Arts <sjeffff@gmail.com>\n * @copyright   2015\n */\nJss = function(){};\n\nJss.prototype.type      = \"Jss\"\nJss.prototype.triggers  = false;\nJss.prototype.element   = undefined;                                              // {obj} domElement\nJss.prototype.state     = undefined;                                              // {str} State of module, is reflected by the css class __isState\n\n/**\n * -----------------------------------------------------------------------------\n * Find Triggers\n * -----------------------------------------------------------------------------\n *\n * @param {domElement} element\n * @return {undefined}\n */\nJss.prototype.findTriggers = function(element) {\n    this.triggers = [];                                                         // If this is not set, all modules will have the same reference point to this.triggers.\n    // Module is created, now look for any module triggers\n    this.searchTriggersRecursiveInnerFunction(this.element)\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger\n * -----------------------------------------------------------------------------\n */\nJss.prototype.trigger = function(which, fn) {\n    if (typeof this.triggers !== \"object\") {\n        console.info(\"No triggers are found, please specify them in the css as `module-name--trigger-name`.\");\n        return false;\n    }\n\n    if (typeof this.triggers[which] !== \"object\") {\n        console.info(\"You are trying to execute a function on a non existing trigger `\" + which + \"`\");\n        return false;\n    }\n\n    for (var i = 0; i < this.triggers[which].length; i++) {\n        fn(this.triggers[which][i])\n    }\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Search triggers recursive inner function\n * -----------------------------------------------------------------------------\n * Recursive function which is executed bij findTriggers;\n *\n * @return {undefined}\n */\nJss.prototype.searchTriggersRecursiveInnerFunction = function(element) {\n    var self = this;\n    if (typeof element == \"undefined\" ) {\n        element = this.element;\n    }\n    if ( element.hasChildNodes() ) {\n        for (var i=0; i < element.childNodes.length; i++) {\n\n            var childElement = element.childNodes[i];                           // Improve readability\n\n            if (childElement.nodeType == 1) {                                   // NodeType 1 == domElement\n\n                if (JssService.isTrigger(childElement, this.moduleName)) {\n\n                    // Add a child element\n                    if (JssService.triggerNameIsAllowed(childElement, this.moduleName)) {\n                        var triggerName = JssService.getTriggerName(childElement, this.moduleName)\n\n                        if (typeof self.triggers[triggerName] !== \"object\") {\n                            self.triggers[triggerName] = [];\n                        }\n\n                        var tmp = new JssTrigger(childElement, {\n                            module: self,\n                            moduleName: this.moduleName,\n                            triggerName: triggerName,\n                        });\n\n                        self.triggers[triggerName].push(tmp);\n                    }\n                }\n                if (childElement.hasChildNodes()) {\n                    self.searchTriggersRecursiveInnerFunction(childElement)\n                }\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Configure Trigger\n * -----------------------------------------------------------------------------\n *\n * @return {undefined}\n */\nJss.prototype.configureTrigger = function(trigger, fn) {\n    if ( typeof this.triggers[trigger] == \"object\") {\n\n        for (var i = 0; i < this.triggers[trigger].length; i++) {\n            //self.triggers[trigger][i]\n            fn(this.triggers[trigger][i]);\n        }\n\n    } else if (JssService.dev) {\n        console.error(\"You are trying to configure a trigger which has no attached domElement\")\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n *   Init\n * -----------------------------------------------------------------------------\n * Notice the user that a init function needs to be added for controlling the triggers\n *\n * @return {undefined}\n */\nJss.prototype.init = function(func) {\n    if (JssService.dev) {\n        console.info(this.moduleName + \": Add a prototype.init function to add triggers and stuff\")\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set element\n * -----------------------------------------------------------------------------\n * Add a domElement to `this`\n *\n * @return {undefined}\n */\nJss.prototype.setElement = function(element) {\n    if (typeof element == \"undefined\") {\n        if (JssService.dev) {\n            return console.error(\"First parameter of setElement needs to be a domElement\");\n        }\n    }\n    this.element = element;\n}\n/*******************************************************************************\n   *\n   *\tActions\n   *\n   *  \t@author      Jeffrey Arts <sjeffff@gmail.com>\n   *    @copyright   2015\n   *\n*******************************************************************************/\n/**\n * -----------------------------------------------------------------------------\n *   Validate action\n * -----------------------------------------------------------------------------\n * Checks if parameter is a valid action, and logs an error when not.\n *\n * @param {string} request                                                      The name of the request\n * @return {boolean} true if a action is valid, otherwise false.\n */\nJss.prototype.validateAction = function(request) {\n    var result;\n    request = this.getActionElement(request).request\n    for (var action in JssService.actions) {\n        if (JssService.actions[action].indexOf(request.toLowerCase()) > -1) {\n            result = action;\n            break;\n        }\n    }\n    if (result) {\n        return result;\n    } else {\n        console.error(\"validateAction: unknown request\", request);\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * \t Add Action\n * -----------------------------------------------------------------------------\n * Adds an action to the object, list of possible requests can be found in Jss.actions\n *\n * | Options\n * \t\t- addDefaults {boolean}                                                 True: add default classes, false: don't\n *\n *\n *\n * @param {string} request                                                      The name of the request\n * @param {function} fn                                                         The function which should be triggered\n * @param {object} options                                                      Object with option parameters\n * @return {boolean} true if a action is succesfully added, otherwise false.\n */\nJss.prototype.addAction = function(request, fn, options) {\n\n    var self        = this;\n    var action      = self.validateAction(request)\n    var actions     = [];\n    var t = self.getActionElement(request);\n    var element     = t.element;\n    var request     = t.request;\n    t = undefined;\n\n    // Options\n    var addDefaults = JssService.getOption(\"addDefaults\", options);\n\n\n\n    switch (action) {\n\n        case \"resize\":\n\n            actions.push(element.addEventListener(\"resize\", fn));\n\n        break;\n\n\n        case \"click\":\n            actions.push(element.addEventListener(\"click\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"click\", function(){\n                    self.setState(\"Clicked\")\n                }));\n                actions.push(window.addEventListener( \"click\", function(event) {\n                    if (event.target != self.element && self.hasState(\"Clicked\")) {\n                        self.removeState(\"Clicked\")\n                    }\n                }));\n            } // End addDefaults\n        break;\n\n\n        case \"change\":\n            actions.push(element.addEventListener(\"change\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"change\", function(){\n                    self.setState(\"Changed\")\n                    setTimeout(function(){self.removeState(\"Changed\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"hover\":\n            actions.push(element.addEventListener(\"mouseover\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseover\", function(){\n                    self.setState(\"Hover\")\n                }));\n                actions.push(element.addEventListener(\"mouseout\",  function(){\n                    self.removeState(\"Hover\")\n                }));\n            }\n        break;\n\n\n        case \"mouseIn\":\n\n            actions.push(element.addEventListener(\"mouseenter\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseenter\", function(){\n                    self.setState(\"MouseIn\")\n                    setTimeout(function(){self.removeState(\"MouseIn\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"mouseOut\":\n\n            actions.push(element.addEventListener(\"mouseleave\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseleave\", function(){\n                    self.setState(\"MouseOut\")\n                    setTimeout(function(){self.removeState(\"MouseOut\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n    }\n\n\n    if (actions.length > 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get action element\n * -----------------------------------------------------------------------------\n * @param  {string} request                                                     The request\n * @return {object}                                                             An object with 2 properties: request && element\n */\nJss.prototype.getActionElement = function(request) {\n    var self = this;\n    var prefix = false;\n    var newRequest  = request;\n    var element = self.element;\n    // Set prefix if it exists\n    if (request.indexOf(\".\") > 0) {\n        var t       = request.split(\".\"),\n        newRequest  = t[1];\n        prefix      = t[0];\n        t = undefined;\n    }\n\n    // Update element according the prefix (or skip it, if not set)\n    if (prefix !== false) {\n        switch (prefix) {\n            case \"screen\":\n            case \"window\":\n                element = window;\n            break;\n        }\n    }\n\n    // Return object\n    return {\n        request: newRequest,\n        element: element\n    }\n}\n/**\n * -----------------------------------------------------------------------------\n * Class name prefix\n * -----------------------------------------------------------------------------\n * The prefix equals the modulename, or - when it's a trigger object - modulename--triggername\n *\n * @return {string} The classname\n */\nJss.prototype.classNamePrefix = function() {\n    if (this.type == \"JssTrigger\") {\n        return this.moduleName + \"--\" + this.triggerName;\n    } else {\n        return this.moduleName;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Remove class name\n * -----------------------------------------------------------------------------\n * Removes the `this.element` classname\n * \t- \"all\" || undefined        > Removes ALL classnames\n *  - \"allStates\" || \"states\"   > Remove all STATES\n *  - all other strings remove that specific string from the className\n *\n * @param {string} input                                                        The classname (case-sensitive) which needs to be removed\n * @return {undefined}\n */\nJss.prototype.removeClassName = function(input) {\n\n    var classList  = [];\n\n    if (input == \"all\" || typeof input == \"undefined\") {\n\n        this.element.className = \"\";\n\n    } else if (input == \"states\" || input == \"allStates\") {\n\n        classList = this.element.className.split(\" \");\n        for (var i in classList) {\n            className = classList[i];\n            if (className.indexOf(\"__is\") > -1) {\n                delete classList[i];\n            }\n        }\n        this.element.className = classList.join(\" \");\n\n    } else if(typeof input == \"string\") {\n        this.element.className = this.element.className.replace(input,\"\");\n    } else {\n        console.error(\"removeClassName: parameter should be a string\");\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Add class name\n * -----------------------------------------------------------------------------\n * Adds a class name by string or array.\n * Does NOT check for duplicates\n *\n * @param  {string} The classname to be added\n * @return {undefined}\n */\nJss.prototype.addClassName = function(data) {\n    this.element.className += \" \";\n    if (typeof data == \"string\") {\n        this.element.className += data;\n    } else {\n        this.element.className += data.join(\" \")\n    }\n}\n\n/**\n * List where the keys corresponds with this[key], and where the value is the function to be executed when the var is changed.\n */\nJss.prototype.setterWatchList = {};\nJss.prototype.getterWatchList = {};\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add data\n * -----------------------------------------------------------------------------\n * Add a (default) value for the given attribute.\n *\n * @param {string} attribute                                                    The name of the attribute (this[attribute])\n * @param {*} value                                                             The value of this[attribute], could be anything...\n * @param {object} options\n *           \t\t- setterWatchFunction {function}\n *           \t\t- getterWatchFunction {function}\n */\nJss.prototype.addData = function(attribute, value, options) {\n\n\n    // watchList[key] = fn;\n    var setterWatchFunction = JssService.getOption('setterWatchFunction', options); // Function\n    var getterWatchFunction = JssService.getOption('getterWatchFunction', options); // Function\n\n    if (typeof setterWatchFunction === \"function\") {\n        this.setterWatchList[attribute] = setterWatchFunction;\n    }\n\n    if (typeof getterWatchFunction === \"function\") {\n        this.getterWatchList[attribute] = getterWatchFunction;\n    }\n\n    // Set the default value\n    return this[attribute] = value;\n}\n\n\n\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- ajax {string} url\n */\nJss.prototype.setData = function(attribute, value, options) {\n\n    this[attribute] = value;\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n\n    if (Array.isArray(fallback)) {\n\n        for (var i = 0; i < fallback.length; i++) {\n            var type = fallback[i];\n\n            if (value && value.length > 0) {\n                this['setData' + JssService.toCamelCase(type)](attribute, value); // Call this.addDataAttribute(value) || this.addDataCookie(value) etc...\n                this[attribute] = value;\n            }\n        }\n    }\n\n    // Call the setter watch function, if defined;\n    if (typeof this.setterWatchList[attribute] === \"function\") { // Use the watchlist to add functionality whenever a data attribute is updated\n        this.setterWatchList[attribute]();\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataDefault {boolean}\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- dataAjax {string} url\n */\nJss.prototype.getData = function(attribute, options) {\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n    var value = false;\n\n\n    if (!fallback) {\n        fallback = ['attribute'];\n    }\n\n\n    for (var i = 0; i < fallback.length; i++) {\n        var type = JssService.toCamelCase(fallback[i]);\n        var customOptions = false;\n\n        if (typeof options == \"object\") {\n            customOptions = options[fallback[i].toLowerCase()];\n        }\n\n        if (!value || value.length < 0) {\n            if (typeof this['getData' + type] !== \"function\") {\n                console.error('this.getData' + type + ' is not a function. Probably ' + type + ' is not a available data option');\n                continue;\n            }\n            value = this['getData' + type]( attribute, customOptions ); // Call this.getDataAttribute(value) || this.getDataCookie(value) || this.getDataAjax(value) etc...\n        }\n    }\n    console.log(this.getterWatchList);\n    // Call the getter watch function, if defined;\n    if (typeof this.getterWatchList[attribute] == \"function\") {\n        this.getterWatchList[attribute]();\n    }\n\n    return this[attribute] = value;\n}\n/**\n * -----------------------------------------------------------------------------\n * Get data: Ajax\n * -----------------------------------------------------------------------------\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n *\n * @param {string} attribute                                                    The NAME of the inner variable (this.NAME), is also used as the key for the GET Request {NAME: value}\n * @param {object} options                                                      Object with parameters used to make a GET request\n * @return {string}                                                             The value of the given attribute, or false if an erro occured.\n */\nJss.prototype.getDataAjax = function(attribute, options) {\n    var url = JssService.getOption(\"url\", options);\n    var jsonKey = JssService.getOption(\"jsonKey\", options) || attribute;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('GET', url);\n\n        return ajaxReturn.success(function(result){\n            if (typeof result === \"object\") {\n                if (result[jsonKey]) {\n                    return result[jsonKey];\n                }\n            }\n        }).error(function(errorObject){\n            console.log(errorObject);\n        });\n    }\n\n    return false;\n};\n\n/**\n * -----------------------------------------------------------------------------\n * Set data: Ajax\n * -----------------------------------------------------------------------------\n * Makes a post request to the options.url in a object {attribute: value}\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n */\nJss.prototype.setDataAjax = function(attribute, value, options) {\n    var url = JssService.getOption(\"url\", options);\n    var requestObject = {}\n        requestObject[attribute] = value;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('POST', url, requestObject);\n\n        return ajaxReturn.success(function(result){\n            return true;\n        }).error(function(errorObject){\n            console.log(errorObject);\n            return false;\n        });\n    }\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Ajax (helper function)\n * -----------------------------------------------------------------------------\n * Based on Atom.js by Todd Motto\n * http://toddmotto.com/writing-a-standalone-ajax-xhr-javascript-micro-library/\n */\nJss.prototype.ajaxHelper = {\n    // Parses json if possible, otherwise just return text\n    parse: function(req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return [result, req];\n    },\n\n    xhr: function(type, url, data) {\n        var ajaxHelper = this;\n\n        var methods = {\n            success: function() {},\n            error: function() {}\n        };\n        var XHR = XMLHttpRequest || ActiveXObject;\n        var request = new XHR('MSXML2.XMLHTTP.3.0');\n        request.open(type, url, true);\n        request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n\n        request.onreadystatechange = function() {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    methods.success.apply(methods, ajaxHelper.parse(request));\n                } else {\n                    methods.error.apply(methods, ajaxHelper.parse(request));\n                }\n            }\n        };\n        request.send(data);\n        return {\n            success: function(callback) {\n                methods.success = callback;\n                return methods;\n            },\n            error: function(callback) {\n                methods.error = callback;\n                return methods;\n            }\n        };\n    }\n};\n\nJss.prototype.ajax = {\n    // Get\n    get: function(src) {\n        console.log(this);\n    },\n\n    // Set\n    put: function(url, data) {\n        return this.ajaxHelper.xhr('PUT', url, data);\n    },\n\n    // Add\n    post: function(url, data) {\n        return this.ajaxHelper.xhr('POST', url, data);\n    }\n\n};\n/**\n * -----------------------------------------------------------------------------\n * Get data attribute value\n * -----------------------------------------------------------------------------\n * Returns the value of the requested attribute. Search first for a data-[ATTRIBUTE] value\n * If not found, it checks for the attribute in the default object. When that is not being\n * found neither, the normal this[attribute] value is being returned.\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME)\n * @return {string}                                                             The value of the given attribute\n */\nJss.prototype.getDataAttribute = function(attribute) {\n\n    return this.element.dataset[attribute];\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Update data attribute\n * -----------------------------------------------------------------------------\n * Set the value to the given attribute. And updates the data-[ATTRIBUTE] value\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME=\"value\")\n * @param {string} value                                                        The VALUE of the data attribute (data-name=\"VALUE\")\n * @return {undefined}\n */\n\nJss.prototype.setDataAttribute = function(attribute, value) {\n\n    // Update data attribute\n    if (typeof value !== \"undefined\") {\n        this.element.dataset[attribute] = this[attribute];\n    } else {\n        delete this.element.dataset[attribute];\n    }\n\n    return true;\n}\nJss.prototype.dataDefaultsCookie = {\n    'expireData': undefined\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get cookie value\n * -----------------------------------------------------------------------------\n * Returns cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @return {string}                                                             The VALUE of the given attribute\n */\nJss.prototype.getDataCookie = function(attribute) {\n\n    if (!attribute) { return null; }\n    return decodeURIComponent(document.cookie.replace(new RegExp(\"(?:(?:^|.*;)\\\\s*\" + encodeURIComponent(attribute).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"), \"$1\")) || null;\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data cookie\n * -----------------------------------------------------------------------------\n * Updates the cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @param {string} value                                                        The VALUE of the cookie\n * @return {undefined}\n */\n\nJss.prototype.setDataCookie = function(attribute, value, options) {\n    var endDate, path, domain, secureConnection;\n\n    if (typeof options === \"object\") {\n        endDate = JssService.getOption('endDate', options);\n        path    = JssService.getOption('path', options);\n        domain  = JssService.getOption('domain', options);\n        secureConnection = JssService.getOption('secureConnection', options);\n    }\n\n    if (!attribute || /^(?:expires|max\\-age|path|domain|secure)$/i.test(attribute)) { return false; }\n    var sExpires = \"\";\n    if (endDate) {\n      switch (endDate.constructor) {\n        case Number:\n          sExpires = endDate === Infinity ? \"; expires=Fri, 31 Dec 9999 23:59:59 GMT\" : \"; max-age=\" + endDate;\n          break;\n        case String:\n          sExpires = \"; expires=\" + endDate;\n          break;\n        case Date:\n          sExpires = \"; expires=\" + endDate.toUTCString();\n          break;\n      }\n    }\n\n    document.cookie = encodeURIComponent(attribute) + \"=\" + encodeURIComponent(value) + sExpires + (domain ? \"; domain=\" + domain : \"\") + (path ? \"; path=\" + path : \"\") + (secureConnection ? \"; secure\" : \"\");\n    return true;\n}\n/*******************************************************************************\n\n    Styles\n\n*******************************************************************************/\n\n/**\n * -----------------------------------------------------------------------------\n * Set height\n * -----------------------------------------------------------------------------\n * Sets the height of the `this.element` by the given input (height)\n *\n * @param  {number} height                                                      The height in pixels or percentage. Where numbers will be calculated to pixels so giving a height of 50 will result in a height of \"50px\". If you want percentages pass the variable with a percentage sign 50 + \"%\"\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setHeight = function(height) {\n    if (typeof height === \"number\") {\n        height += \"px\";\n    }\n\n    if (typeof height !== \"string\") {\n        throw(\"parameter height needs to be a string or integer\");\n    }\n\n    this.element.style.height = height;\n    return true;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get height\n * -----------------------------------------------------------------------------\n * Returns the height of the `this.element`\n *\n * @return {number}                                                             The height of the element in pixels\n */\nJss.prototype.getHeight = function() {\n    return this.element.offsetHeight;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set width\n * -----------------------------------------------------------------------------\n * Sets the width of the `this.element` by the given input (width)\n *\n * @param  {number} width                                                       The width in pixels or percentage. Where numbers will be calculated to pixels so giving a width of 50 will result in a width of \"50px\". If you want to set a percentage, just pass the variable with a percentage sign (\"50%\")\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setWidth = function(width) {\n    if (typeof width == \"number\") {\n        width += \"px\";\n    }\n\n    if (typeof width !== \"string\") {\n        throw(\"parameter width needs to be a string or integer\");\n    }\n    this.element.style.width = width;\n    return true;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get width\n * -----------------------------------------------------------------------------\n * Returns the width of the `this.element`\n *\n * @return {number}                                                             The width of the element in pixels\n */\nJss.prototype.getWidth = function() {\n    return this.element.offsetWidth;\n}\n/**\n * -----------------------------------------------------------------------------\n * Set State\n * -----------------------------------------------------------------------------\n * This updates the state of the object. States are being added to the class name prefix with a double underscore.\n * If you would have the module `envelope` and give it the state `open`. The class name `envelope__open` will be added.\n * Whenever you remove the state `open`, the according class name will be removed as well.\n *\n * @param  {string} str                                                         The name of the state which should be set (this is transformed to CamelCase)\n * @return {boolean}                                                            True on success, otherwise false (might already have the state)\n */\nJss.prototype.setState = function(str) {\n    var element, verifiedState, state, className;\n\n    element         = this.element;\n    state           = JssService.toCamelCase(str);\n    className       = this.classNamePrefix() + \"__is\" + state;\n\n    // Check if this.state is an array, and make it one if not.\n    if (Array.isArray(this.state) == false ) {\n        this.state = [];\n    }\n\n    // This if statement prevents that the same state is being set multiple times\n    if ( !this.hasState(str) ) {\n        this.addClassName(className)\n        this.state.push(state);\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Has state\n * -----------------------------------------------------------------------------\n * Checks if the parameter is already a state and returns true if so. Otherwise false.\n *\n * @param  {string} str                                                         The state which will be checked for\n * @return {boolean}                                                            True if it has the given state, otherwise false\n */\nJss.prototype.hasState = function(str) {\n    if (typeof this.state == \"object\" && this.state.indexOf(str) >= 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Remove state\n * -----------------------------------------------------------------------------\n * Removes the state from the states array, and from the element.className\n *\n * @param  {string} str                                                         The name of the state which should be removed\n * @return {undefined}\n */\nJss.prototype.removeState = function(str) {\n\n    var state      = JssService.toCamelCase(str);\n    var stateIndex = this.state.indexOf(state);\n\n    if (str == \"all\" || typeof str == \"undefined\") {\n        this.removeClassName(\"states\");\n    } else {\n        this.state.splice(stateIndex, 1);\n        if (typeof this.moduleAction != \"undefined\" && this.moduleAction.length > -1) {\n            this.removeClassName(this.classNamePrefix() + \"\" + this.moduleAction + \"__is\" + state);\n        } else {\n            this.removeClassName(this.classNamePrefix() + \"__is\" + state);\n        }\n    }\n}\n\n\n// A simple way to watch variables\n\n// addVar(keyName, value, watch_function)\n// setVar(keyName, value)\n// getVar(keyName)\n// Add -> new\n// Set -> update\n// Get -> return\nvar JssModule = function(){};\n\nJssModule.prototype.type               = \"JssModule\";\nJssModule.prototype.init               = Jss.prototype.init;\nJssModule.prototype.setElement         = Jss.prototype.setElement;\n\n// Triggers\nJssModule.prototype.findTriggers       = Jss.prototype.findTriggers;\nJssModule.prototype.configureTrigger      = Jss.prototype.configureTrigger;\n\n// Actions\n//JssModule.prototype.actions            = Object.create(Jss.prototype.actions);\nJssModule.prototype.validateAction     = Jss.prototype.validateAction;\nJssModule.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssModule.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssModule.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssModule.prototype.setState           = Jss.prototype.setState;\nJssModule.prototype.hasState           = Jss.prototype.hasState;\nJssModule.prototype.removeState        = Jss.prototype.removeState;\n\n// Data attributes\nJssModule.prototype.addData            = Jss.prototype.addData;\nJssModule.prototype.getData            = Jss.prototype.getData;\nJssModule.prototype.setData            = Jss.prototype.setData;\nvar JssTrigger = function(element, options) {\n    this.setElement(element);\n\n    if (typeof options === \"object\") {\n        if (typeof options.module === \"object\") {\n            this.module = options.module;\n        }\n        if (typeof options.moduleName === \"string\") {\n            this.moduleName = options.moduleName;\n        }\n        if (typeof options.triggerName === \"string\") {\n            this.triggerName = options.triggerName;\n        }\n    }\n}\n\n\nJssTrigger.prototype                    = Object.create(Jss.prototype);\nJssTrigger.prototype.type               = \"JssTrigger\";\nJssTrigger.prototype.setElement         = Jss.prototype.setElement;\n\n// Actions\n//JssTrigger.prototype.actions            = Object.create(Jss.prototype.actions);\nJssTrigger.prototype.validateAction     = Jss.prototype.validateAction;\nJssTrigger.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssTrigger.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssTrigger.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssTrigger.prototype.setState           = Jss.prototype.setState;\nJssTrigger.prototype.hasState           = Jss.prototype.hasState;\nJssTrigger.prototype.removeState        = Jss.prototype.removeState;\n\n\n\nvar  JssController = {};\nJssController.modules \t\t= []; // Result array with objects of all the found modules\nJssController.activeModules \t= JssService.activeModules;\n\nJssController.findModules = function() {\n    var allElements = document.getElementsByTagName(\"*\");                       // Array with all domElements\n    var test = [];\n    var self = this;\n    for (var i=0; i < allElements.length; i++) {\n\n        // Set default vars //\n        var element = allElements[i];                                           // Specific domElement\n        var tmp = false;\n\n        // Loop through the (active) modules array and add/instantiate them\n        self.activeModules.forEach(function(module){\n            if (JssService.isModule(element, module)) {\n                tmp = eval(\"new \" + JssService.toCamelCase(module) + \"(element)\"); // Dynamicly load modules\n\n                tmp.setElement(element);                                        // Add the domElement to the module\n                tmp.findTriggers();\t\t\t                                    // Search for module triggers\n\n                tmp.init();\t\t\t\t\t                                    // Executes everything within the init function\n                self.modules.push(tmp);\n\n            }\n        }); // End forEach\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    JssController.findModules();\n    console.log(JssController);\n});"
          },
          "params": [
            {
              "title": "param",
              "description": "domElement",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "element"
            },
            {
              "title": "param",
              "description": "Name of the module",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "moduleName"
            }
          ],
          "returns": [
            {
              "title": "returns",
              "description": "Name of the trigger.",
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ],
          "name": "getTriggerName",
          "kind": "function",
          "memberof": "JssService",
          "scope": "static",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            "JssService",
            "getTriggerName"
          ]
        },
        {
          "description": "-----------------------------------------------------------------------------\nIs Module\n-----------------------------------------------------------------------------",
          "tags": [
            {
              "title": "param",
              "description": "domElement",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "element"
            },
            {
              "title": "param",
              "description": "Name of the module",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "moduleName"
            },
            {
              "title": "returns",
              "description": "true if element is a module, otherwise false",
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            },
            {
              "title": "name",
              "name": "isModule"
            },
            {
              "title": "kind",
              "kind": "function"
            },
            {
              "title": "memberof",
              "description": "JssService"
            },
            {
              "title": "static"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 49,
                "column": 0
              },
              "end": {
                "line": 75,
                "column": 0
              }
            },
            "file": "/Users/jeffreyarts/Documents/DEV/jss/lib/jss.js",
            "code": "JssService = {};\n\n// Edit this array to enable or disable default modules\nJssService.activeModules   = []\n\n// Set this to false in a live environment\nJssService.dev             = true;\n\n/**************************\n*\n*   Below are core properties defined, becarefull when you think of changing these...\n*\n**************************/\n\n\nJssService.actions = {\n    hover:      ['hover',    'mouseover',   'onmouseover'                       ], // Fixed\n    click:      ['click',    'onclick'                                          ], // Fixed\n    mouseIn:    ['mousein',  'onmousein', 'mouseenter', 'onmouseenter'          ], // Fixed\n    mouseOut:   ['mouseout', 'onmouseout', 'mouseleave', 'onmouseleave'         ], // Fixed\n    resize:     ['resize',   'onresize'                                         ], // Fixed\n    focus:      ['focus',    'onfocus'                                          ],\n    keyDown:    ['keydown',  'keypress'                                         ],\n    keyUp:      ['keyup',    'keyrelease'                                       ],\n    change:     ['change',   'onchange'                                         ],\n};\n\nJssService.enterDelay = 1000;                                                   // Amount of miliseconds which is used to remove the entered state. (see core.actions) JssService.enterDelay setTimeout\n\nJssService.forbiddenProperties = [\n    'type',\n    'triggers',\n    'configureTrigger',\n    'findTriggers'\n];\n\n/**\n * -----------------------------------------------------------------------------\n * Is Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isModule = function(element, moduleName) {\n    var arr = element.className.split(\" \");\n    var found = false;\n\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i].indexOf(moduleName)        > -1 &&\n            arr[i].indexOf(moduleName + \"_\") == -1 &&\n            arr[i].indexOf(moduleName + \"-\") == -1)\n        {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.addModule = function(moduleName) {\n    this.activeModules.push(this.toKebabCase(moduleName))\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To CamelCase\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toCamelCase = function(input) {\n    var arr, res;\n    res = \"\";\n    if (typeof input === \"string\") {\n        input = input.replace(/\\-/g,\" \");                                       // Replace all dashes with spaces\n        arr = input.split(\" \");\n    } else {\n        arr = input;                                                            // Assume it is an array\n    }\n\n\n\n    var i = 0;\n    for (var i in arr) {\n        if (typeof i != \"undefined\") {\n            res += arr[i][0].toUpperCase()+ arr[i].slice(1); // Capitalize first letter\n        }\n    }\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To kebab-case\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toKebabCase = function(input) {\n    var res, str;\n    res = \"\";\n\n    if (typeof input === \"string\") {\n        str = input;\n    } else {                                                                    // Assume it is an array\n        str = input.join(\" \");\n    }\n\n    // First change it to camelcase\n    str = this.toCamelCase(str);\n\n    var max = str.length;\n    for (var i=0; i < max; i++) {\n        // Check if character is uppercase\n        if (str[i] != str[i].toLowerCase()) {\n            if (i!==0) {\n                str = str.substr(0, i) + \"-\" + str.substr(i);\n                i++;\n            }\n        }\n    }\n\n    return res = str.toLowerCase();\n}\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get option\n * -----------------------------------------------------------------------------\n * @param  {string} name                                                        Keyname in optionList\n * @param  {array} optionList                                                   Array with all possible options\n * @return {}                                                                   Copy of the value (optionsList[name])\n */\nJssService.getOption = function(name, optionList) {\n    if (typeof optionList !== \"object\") {\n        return false;\n    }\n\n    var res;\n\n    switch (name) {\n\n        // Only set `addDefaults` to false when it is explicitly set.\n        case \"addDefaults\":\n            if (optionList[name] !== false || typeof optionList[name] === \"undefined\") {\n                res = true;\n            } else {\n                res = false;\n            }\n        break;\n        case \"fallback\":\n            if ( Array.isArray(optionList[name]) ) {\n                res = optionList[name];\n                if (res.length===0) {\n                    res = false;\n                }\n            } else if (typeof optionList[name] === \"string\"){\n                res = [optionList[name]];\n            }\n        break;\n        default:\n        res = optionList[name]\n    }\n\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Is Trigger\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isTrigger = function(element, moduleName) {\n    if (element.className.indexOf(moduleName + \"--\") > -1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get trigger name\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {string} Name of the trigger.\n */\nJssService.getTriggerName = function(element, moduleName) {\n    if (typeof element != \"object\") {\n        console.error('Required first argument `element` needs to be a domElement.');\n        return false;\n    }\n    if (typeof moduleName != \"string\") {\n        console.error('Required second argument `moduleName` needs to be a string.');\n        return false;\n    }\n\n    // As an example we assume that the value of element.className equals 'b module--triggerName'\n    var startPos = element.className.indexOf(moduleName + \"--\");                    // 2\n    var sliced = element.className.slice(startPos, element.className.length )       // 'module--triggerName'\n    var endPos = sliced.indexOf(\" \");                                               // -1       // not found\n    if (endPos != -1) {                                                             // 19\n        sliced = sliced.slice(0,endPos);                                            // if there is more after the string, this will remove it\n    }\n    return sliced.replace(moduleName + \"--\",\"\")\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger name is allowed\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} True if the triggername is allowed, otherwise false.\n */\nJssService.triggerNameIsAllowed = function(element, moduleName) {\n    if (JssService.forbiddenProperties.indexOf(this.getTriggerName(element, moduleName)) > -1) {      // This triggerName is a core property, throw error\n        console.error('Triggername `' + getTriggerName(element,moduleName) + '` is not allowed. Change the trigger so it does not corresponds any of these: ' + JssService.forbiddenProperties)\n        return false;\n    }\n    return true;\n}\n/**\n * @module Jss\n * @author      Jeffrey Arts <sjeffff@gmail.com>\n * @copyright   2015\n */\nJss = function(){};\n\nJss.prototype.type      = \"Jss\"\nJss.prototype.triggers  = false;\nJss.prototype.element   = undefined;                                              // {obj} domElement\nJss.prototype.state     = undefined;                                              // {str} State of module, is reflected by the css class __isState\n\n/**\n * -----------------------------------------------------------------------------\n * Find Triggers\n * -----------------------------------------------------------------------------\n *\n * @param {domElement} element\n * @return {undefined}\n */\nJss.prototype.findTriggers = function(element) {\n    this.triggers = [];                                                         // If this is not set, all modules will have the same reference point to this.triggers.\n    // Module is created, now look for any module triggers\n    this.searchTriggersRecursiveInnerFunction(this.element)\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger\n * -----------------------------------------------------------------------------\n */\nJss.prototype.trigger = function(which, fn) {\n    if (typeof this.triggers !== \"object\") {\n        console.info(\"No triggers are found, please specify them in the css as `module-name--trigger-name`.\");\n        return false;\n    }\n\n    if (typeof this.triggers[which] !== \"object\") {\n        console.info(\"You are trying to execute a function on a non existing trigger `\" + which + \"`\");\n        return false;\n    }\n\n    for (var i = 0; i < this.triggers[which].length; i++) {\n        fn(this.triggers[which][i])\n    }\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Search triggers recursive inner function\n * -----------------------------------------------------------------------------\n * Recursive function which is executed bij findTriggers;\n *\n * @return {undefined}\n */\nJss.prototype.searchTriggersRecursiveInnerFunction = function(element) {\n    var self = this;\n    if (typeof element == \"undefined\" ) {\n        element = this.element;\n    }\n    if ( element.hasChildNodes() ) {\n        for (var i=0; i < element.childNodes.length; i++) {\n\n            var childElement = element.childNodes[i];                           // Improve readability\n\n            if (childElement.nodeType == 1) {                                   // NodeType 1 == domElement\n\n                if (JssService.isTrigger(childElement, this.moduleName)) {\n\n                    // Add a child element\n                    if (JssService.triggerNameIsAllowed(childElement, this.moduleName)) {\n                        var triggerName = JssService.getTriggerName(childElement, this.moduleName)\n\n                        if (typeof self.triggers[triggerName] !== \"object\") {\n                            self.triggers[triggerName] = [];\n                        }\n\n                        var tmp = new JssTrigger(childElement, {\n                            module: self,\n                            moduleName: this.moduleName,\n                            triggerName: triggerName,\n                        });\n\n                        self.triggers[triggerName].push(tmp);\n                    }\n                }\n                if (childElement.hasChildNodes()) {\n                    self.searchTriggersRecursiveInnerFunction(childElement)\n                }\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Configure Trigger\n * -----------------------------------------------------------------------------\n *\n * @return {undefined}\n */\nJss.prototype.configureTrigger = function(trigger, fn) {\n    if ( typeof this.triggers[trigger] == \"object\") {\n\n        for (var i = 0; i < this.triggers[trigger].length; i++) {\n            //self.triggers[trigger][i]\n            fn(this.triggers[trigger][i]);\n        }\n\n    } else if (JssService.dev) {\n        console.error(\"You are trying to configure a trigger which has no attached domElement\")\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n *   Init\n * -----------------------------------------------------------------------------\n * Notice the user that a init function needs to be added for controlling the triggers\n *\n * @return {undefined}\n */\nJss.prototype.init = function(func) {\n    if (JssService.dev) {\n        console.info(this.moduleName + \": Add a prototype.init function to add triggers and stuff\")\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set element\n * -----------------------------------------------------------------------------\n * Add a domElement to `this`\n *\n * @return {undefined}\n */\nJss.prototype.setElement = function(element) {\n    if (typeof element == \"undefined\") {\n        if (JssService.dev) {\n            return console.error(\"First parameter of setElement needs to be a domElement\");\n        }\n    }\n    this.element = element;\n}\n/*******************************************************************************\n   *\n   *\tActions\n   *\n   *  \t@author      Jeffrey Arts <sjeffff@gmail.com>\n   *    @copyright   2015\n   *\n*******************************************************************************/\n/**\n * -----------------------------------------------------------------------------\n *   Validate action\n * -----------------------------------------------------------------------------\n * Checks if parameter is a valid action, and logs an error when not.\n *\n * @param {string} request                                                      The name of the request\n * @return {boolean} true if a action is valid, otherwise false.\n */\nJss.prototype.validateAction = function(request) {\n    var result;\n    request = this.getActionElement(request).request\n    for (var action in JssService.actions) {\n        if (JssService.actions[action].indexOf(request.toLowerCase()) > -1) {\n            result = action;\n            break;\n        }\n    }\n    if (result) {\n        return result;\n    } else {\n        console.error(\"validateAction: unknown request\", request);\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * \t Add Action\n * -----------------------------------------------------------------------------\n * Adds an action to the object, list of possible requests can be found in Jss.actions\n *\n * | Options\n * \t\t- addDefaults {boolean}                                                 True: add default classes, false: don't\n *\n *\n *\n * @param {string} request                                                      The name of the request\n * @param {function} fn                                                         The function which should be triggered\n * @param {object} options                                                      Object with option parameters\n * @return {boolean} true if a action is succesfully added, otherwise false.\n */\nJss.prototype.addAction = function(request, fn, options) {\n\n    var self        = this;\n    var action      = self.validateAction(request)\n    var actions     = [];\n    var t = self.getActionElement(request);\n    var element     = t.element;\n    var request     = t.request;\n    t = undefined;\n\n    // Options\n    var addDefaults = JssService.getOption(\"addDefaults\", options);\n\n\n\n    switch (action) {\n\n        case \"resize\":\n\n            actions.push(element.addEventListener(\"resize\", fn));\n\n        break;\n\n\n        case \"click\":\n            actions.push(element.addEventListener(\"click\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"click\", function(){\n                    self.setState(\"Clicked\")\n                }));\n                actions.push(window.addEventListener( \"click\", function(event) {\n                    if (event.target != self.element && self.hasState(\"Clicked\")) {\n                        self.removeState(\"Clicked\")\n                    }\n                }));\n            } // End addDefaults\n        break;\n\n\n        case \"change\":\n            actions.push(element.addEventListener(\"change\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"change\", function(){\n                    self.setState(\"Changed\")\n                    setTimeout(function(){self.removeState(\"Changed\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"hover\":\n            actions.push(element.addEventListener(\"mouseover\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseover\", function(){\n                    self.setState(\"Hover\")\n                }));\n                actions.push(element.addEventListener(\"mouseout\",  function(){\n                    self.removeState(\"Hover\")\n                }));\n            }\n        break;\n\n\n        case \"mouseIn\":\n\n            actions.push(element.addEventListener(\"mouseenter\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseenter\", function(){\n                    self.setState(\"MouseIn\")\n                    setTimeout(function(){self.removeState(\"MouseIn\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"mouseOut\":\n\n            actions.push(element.addEventListener(\"mouseleave\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseleave\", function(){\n                    self.setState(\"MouseOut\")\n                    setTimeout(function(){self.removeState(\"MouseOut\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n    }\n\n\n    if (actions.length > 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get action element\n * -----------------------------------------------------------------------------\n * @param  {string} request                                                     The request\n * @return {object}                                                             An object with 2 properties: request && element\n */\nJss.prototype.getActionElement = function(request) {\n    var self = this;\n    var prefix = false;\n    var newRequest  = request;\n    var element = self.element;\n    // Set prefix if it exists\n    if (request.indexOf(\".\") > 0) {\n        var t       = request.split(\".\"),\n        newRequest  = t[1];\n        prefix      = t[0];\n        t = undefined;\n    }\n\n    // Update element according the prefix (or skip it, if not set)\n    if (prefix !== false) {\n        switch (prefix) {\n            case \"screen\":\n            case \"window\":\n                element = window;\n            break;\n        }\n    }\n\n    // Return object\n    return {\n        request: newRequest,\n        element: element\n    }\n}\n/**\n * -----------------------------------------------------------------------------\n * Class name prefix\n * -----------------------------------------------------------------------------\n * The prefix equals the modulename, or - when it's a trigger object - modulename--triggername\n *\n * @return {string} The classname\n */\nJss.prototype.classNamePrefix = function() {\n    if (this.type == \"JssTrigger\") {\n        return this.moduleName + \"--\" + this.triggerName;\n    } else {\n        return this.moduleName;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Remove class name\n * -----------------------------------------------------------------------------\n * Removes the `this.element` classname\n * \t- \"all\" || undefined        > Removes ALL classnames\n *  - \"allStates\" || \"states\"   > Remove all STATES\n *  - all other strings remove that specific string from the className\n *\n * @param {string} input                                                        The classname (case-sensitive) which needs to be removed\n * @return {undefined}\n */\nJss.prototype.removeClassName = function(input) {\n\n    var classList  = [];\n\n    if (input == \"all\" || typeof input == \"undefined\") {\n\n        this.element.className = \"\";\n\n    } else if (input == \"states\" || input == \"allStates\") {\n\n        classList = this.element.className.split(\" \");\n        for (var i in classList) {\n            className = classList[i];\n            if (className.indexOf(\"__is\") > -1) {\n                delete classList[i];\n            }\n        }\n        this.element.className = classList.join(\" \");\n\n    } else if(typeof input == \"string\") {\n        this.element.className = this.element.className.replace(input,\"\");\n    } else {\n        console.error(\"removeClassName: parameter should be a string\");\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Add class name\n * -----------------------------------------------------------------------------\n * Adds a class name by string or array.\n * Does NOT check for duplicates\n *\n * @param  {string} The classname to be added\n * @return {undefined}\n */\nJss.prototype.addClassName = function(data) {\n    this.element.className += \" \";\n    if (typeof data == \"string\") {\n        this.element.className += data;\n    } else {\n        this.element.className += data.join(\" \")\n    }\n}\n\n/**\n * List where the keys corresponds with this[key], and where the value is the function to be executed when the var is changed.\n */\nJss.prototype.setterWatchList = {};\nJss.prototype.getterWatchList = {};\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add data\n * -----------------------------------------------------------------------------\n * Add a (default) value for the given attribute.\n *\n * @param {string} attribute                                                    The name of the attribute (this[attribute])\n * @param {*} value                                                             The value of this[attribute], could be anything...\n * @param {object} options\n *           \t\t- setterWatchFunction {function}\n *           \t\t- getterWatchFunction {function}\n */\nJss.prototype.addData = function(attribute, value, options) {\n\n\n    // watchList[key] = fn;\n    var setterWatchFunction = JssService.getOption('setterWatchFunction', options); // Function\n    var getterWatchFunction = JssService.getOption('getterWatchFunction', options); // Function\n\n    if (typeof setterWatchFunction === \"function\") {\n        this.setterWatchList[attribute] = setterWatchFunction;\n    }\n\n    if (typeof getterWatchFunction === \"function\") {\n        this.getterWatchList[attribute] = getterWatchFunction;\n    }\n\n    // Set the default value\n    return this[attribute] = value;\n}\n\n\n\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- ajax {string} url\n */\nJss.prototype.setData = function(attribute, value, options) {\n\n    this[attribute] = value;\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n\n    if (Array.isArray(fallback)) {\n\n        for (var i = 0; i < fallback.length; i++) {\n            var type = fallback[i];\n\n            if (value && value.length > 0) {\n                this['setData' + JssService.toCamelCase(type)](attribute, value); // Call this.addDataAttribute(value) || this.addDataCookie(value) etc...\n                this[attribute] = value;\n            }\n        }\n    }\n\n    // Call the setter watch function, if defined;\n    if (typeof this.setterWatchList[attribute] === \"function\") { // Use the watchlist to add functionality whenever a data attribute is updated\n        this.setterWatchList[attribute]();\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataDefault {boolean}\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- dataAjax {string} url\n */\nJss.prototype.getData = function(attribute, options) {\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n    var value = false;\n\n\n    if (!fallback) {\n        fallback = ['attribute'];\n    }\n\n\n    for (var i = 0; i < fallback.length; i++) {\n        var type = JssService.toCamelCase(fallback[i]);\n        var customOptions = false;\n\n        if (typeof options == \"object\") {\n            customOptions = options[fallback[i].toLowerCase()];\n        }\n\n        if (!value || value.length < 0) {\n            if (typeof this['getData' + type] !== \"function\") {\n                console.error('this.getData' + type + ' is not a function. Probably ' + type + ' is not a available data option');\n                continue;\n            }\n            value = this['getData' + type]( attribute, customOptions ); // Call this.getDataAttribute(value) || this.getDataCookie(value) || this.getDataAjax(value) etc...\n        }\n    }\n    console.log(this.getterWatchList);\n    // Call the getter watch function, if defined;\n    if (typeof this.getterWatchList[attribute] == \"function\") {\n        this.getterWatchList[attribute]();\n    }\n\n    return this[attribute] = value;\n}\n/**\n * -----------------------------------------------------------------------------\n * Get data: Ajax\n * -----------------------------------------------------------------------------\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n *\n * @param {string} attribute                                                    The NAME of the inner variable (this.NAME), is also used as the key for the GET Request {NAME: value}\n * @param {object} options                                                      Object with parameters used to make a GET request\n * @return {string}                                                             The value of the given attribute, or false if an erro occured.\n */\nJss.prototype.getDataAjax = function(attribute, options) {\n    var url = JssService.getOption(\"url\", options);\n    var jsonKey = JssService.getOption(\"jsonKey\", options) || attribute;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('GET', url);\n\n        return ajaxReturn.success(function(result){\n            if (typeof result === \"object\") {\n                if (result[jsonKey]) {\n                    return result[jsonKey];\n                }\n            }\n        }).error(function(errorObject){\n            console.log(errorObject);\n        });\n    }\n\n    return false;\n};\n\n/**\n * -----------------------------------------------------------------------------\n * Set data: Ajax\n * -----------------------------------------------------------------------------\n * Makes a post request to the options.url in a object {attribute: value}\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n */\nJss.prototype.setDataAjax = function(attribute, value, options) {\n    var url = JssService.getOption(\"url\", options);\n    var requestObject = {}\n        requestObject[attribute] = value;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('POST', url, requestObject);\n\n        return ajaxReturn.success(function(result){\n            return true;\n        }).error(function(errorObject){\n            console.log(errorObject);\n            return false;\n        });\n    }\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Ajax (helper function)\n * -----------------------------------------------------------------------------\n * Based on Atom.js by Todd Motto\n * http://toddmotto.com/writing-a-standalone-ajax-xhr-javascript-micro-library/\n */\nJss.prototype.ajaxHelper = {\n    // Parses json if possible, otherwise just return text\n    parse: function(req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return [result, req];\n    },\n\n    xhr: function(type, url, data) {\n        var ajaxHelper = this;\n\n        var methods = {\n            success: function() {},\n            error: function() {}\n        };\n        var XHR = XMLHttpRequest || ActiveXObject;\n        var request = new XHR('MSXML2.XMLHTTP.3.0');\n        request.open(type, url, true);\n        request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n\n        request.onreadystatechange = function() {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    methods.success.apply(methods, ajaxHelper.parse(request));\n                } else {\n                    methods.error.apply(methods, ajaxHelper.parse(request));\n                }\n            }\n        };\n        request.send(data);\n        return {\n            success: function(callback) {\n                methods.success = callback;\n                return methods;\n            },\n            error: function(callback) {\n                methods.error = callback;\n                return methods;\n            }\n        };\n    }\n};\n\nJss.prototype.ajax = {\n    // Get\n    get: function(src) {\n        console.log(this);\n    },\n\n    // Set\n    put: function(url, data) {\n        return this.ajaxHelper.xhr('PUT', url, data);\n    },\n\n    // Add\n    post: function(url, data) {\n        return this.ajaxHelper.xhr('POST', url, data);\n    }\n\n};\n/**\n * -----------------------------------------------------------------------------\n * Get data attribute value\n * -----------------------------------------------------------------------------\n * Returns the value of the requested attribute. Search first for a data-[ATTRIBUTE] value\n * If not found, it checks for the attribute in the default object. When that is not being\n * found neither, the normal this[attribute] value is being returned.\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME)\n * @return {string}                                                             The value of the given attribute\n */\nJss.prototype.getDataAttribute = function(attribute) {\n\n    return this.element.dataset[attribute];\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Update data attribute\n * -----------------------------------------------------------------------------\n * Set the value to the given attribute. And updates the data-[ATTRIBUTE] value\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME=\"value\")\n * @param {string} value                                                        The VALUE of the data attribute (data-name=\"VALUE\")\n * @return {undefined}\n */\n\nJss.prototype.setDataAttribute = function(attribute, value) {\n\n    // Update data attribute\n    if (typeof value !== \"undefined\") {\n        this.element.dataset[attribute] = this[attribute];\n    } else {\n        delete this.element.dataset[attribute];\n    }\n\n    return true;\n}\nJss.prototype.dataDefaultsCookie = {\n    'expireData': undefined\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get cookie value\n * -----------------------------------------------------------------------------\n * Returns cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @return {string}                                                             The VALUE of the given attribute\n */\nJss.prototype.getDataCookie = function(attribute) {\n\n    if (!attribute) { return null; }\n    return decodeURIComponent(document.cookie.replace(new RegExp(\"(?:(?:^|.*;)\\\\s*\" + encodeURIComponent(attribute).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"), \"$1\")) || null;\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data cookie\n * -----------------------------------------------------------------------------\n * Updates the cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @param {string} value                                                        The VALUE of the cookie\n * @return {undefined}\n */\n\nJss.prototype.setDataCookie = function(attribute, value, options) {\n    var endDate, path, domain, secureConnection;\n\n    if (typeof options === \"object\") {\n        endDate = JssService.getOption('endDate', options);\n        path    = JssService.getOption('path', options);\n        domain  = JssService.getOption('domain', options);\n        secureConnection = JssService.getOption('secureConnection', options);\n    }\n\n    if (!attribute || /^(?:expires|max\\-age|path|domain|secure)$/i.test(attribute)) { return false; }\n    var sExpires = \"\";\n    if (endDate) {\n      switch (endDate.constructor) {\n        case Number:\n          sExpires = endDate === Infinity ? \"; expires=Fri, 31 Dec 9999 23:59:59 GMT\" : \"; max-age=\" + endDate;\n          break;\n        case String:\n          sExpires = \"; expires=\" + endDate;\n          break;\n        case Date:\n          sExpires = \"; expires=\" + endDate.toUTCString();\n          break;\n      }\n    }\n\n    document.cookie = encodeURIComponent(attribute) + \"=\" + encodeURIComponent(value) + sExpires + (domain ? \"; domain=\" + domain : \"\") + (path ? \"; path=\" + path : \"\") + (secureConnection ? \"; secure\" : \"\");\n    return true;\n}\n/*******************************************************************************\n\n    Styles\n\n*******************************************************************************/\n\n/**\n * -----------------------------------------------------------------------------\n * Set height\n * -----------------------------------------------------------------------------\n * Sets the height of the `this.element` by the given input (height)\n *\n * @param  {number} height                                                      The height in pixels or percentage. Where numbers will be calculated to pixels so giving a height of 50 will result in a height of \"50px\". If you want percentages pass the variable with a percentage sign 50 + \"%\"\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setHeight = function(height) {\n    if (typeof height === \"number\") {\n        height += \"px\";\n    }\n\n    if (typeof height !== \"string\") {\n        throw(\"parameter height needs to be a string or integer\");\n    }\n\n    this.element.style.height = height;\n    return true;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get height\n * -----------------------------------------------------------------------------\n * Returns the height of the `this.element`\n *\n * @return {number}                                                             The height of the element in pixels\n */\nJss.prototype.getHeight = function() {\n    return this.element.offsetHeight;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set width\n * -----------------------------------------------------------------------------\n * Sets the width of the `this.element` by the given input (width)\n *\n * @param  {number} width                                                       The width in pixels or percentage. Where numbers will be calculated to pixels so giving a width of 50 will result in a width of \"50px\". If you want to set a percentage, just pass the variable with a percentage sign (\"50%\")\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setWidth = function(width) {\n    if (typeof width == \"number\") {\n        width += \"px\";\n    }\n\n    if (typeof width !== \"string\") {\n        throw(\"parameter width needs to be a string or integer\");\n    }\n    this.element.style.width = width;\n    return true;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get width\n * -----------------------------------------------------------------------------\n * Returns the width of the `this.element`\n *\n * @return {number}                                                             The width of the element in pixels\n */\nJss.prototype.getWidth = function() {\n    return this.element.offsetWidth;\n}\n/**\n * -----------------------------------------------------------------------------\n * Set State\n * -----------------------------------------------------------------------------\n * This updates the state of the object. States are being added to the class name prefix with a double underscore.\n * If you would have the module `envelope` and give it the state `open`. The class name `envelope__open` will be added.\n * Whenever you remove the state `open`, the according class name will be removed as well.\n *\n * @param  {string} str                                                         The name of the state which should be set (this is transformed to CamelCase)\n * @return {boolean}                                                            True on success, otherwise false (might already have the state)\n */\nJss.prototype.setState = function(str) {\n    var element, verifiedState, state, className;\n\n    element         = this.element;\n    state           = JssService.toCamelCase(str);\n    className       = this.classNamePrefix() + \"__is\" + state;\n\n    // Check if this.state is an array, and make it one if not.\n    if (Array.isArray(this.state) == false ) {\n        this.state = [];\n    }\n\n    // This if statement prevents that the same state is being set multiple times\n    if ( !this.hasState(str) ) {\n        this.addClassName(className)\n        this.state.push(state);\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Has state\n * -----------------------------------------------------------------------------\n * Checks if the parameter is already a state and returns true if so. Otherwise false.\n *\n * @param  {string} str                                                         The state which will be checked for\n * @return {boolean}                                                            True if it has the given state, otherwise false\n */\nJss.prototype.hasState = function(str) {\n    if (typeof this.state == \"object\" && this.state.indexOf(str) >= 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Remove state\n * -----------------------------------------------------------------------------\n * Removes the state from the states array, and from the element.className\n *\n * @param  {string} str                                                         The name of the state which should be removed\n * @return {undefined}\n */\nJss.prototype.removeState = function(str) {\n\n    var state      = JssService.toCamelCase(str);\n    var stateIndex = this.state.indexOf(state);\n\n    if (str == \"all\" || typeof str == \"undefined\") {\n        this.removeClassName(\"states\");\n    } else {\n        this.state.splice(stateIndex, 1);\n        if (typeof this.moduleAction != \"undefined\" && this.moduleAction.length > -1) {\n            this.removeClassName(this.classNamePrefix() + \"\" + this.moduleAction + \"__is\" + state);\n        } else {\n            this.removeClassName(this.classNamePrefix() + \"__is\" + state);\n        }\n    }\n}\n\n\n// A simple way to watch variables\n\n// addVar(keyName, value, watch_function)\n// setVar(keyName, value)\n// getVar(keyName)\n// Add -> new\n// Set -> update\n// Get -> return\nvar JssModule = function(){};\n\nJssModule.prototype.type               = \"JssModule\";\nJssModule.prototype.init               = Jss.prototype.init;\nJssModule.prototype.setElement         = Jss.prototype.setElement;\n\n// Triggers\nJssModule.prototype.findTriggers       = Jss.prototype.findTriggers;\nJssModule.prototype.configureTrigger      = Jss.prototype.configureTrigger;\n\n// Actions\n//JssModule.prototype.actions            = Object.create(Jss.prototype.actions);\nJssModule.prototype.validateAction     = Jss.prototype.validateAction;\nJssModule.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssModule.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssModule.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssModule.prototype.setState           = Jss.prototype.setState;\nJssModule.prototype.hasState           = Jss.prototype.hasState;\nJssModule.prototype.removeState        = Jss.prototype.removeState;\n\n// Data attributes\nJssModule.prototype.addData            = Jss.prototype.addData;\nJssModule.prototype.getData            = Jss.prototype.getData;\nJssModule.prototype.setData            = Jss.prototype.setData;\nvar JssTrigger = function(element, options) {\n    this.setElement(element);\n\n    if (typeof options === \"object\") {\n        if (typeof options.module === \"object\") {\n            this.module = options.module;\n        }\n        if (typeof options.moduleName === \"string\") {\n            this.moduleName = options.moduleName;\n        }\n        if (typeof options.triggerName === \"string\") {\n            this.triggerName = options.triggerName;\n        }\n    }\n}\n\n\nJssTrigger.prototype                    = Object.create(Jss.prototype);\nJssTrigger.prototype.type               = \"JssTrigger\";\nJssTrigger.prototype.setElement         = Jss.prototype.setElement;\n\n// Actions\n//JssTrigger.prototype.actions            = Object.create(Jss.prototype.actions);\nJssTrigger.prototype.validateAction     = Jss.prototype.validateAction;\nJssTrigger.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssTrigger.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssTrigger.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssTrigger.prototype.setState           = Jss.prototype.setState;\nJssTrigger.prototype.hasState           = Jss.prototype.hasState;\nJssTrigger.prototype.removeState        = Jss.prototype.removeState;\n\n\n\nvar  JssController = {};\nJssController.modules \t\t= []; // Result array with objects of all the found modules\nJssController.activeModules \t= JssService.activeModules;\n\nJssController.findModules = function() {\n    var allElements = document.getElementsByTagName(\"*\");                       // Array with all domElements\n    var test = [];\n    var self = this;\n    for (var i=0; i < allElements.length; i++) {\n\n        // Set default vars //\n        var element = allElements[i];                                           // Specific domElement\n        var tmp = false;\n\n        // Loop through the (active) modules array and add/instantiate them\n        self.activeModules.forEach(function(module){\n            if (JssService.isModule(element, module)) {\n                tmp = eval(\"new \" + JssService.toCamelCase(module) + \"(element)\"); // Dynamicly load modules\n\n                tmp.setElement(element);                                        // Add the domElement to the module\n                tmp.findTriggers();\t\t\t                                    // Search for module triggers\n\n                tmp.init();\t\t\t\t\t                                    // Executes everything within the init function\n                self.modules.push(tmp);\n\n            }\n        }); // End forEach\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    JssController.findModules();\n    console.log(JssController);\n});"
          },
          "params": [
            {
              "title": "param",
              "description": "domElement",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "element"
            },
            {
              "title": "param",
              "description": "Name of the module",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "moduleName"
            }
          ],
          "returns": [
            {
              "title": "returns",
              "description": "true if element is a module, otherwise false",
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          ],
          "name": "isModule",
          "kind": "function",
          "memberof": "JssService",
          "scope": "static",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            "JssService",
            "isModule"
          ]
        },
        {
          "description": "-----------------------------------------------------------------------------\nIs Trigger\n-----------------------------------------------------------------------------",
          "tags": [
            {
              "title": "param",
              "description": "domElement",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "element"
            },
            {
              "title": "param",
              "description": "Name of the module",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "moduleName"
            },
            {
              "title": "returns",
              "description": "true if element is a module, otherwise false",
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            },
            {
              "title": "name",
              "name": "isTrigger"
            },
            {
              "title": "kind",
              "kind": "function"
            },
            {
              "title": "memberof",
              "description": "JssService"
            },
            {
              "title": "static"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 196,
                "column": 0
              },
              "end": {
                "line": 213,
                "column": 0
              }
            },
            "file": "/Users/jeffreyarts/Documents/DEV/jss/lib/jss.js",
            "code": "JssService = {};\n\n// Edit this array to enable or disable default modules\nJssService.activeModules   = []\n\n// Set this to false in a live environment\nJssService.dev             = true;\n\n/**************************\n*\n*   Below are core properties defined, becarefull when you think of changing these...\n*\n**************************/\n\n\nJssService.actions = {\n    hover:      ['hover',    'mouseover',   'onmouseover'                       ], // Fixed\n    click:      ['click',    'onclick'                                          ], // Fixed\n    mouseIn:    ['mousein',  'onmousein', 'mouseenter', 'onmouseenter'          ], // Fixed\n    mouseOut:   ['mouseout', 'onmouseout', 'mouseleave', 'onmouseleave'         ], // Fixed\n    resize:     ['resize',   'onresize'                                         ], // Fixed\n    focus:      ['focus',    'onfocus'                                          ],\n    keyDown:    ['keydown',  'keypress'                                         ],\n    keyUp:      ['keyup',    'keyrelease'                                       ],\n    change:     ['change',   'onchange'                                         ],\n};\n\nJssService.enterDelay = 1000;                                                   // Amount of miliseconds which is used to remove the entered state. (see core.actions) JssService.enterDelay setTimeout\n\nJssService.forbiddenProperties = [\n    'type',\n    'triggers',\n    'configureTrigger',\n    'findTriggers'\n];\n\n/**\n * -----------------------------------------------------------------------------\n * Is Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isModule = function(element, moduleName) {\n    var arr = element.className.split(\" \");\n    var found = false;\n\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i].indexOf(moduleName)        > -1 &&\n            arr[i].indexOf(moduleName + \"_\") == -1 &&\n            arr[i].indexOf(moduleName + \"-\") == -1)\n        {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.addModule = function(moduleName) {\n    this.activeModules.push(this.toKebabCase(moduleName))\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To CamelCase\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toCamelCase = function(input) {\n    var arr, res;\n    res = \"\";\n    if (typeof input === \"string\") {\n        input = input.replace(/\\-/g,\" \");                                       // Replace all dashes with spaces\n        arr = input.split(\" \");\n    } else {\n        arr = input;                                                            // Assume it is an array\n    }\n\n\n\n    var i = 0;\n    for (var i in arr) {\n        if (typeof i != \"undefined\") {\n            res += arr[i][0].toUpperCase()+ arr[i].slice(1); // Capitalize first letter\n        }\n    }\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To kebab-case\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toKebabCase = function(input) {\n    var res, str;\n    res = \"\";\n\n    if (typeof input === \"string\") {\n        str = input;\n    } else {                                                                    // Assume it is an array\n        str = input.join(\" \");\n    }\n\n    // First change it to camelcase\n    str = this.toCamelCase(str);\n\n    var max = str.length;\n    for (var i=0; i < max; i++) {\n        // Check if character is uppercase\n        if (str[i] != str[i].toLowerCase()) {\n            if (i!==0) {\n                str = str.substr(0, i) + \"-\" + str.substr(i);\n                i++;\n            }\n        }\n    }\n\n    return res = str.toLowerCase();\n}\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get option\n * -----------------------------------------------------------------------------\n * @param  {string} name                                                        Keyname in optionList\n * @param  {array} optionList                                                   Array with all possible options\n * @return {}                                                                   Copy of the value (optionsList[name])\n */\nJssService.getOption = function(name, optionList) {\n    if (typeof optionList !== \"object\") {\n        return false;\n    }\n\n    var res;\n\n    switch (name) {\n\n        // Only set `addDefaults` to false when it is explicitly set.\n        case \"addDefaults\":\n            if (optionList[name] !== false || typeof optionList[name] === \"undefined\") {\n                res = true;\n            } else {\n                res = false;\n            }\n        break;\n        case \"fallback\":\n            if ( Array.isArray(optionList[name]) ) {\n                res = optionList[name];\n                if (res.length===0) {\n                    res = false;\n                }\n            } else if (typeof optionList[name] === \"string\"){\n                res = [optionList[name]];\n            }\n        break;\n        default:\n        res = optionList[name]\n    }\n\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Is Trigger\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isTrigger = function(element, moduleName) {\n    if (element.className.indexOf(moduleName + \"--\") > -1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get trigger name\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {string} Name of the trigger.\n */\nJssService.getTriggerName = function(element, moduleName) {\n    if (typeof element != \"object\") {\n        console.error('Required first argument `element` needs to be a domElement.');\n        return false;\n    }\n    if (typeof moduleName != \"string\") {\n        console.error('Required second argument `moduleName` needs to be a string.');\n        return false;\n    }\n\n    // As an example we assume that the value of element.className equals 'b module--triggerName'\n    var startPos = element.className.indexOf(moduleName + \"--\");                    // 2\n    var sliced = element.className.slice(startPos, element.className.length )       // 'module--triggerName'\n    var endPos = sliced.indexOf(\" \");                                               // -1       // not found\n    if (endPos != -1) {                                                             // 19\n        sliced = sliced.slice(0,endPos);                                            // if there is more after the string, this will remove it\n    }\n    return sliced.replace(moduleName + \"--\",\"\")\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger name is allowed\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} True if the triggername is allowed, otherwise false.\n */\nJssService.triggerNameIsAllowed = function(element, moduleName) {\n    if (JssService.forbiddenProperties.indexOf(this.getTriggerName(element, moduleName)) > -1) {      // This triggerName is a core property, throw error\n        console.error('Triggername `' + getTriggerName(element,moduleName) + '` is not allowed. Change the trigger so it does not corresponds any of these: ' + JssService.forbiddenProperties)\n        return false;\n    }\n    return true;\n}\n/**\n * @module Jss\n * @author      Jeffrey Arts <sjeffff@gmail.com>\n * @copyright   2015\n */\nJss = function(){};\n\nJss.prototype.type      = \"Jss\"\nJss.prototype.triggers  = false;\nJss.prototype.element   = undefined;                                              // {obj} domElement\nJss.prototype.state     = undefined;                                              // {str} State of module, is reflected by the css class __isState\n\n/**\n * -----------------------------------------------------------------------------\n * Find Triggers\n * -----------------------------------------------------------------------------\n *\n * @param {domElement} element\n * @return {undefined}\n */\nJss.prototype.findTriggers = function(element) {\n    this.triggers = [];                                                         // If this is not set, all modules will have the same reference point to this.triggers.\n    // Module is created, now look for any module triggers\n    this.searchTriggersRecursiveInnerFunction(this.element)\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger\n * -----------------------------------------------------------------------------\n */\nJss.prototype.trigger = function(which, fn) {\n    if (typeof this.triggers !== \"object\") {\n        console.info(\"No triggers are found, please specify them in the css as `module-name--trigger-name`.\");\n        return false;\n    }\n\n    if (typeof this.triggers[which] !== \"object\") {\n        console.info(\"You are trying to execute a function on a non existing trigger `\" + which + \"`\");\n        return false;\n    }\n\n    for (var i = 0; i < this.triggers[which].length; i++) {\n        fn(this.triggers[which][i])\n    }\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Search triggers recursive inner function\n * -----------------------------------------------------------------------------\n * Recursive function which is executed bij findTriggers;\n *\n * @return {undefined}\n */\nJss.prototype.searchTriggersRecursiveInnerFunction = function(element) {\n    var self = this;\n    if (typeof element == \"undefined\" ) {\n        element = this.element;\n    }\n    if ( element.hasChildNodes() ) {\n        for (var i=0; i < element.childNodes.length; i++) {\n\n            var childElement = element.childNodes[i];                           // Improve readability\n\n            if (childElement.nodeType == 1) {                                   // NodeType 1 == domElement\n\n                if (JssService.isTrigger(childElement, this.moduleName)) {\n\n                    // Add a child element\n                    if (JssService.triggerNameIsAllowed(childElement, this.moduleName)) {\n                        var triggerName = JssService.getTriggerName(childElement, this.moduleName)\n\n                        if (typeof self.triggers[triggerName] !== \"object\") {\n                            self.triggers[triggerName] = [];\n                        }\n\n                        var tmp = new JssTrigger(childElement, {\n                            module: self,\n                            moduleName: this.moduleName,\n                            triggerName: triggerName,\n                        });\n\n                        self.triggers[triggerName].push(tmp);\n                    }\n                }\n                if (childElement.hasChildNodes()) {\n                    self.searchTriggersRecursiveInnerFunction(childElement)\n                }\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Configure Trigger\n * -----------------------------------------------------------------------------\n *\n * @return {undefined}\n */\nJss.prototype.configureTrigger = function(trigger, fn) {\n    if ( typeof this.triggers[trigger] == \"object\") {\n\n        for (var i = 0; i < this.triggers[trigger].length; i++) {\n            //self.triggers[trigger][i]\n            fn(this.triggers[trigger][i]);\n        }\n\n    } else if (JssService.dev) {\n        console.error(\"You are trying to configure a trigger which has no attached domElement\")\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n *   Init\n * -----------------------------------------------------------------------------\n * Notice the user that a init function needs to be added for controlling the triggers\n *\n * @return {undefined}\n */\nJss.prototype.init = function(func) {\n    if (JssService.dev) {\n        console.info(this.moduleName + \": Add a prototype.init function to add triggers and stuff\")\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set element\n * -----------------------------------------------------------------------------\n * Add a domElement to `this`\n *\n * @return {undefined}\n */\nJss.prototype.setElement = function(element) {\n    if (typeof element == \"undefined\") {\n        if (JssService.dev) {\n            return console.error(\"First parameter of setElement needs to be a domElement\");\n        }\n    }\n    this.element = element;\n}\n/*******************************************************************************\n   *\n   *\tActions\n   *\n   *  \t@author      Jeffrey Arts <sjeffff@gmail.com>\n   *    @copyright   2015\n   *\n*******************************************************************************/\n/**\n * -----------------------------------------------------------------------------\n *   Validate action\n * -----------------------------------------------------------------------------\n * Checks if parameter is a valid action, and logs an error when not.\n *\n * @param {string} request                                                      The name of the request\n * @return {boolean} true if a action is valid, otherwise false.\n */\nJss.prototype.validateAction = function(request) {\n    var result;\n    request = this.getActionElement(request).request\n    for (var action in JssService.actions) {\n        if (JssService.actions[action].indexOf(request.toLowerCase()) > -1) {\n            result = action;\n            break;\n        }\n    }\n    if (result) {\n        return result;\n    } else {\n        console.error(\"validateAction: unknown request\", request);\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * \t Add Action\n * -----------------------------------------------------------------------------\n * Adds an action to the object, list of possible requests can be found in Jss.actions\n *\n * | Options\n * \t\t- addDefaults {boolean}                                                 True: add default classes, false: don't\n *\n *\n *\n * @param {string} request                                                      The name of the request\n * @param {function} fn                                                         The function which should be triggered\n * @param {object} options                                                      Object with option parameters\n * @return {boolean} true if a action is succesfully added, otherwise false.\n */\nJss.prototype.addAction = function(request, fn, options) {\n\n    var self        = this;\n    var action      = self.validateAction(request)\n    var actions     = [];\n    var t = self.getActionElement(request);\n    var element     = t.element;\n    var request     = t.request;\n    t = undefined;\n\n    // Options\n    var addDefaults = JssService.getOption(\"addDefaults\", options);\n\n\n\n    switch (action) {\n\n        case \"resize\":\n\n            actions.push(element.addEventListener(\"resize\", fn));\n\n        break;\n\n\n        case \"click\":\n            actions.push(element.addEventListener(\"click\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"click\", function(){\n                    self.setState(\"Clicked\")\n                }));\n                actions.push(window.addEventListener( \"click\", function(event) {\n                    if (event.target != self.element && self.hasState(\"Clicked\")) {\n                        self.removeState(\"Clicked\")\n                    }\n                }));\n            } // End addDefaults\n        break;\n\n\n        case \"change\":\n            actions.push(element.addEventListener(\"change\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"change\", function(){\n                    self.setState(\"Changed\")\n                    setTimeout(function(){self.removeState(\"Changed\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"hover\":\n            actions.push(element.addEventListener(\"mouseover\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseover\", function(){\n                    self.setState(\"Hover\")\n                }));\n                actions.push(element.addEventListener(\"mouseout\",  function(){\n                    self.removeState(\"Hover\")\n                }));\n            }\n        break;\n\n\n        case \"mouseIn\":\n\n            actions.push(element.addEventListener(\"mouseenter\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseenter\", function(){\n                    self.setState(\"MouseIn\")\n                    setTimeout(function(){self.removeState(\"MouseIn\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"mouseOut\":\n\n            actions.push(element.addEventListener(\"mouseleave\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseleave\", function(){\n                    self.setState(\"MouseOut\")\n                    setTimeout(function(){self.removeState(\"MouseOut\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n    }\n\n\n    if (actions.length > 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get action element\n * -----------------------------------------------------------------------------\n * @param  {string} request                                                     The request\n * @return {object}                                                             An object with 2 properties: request && element\n */\nJss.prototype.getActionElement = function(request) {\n    var self = this;\n    var prefix = false;\n    var newRequest  = request;\n    var element = self.element;\n    // Set prefix if it exists\n    if (request.indexOf(\".\") > 0) {\n        var t       = request.split(\".\"),\n        newRequest  = t[1];\n        prefix      = t[0];\n        t = undefined;\n    }\n\n    // Update element according the prefix (or skip it, if not set)\n    if (prefix !== false) {\n        switch (prefix) {\n            case \"screen\":\n            case \"window\":\n                element = window;\n            break;\n        }\n    }\n\n    // Return object\n    return {\n        request: newRequest,\n        element: element\n    }\n}\n/**\n * -----------------------------------------------------------------------------\n * Class name prefix\n * -----------------------------------------------------------------------------\n * The prefix equals the modulename, or - when it's a trigger object - modulename--triggername\n *\n * @return {string} The classname\n */\nJss.prototype.classNamePrefix = function() {\n    if (this.type == \"JssTrigger\") {\n        return this.moduleName + \"--\" + this.triggerName;\n    } else {\n        return this.moduleName;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Remove class name\n * -----------------------------------------------------------------------------\n * Removes the `this.element` classname\n * \t- \"all\" || undefined        > Removes ALL classnames\n *  - \"allStates\" || \"states\"   > Remove all STATES\n *  - all other strings remove that specific string from the className\n *\n * @param {string} input                                                        The classname (case-sensitive) which needs to be removed\n * @return {undefined}\n */\nJss.prototype.removeClassName = function(input) {\n\n    var classList  = [];\n\n    if (input == \"all\" || typeof input == \"undefined\") {\n\n        this.element.className = \"\";\n\n    } else if (input == \"states\" || input == \"allStates\") {\n\n        classList = this.element.className.split(\" \");\n        for (var i in classList) {\n            className = classList[i];\n            if (className.indexOf(\"__is\") > -1) {\n                delete classList[i];\n            }\n        }\n        this.element.className = classList.join(\" \");\n\n    } else if(typeof input == \"string\") {\n        this.element.className = this.element.className.replace(input,\"\");\n    } else {\n        console.error(\"removeClassName: parameter should be a string\");\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Add class name\n * -----------------------------------------------------------------------------\n * Adds a class name by string or array.\n * Does NOT check for duplicates\n *\n * @param  {string} The classname to be added\n * @return {undefined}\n */\nJss.prototype.addClassName = function(data) {\n    this.element.className += \" \";\n    if (typeof data == \"string\") {\n        this.element.className += data;\n    } else {\n        this.element.className += data.join(\" \")\n    }\n}\n\n/**\n * List where the keys corresponds with this[key], and where the value is the function to be executed when the var is changed.\n */\nJss.prototype.setterWatchList = {};\nJss.prototype.getterWatchList = {};\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add data\n * -----------------------------------------------------------------------------\n * Add a (default) value for the given attribute.\n *\n * @param {string} attribute                                                    The name of the attribute (this[attribute])\n * @param {*} value                                                             The value of this[attribute], could be anything...\n * @param {object} options\n *           \t\t- setterWatchFunction {function}\n *           \t\t- getterWatchFunction {function}\n */\nJss.prototype.addData = function(attribute, value, options) {\n\n\n    // watchList[key] = fn;\n    var setterWatchFunction = JssService.getOption('setterWatchFunction', options); // Function\n    var getterWatchFunction = JssService.getOption('getterWatchFunction', options); // Function\n\n    if (typeof setterWatchFunction === \"function\") {\n        this.setterWatchList[attribute] = setterWatchFunction;\n    }\n\n    if (typeof getterWatchFunction === \"function\") {\n        this.getterWatchList[attribute] = getterWatchFunction;\n    }\n\n    // Set the default value\n    return this[attribute] = value;\n}\n\n\n\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- ajax {string} url\n */\nJss.prototype.setData = function(attribute, value, options) {\n\n    this[attribute] = value;\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n\n    if (Array.isArray(fallback)) {\n\n        for (var i = 0; i < fallback.length; i++) {\n            var type = fallback[i];\n\n            if (value && value.length > 0) {\n                this['setData' + JssService.toCamelCase(type)](attribute, value); // Call this.addDataAttribute(value) || this.addDataCookie(value) etc...\n                this[attribute] = value;\n            }\n        }\n    }\n\n    // Call the setter watch function, if defined;\n    if (typeof this.setterWatchList[attribute] === \"function\") { // Use the watchlist to add functionality whenever a data attribute is updated\n        this.setterWatchList[attribute]();\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataDefault {boolean}\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- dataAjax {string} url\n */\nJss.prototype.getData = function(attribute, options) {\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n    var value = false;\n\n\n    if (!fallback) {\n        fallback = ['attribute'];\n    }\n\n\n    for (var i = 0; i < fallback.length; i++) {\n        var type = JssService.toCamelCase(fallback[i]);\n        var customOptions = false;\n\n        if (typeof options == \"object\") {\n            customOptions = options[fallback[i].toLowerCase()];\n        }\n\n        if (!value || value.length < 0) {\n            if (typeof this['getData' + type] !== \"function\") {\n                console.error('this.getData' + type + ' is not a function. Probably ' + type + ' is not a available data option');\n                continue;\n            }\n            value = this['getData' + type]( attribute, customOptions ); // Call this.getDataAttribute(value) || this.getDataCookie(value) || this.getDataAjax(value) etc...\n        }\n    }\n    console.log(this.getterWatchList);\n    // Call the getter watch function, if defined;\n    if (typeof this.getterWatchList[attribute] == \"function\") {\n        this.getterWatchList[attribute]();\n    }\n\n    return this[attribute] = value;\n}\n/**\n * -----------------------------------------------------------------------------\n * Get data: Ajax\n * -----------------------------------------------------------------------------\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n *\n * @param {string} attribute                                                    The NAME of the inner variable (this.NAME), is also used as the key for the GET Request {NAME: value}\n * @param {object} options                                                      Object with parameters used to make a GET request\n * @return {string}                                                             The value of the given attribute, or false if an erro occured.\n */\nJss.prototype.getDataAjax = function(attribute, options) {\n    var url = JssService.getOption(\"url\", options);\n    var jsonKey = JssService.getOption(\"jsonKey\", options) || attribute;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('GET', url);\n\n        return ajaxReturn.success(function(result){\n            if (typeof result === \"object\") {\n                if (result[jsonKey]) {\n                    return result[jsonKey];\n                }\n            }\n        }).error(function(errorObject){\n            console.log(errorObject);\n        });\n    }\n\n    return false;\n};\n\n/**\n * -----------------------------------------------------------------------------\n * Set data: Ajax\n * -----------------------------------------------------------------------------\n * Makes a post request to the options.url in a object {attribute: value}\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n */\nJss.prototype.setDataAjax = function(attribute, value, options) {\n    var url = JssService.getOption(\"url\", options);\n    var requestObject = {}\n        requestObject[attribute] = value;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('POST', url, requestObject);\n\n        return ajaxReturn.success(function(result){\n            return true;\n        }).error(function(errorObject){\n            console.log(errorObject);\n            return false;\n        });\n    }\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Ajax (helper function)\n * -----------------------------------------------------------------------------\n * Based on Atom.js by Todd Motto\n * http://toddmotto.com/writing-a-standalone-ajax-xhr-javascript-micro-library/\n */\nJss.prototype.ajaxHelper = {\n    // Parses json if possible, otherwise just return text\n    parse: function(req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return [result, req];\n    },\n\n    xhr: function(type, url, data) {\n        var ajaxHelper = this;\n\n        var methods = {\n            success: function() {},\n            error: function() {}\n        };\n        var XHR = XMLHttpRequest || ActiveXObject;\n        var request = new XHR('MSXML2.XMLHTTP.3.0');\n        request.open(type, url, true);\n        request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n\n        request.onreadystatechange = function() {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    methods.success.apply(methods, ajaxHelper.parse(request));\n                } else {\n                    methods.error.apply(methods, ajaxHelper.parse(request));\n                }\n            }\n        };\n        request.send(data);\n        return {\n            success: function(callback) {\n                methods.success = callback;\n                return methods;\n            },\n            error: function(callback) {\n                methods.error = callback;\n                return methods;\n            }\n        };\n    }\n};\n\nJss.prototype.ajax = {\n    // Get\n    get: function(src) {\n        console.log(this);\n    },\n\n    // Set\n    put: function(url, data) {\n        return this.ajaxHelper.xhr('PUT', url, data);\n    },\n\n    // Add\n    post: function(url, data) {\n        return this.ajaxHelper.xhr('POST', url, data);\n    }\n\n};\n/**\n * -----------------------------------------------------------------------------\n * Get data attribute value\n * -----------------------------------------------------------------------------\n * Returns the value of the requested attribute. Search first for a data-[ATTRIBUTE] value\n * If not found, it checks for the attribute in the default object. When that is not being\n * found neither, the normal this[attribute] value is being returned.\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME)\n * @return {string}                                                             The value of the given attribute\n */\nJss.prototype.getDataAttribute = function(attribute) {\n\n    return this.element.dataset[attribute];\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Update data attribute\n * -----------------------------------------------------------------------------\n * Set the value to the given attribute. And updates the data-[ATTRIBUTE] value\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME=\"value\")\n * @param {string} value                                                        The VALUE of the data attribute (data-name=\"VALUE\")\n * @return {undefined}\n */\n\nJss.prototype.setDataAttribute = function(attribute, value) {\n\n    // Update data attribute\n    if (typeof value !== \"undefined\") {\n        this.element.dataset[attribute] = this[attribute];\n    } else {\n        delete this.element.dataset[attribute];\n    }\n\n    return true;\n}\nJss.prototype.dataDefaultsCookie = {\n    'expireData': undefined\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get cookie value\n * -----------------------------------------------------------------------------\n * Returns cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @return {string}                                                             The VALUE of the given attribute\n */\nJss.prototype.getDataCookie = function(attribute) {\n\n    if (!attribute) { return null; }\n    return decodeURIComponent(document.cookie.replace(new RegExp(\"(?:(?:^|.*;)\\\\s*\" + encodeURIComponent(attribute).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"), \"$1\")) || null;\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data cookie\n * -----------------------------------------------------------------------------\n * Updates the cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @param {string} value                                                        The VALUE of the cookie\n * @return {undefined}\n */\n\nJss.prototype.setDataCookie = function(attribute, value, options) {\n    var endDate, path, domain, secureConnection;\n\n    if (typeof options === \"object\") {\n        endDate = JssService.getOption('endDate', options);\n        path    = JssService.getOption('path', options);\n        domain  = JssService.getOption('domain', options);\n        secureConnection = JssService.getOption('secureConnection', options);\n    }\n\n    if (!attribute || /^(?:expires|max\\-age|path|domain|secure)$/i.test(attribute)) { return false; }\n    var sExpires = \"\";\n    if (endDate) {\n      switch (endDate.constructor) {\n        case Number:\n          sExpires = endDate === Infinity ? \"; expires=Fri, 31 Dec 9999 23:59:59 GMT\" : \"; max-age=\" + endDate;\n          break;\n        case String:\n          sExpires = \"; expires=\" + endDate;\n          break;\n        case Date:\n          sExpires = \"; expires=\" + endDate.toUTCString();\n          break;\n      }\n    }\n\n    document.cookie = encodeURIComponent(attribute) + \"=\" + encodeURIComponent(value) + sExpires + (domain ? \"; domain=\" + domain : \"\") + (path ? \"; path=\" + path : \"\") + (secureConnection ? \"; secure\" : \"\");\n    return true;\n}\n/*******************************************************************************\n\n    Styles\n\n*******************************************************************************/\n\n/**\n * -----------------------------------------------------------------------------\n * Set height\n * -----------------------------------------------------------------------------\n * Sets the height of the `this.element` by the given input (height)\n *\n * @param  {number} height                                                      The height in pixels or percentage. Where numbers will be calculated to pixels so giving a height of 50 will result in a height of \"50px\". If you want percentages pass the variable with a percentage sign 50 + \"%\"\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setHeight = function(height) {\n    if (typeof height === \"number\") {\n        height += \"px\";\n    }\n\n    if (typeof height !== \"string\") {\n        throw(\"parameter height needs to be a string or integer\");\n    }\n\n    this.element.style.height = height;\n    return true;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get height\n * -----------------------------------------------------------------------------\n * Returns the height of the `this.element`\n *\n * @return {number}                                                             The height of the element in pixels\n */\nJss.prototype.getHeight = function() {\n    return this.element.offsetHeight;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set width\n * -----------------------------------------------------------------------------\n * Sets the width of the `this.element` by the given input (width)\n *\n * @param  {number} width                                                       The width in pixels or percentage. Where numbers will be calculated to pixels so giving a width of 50 will result in a width of \"50px\". If you want to set a percentage, just pass the variable with a percentage sign (\"50%\")\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setWidth = function(width) {\n    if (typeof width == \"number\") {\n        width += \"px\";\n    }\n\n    if (typeof width !== \"string\") {\n        throw(\"parameter width needs to be a string or integer\");\n    }\n    this.element.style.width = width;\n    return true;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get width\n * -----------------------------------------------------------------------------\n * Returns the width of the `this.element`\n *\n * @return {number}                                                             The width of the element in pixels\n */\nJss.prototype.getWidth = function() {\n    return this.element.offsetWidth;\n}\n/**\n * -----------------------------------------------------------------------------\n * Set State\n * -----------------------------------------------------------------------------\n * This updates the state of the object. States are being added to the class name prefix with a double underscore.\n * If you would have the module `envelope` and give it the state `open`. The class name `envelope__open` will be added.\n * Whenever you remove the state `open`, the according class name will be removed as well.\n *\n * @param  {string} str                                                         The name of the state which should be set (this is transformed to CamelCase)\n * @return {boolean}                                                            True on success, otherwise false (might already have the state)\n */\nJss.prototype.setState = function(str) {\n    var element, verifiedState, state, className;\n\n    element         = this.element;\n    state           = JssService.toCamelCase(str);\n    className       = this.classNamePrefix() + \"__is\" + state;\n\n    // Check if this.state is an array, and make it one if not.\n    if (Array.isArray(this.state) == false ) {\n        this.state = [];\n    }\n\n    // This if statement prevents that the same state is being set multiple times\n    if ( !this.hasState(str) ) {\n        this.addClassName(className)\n        this.state.push(state);\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Has state\n * -----------------------------------------------------------------------------\n * Checks if the parameter is already a state and returns true if so. Otherwise false.\n *\n * @param  {string} str                                                         The state which will be checked for\n * @return {boolean}                                                            True if it has the given state, otherwise false\n */\nJss.prototype.hasState = function(str) {\n    if (typeof this.state == \"object\" && this.state.indexOf(str) >= 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Remove state\n * -----------------------------------------------------------------------------\n * Removes the state from the states array, and from the element.className\n *\n * @param  {string} str                                                         The name of the state which should be removed\n * @return {undefined}\n */\nJss.prototype.removeState = function(str) {\n\n    var state      = JssService.toCamelCase(str);\n    var stateIndex = this.state.indexOf(state);\n\n    if (str == \"all\" || typeof str == \"undefined\") {\n        this.removeClassName(\"states\");\n    } else {\n        this.state.splice(stateIndex, 1);\n        if (typeof this.moduleAction != \"undefined\" && this.moduleAction.length > -1) {\n            this.removeClassName(this.classNamePrefix() + \"\" + this.moduleAction + \"__is\" + state);\n        } else {\n            this.removeClassName(this.classNamePrefix() + \"__is\" + state);\n        }\n    }\n}\n\n\n// A simple way to watch variables\n\n// addVar(keyName, value, watch_function)\n// setVar(keyName, value)\n// getVar(keyName)\n// Add -> new\n// Set -> update\n// Get -> return\nvar JssModule = function(){};\n\nJssModule.prototype.type               = \"JssModule\";\nJssModule.prototype.init               = Jss.prototype.init;\nJssModule.prototype.setElement         = Jss.prototype.setElement;\n\n// Triggers\nJssModule.prototype.findTriggers       = Jss.prototype.findTriggers;\nJssModule.prototype.configureTrigger      = Jss.prototype.configureTrigger;\n\n// Actions\n//JssModule.prototype.actions            = Object.create(Jss.prototype.actions);\nJssModule.prototype.validateAction     = Jss.prototype.validateAction;\nJssModule.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssModule.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssModule.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssModule.prototype.setState           = Jss.prototype.setState;\nJssModule.prototype.hasState           = Jss.prototype.hasState;\nJssModule.prototype.removeState        = Jss.prototype.removeState;\n\n// Data attributes\nJssModule.prototype.addData            = Jss.prototype.addData;\nJssModule.prototype.getData            = Jss.prototype.getData;\nJssModule.prototype.setData            = Jss.prototype.setData;\nvar JssTrigger = function(element, options) {\n    this.setElement(element);\n\n    if (typeof options === \"object\") {\n        if (typeof options.module === \"object\") {\n            this.module = options.module;\n        }\n        if (typeof options.moduleName === \"string\") {\n            this.moduleName = options.moduleName;\n        }\n        if (typeof options.triggerName === \"string\") {\n            this.triggerName = options.triggerName;\n        }\n    }\n}\n\n\nJssTrigger.prototype                    = Object.create(Jss.prototype);\nJssTrigger.prototype.type               = \"JssTrigger\";\nJssTrigger.prototype.setElement         = Jss.prototype.setElement;\n\n// Actions\n//JssTrigger.prototype.actions            = Object.create(Jss.prototype.actions);\nJssTrigger.prototype.validateAction     = Jss.prototype.validateAction;\nJssTrigger.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssTrigger.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssTrigger.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssTrigger.prototype.setState           = Jss.prototype.setState;\nJssTrigger.prototype.hasState           = Jss.prototype.hasState;\nJssTrigger.prototype.removeState        = Jss.prototype.removeState;\n\n\n\nvar  JssController = {};\nJssController.modules \t\t= []; // Result array with objects of all the found modules\nJssController.activeModules \t= JssService.activeModules;\n\nJssController.findModules = function() {\n    var allElements = document.getElementsByTagName(\"*\");                       // Array with all domElements\n    var test = [];\n    var self = this;\n    for (var i=0; i < allElements.length; i++) {\n\n        // Set default vars //\n        var element = allElements[i];                                           // Specific domElement\n        var tmp = false;\n\n        // Loop through the (active) modules array and add/instantiate them\n        self.activeModules.forEach(function(module){\n            if (JssService.isModule(element, module)) {\n                tmp = eval(\"new \" + JssService.toCamelCase(module) + \"(element)\"); // Dynamicly load modules\n\n                tmp.setElement(element);                                        // Add the domElement to the module\n                tmp.findTriggers();\t\t\t                                    // Search for module triggers\n\n                tmp.init();\t\t\t\t\t                                    // Executes everything within the init function\n                self.modules.push(tmp);\n\n            }\n        }); // End forEach\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    JssController.findModules();\n    console.log(JssController);\n});"
          },
          "params": [
            {
              "title": "param",
              "description": "domElement",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "element"
            },
            {
              "title": "param",
              "description": "Name of the module",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "moduleName"
            }
          ],
          "returns": [
            {
              "title": "returns",
              "description": "true if element is a module, otherwise false",
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          ],
          "name": "isTrigger",
          "kind": "function",
          "memberof": "JssService",
          "scope": "static",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            "JssService",
            "isTrigger"
          ]
        },
        {
          "description": "-----------------------------------------------------------------------------\nTo CamelCase\n-----------------------------------------------------------------------------",
          "tags": [
            {
              "title": "param",
              "description": "String or array which needs to be camelcased",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "input"
            },
            {
              "title": "returns",
              "description": "a camelcased string",
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "name",
              "name": "toCamelCase"
            },
            {
              "title": "kind",
              "kind": "function"
            },
            {
              "title": "memberof",
              "description": "JssService"
            },
            {
              "title": "static"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 87,
                "column": 0
              },
              "end": {
                "line": 116,
                "column": 0
              }
            },
            "file": "/Users/jeffreyarts/Documents/DEV/jss/lib/jss.js",
            "code": "JssService = {};\n\n// Edit this array to enable or disable default modules\nJssService.activeModules   = []\n\n// Set this to false in a live environment\nJssService.dev             = true;\n\n/**************************\n*\n*   Below are core properties defined, becarefull when you think of changing these...\n*\n**************************/\n\n\nJssService.actions = {\n    hover:      ['hover',    'mouseover',   'onmouseover'                       ], // Fixed\n    click:      ['click',    'onclick'                                          ], // Fixed\n    mouseIn:    ['mousein',  'onmousein', 'mouseenter', 'onmouseenter'          ], // Fixed\n    mouseOut:   ['mouseout', 'onmouseout', 'mouseleave', 'onmouseleave'         ], // Fixed\n    resize:     ['resize',   'onresize'                                         ], // Fixed\n    focus:      ['focus',    'onfocus'                                          ],\n    keyDown:    ['keydown',  'keypress'                                         ],\n    keyUp:      ['keyup',    'keyrelease'                                       ],\n    change:     ['change',   'onchange'                                         ],\n};\n\nJssService.enterDelay = 1000;                                                   // Amount of miliseconds which is used to remove the entered state. (see core.actions) JssService.enterDelay setTimeout\n\nJssService.forbiddenProperties = [\n    'type',\n    'triggers',\n    'configureTrigger',\n    'findTriggers'\n];\n\n/**\n * -----------------------------------------------------------------------------\n * Is Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isModule = function(element, moduleName) {\n    var arr = element.className.split(\" \");\n    var found = false;\n\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i].indexOf(moduleName)        > -1 &&\n            arr[i].indexOf(moduleName + \"_\") == -1 &&\n            arr[i].indexOf(moduleName + \"-\") == -1)\n        {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.addModule = function(moduleName) {\n    this.activeModules.push(this.toKebabCase(moduleName))\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To CamelCase\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toCamelCase = function(input) {\n    var arr, res;\n    res = \"\";\n    if (typeof input === \"string\") {\n        input = input.replace(/\\-/g,\" \");                                       // Replace all dashes with spaces\n        arr = input.split(\" \");\n    } else {\n        arr = input;                                                            // Assume it is an array\n    }\n\n\n\n    var i = 0;\n    for (var i in arr) {\n        if (typeof i != \"undefined\") {\n            res += arr[i][0].toUpperCase()+ arr[i].slice(1); // Capitalize first letter\n        }\n    }\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To kebab-case\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toKebabCase = function(input) {\n    var res, str;\n    res = \"\";\n\n    if (typeof input === \"string\") {\n        str = input;\n    } else {                                                                    // Assume it is an array\n        str = input.join(\" \");\n    }\n\n    // First change it to camelcase\n    str = this.toCamelCase(str);\n\n    var max = str.length;\n    for (var i=0; i < max; i++) {\n        // Check if character is uppercase\n        if (str[i] != str[i].toLowerCase()) {\n            if (i!==0) {\n                str = str.substr(0, i) + \"-\" + str.substr(i);\n                i++;\n            }\n        }\n    }\n\n    return res = str.toLowerCase();\n}\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get option\n * -----------------------------------------------------------------------------\n * @param  {string} name                                                        Keyname in optionList\n * @param  {array} optionList                                                   Array with all possible options\n * @return {}                                                                   Copy of the value (optionsList[name])\n */\nJssService.getOption = function(name, optionList) {\n    if (typeof optionList !== \"object\") {\n        return false;\n    }\n\n    var res;\n\n    switch (name) {\n\n        // Only set `addDefaults` to false when it is explicitly set.\n        case \"addDefaults\":\n            if (optionList[name] !== false || typeof optionList[name] === \"undefined\") {\n                res = true;\n            } else {\n                res = false;\n            }\n        break;\n        case \"fallback\":\n            if ( Array.isArray(optionList[name]) ) {\n                res = optionList[name];\n                if (res.length===0) {\n                    res = false;\n                }\n            } else if (typeof optionList[name] === \"string\"){\n                res = [optionList[name]];\n            }\n        break;\n        default:\n        res = optionList[name]\n    }\n\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Is Trigger\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isTrigger = function(element, moduleName) {\n    if (element.className.indexOf(moduleName + \"--\") > -1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get trigger name\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {string} Name of the trigger.\n */\nJssService.getTriggerName = function(element, moduleName) {\n    if (typeof element != \"object\") {\n        console.error('Required first argument `element` needs to be a domElement.');\n        return false;\n    }\n    if (typeof moduleName != \"string\") {\n        console.error('Required second argument `moduleName` needs to be a string.');\n        return false;\n    }\n\n    // As an example we assume that the value of element.className equals 'b module--triggerName'\n    var startPos = element.className.indexOf(moduleName + \"--\");                    // 2\n    var sliced = element.className.slice(startPos, element.className.length )       // 'module--triggerName'\n    var endPos = sliced.indexOf(\" \");                                               // -1       // not found\n    if (endPos != -1) {                                                             // 19\n        sliced = sliced.slice(0,endPos);                                            // if there is more after the string, this will remove it\n    }\n    return sliced.replace(moduleName + \"--\",\"\")\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger name is allowed\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} True if the triggername is allowed, otherwise false.\n */\nJssService.triggerNameIsAllowed = function(element, moduleName) {\n    if (JssService.forbiddenProperties.indexOf(this.getTriggerName(element, moduleName)) > -1) {      // This triggerName is a core property, throw error\n        console.error('Triggername `' + getTriggerName(element,moduleName) + '` is not allowed. Change the trigger so it does not corresponds any of these: ' + JssService.forbiddenProperties)\n        return false;\n    }\n    return true;\n}\n/**\n * @module Jss\n * @author      Jeffrey Arts <sjeffff@gmail.com>\n * @copyright   2015\n */\nJss = function(){};\n\nJss.prototype.type      = \"Jss\"\nJss.prototype.triggers  = false;\nJss.prototype.element   = undefined;                                              // {obj} domElement\nJss.prototype.state     = undefined;                                              // {str} State of module, is reflected by the css class __isState\n\n/**\n * -----------------------------------------------------------------------------\n * Find Triggers\n * -----------------------------------------------------------------------------\n *\n * @param {domElement} element\n * @return {undefined}\n */\nJss.prototype.findTriggers = function(element) {\n    this.triggers = [];                                                         // If this is not set, all modules will have the same reference point to this.triggers.\n    // Module is created, now look for any module triggers\n    this.searchTriggersRecursiveInnerFunction(this.element)\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger\n * -----------------------------------------------------------------------------\n */\nJss.prototype.trigger = function(which, fn) {\n    if (typeof this.triggers !== \"object\") {\n        console.info(\"No triggers are found, please specify them in the css as `module-name--trigger-name`.\");\n        return false;\n    }\n\n    if (typeof this.triggers[which] !== \"object\") {\n        console.info(\"You are trying to execute a function on a non existing trigger `\" + which + \"`\");\n        return false;\n    }\n\n    for (var i = 0; i < this.triggers[which].length; i++) {\n        fn(this.triggers[which][i])\n    }\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Search triggers recursive inner function\n * -----------------------------------------------------------------------------\n * Recursive function which is executed bij findTriggers;\n *\n * @return {undefined}\n */\nJss.prototype.searchTriggersRecursiveInnerFunction = function(element) {\n    var self = this;\n    if (typeof element == \"undefined\" ) {\n        element = this.element;\n    }\n    if ( element.hasChildNodes() ) {\n        for (var i=0; i < element.childNodes.length; i++) {\n\n            var childElement = element.childNodes[i];                           // Improve readability\n\n            if (childElement.nodeType == 1) {                                   // NodeType 1 == domElement\n\n                if (JssService.isTrigger(childElement, this.moduleName)) {\n\n                    // Add a child element\n                    if (JssService.triggerNameIsAllowed(childElement, this.moduleName)) {\n                        var triggerName = JssService.getTriggerName(childElement, this.moduleName)\n\n                        if (typeof self.triggers[triggerName] !== \"object\") {\n                            self.triggers[triggerName] = [];\n                        }\n\n                        var tmp = new JssTrigger(childElement, {\n                            module: self,\n                            moduleName: this.moduleName,\n                            triggerName: triggerName,\n                        });\n\n                        self.triggers[triggerName].push(tmp);\n                    }\n                }\n                if (childElement.hasChildNodes()) {\n                    self.searchTriggersRecursiveInnerFunction(childElement)\n                }\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Configure Trigger\n * -----------------------------------------------------------------------------\n *\n * @return {undefined}\n */\nJss.prototype.configureTrigger = function(trigger, fn) {\n    if ( typeof this.triggers[trigger] == \"object\") {\n\n        for (var i = 0; i < this.triggers[trigger].length; i++) {\n            //self.triggers[trigger][i]\n            fn(this.triggers[trigger][i]);\n        }\n\n    } else if (JssService.dev) {\n        console.error(\"You are trying to configure a trigger which has no attached domElement\")\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n *   Init\n * -----------------------------------------------------------------------------\n * Notice the user that a init function needs to be added for controlling the triggers\n *\n * @return {undefined}\n */\nJss.prototype.init = function(func) {\n    if (JssService.dev) {\n        console.info(this.moduleName + \": Add a prototype.init function to add triggers and stuff\")\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set element\n * -----------------------------------------------------------------------------\n * Add a domElement to `this`\n *\n * @return {undefined}\n */\nJss.prototype.setElement = function(element) {\n    if (typeof element == \"undefined\") {\n        if (JssService.dev) {\n            return console.error(\"First parameter of setElement needs to be a domElement\");\n        }\n    }\n    this.element = element;\n}\n/*******************************************************************************\n   *\n   *\tActions\n   *\n   *  \t@author      Jeffrey Arts <sjeffff@gmail.com>\n   *    @copyright   2015\n   *\n*******************************************************************************/\n/**\n * -----------------------------------------------------------------------------\n *   Validate action\n * -----------------------------------------------------------------------------\n * Checks if parameter is a valid action, and logs an error when not.\n *\n * @param {string} request                                                      The name of the request\n * @return {boolean} true if a action is valid, otherwise false.\n */\nJss.prototype.validateAction = function(request) {\n    var result;\n    request = this.getActionElement(request).request\n    for (var action in JssService.actions) {\n        if (JssService.actions[action].indexOf(request.toLowerCase()) > -1) {\n            result = action;\n            break;\n        }\n    }\n    if (result) {\n        return result;\n    } else {\n        console.error(\"validateAction: unknown request\", request);\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * \t Add Action\n * -----------------------------------------------------------------------------\n * Adds an action to the object, list of possible requests can be found in Jss.actions\n *\n * | Options\n * \t\t- addDefaults {boolean}                                                 True: add default classes, false: don't\n *\n *\n *\n * @param {string} request                                                      The name of the request\n * @param {function} fn                                                         The function which should be triggered\n * @param {object} options                                                      Object with option parameters\n * @return {boolean} true if a action is succesfully added, otherwise false.\n */\nJss.prototype.addAction = function(request, fn, options) {\n\n    var self        = this;\n    var action      = self.validateAction(request)\n    var actions     = [];\n    var t = self.getActionElement(request);\n    var element     = t.element;\n    var request     = t.request;\n    t = undefined;\n\n    // Options\n    var addDefaults = JssService.getOption(\"addDefaults\", options);\n\n\n\n    switch (action) {\n\n        case \"resize\":\n\n            actions.push(element.addEventListener(\"resize\", fn));\n\n        break;\n\n\n        case \"click\":\n            actions.push(element.addEventListener(\"click\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"click\", function(){\n                    self.setState(\"Clicked\")\n                }));\n                actions.push(window.addEventListener( \"click\", function(event) {\n                    if (event.target != self.element && self.hasState(\"Clicked\")) {\n                        self.removeState(\"Clicked\")\n                    }\n                }));\n            } // End addDefaults\n        break;\n\n\n        case \"change\":\n            actions.push(element.addEventListener(\"change\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"change\", function(){\n                    self.setState(\"Changed\")\n                    setTimeout(function(){self.removeState(\"Changed\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"hover\":\n            actions.push(element.addEventListener(\"mouseover\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseover\", function(){\n                    self.setState(\"Hover\")\n                }));\n                actions.push(element.addEventListener(\"mouseout\",  function(){\n                    self.removeState(\"Hover\")\n                }));\n            }\n        break;\n\n\n        case \"mouseIn\":\n\n            actions.push(element.addEventListener(\"mouseenter\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseenter\", function(){\n                    self.setState(\"MouseIn\")\n                    setTimeout(function(){self.removeState(\"MouseIn\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"mouseOut\":\n\n            actions.push(element.addEventListener(\"mouseleave\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseleave\", function(){\n                    self.setState(\"MouseOut\")\n                    setTimeout(function(){self.removeState(\"MouseOut\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n    }\n\n\n    if (actions.length > 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get action element\n * -----------------------------------------------------------------------------\n * @param  {string} request                                                     The request\n * @return {object}                                                             An object with 2 properties: request && element\n */\nJss.prototype.getActionElement = function(request) {\n    var self = this;\n    var prefix = false;\n    var newRequest  = request;\n    var element = self.element;\n    // Set prefix if it exists\n    if (request.indexOf(\".\") > 0) {\n        var t       = request.split(\".\"),\n        newRequest  = t[1];\n        prefix      = t[0];\n        t = undefined;\n    }\n\n    // Update element according the prefix (or skip it, if not set)\n    if (prefix !== false) {\n        switch (prefix) {\n            case \"screen\":\n            case \"window\":\n                element = window;\n            break;\n        }\n    }\n\n    // Return object\n    return {\n        request: newRequest,\n        element: element\n    }\n}\n/**\n * -----------------------------------------------------------------------------\n * Class name prefix\n * -----------------------------------------------------------------------------\n * The prefix equals the modulename, or - when it's a trigger object - modulename--triggername\n *\n * @return {string} The classname\n */\nJss.prototype.classNamePrefix = function() {\n    if (this.type == \"JssTrigger\") {\n        return this.moduleName + \"--\" + this.triggerName;\n    } else {\n        return this.moduleName;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Remove class name\n * -----------------------------------------------------------------------------\n * Removes the `this.element` classname\n * \t- \"all\" || undefined        > Removes ALL classnames\n *  - \"allStates\" || \"states\"   > Remove all STATES\n *  - all other strings remove that specific string from the className\n *\n * @param {string} input                                                        The classname (case-sensitive) which needs to be removed\n * @return {undefined}\n */\nJss.prototype.removeClassName = function(input) {\n\n    var classList  = [];\n\n    if (input == \"all\" || typeof input == \"undefined\") {\n\n        this.element.className = \"\";\n\n    } else if (input == \"states\" || input == \"allStates\") {\n\n        classList = this.element.className.split(\" \");\n        for (var i in classList) {\n            className = classList[i];\n            if (className.indexOf(\"__is\") > -1) {\n                delete classList[i];\n            }\n        }\n        this.element.className = classList.join(\" \");\n\n    } else if(typeof input == \"string\") {\n        this.element.className = this.element.className.replace(input,\"\");\n    } else {\n        console.error(\"removeClassName: parameter should be a string\");\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Add class name\n * -----------------------------------------------------------------------------\n * Adds a class name by string or array.\n * Does NOT check for duplicates\n *\n * @param  {string} The classname to be added\n * @return {undefined}\n */\nJss.prototype.addClassName = function(data) {\n    this.element.className += \" \";\n    if (typeof data == \"string\") {\n        this.element.className += data;\n    } else {\n        this.element.className += data.join(\" \")\n    }\n}\n\n/**\n * List where the keys corresponds with this[key], and where the value is the function to be executed when the var is changed.\n */\nJss.prototype.setterWatchList = {};\nJss.prototype.getterWatchList = {};\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add data\n * -----------------------------------------------------------------------------\n * Add a (default) value for the given attribute.\n *\n * @param {string} attribute                                                    The name of the attribute (this[attribute])\n * @param {*} value                                                             The value of this[attribute], could be anything...\n * @param {object} options\n *           \t\t- setterWatchFunction {function}\n *           \t\t- getterWatchFunction {function}\n */\nJss.prototype.addData = function(attribute, value, options) {\n\n\n    // watchList[key] = fn;\n    var setterWatchFunction = JssService.getOption('setterWatchFunction', options); // Function\n    var getterWatchFunction = JssService.getOption('getterWatchFunction', options); // Function\n\n    if (typeof setterWatchFunction === \"function\") {\n        this.setterWatchList[attribute] = setterWatchFunction;\n    }\n\n    if (typeof getterWatchFunction === \"function\") {\n        this.getterWatchList[attribute] = getterWatchFunction;\n    }\n\n    // Set the default value\n    return this[attribute] = value;\n}\n\n\n\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- ajax {string} url\n */\nJss.prototype.setData = function(attribute, value, options) {\n\n    this[attribute] = value;\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n\n    if (Array.isArray(fallback)) {\n\n        for (var i = 0; i < fallback.length; i++) {\n            var type = fallback[i];\n\n            if (value && value.length > 0) {\n                this['setData' + JssService.toCamelCase(type)](attribute, value); // Call this.addDataAttribute(value) || this.addDataCookie(value) etc...\n                this[attribute] = value;\n            }\n        }\n    }\n\n    // Call the setter watch function, if defined;\n    if (typeof this.setterWatchList[attribute] === \"function\") { // Use the watchlist to add functionality whenever a data attribute is updated\n        this.setterWatchList[attribute]();\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataDefault {boolean}\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- dataAjax {string} url\n */\nJss.prototype.getData = function(attribute, options) {\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n    var value = false;\n\n\n    if (!fallback) {\n        fallback = ['attribute'];\n    }\n\n\n    for (var i = 0; i < fallback.length; i++) {\n        var type = JssService.toCamelCase(fallback[i]);\n        var customOptions = false;\n\n        if (typeof options == \"object\") {\n            customOptions = options[fallback[i].toLowerCase()];\n        }\n\n        if (!value || value.length < 0) {\n            if (typeof this['getData' + type] !== \"function\") {\n                console.error('this.getData' + type + ' is not a function. Probably ' + type + ' is not a available data option');\n                continue;\n            }\n            value = this['getData' + type]( attribute, customOptions ); // Call this.getDataAttribute(value) || this.getDataCookie(value) || this.getDataAjax(value) etc...\n        }\n    }\n    console.log(this.getterWatchList);\n    // Call the getter watch function, if defined;\n    if (typeof this.getterWatchList[attribute] == \"function\") {\n        this.getterWatchList[attribute]();\n    }\n\n    return this[attribute] = value;\n}\n/**\n * -----------------------------------------------------------------------------\n * Get data: Ajax\n * -----------------------------------------------------------------------------\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n *\n * @param {string} attribute                                                    The NAME of the inner variable (this.NAME), is also used as the key for the GET Request {NAME: value}\n * @param {object} options                                                      Object with parameters used to make a GET request\n * @return {string}                                                             The value of the given attribute, or false if an erro occured.\n */\nJss.prototype.getDataAjax = function(attribute, options) {\n    var url = JssService.getOption(\"url\", options);\n    var jsonKey = JssService.getOption(\"jsonKey\", options) || attribute;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('GET', url);\n\n        return ajaxReturn.success(function(result){\n            if (typeof result === \"object\") {\n                if (result[jsonKey]) {\n                    return result[jsonKey];\n                }\n            }\n        }).error(function(errorObject){\n            console.log(errorObject);\n        });\n    }\n\n    return false;\n};\n\n/**\n * -----------------------------------------------------------------------------\n * Set data: Ajax\n * -----------------------------------------------------------------------------\n * Makes a post request to the options.url in a object {attribute: value}\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n */\nJss.prototype.setDataAjax = function(attribute, value, options) {\n    var url = JssService.getOption(\"url\", options);\n    var requestObject = {}\n        requestObject[attribute] = value;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('POST', url, requestObject);\n\n        return ajaxReturn.success(function(result){\n            return true;\n        }).error(function(errorObject){\n            console.log(errorObject);\n            return false;\n        });\n    }\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Ajax (helper function)\n * -----------------------------------------------------------------------------\n * Based on Atom.js by Todd Motto\n * http://toddmotto.com/writing-a-standalone-ajax-xhr-javascript-micro-library/\n */\nJss.prototype.ajaxHelper = {\n    // Parses json if possible, otherwise just return text\n    parse: function(req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return [result, req];\n    },\n\n    xhr: function(type, url, data) {\n        var ajaxHelper = this;\n\n        var methods = {\n            success: function() {},\n            error: function() {}\n        };\n        var XHR = XMLHttpRequest || ActiveXObject;\n        var request = new XHR('MSXML2.XMLHTTP.3.0');\n        request.open(type, url, true);\n        request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n\n        request.onreadystatechange = function() {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    methods.success.apply(methods, ajaxHelper.parse(request));\n                } else {\n                    methods.error.apply(methods, ajaxHelper.parse(request));\n                }\n            }\n        };\n        request.send(data);\n        return {\n            success: function(callback) {\n                methods.success = callback;\n                return methods;\n            },\n            error: function(callback) {\n                methods.error = callback;\n                return methods;\n            }\n        };\n    }\n};\n\nJss.prototype.ajax = {\n    // Get\n    get: function(src) {\n        console.log(this);\n    },\n\n    // Set\n    put: function(url, data) {\n        return this.ajaxHelper.xhr('PUT', url, data);\n    },\n\n    // Add\n    post: function(url, data) {\n        return this.ajaxHelper.xhr('POST', url, data);\n    }\n\n};\n/**\n * -----------------------------------------------------------------------------\n * Get data attribute value\n * -----------------------------------------------------------------------------\n * Returns the value of the requested attribute. Search first for a data-[ATTRIBUTE] value\n * If not found, it checks for the attribute in the default object. When that is not being\n * found neither, the normal this[attribute] value is being returned.\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME)\n * @return {string}                                                             The value of the given attribute\n */\nJss.prototype.getDataAttribute = function(attribute) {\n\n    return this.element.dataset[attribute];\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Update data attribute\n * -----------------------------------------------------------------------------\n * Set the value to the given attribute. And updates the data-[ATTRIBUTE] value\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME=\"value\")\n * @param {string} value                                                        The VALUE of the data attribute (data-name=\"VALUE\")\n * @return {undefined}\n */\n\nJss.prototype.setDataAttribute = function(attribute, value) {\n\n    // Update data attribute\n    if (typeof value !== \"undefined\") {\n        this.element.dataset[attribute] = this[attribute];\n    } else {\n        delete this.element.dataset[attribute];\n    }\n\n    return true;\n}\nJss.prototype.dataDefaultsCookie = {\n    'expireData': undefined\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get cookie value\n * -----------------------------------------------------------------------------\n * Returns cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @return {string}                                                             The VALUE of the given attribute\n */\nJss.prototype.getDataCookie = function(attribute) {\n\n    if (!attribute) { return null; }\n    return decodeURIComponent(document.cookie.replace(new RegExp(\"(?:(?:^|.*;)\\\\s*\" + encodeURIComponent(attribute).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"), \"$1\")) || null;\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data cookie\n * -----------------------------------------------------------------------------\n * Updates the cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @param {string} value                                                        The VALUE of the cookie\n * @return {undefined}\n */\n\nJss.prototype.setDataCookie = function(attribute, value, options) {\n    var endDate, path, domain, secureConnection;\n\n    if (typeof options === \"object\") {\n        endDate = JssService.getOption('endDate', options);\n        path    = JssService.getOption('path', options);\n        domain  = JssService.getOption('domain', options);\n        secureConnection = JssService.getOption('secureConnection', options);\n    }\n\n    if (!attribute || /^(?:expires|max\\-age|path|domain|secure)$/i.test(attribute)) { return false; }\n    var sExpires = \"\";\n    if (endDate) {\n      switch (endDate.constructor) {\n        case Number:\n          sExpires = endDate === Infinity ? \"; expires=Fri, 31 Dec 9999 23:59:59 GMT\" : \"; max-age=\" + endDate;\n          break;\n        case String:\n          sExpires = \"; expires=\" + endDate;\n          break;\n        case Date:\n          sExpires = \"; expires=\" + endDate.toUTCString();\n          break;\n      }\n    }\n\n    document.cookie = encodeURIComponent(attribute) + \"=\" + encodeURIComponent(value) + sExpires + (domain ? \"; domain=\" + domain : \"\") + (path ? \"; path=\" + path : \"\") + (secureConnection ? \"; secure\" : \"\");\n    return true;\n}\n/*******************************************************************************\n\n    Styles\n\n*******************************************************************************/\n\n/**\n * -----------------------------------------------------------------------------\n * Set height\n * -----------------------------------------------------------------------------\n * Sets the height of the `this.element` by the given input (height)\n *\n * @param  {number} height                                                      The height in pixels or percentage. Where numbers will be calculated to pixels so giving a height of 50 will result in a height of \"50px\". If you want percentages pass the variable with a percentage sign 50 + \"%\"\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setHeight = function(height) {\n    if (typeof height === \"number\") {\n        height += \"px\";\n    }\n\n    if (typeof height !== \"string\") {\n        throw(\"parameter height needs to be a string or integer\");\n    }\n\n    this.element.style.height = height;\n    return true;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get height\n * -----------------------------------------------------------------------------\n * Returns the height of the `this.element`\n *\n * @return {number}                                                             The height of the element in pixels\n */\nJss.prototype.getHeight = function() {\n    return this.element.offsetHeight;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set width\n * -----------------------------------------------------------------------------\n * Sets the width of the `this.element` by the given input (width)\n *\n * @param  {number} width                                                       The width in pixels or percentage. Where numbers will be calculated to pixels so giving a width of 50 will result in a width of \"50px\". If you want to set a percentage, just pass the variable with a percentage sign (\"50%\")\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setWidth = function(width) {\n    if (typeof width == \"number\") {\n        width += \"px\";\n    }\n\n    if (typeof width !== \"string\") {\n        throw(\"parameter width needs to be a string or integer\");\n    }\n    this.element.style.width = width;\n    return true;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get width\n * -----------------------------------------------------------------------------\n * Returns the width of the `this.element`\n *\n * @return {number}                                                             The width of the element in pixels\n */\nJss.prototype.getWidth = function() {\n    return this.element.offsetWidth;\n}\n/**\n * -----------------------------------------------------------------------------\n * Set State\n * -----------------------------------------------------------------------------\n * This updates the state of the object. States are being added to the class name prefix with a double underscore.\n * If you would have the module `envelope` and give it the state `open`. The class name `envelope__open` will be added.\n * Whenever you remove the state `open`, the according class name will be removed as well.\n *\n * @param  {string} str                                                         The name of the state which should be set (this is transformed to CamelCase)\n * @return {boolean}                                                            True on success, otherwise false (might already have the state)\n */\nJss.prototype.setState = function(str) {\n    var element, verifiedState, state, className;\n\n    element         = this.element;\n    state           = JssService.toCamelCase(str);\n    className       = this.classNamePrefix() + \"__is\" + state;\n\n    // Check if this.state is an array, and make it one if not.\n    if (Array.isArray(this.state) == false ) {\n        this.state = [];\n    }\n\n    // This if statement prevents that the same state is being set multiple times\n    if ( !this.hasState(str) ) {\n        this.addClassName(className)\n        this.state.push(state);\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Has state\n * -----------------------------------------------------------------------------\n * Checks if the parameter is already a state and returns true if so. Otherwise false.\n *\n * @param  {string} str                                                         The state which will be checked for\n * @return {boolean}                                                            True if it has the given state, otherwise false\n */\nJss.prototype.hasState = function(str) {\n    if (typeof this.state == \"object\" && this.state.indexOf(str) >= 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Remove state\n * -----------------------------------------------------------------------------\n * Removes the state from the states array, and from the element.className\n *\n * @param  {string} str                                                         The name of the state which should be removed\n * @return {undefined}\n */\nJss.prototype.removeState = function(str) {\n\n    var state      = JssService.toCamelCase(str);\n    var stateIndex = this.state.indexOf(state);\n\n    if (str == \"all\" || typeof str == \"undefined\") {\n        this.removeClassName(\"states\");\n    } else {\n        this.state.splice(stateIndex, 1);\n        if (typeof this.moduleAction != \"undefined\" && this.moduleAction.length > -1) {\n            this.removeClassName(this.classNamePrefix() + \"\" + this.moduleAction + \"__is\" + state);\n        } else {\n            this.removeClassName(this.classNamePrefix() + \"__is\" + state);\n        }\n    }\n}\n\n\n// A simple way to watch variables\n\n// addVar(keyName, value, watch_function)\n// setVar(keyName, value)\n// getVar(keyName)\n// Add -> new\n// Set -> update\n// Get -> return\nvar JssModule = function(){};\n\nJssModule.prototype.type               = \"JssModule\";\nJssModule.prototype.init               = Jss.prototype.init;\nJssModule.prototype.setElement         = Jss.prototype.setElement;\n\n// Triggers\nJssModule.prototype.findTriggers       = Jss.prototype.findTriggers;\nJssModule.prototype.configureTrigger      = Jss.prototype.configureTrigger;\n\n// Actions\n//JssModule.prototype.actions            = Object.create(Jss.prototype.actions);\nJssModule.prototype.validateAction     = Jss.prototype.validateAction;\nJssModule.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssModule.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssModule.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssModule.prototype.setState           = Jss.prototype.setState;\nJssModule.prototype.hasState           = Jss.prototype.hasState;\nJssModule.prototype.removeState        = Jss.prototype.removeState;\n\n// Data attributes\nJssModule.prototype.addData            = Jss.prototype.addData;\nJssModule.prototype.getData            = Jss.prototype.getData;\nJssModule.prototype.setData            = Jss.prototype.setData;\nvar JssTrigger = function(element, options) {\n    this.setElement(element);\n\n    if (typeof options === \"object\") {\n        if (typeof options.module === \"object\") {\n            this.module = options.module;\n        }\n        if (typeof options.moduleName === \"string\") {\n            this.moduleName = options.moduleName;\n        }\n        if (typeof options.triggerName === \"string\") {\n            this.triggerName = options.triggerName;\n        }\n    }\n}\n\n\nJssTrigger.prototype                    = Object.create(Jss.prototype);\nJssTrigger.prototype.type               = \"JssTrigger\";\nJssTrigger.prototype.setElement         = Jss.prototype.setElement;\n\n// Actions\n//JssTrigger.prototype.actions            = Object.create(Jss.prototype.actions);\nJssTrigger.prototype.validateAction     = Jss.prototype.validateAction;\nJssTrigger.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssTrigger.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssTrigger.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssTrigger.prototype.setState           = Jss.prototype.setState;\nJssTrigger.prototype.hasState           = Jss.prototype.hasState;\nJssTrigger.prototype.removeState        = Jss.prototype.removeState;\n\n\n\nvar  JssController = {};\nJssController.modules \t\t= []; // Result array with objects of all the found modules\nJssController.activeModules \t= JssService.activeModules;\n\nJssController.findModules = function() {\n    var allElements = document.getElementsByTagName(\"*\");                       // Array with all domElements\n    var test = [];\n    var self = this;\n    for (var i=0; i < allElements.length; i++) {\n\n        // Set default vars //\n        var element = allElements[i];                                           // Specific domElement\n        var tmp = false;\n\n        // Loop through the (active) modules array and add/instantiate them\n        self.activeModules.forEach(function(module){\n            if (JssService.isModule(element, module)) {\n                tmp = eval(\"new \" + JssService.toCamelCase(module) + \"(element)\"); // Dynamicly load modules\n\n                tmp.setElement(element);                                        // Add the domElement to the module\n                tmp.findTriggers();\t\t\t                                    // Search for module triggers\n\n                tmp.init();\t\t\t\t\t                                    // Executes everything within the init function\n                self.modules.push(tmp);\n\n            }\n        }); // End forEach\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    JssController.findModules();\n    console.log(JssController);\n});"
          },
          "params": [
            {
              "title": "param",
              "description": "String or array which needs to be camelcased",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "input"
            }
          ],
          "returns": [
            {
              "title": "returns",
              "description": "a camelcased string",
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ],
          "name": "toCamelCase",
          "kind": "function",
          "memberof": "JssService",
          "scope": "static",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            "JssService",
            "toCamelCase"
          ]
        },
        {
          "description": "-----------------------------------------------------------------------------\nTo kebab-case\n-----------------------------------------------------------------------------",
          "tags": [
            {
              "title": "param",
              "description": "String or array which needs to be camelcased",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "input"
            },
            {
              "title": "returns",
              "description": "a camelcased string",
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "name",
              "name": "toKebabCase"
            },
            {
              "title": "kind",
              "kind": "function"
            },
            {
              "title": "memberof",
              "description": "JssService"
            },
            {
              "title": "static"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 116,
                "column": 0
              },
              "end": {
                "line": 153,
                "column": 0
              }
            },
            "file": "/Users/jeffreyarts/Documents/DEV/jss/lib/jss.js",
            "code": "JssService = {};\n\n// Edit this array to enable or disable default modules\nJssService.activeModules   = []\n\n// Set this to false in a live environment\nJssService.dev             = true;\n\n/**************************\n*\n*   Below are core properties defined, becarefull when you think of changing these...\n*\n**************************/\n\n\nJssService.actions = {\n    hover:      ['hover',    'mouseover',   'onmouseover'                       ], // Fixed\n    click:      ['click',    'onclick'                                          ], // Fixed\n    mouseIn:    ['mousein',  'onmousein', 'mouseenter', 'onmouseenter'          ], // Fixed\n    mouseOut:   ['mouseout', 'onmouseout', 'mouseleave', 'onmouseleave'         ], // Fixed\n    resize:     ['resize',   'onresize'                                         ], // Fixed\n    focus:      ['focus',    'onfocus'                                          ],\n    keyDown:    ['keydown',  'keypress'                                         ],\n    keyUp:      ['keyup',    'keyrelease'                                       ],\n    change:     ['change',   'onchange'                                         ],\n};\n\nJssService.enterDelay = 1000;                                                   // Amount of miliseconds which is used to remove the entered state. (see core.actions) JssService.enterDelay setTimeout\n\nJssService.forbiddenProperties = [\n    'type',\n    'triggers',\n    'configureTrigger',\n    'findTriggers'\n];\n\n/**\n * -----------------------------------------------------------------------------\n * Is Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isModule = function(element, moduleName) {\n    var arr = element.className.split(\" \");\n    var found = false;\n\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i].indexOf(moduleName)        > -1 &&\n            arr[i].indexOf(moduleName + \"_\") == -1 &&\n            arr[i].indexOf(moduleName + \"-\") == -1)\n        {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.addModule = function(moduleName) {\n    this.activeModules.push(this.toKebabCase(moduleName))\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To CamelCase\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toCamelCase = function(input) {\n    var arr, res;\n    res = \"\";\n    if (typeof input === \"string\") {\n        input = input.replace(/\\-/g,\" \");                                       // Replace all dashes with spaces\n        arr = input.split(\" \");\n    } else {\n        arr = input;                                                            // Assume it is an array\n    }\n\n\n\n    var i = 0;\n    for (var i in arr) {\n        if (typeof i != \"undefined\") {\n            res += arr[i][0].toUpperCase()+ arr[i].slice(1); // Capitalize first letter\n        }\n    }\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To kebab-case\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toKebabCase = function(input) {\n    var res, str;\n    res = \"\";\n\n    if (typeof input === \"string\") {\n        str = input;\n    } else {                                                                    // Assume it is an array\n        str = input.join(\" \");\n    }\n\n    // First change it to camelcase\n    str = this.toCamelCase(str);\n\n    var max = str.length;\n    for (var i=0; i < max; i++) {\n        // Check if character is uppercase\n        if (str[i] != str[i].toLowerCase()) {\n            if (i!==0) {\n                str = str.substr(0, i) + \"-\" + str.substr(i);\n                i++;\n            }\n        }\n    }\n\n    return res = str.toLowerCase();\n}\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get option\n * -----------------------------------------------------------------------------\n * @param  {string} name                                                        Keyname in optionList\n * @param  {array} optionList                                                   Array with all possible options\n * @return {}                                                                   Copy of the value (optionsList[name])\n */\nJssService.getOption = function(name, optionList) {\n    if (typeof optionList !== \"object\") {\n        return false;\n    }\n\n    var res;\n\n    switch (name) {\n\n        // Only set `addDefaults` to false when it is explicitly set.\n        case \"addDefaults\":\n            if (optionList[name] !== false || typeof optionList[name] === \"undefined\") {\n                res = true;\n            } else {\n                res = false;\n            }\n        break;\n        case \"fallback\":\n            if ( Array.isArray(optionList[name]) ) {\n                res = optionList[name];\n                if (res.length===0) {\n                    res = false;\n                }\n            } else if (typeof optionList[name] === \"string\"){\n                res = [optionList[name]];\n            }\n        break;\n        default:\n        res = optionList[name]\n    }\n\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Is Trigger\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isTrigger = function(element, moduleName) {\n    if (element.className.indexOf(moduleName + \"--\") > -1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get trigger name\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {string} Name of the trigger.\n */\nJssService.getTriggerName = function(element, moduleName) {\n    if (typeof element != \"object\") {\n        console.error('Required first argument `element` needs to be a domElement.');\n        return false;\n    }\n    if (typeof moduleName != \"string\") {\n        console.error('Required second argument `moduleName` needs to be a string.');\n        return false;\n    }\n\n    // As an example we assume that the value of element.className equals 'b module--triggerName'\n    var startPos = element.className.indexOf(moduleName + \"--\");                    // 2\n    var sliced = element.className.slice(startPos, element.className.length )       // 'module--triggerName'\n    var endPos = sliced.indexOf(\" \");                                               // -1       // not found\n    if (endPos != -1) {                                                             // 19\n        sliced = sliced.slice(0,endPos);                                            // if there is more after the string, this will remove it\n    }\n    return sliced.replace(moduleName + \"--\",\"\")\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger name is allowed\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} True if the triggername is allowed, otherwise false.\n */\nJssService.triggerNameIsAllowed = function(element, moduleName) {\n    if (JssService.forbiddenProperties.indexOf(this.getTriggerName(element, moduleName)) > -1) {      // This triggerName is a core property, throw error\n        console.error('Triggername `' + getTriggerName(element,moduleName) + '` is not allowed. Change the trigger so it does not corresponds any of these: ' + JssService.forbiddenProperties)\n        return false;\n    }\n    return true;\n}\n/**\n * @module Jss\n * @author      Jeffrey Arts <sjeffff@gmail.com>\n * @copyright   2015\n */\nJss = function(){};\n\nJss.prototype.type      = \"Jss\"\nJss.prototype.triggers  = false;\nJss.prototype.element   = undefined;                                              // {obj} domElement\nJss.prototype.state     = undefined;                                              // {str} State of module, is reflected by the css class __isState\n\n/**\n * -----------------------------------------------------------------------------\n * Find Triggers\n * -----------------------------------------------------------------------------\n *\n * @param {domElement} element\n * @return {undefined}\n */\nJss.prototype.findTriggers = function(element) {\n    this.triggers = [];                                                         // If this is not set, all modules will have the same reference point to this.triggers.\n    // Module is created, now look for any module triggers\n    this.searchTriggersRecursiveInnerFunction(this.element)\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger\n * -----------------------------------------------------------------------------\n */\nJss.prototype.trigger = function(which, fn) {\n    if (typeof this.triggers !== \"object\") {\n        console.info(\"No triggers are found, please specify them in the css as `module-name--trigger-name`.\");\n        return false;\n    }\n\n    if (typeof this.triggers[which] !== \"object\") {\n        console.info(\"You are trying to execute a function on a non existing trigger `\" + which + \"`\");\n        return false;\n    }\n\n    for (var i = 0; i < this.triggers[which].length; i++) {\n        fn(this.triggers[which][i])\n    }\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Search triggers recursive inner function\n * -----------------------------------------------------------------------------\n * Recursive function which is executed bij findTriggers;\n *\n * @return {undefined}\n */\nJss.prototype.searchTriggersRecursiveInnerFunction = function(element) {\n    var self = this;\n    if (typeof element == \"undefined\" ) {\n        element = this.element;\n    }\n    if ( element.hasChildNodes() ) {\n        for (var i=0; i < element.childNodes.length; i++) {\n\n            var childElement = element.childNodes[i];                           // Improve readability\n\n            if (childElement.nodeType == 1) {                                   // NodeType 1 == domElement\n\n                if (JssService.isTrigger(childElement, this.moduleName)) {\n\n                    // Add a child element\n                    if (JssService.triggerNameIsAllowed(childElement, this.moduleName)) {\n                        var triggerName = JssService.getTriggerName(childElement, this.moduleName)\n\n                        if (typeof self.triggers[triggerName] !== \"object\") {\n                            self.triggers[triggerName] = [];\n                        }\n\n                        var tmp = new JssTrigger(childElement, {\n                            module: self,\n                            moduleName: this.moduleName,\n                            triggerName: triggerName,\n                        });\n\n                        self.triggers[triggerName].push(tmp);\n                    }\n                }\n                if (childElement.hasChildNodes()) {\n                    self.searchTriggersRecursiveInnerFunction(childElement)\n                }\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Configure Trigger\n * -----------------------------------------------------------------------------\n *\n * @return {undefined}\n */\nJss.prototype.configureTrigger = function(trigger, fn) {\n    if ( typeof this.triggers[trigger] == \"object\") {\n\n        for (var i = 0; i < this.triggers[trigger].length; i++) {\n            //self.triggers[trigger][i]\n            fn(this.triggers[trigger][i]);\n        }\n\n    } else if (JssService.dev) {\n        console.error(\"You are trying to configure a trigger which has no attached domElement\")\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n *   Init\n * -----------------------------------------------------------------------------\n * Notice the user that a init function needs to be added for controlling the triggers\n *\n * @return {undefined}\n */\nJss.prototype.init = function(func) {\n    if (JssService.dev) {\n        console.info(this.moduleName + \": Add a prototype.init function to add triggers and stuff\")\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set element\n * -----------------------------------------------------------------------------\n * Add a domElement to `this`\n *\n * @return {undefined}\n */\nJss.prototype.setElement = function(element) {\n    if (typeof element == \"undefined\") {\n        if (JssService.dev) {\n            return console.error(\"First parameter of setElement needs to be a domElement\");\n        }\n    }\n    this.element = element;\n}\n/*******************************************************************************\n   *\n   *\tActions\n   *\n   *  \t@author      Jeffrey Arts <sjeffff@gmail.com>\n   *    @copyright   2015\n   *\n*******************************************************************************/\n/**\n * -----------------------------------------------------------------------------\n *   Validate action\n * -----------------------------------------------------------------------------\n * Checks if parameter is a valid action, and logs an error when not.\n *\n * @param {string} request                                                      The name of the request\n * @return {boolean} true if a action is valid, otherwise false.\n */\nJss.prototype.validateAction = function(request) {\n    var result;\n    request = this.getActionElement(request).request\n    for (var action in JssService.actions) {\n        if (JssService.actions[action].indexOf(request.toLowerCase()) > -1) {\n            result = action;\n            break;\n        }\n    }\n    if (result) {\n        return result;\n    } else {\n        console.error(\"validateAction: unknown request\", request);\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * \t Add Action\n * -----------------------------------------------------------------------------\n * Adds an action to the object, list of possible requests can be found in Jss.actions\n *\n * | Options\n * \t\t- addDefaults {boolean}                                                 True: add default classes, false: don't\n *\n *\n *\n * @param {string} request                                                      The name of the request\n * @param {function} fn                                                         The function which should be triggered\n * @param {object} options                                                      Object with option parameters\n * @return {boolean} true if a action is succesfully added, otherwise false.\n */\nJss.prototype.addAction = function(request, fn, options) {\n\n    var self        = this;\n    var action      = self.validateAction(request)\n    var actions     = [];\n    var t = self.getActionElement(request);\n    var element     = t.element;\n    var request     = t.request;\n    t = undefined;\n\n    // Options\n    var addDefaults = JssService.getOption(\"addDefaults\", options);\n\n\n\n    switch (action) {\n\n        case \"resize\":\n\n            actions.push(element.addEventListener(\"resize\", fn));\n\n        break;\n\n\n        case \"click\":\n            actions.push(element.addEventListener(\"click\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"click\", function(){\n                    self.setState(\"Clicked\")\n                }));\n                actions.push(window.addEventListener( \"click\", function(event) {\n                    if (event.target != self.element && self.hasState(\"Clicked\")) {\n                        self.removeState(\"Clicked\")\n                    }\n                }));\n            } // End addDefaults\n        break;\n\n\n        case \"change\":\n            actions.push(element.addEventListener(\"change\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"change\", function(){\n                    self.setState(\"Changed\")\n                    setTimeout(function(){self.removeState(\"Changed\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"hover\":\n            actions.push(element.addEventListener(\"mouseover\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseover\", function(){\n                    self.setState(\"Hover\")\n                }));\n                actions.push(element.addEventListener(\"mouseout\",  function(){\n                    self.removeState(\"Hover\")\n                }));\n            }\n        break;\n\n\n        case \"mouseIn\":\n\n            actions.push(element.addEventListener(\"mouseenter\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseenter\", function(){\n                    self.setState(\"MouseIn\")\n                    setTimeout(function(){self.removeState(\"MouseIn\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"mouseOut\":\n\n            actions.push(element.addEventListener(\"mouseleave\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseleave\", function(){\n                    self.setState(\"MouseOut\")\n                    setTimeout(function(){self.removeState(\"MouseOut\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n    }\n\n\n    if (actions.length > 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get action element\n * -----------------------------------------------------------------------------\n * @param  {string} request                                                     The request\n * @return {object}                                                             An object with 2 properties: request && element\n */\nJss.prototype.getActionElement = function(request) {\n    var self = this;\n    var prefix = false;\n    var newRequest  = request;\n    var element = self.element;\n    // Set prefix if it exists\n    if (request.indexOf(\".\") > 0) {\n        var t       = request.split(\".\"),\n        newRequest  = t[1];\n        prefix      = t[0];\n        t = undefined;\n    }\n\n    // Update element according the prefix (or skip it, if not set)\n    if (prefix !== false) {\n        switch (prefix) {\n            case \"screen\":\n            case \"window\":\n                element = window;\n            break;\n        }\n    }\n\n    // Return object\n    return {\n        request: newRequest,\n        element: element\n    }\n}\n/**\n * -----------------------------------------------------------------------------\n * Class name prefix\n * -----------------------------------------------------------------------------\n * The prefix equals the modulename, or - when it's a trigger object - modulename--triggername\n *\n * @return {string} The classname\n */\nJss.prototype.classNamePrefix = function() {\n    if (this.type == \"JssTrigger\") {\n        return this.moduleName + \"--\" + this.triggerName;\n    } else {\n        return this.moduleName;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Remove class name\n * -----------------------------------------------------------------------------\n * Removes the `this.element` classname\n * \t- \"all\" || undefined        > Removes ALL classnames\n *  - \"allStates\" || \"states\"   > Remove all STATES\n *  - all other strings remove that specific string from the className\n *\n * @param {string} input                                                        The classname (case-sensitive) which needs to be removed\n * @return {undefined}\n */\nJss.prototype.removeClassName = function(input) {\n\n    var classList  = [];\n\n    if (input == \"all\" || typeof input == \"undefined\") {\n\n        this.element.className = \"\";\n\n    } else if (input == \"states\" || input == \"allStates\") {\n\n        classList = this.element.className.split(\" \");\n        for (var i in classList) {\n            className = classList[i];\n            if (className.indexOf(\"__is\") > -1) {\n                delete classList[i];\n            }\n        }\n        this.element.className = classList.join(\" \");\n\n    } else if(typeof input == \"string\") {\n        this.element.className = this.element.className.replace(input,\"\");\n    } else {\n        console.error(\"removeClassName: parameter should be a string\");\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Add class name\n * -----------------------------------------------------------------------------\n * Adds a class name by string or array.\n * Does NOT check for duplicates\n *\n * @param  {string} The classname to be added\n * @return {undefined}\n */\nJss.prototype.addClassName = function(data) {\n    this.element.className += \" \";\n    if (typeof data == \"string\") {\n        this.element.className += data;\n    } else {\n        this.element.className += data.join(\" \")\n    }\n}\n\n/**\n * List where the keys corresponds with this[key], and where the value is the function to be executed when the var is changed.\n */\nJss.prototype.setterWatchList = {};\nJss.prototype.getterWatchList = {};\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add data\n * -----------------------------------------------------------------------------\n * Add a (default) value for the given attribute.\n *\n * @param {string} attribute                                                    The name of the attribute (this[attribute])\n * @param {*} value                                                             The value of this[attribute], could be anything...\n * @param {object} options\n *           \t\t- setterWatchFunction {function}\n *           \t\t- getterWatchFunction {function}\n */\nJss.prototype.addData = function(attribute, value, options) {\n\n\n    // watchList[key] = fn;\n    var setterWatchFunction = JssService.getOption('setterWatchFunction', options); // Function\n    var getterWatchFunction = JssService.getOption('getterWatchFunction', options); // Function\n\n    if (typeof setterWatchFunction === \"function\") {\n        this.setterWatchList[attribute] = setterWatchFunction;\n    }\n\n    if (typeof getterWatchFunction === \"function\") {\n        this.getterWatchList[attribute] = getterWatchFunction;\n    }\n\n    // Set the default value\n    return this[attribute] = value;\n}\n\n\n\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- ajax {string} url\n */\nJss.prototype.setData = function(attribute, value, options) {\n\n    this[attribute] = value;\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n\n    if (Array.isArray(fallback)) {\n\n        for (var i = 0; i < fallback.length; i++) {\n            var type = fallback[i];\n\n            if (value && value.length > 0) {\n                this['setData' + JssService.toCamelCase(type)](attribute, value); // Call this.addDataAttribute(value) || this.addDataCookie(value) etc...\n                this[attribute] = value;\n            }\n        }\n    }\n\n    // Call the setter watch function, if defined;\n    if (typeof this.setterWatchList[attribute] === \"function\") { // Use the watchlist to add functionality whenever a data attribute is updated\n        this.setterWatchList[attribute]();\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataDefault {boolean}\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- dataAjax {string} url\n */\nJss.prototype.getData = function(attribute, options) {\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n    var value = false;\n\n\n    if (!fallback) {\n        fallback = ['attribute'];\n    }\n\n\n    for (var i = 0; i < fallback.length; i++) {\n        var type = JssService.toCamelCase(fallback[i]);\n        var customOptions = false;\n\n        if (typeof options == \"object\") {\n            customOptions = options[fallback[i].toLowerCase()];\n        }\n\n        if (!value || value.length < 0) {\n            if (typeof this['getData' + type] !== \"function\") {\n                console.error('this.getData' + type + ' is not a function. Probably ' + type + ' is not a available data option');\n                continue;\n            }\n            value = this['getData' + type]( attribute, customOptions ); // Call this.getDataAttribute(value) || this.getDataCookie(value) || this.getDataAjax(value) etc...\n        }\n    }\n    console.log(this.getterWatchList);\n    // Call the getter watch function, if defined;\n    if (typeof this.getterWatchList[attribute] == \"function\") {\n        this.getterWatchList[attribute]();\n    }\n\n    return this[attribute] = value;\n}\n/**\n * -----------------------------------------------------------------------------\n * Get data: Ajax\n * -----------------------------------------------------------------------------\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n *\n * @param {string} attribute                                                    The NAME of the inner variable (this.NAME), is also used as the key for the GET Request {NAME: value}\n * @param {object} options                                                      Object with parameters used to make a GET request\n * @return {string}                                                             The value of the given attribute, or false if an erro occured.\n */\nJss.prototype.getDataAjax = function(attribute, options) {\n    var url = JssService.getOption(\"url\", options);\n    var jsonKey = JssService.getOption(\"jsonKey\", options) || attribute;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('GET', url);\n\n        return ajaxReturn.success(function(result){\n            if (typeof result === \"object\") {\n                if (result[jsonKey]) {\n                    return result[jsonKey];\n                }\n            }\n        }).error(function(errorObject){\n            console.log(errorObject);\n        });\n    }\n\n    return false;\n};\n\n/**\n * -----------------------------------------------------------------------------\n * Set data: Ajax\n * -----------------------------------------------------------------------------\n * Makes a post request to the options.url in a object {attribute: value}\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n */\nJss.prototype.setDataAjax = function(attribute, value, options) {\n    var url = JssService.getOption(\"url\", options);\n    var requestObject = {}\n        requestObject[attribute] = value;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('POST', url, requestObject);\n\n        return ajaxReturn.success(function(result){\n            return true;\n        }).error(function(errorObject){\n            console.log(errorObject);\n            return false;\n        });\n    }\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Ajax (helper function)\n * -----------------------------------------------------------------------------\n * Based on Atom.js by Todd Motto\n * http://toddmotto.com/writing-a-standalone-ajax-xhr-javascript-micro-library/\n */\nJss.prototype.ajaxHelper = {\n    // Parses json if possible, otherwise just return text\n    parse: function(req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return [result, req];\n    },\n\n    xhr: function(type, url, data) {\n        var ajaxHelper = this;\n\n        var methods = {\n            success: function() {},\n            error: function() {}\n        };\n        var XHR = XMLHttpRequest || ActiveXObject;\n        var request = new XHR('MSXML2.XMLHTTP.3.0');\n        request.open(type, url, true);\n        request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n\n        request.onreadystatechange = function() {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    methods.success.apply(methods, ajaxHelper.parse(request));\n                } else {\n                    methods.error.apply(methods, ajaxHelper.parse(request));\n                }\n            }\n        };\n        request.send(data);\n        return {\n            success: function(callback) {\n                methods.success = callback;\n                return methods;\n            },\n            error: function(callback) {\n                methods.error = callback;\n                return methods;\n            }\n        };\n    }\n};\n\nJss.prototype.ajax = {\n    // Get\n    get: function(src) {\n        console.log(this);\n    },\n\n    // Set\n    put: function(url, data) {\n        return this.ajaxHelper.xhr('PUT', url, data);\n    },\n\n    // Add\n    post: function(url, data) {\n        return this.ajaxHelper.xhr('POST', url, data);\n    }\n\n};\n/**\n * -----------------------------------------------------------------------------\n * Get data attribute value\n * -----------------------------------------------------------------------------\n * Returns the value of the requested attribute. Search first for a data-[ATTRIBUTE] value\n * If not found, it checks for the attribute in the default object. When that is not being\n * found neither, the normal this[attribute] value is being returned.\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME)\n * @return {string}                                                             The value of the given attribute\n */\nJss.prototype.getDataAttribute = function(attribute) {\n\n    return this.element.dataset[attribute];\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Update data attribute\n * -----------------------------------------------------------------------------\n * Set the value to the given attribute. And updates the data-[ATTRIBUTE] value\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME=\"value\")\n * @param {string} value                                                        The VALUE of the data attribute (data-name=\"VALUE\")\n * @return {undefined}\n */\n\nJss.prototype.setDataAttribute = function(attribute, value) {\n\n    // Update data attribute\n    if (typeof value !== \"undefined\") {\n        this.element.dataset[attribute] = this[attribute];\n    } else {\n        delete this.element.dataset[attribute];\n    }\n\n    return true;\n}\nJss.prototype.dataDefaultsCookie = {\n    'expireData': undefined\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get cookie value\n * -----------------------------------------------------------------------------\n * Returns cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @return {string}                                                             The VALUE of the given attribute\n */\nJss.prototype.getDataCookie = function(attribute) {\n\n    if (!attribute) { return null; }\n    return decodeURIComponent(document.cookie.replace(new RegExp(\"(?:(?:^|.*;)\\\\s*\" + encodeURIComponent(attribute).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"), \"$1\")) || null;\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data cookie\n * -----------------------------------------------------------------------------\n * Updates the cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @param {string} value                                                        The VALUE of the cookie\n * @return {undefined}\n */\n\nJss.prototype.setDataCookie = function(attribute, value, options) {\n    var endDate, path, domain, secureConnection;\n\n    if (typeof options === \"object\") {\n        endDate = JssService.getOption('endDate', options);\n        path    = JssService.getOption('path', options);\n        domain  = JssService.getOption('domain', options);\n        secureConnection = JssService.getOption('secureConnection', options);\n    }\n\n    if (!attribute || /^(?:expires|max\\-age|path|domain|secure)$/i.test(attribute)) { return false; }\n    var sExpires = \"\";\n    if (endDate) {\n      switch (endDate.constructor) {\n        case Number:\n          sExpires = endDate === Infinity ? \"; expires=Fri, 31 Dec 9999 23:59:59 GMT\" : \"; max-age=\" + endDate;\n          break;\n        case String:\n          sExpires = \"; expires=\" + endDate;\n          break;\n        case Date:\n          sExpires = \"; expires=\" + endDate.toUTCString();\n          break;\n      }\n    }\n\n    document.cookie = encodeURIComponent(attribute) + \"=\" + encodeURIComponent(value) + sExpires + (domain ? \"; domain=\" + domain : \"\") + (path ? \"; path=\" + path : \"\") + (secureConnection ? \"; secure\" : \"\");\n    return true;\n}\n/*******************************************************************************\n\n    Styles\n\n*******************************************************************************/\n\n/**\n * -----------------------------------------------------------------------------\n * Set height\n * -----------------------------------------------------------------------------\n * Sets the height of the `this.element` by the given input (height)\n *\n * @param  {number} height                                                      The height in pixels or percentage. Where numbers will be calculated to pixels so giving a height of 50 will result in a height of \"50px\". If you want percentages pass the variable with a percentage sign 50 + \"%\"\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setHeight = function(height) {\n    if (typeof height === \"number\") {\n        height += \"px\";\n    }\n\n    if (typeof height !== \"string\") {\n        throw(\"parameter height needs to be a string or integer\");\n    }\n\n    this.element.style.height = height;\n    return true;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get height\n * -----------------------------------------------------------------------------\n * Returns the height of the `this.element`\n *\n * @return {number}                                                             The height of the element in pixels\n */\nJss.prototype.getHeight = function() {\n    return this.element.offsetHeight;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set width\n * -----------------------------------------------------------------------------\n * Sets the width of the `this.element` by the given input (width)\n *\n * @param  {number} width                                                       The width in pixels or percentage. Where numbers will be calculated to pixels so giving a width of 50 will result in a width of \"50px\". If you want to set a percentage, just pass the variable with a percentage sign (\"50%\")\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setWidth = function(width) {\n    if (typeof width == \"number\") {\n        width += \"px\";\n    }\n\n    if (typeof width !== \"string\") {\n        throw(\"parameter width needs to be a string or integer\");\n    }\n    this.element.style.width = width;\n    return true;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get width\n * -----------------------------------------------------------------------------\n * Returns the width of the `this.element`\n *\n * @return {number}                                                             The width of the element in pixels\n */\nJss.prototype.getWidth = function() {\n    return this.element.offsetWidth;\n}\n/**\n * -----------------------------------------------------------------------------\n * Set State\n * -----------------------------------------------------------------------------\n * This updates the state of the object. States are being added to the class name prefix with a double underscore.\n * If you would have the module `envelope` and give it the state `open`. The class name `envelope__open` will be added.\n * Whenever you remove the state `open`, the according class name will be removed as well.\n *\n * @param  {string} str                                                         The name of the state which should be set (this is transformed to CamelCase)\n * @return {boolean}                                                            True on success, otherwise false (might already have the state)\n */\nJss.prototype.setState = function(str) {\n    var element, verifiedState, state, className;\n\n    element         = this.element;\n    state           = JssService.toCamelCase(str);\n    className       = this.classNamePrefix() + \"__is\" + state;\n\n    // Check if this.state is an array, and make it one if not.\n    if (Array.isArray(this.state) == false ) {\n        this.state = [];\n    }\n\n    // This if statement prevents that the same state is being set multiple times\n    if ( !this.hasState(str) ) {\n        this.addClassName(className)\n        this.state.push(state);\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Has state\n * -----------------------------------------------------------------------------\n * Checks if the parameter is already a state and returns true if so. Otherwise false.\n *\n * @param  {string} str                                                         The state which will be checked for\n * @return {boolean}                                                            True if it has the given state, otherwise false\n */\nJss.prototype.hasState = function(str) {\n    if (typeof this.state == \"object\" && this.state.indexOf(str) >= 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Remove state\n * -----------------------------------------------------------------------------\n * Removes the state from the states array, and from the element.className\n *\n * @param  {string} str                                                         The name of the state which should be removed\n * @return {undefined}\n */\nJss.prototype.removeState = function(str) {\n\n    var state      = JssService.toCamelCase(str);\n    var stateIndex = this.state.indexOf(state);\n\n    if (str == \"all\" || typeof str == \"undefined\") {\n        this.removeClassName(\"states\");\n    } else {\n        this.state.splice(stateIndex, 1);\n        if (typeof this.moduleAction != \"undefined\" && this.moduleAction.length > -1) {\n            this.removeClassName(this.classNamePrefix() + \"\" + this.moduleAction + \"__is\" + state);\n        } else {\n            this.removeClassName(this.classNamePrefix() + \"__is\" + state);\n        }\n    }\n}\n\n\n// A simple way to watch variables\n\n// addVar(keyName, value, watch_function)\n// setVar(keyName, value)\n// getVar(keyName)\n// Add -> new\n// Set -> update\n// Get -> return\nvar JssModule = function(){};\n\nJssModule.prototype.type               = \"JssModule\";\nJssModule.prototype.init               = Jss.prototype.init;\nJssModule.prototype.setElement         = Jss.prototype.setElement;\n\n// Triggers\nJssModule.prototype.findTriggers       = Jss.prototype.findTriggers;\nJssModule.prototype.configureTrigger      = Jss.prototype.configureTrigger;\n\n// Actions\n//JssModule.prototype.actions            = Object.create(Jss.prototype.actions);\nJssModule.prototype.validateAction     = Jss.prototype.validateAction;\nJssModule.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssModule.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssModule.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssModule.prototype.setState           = Jss.prototype.setState;\nJssModule.prototype.hasState           = Jss.prototype.hasState;\nJssModule.prototype.removeState        = Jss.prototype.removeState;\n\n// Data attributes\nJssModule.prototype.addData            = Jss.prototype.addData;\nJssModule.prototype.getData            = Jss.prototype.getData;\nJssModule.prototype.setData            = Jss.prototype.setData;\nvar JssTrigger = function(element, options) {\n    this.setElement(element);\n\n    if (typeof options === \"object\") {\n        if (typeof options.module === \"object\") {\n            this.module = options.module;\n        }\n        if (typeof options.moduleName === \"string\") {\n            this.moduleName = options.moduleName;\n        }\n        if (typeof options.triggerName === \"string\") {\n            this.triggerName = options.triggerName;\n        }\n    }\n}\n\n\nJssTrigger.prototype                    = Object.create(Jss.prototype);\nJssTrigger.prototype.type               = \"JssTrigger\";\nJssTrigger.prototype.setElement         = Jss.prototype.setElement;\n\n// Actions\n//JssTrigger.prototype.actions            = Object.create(Jss.prototype.actions);\nJssTrigger.prototype.validateAction     = Jss.prototype.validateAction;\nJssTrigger.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssTrigger.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssTrigger.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssTrigger.prototype.setState           = Jss.prototype.setState;\nJssTrigger.prototype.hasState           = Jss.prototype.hasState;\nJssTrigger.prototype.removeState        = Jss.prototype.removeState;\n\n\n\nvar  JssController = {};\nJssController.modules \t\t= []; // Result array with objects of all the found modules\nJssController.activeModules \t= JssService.activeModules;\n\nJssController.findModules = function() {\n    var allElements = document.getElementsByTagName(\"*\");                       // Array with all domElements\n    var test = [];\n    var self = this;\n    for (var i=0; i < allElements.length; i++) {\n\n        // Set default vars //\n        var element = allElements[i];                                           // Specific domElement\n        var tmp = false;\n\n        // Loop through the (active) modules array and add/instantiate them\n        self.activeModules.forEach(function(module){\n            if (JssService.isModule(element, module)) {\n                tmp = eval(\"new \" + JssService.toCamelCase(module) + \"(element)\"); // Dynamicly load modules\n\n                tmp.setElement(element);                                        // Add the domElement to the module\n                tmp.findTriggers();\t\t\t                                    // Search for module triggers\n\n                tmp.init();\t\t\t\t\t                                    // Executes everything within the init function\n                self.modules.push(tmp);\n\n            }\n        }); // End forEach\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    JssController.findModules();\n    console.log(JssController);\n});"
          },
          "params": [
            {
              "title": "param",
              "description": "String or array which needs to be camelcased",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "input"
            }
          ],
          "returns": [
            {
              "title": "returns",
              "description": "a camelcased string",
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ],
          "name": "toKebabCase",
          "kind": "function",
          "memberof": "JssService",
          "scope": "static",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            "JssService",
            "toKebabCase"
          ]
        },
        {
          "description": "-----------------------------------------------------------------------------\nTrigger name is allowed\n-----------------------------------------------------------------------------",
          "tags": [
            {
              "title": "param",
              "description": "domElement",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "element"
            },
            {
              "title": "param",
              "description": "Name of the module",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "moduleName"
            },
            {
              "title": "returns",
              "description": "True if the triggername is allowed, otherwise false.",
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            },
            {
              "title": "name",
              "name": "triggerNameIsAllowed"
            },
            {
              "title": "kind",
              "kind": "function"
            },
            {
              "title": "memberof",
              "description": "JssService"
            },
            {
              "title": "static"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 242,
                "column": 0
              },
              "end": {
                "line": 254,
                "column": 0
              }
            },
            "file": "/Users/jeffreyarts/Documents/DEV/jss/lib/jss.js",
            "code": "JssService = {};\n\n// Edit this array to enable or disable default modules\nJssService.activeModules   = []\n\n// Set this to false in a live environment\nJssService.dev             = true;\n\n/**************************\n*\n*   Below are core properties defined, becarefull when you think of changing these...\n*\n**************************/\n\n\nJssService.actions = {\n    hover:      ['hover',    'mouseover',   'onmouseover'                       ], // Fixed\n    click:      ['click',    'onclick'                                          ], // Fixed\n    mouseIn:    ['mousein',  'onmousein', 'mouseenter', 'onmouseenter'          ], // Fixed\n    mouseOut:   ['mouseout', 'onmouseout', 'mouseleave', 'onmouseleave'         ], // Fixed\n    resize:     ['resize',   'onresize'                                         ], // Fixed\n    focus:      ['focus',    'onfocus'                                          ],\n    keyDown:    ['keydown',  'keypress'                                         ],\n    keyUp:      ['keyup',    'keyrelease'                                       ],\n    change:     ['change',   'onchange'                                         ],\n};\n\nJssService.enterDelay = 1000;                                                   // Amount of miliseconds which is used to remove the entered state. (see core.actions) JssService.enterDelay setTimeout\n\nJssService.forbiddenProperties = [\n    'type',\n    'triggers',\n    'configureTrigger',\n    'findTriggers'\n];\n\n/**\n * -----------------------------------------------------------------------------\n * Is Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isModule = function(element, moduleName) {\n    var arr = element.className.split(\" \");\n    var found = false;\n\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i].indexOf(moduleName)        > -1 &&\n            arr[i].indexOf(moduleName + \"_\") == -1 &&\n            arr[i].indexOf(moduleName + \"-\") == -1)\n        {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add Module\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.addModule = function(moduleName) {\n    this.activeModules.push(this.toKebabCase(moduleName))\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To CamelCase\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toCamelCase = function(input) {\n    var arr, res;\n    res = \"\";\n    if (typeof input === \"string\") {\n        input = input.replace(/\\-/g,\" \");                                       // Replace all dashes with spaces\n        arr = input.split(\" \");\n    } else {\n        arr = input;                                                            // Assume it is an array\n    }\n\n\n\n    var i = 0;\n    for (var i in arr) {\n        if (typeof i != \"undefined\") {\n            res += arr[i][0].toUpperCase()+ arr[i].slice(1); // Capitalize first letter\n        }\n    }\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * To kebab-case\n * -----------------------------------------------------------------------------\n *\n * @param  {string} input                                                       String or array which needs to be camelcased\n * @return {string} a camelcased string\n */\nJssService.toKebabCase = function(input) {\n    var res, str;\n    res = \"\";\n\n    if (typeof input === \"string\") {\n        str = input;\n    } else {                                                                    // Assume it is an array\n        str = input.join(\" \");\n    }\n\n    // First change it to camelcase\n    str = this.toCamelCase(str);\n\n    var max = str.length;\n    for (var i=0; i < max; i++) {\n        // Check if character is uppercase\n        if (str[i] != str[i].toLowerCase()) {\n            if (i!==0) {\n                str = str.substr(0, i) + \"-\" + str.substr(i);\n                i++;\n            }\n        }\n    }\n\n    return res = str.toLowerCase();\n}\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get option\n * -----------------------------------------------------------------------------\n * @param  {string} name                                                        Keyname in optionList\n * @param  {array} optionList                                                   Array with all possible options\n * @return {}                                                                   Copy of the value (optionsList[name])\n */\nJssService.getOption = function(name, optionList) {\n    if (typeof optionList !== \"object\") {\n        return false;\n    }\n\n    var res;\n\n    switch (name) {\n\n        // Only set `addDefaults` to false when it is explicitly set.\n        case \"addDefaults\":\n            if (optionList[name] !== false || typeof optionList[name] === \"undefined\") {\n                res = true;\n            } else {\n                res = false;\n            }\n        break;\n        case \"fallback\":\n            if ( Array.isArray(optionList[name]) ) {\n                res = optionList[name];\n                if (res.length===0) {\n                    res = false;\n                }\n            } else if (typeof optionList[name] === \"string\"){\n                res = [optionList[name]];\n            }\n        break;\n        default:\n        res = optionList[name]\n    }\n\n    return res;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Is Trigger\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} true if element is a module, otherwise false\n */\nJssService.isTrigger = function(element, moduleName) {\n    if (element.className.indexOf(moduleName + \"--\") > -1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get trigger name\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {string} Name of the trigger.\n */\nJssService.getTriggerName = function(element, moduleName) {\n    if (typeof element != \"object\") {\n        console.error('Required first argument `element` needs to be a domElement.');\n        return false;\n    }\n    if (typeof moduleName != \"string\") {\n        console.error('Required second argument `moduleName` needs to be a string.');\n        return false;\n    }\n\n    // As an example we assume that the value of element.className equals 'b module--triggerName'\n    var startPos = element.className.indexOf(moduleName + \"--\");                    // 2\n    var sliced = element.className.slice(startPos, element.className.length )       // 'module--triggerName'\n    var endPos = sliced.indexOf(\" \");                                               // -1       // not found\n    if (endPos != -1) {                                                             // 19\n        sliced = sliced.slice(0,endPos);                                            // if there is more after the string, this will remove it\n    }\n    return sliced.replace(moduleName + \"--\",\"\")\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger name is allowed\n * -----------------------------------------------------------------------------\n *\n * @param  {object} element                                                     domElement\n * @param  {string} moduleName                                                  Name of the module\n * @return {boolean} True if the triggername is allowed, otherwise false.\n */\nJssService.triggerNameIsAllowed = function(element, moduleName) {\n    if (JssService.forbiddenProperties.indexOf(this.getTriggerName(element, moduleName)) > -1) {      // This triggerName is a core property, throw error\n        console.error('Triggername `' + getTriggerName(element,moduleName) + '` is not allowed. Change the trigger so it does not corresponds any of these: ' + JssService.forbiddenProperties)\n        return false;\n    }\n    return true;\n}\n/**\n * @module Jss\n * @author      Jeffrey Arts <sjeffff@gmail.com>\n * @copyright   2015\n */\nJss = function(){};\n\nJss.prototype.type      = \"Jss\"\nJss.prototype.triggers  = false;\nJss.prototype.element   = undefined;                                              // {obj} domElement\nJss.prototype.state     = undefined;                                              // {str} State of module, is reflected by the css class __isState\n\n/**\n * -----------------------------------------------------------------------------\n * Find Triggers\n * -----------------------------------------------------------------------------\n *\n * @param {domElement} element\n * @return {undefined}\n */\nJss.prototype.findTriggers = function(element) {\n    this.triggers = [];                                                         // If this is not set, all modules will have the same reference point to this.triggers.\n    // Module is created, now look for any module triggers\n    this.searchTriggersRecursiveInnerFunction(this.element)\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Trigger\n * -----------------------------------------------------------------------------\n */\nJss.prototype.trigger = function(which, fn) {\n    if (typeof this.triggers !== \"object\") {\n        console.info(\"No triggers are found, please specify them in the css as `module-name--trigger-name`.\");\n        return false;\n    }\n\n    if (typeof this.triggers[which] !== \"object\") {\n        console.info(\"You are trying to execute a function on a non existing trigger `\" + which + \"`\");\n        return false;\n    }\n\n    for (var i = 0; i < this.triggers[which].length; i++) {\n        fn(this.triggers[which][i])\n    }\n\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Search triggers recursive inner function\n * -----------------------------------------------------------------------------\n * Recursive function which is executed bij findTriggers;\n *\n * @return {undefined}\n */\nJss.prototype.searchTriggersRecursiveInnerFunction = function(element) {\n    var self = this;\n    if (typeof element == \"undefined\" ) {\n        element = this.element;\n    }\n    if ( element.hasChildNodes() ) {\n        for (var i=0; i < element.childNodes.length; i++) {\n\n            var childElement = element.childNodes[i];                           // Improve readability\n\n            if (childElement.nodeType == 1) {                                   // NodeType 1 == domElement\n\n                if (JssService.isTrigger(childElement, this.moduleName)) {\n\n                    // Add a child element\n                    if (JssService.triggerNameIsAllowed(childElement, this.moduleName)) {\n                        var triggerName = JssService.getTriggerName(childElement, this.moduleName)\n\n                        if (typeof self.triggers[triggerName] !== \"object\") {\n                            self.triggers[triggerName] = [];\n                        }\n\n                        var tmp = new JssTrigger(childElement, {\n                            module: self,\n                            moduleName: this.moduleName,\n                            triggerName: triggerName,\n                        });\n\n                        self.triggers[triggerName].push(tmp);\n                    }\n                }\n                if (childElement.hasChildNodes()) {\n                    self.searchTriggersRecursiveInnerFunction(childElement)\n                }\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Configure Trigger\n * -----------------------------------------------------------------------------\n *\n * @return {undefined}\n */\nJss.prototype.configureTrigger = function(trigger, fn) {\n    if ( typeof this.triggers[trigger] == \"object\") {\n\n        for (var i = 0; i < this.triggers[trigger].length; i++) {\n            //self.triggers[trigger][i]\n            fn(this.triggers[trigger][i]);\n        }\n\n    } else if (JssService.dev) {\n        console.error(\"You are trying to configure a trigger which has no attached domElement\")\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n *   Init\n * -----------------------------------------------------------------------------\n * Notice the user that a init function needs to be added for controlling the triggers\n *\n * @return {undefined}\n */\nJss.prototype.init = function(func) {\n    if (JssService.dev) {\n        console.info(this.moduleName + \": Add a prototype.init function to add triggers and stuff\")\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set element\n * -----------------------------------------------------------------------------\n * Add a domElement to `this`\n *\n * @return {undefined}\n */\nJss.prototype.setElement = function(element) {\n    if (typeof element == \"undefined\") {\n        if (JssService.dev) {\n            return console.error(\"First parameter of setElement needs to be a domElement\");\n        }\n    }\n    this.element = element;\n}\n/*******************************************************************************\n   *\n   *\tActions\n   *\n   *  \t@author      Jeffrey Arts <sjeffff@gmail.com>\n   *    @copyright   2015\n   *\n*******************************************************************************/\n/**\n * -----------------------------------------------------------------------------\n *   Validate action\n * -----------------------------------------------------------------------------\n * Checks if parameter is a valid action, and logs an error when not.\n *\n * @param {string} request                                                      The name of the request\n * @return {boolean} true if a action is valid, otherwise false.\n */\nJss.prototype.validateAction = function(request) {\n    var result;\n    request = this.getActionElement(request).request\n    for (var action in JssService.actions) {\n        if (JssService.actions[action].indexOf(request.toLowerCase()) > -1) {\n            result = action;\n            break;\n        }\n    }\n    if (result) {\n        return result;\n    } else {\n        console.error(\"validateAction: unknown request\", request);\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * \t Add Action\n * -----------------------------------------------------------------------------\n * Adds an action to the object, list of possible requests can be found in Jss.actions\n *\n * | Options\n * \t\t- addDefaults {boolean}                                                 True: add default classes, false: don't\n *\n *\n *\n * @param {string} request                                                      The name of the request\n * @param {function} fn                                                         The function which should be triggered\n * @param {object} options                                                      Object with option parameters\n * @return {boolean} true if a action is succesfully added, otherwise false.\n */\nJss.prototype.addAction = function(request, fn, options) {\n\n    var self        = this;\n    var action      = self.validateAction(request)\n    var actions     = [];\n    var t = self.getActionElement(request);\n    var element     = t.element;\n    var request     = t.request;\n    t = undefined;\n\n    // Options\n    var addDefaults = JssService.getOption(\"addDefaults\", options);\n\n\n\n    switch (action) {\n\n        case \"resize\":\n\n            actions.push(element.addEventListener(\"resize\", fn));\n\n        break;\n\n\n        case \"click\":\n            actions.push(element.addEventListener(\"click\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"click\", function(){\n                    self.setState(\"Clicked\")\n                }));\n                actions.push(window.addEventListener( \"click\", function(event) {\n                    if (event.target != self.element && self.hasState(\"Clicked\")) {\n                        self.removeState(\"Clicked\")\n                    }\n                }));\n            } // End addDefaults\n        break;\n\n\n        case \"change\":\n            actions.push(element.addEventListener(\"change\", fn));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"change\", function(){\n                    self.setState(\"Changed\")\n                    setTimeout(function(){self.removeState(\"Changed\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"hover\":\n            actions.push(element.addEventListener(\"mouseover\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseover\", function(){\n                    self.setState(\"Hover\")\n                }));\n                actions.push(element.addEventListener(\"mouseout\",  function(){\n                    self.removeState(\"Hover\")\n                }));\n            }\n        break;\n\n\n        case \"mouseIn\":\n\n            actions.push(element.addEventListener(\"mouseenter\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseenter\", function(){\n                    self.setState(\"MouseIn\")\n                    setTimeout(function(){self.removeState(\"MouseIn\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n\n\n        case \"mouseOut\":\n\n            actions.push(element.addEventListener(\"mouseleave\", fn , false));\n            if (addDefaults) {                                                  // Add defaults\n                actions.push(element.addEventListener(\"mouseleave\", function(){\n                    self.setState(\"MouseOut\")\n                    setTimeout(function(){self.removeState(\"MouseOut\")}, JssService.enterDelay)\n\n                } , false));\n            }\n        break;\n    }\n\n\n    if (actions.length > 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get action element\n * -----------------------------------------------------------------------------\n * @param  {string} request                                                     The request\n * @return {object}                                                             An object with 2 properties: request && element\n */\nJss.prototype.getActionElement = function(request) {\n    var self = this;\n    var prefix = false;\n    var newRequest  = request;\n    var element = self.element;\n    // Set prefix if it exists\n    if (request.indexOf(\".\") > 0) {\n        var t       = request.split(\".\"),\n        newRequest  = t[1];\n        prefix      = t[0];\n        t = undefined;\n    }\n\n    // Update element according the prefix (or skip it, if not set)\n    if (prefix !== false) {\n        switch (prefix) {\n            case \"screen\":\n            case \"window\":\n                element = window;\n            break;\n        }\n    }\n\n    // Return object\n    return {\n        request: newRequest,\n        element: element\n    }\n}\n/**\n * -----------------------------------------------------------------------------\n * Class name prefix\n * -----------------------------------------------------------------------------\n * The prefix equals the modulename, or - when it's a trigger object - modulename--triggername\n *\n * @return {string} The classname\n */\nJss.prototype.classNamePrefix = function() {\n    if (this.type == \"JssTrigger\") {\n        return this.moduleName + \"--\" + this.triggerName;\n    } else {\n        return this.moduleName;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Remove class name\n * -----------------------------------------------------------------------------\n * Removes the `this.element` classname\n * \t- \"all\" || undefined        > Removes ALL classnames\n *  - \"allStates\" || \"states\"   > Remove all STATES\n *  - all other strings remove that specific string from the className\n *\n * @param {string} input                                                        The classname (case-sensitive) which needs to be removed\n * @return {undefined}\n */\nJss.prototype.removeClassName = function(input) {\n\n    var classList  = [];\n\n    if (input == \"all\" || typeof input == \"undefined\") {\n\n        this.element.className = \"\";\n\n    } else if (input == \"states\" || input == \"allStates\") {\n\n        classList = this.element.className.split(\" \");\n        for (var i in classList) {\n            className = classList[i];\n            if (className.indexOf(\"__is\") > -1) {\n                delete classList[i];\n            }\n        }\n        this.element.className = classList.join(\" \");\n\n    } else if(typeof input == \"string\") {\n        this.element.className = this.element.className.replace(input,\"\");\n    } else {\n        console.error(\"removeClassName: parameter should be a string\");\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Add class name\n * -----------------------------------------------------------------------------\n * Adds a class name by string or array.\n * Does NOT check for duplicates\n *\n * @param  {string} The classname to be added\n * @return {undefined}\n */\nJss.prototype.addClassName = function(data) {\n    this.element.className += \" \";\n    if (typeof data == \"string\") {\n        this.element.className += data;\n    } else {\n        this.element.className += data.join(\" \")\n    }\n}\n\n/**\n * List where the keys corresponds with this[key], and where the value is the function to be executed when the var is changed.\n */\nJss.prototype.setterWatchList = {};\nJss.prototype.getterWatchList = {};\n\n\n/**\n * -----------------------------------------------------------------------------\n * Add data\n * -----------------------------------------------------------------------------\n * Add a (default) value for the given attribute.\n *\n * @param {string} attribute                                                    The name of the attribute (this[attribute])\n * @param {*} value                                                             The value of this[attribute], could be anything...\n * @param {object} options\n *           \t\t- setterWatchFunction {function}\n *           \t\t- getterWatchFunction {function}\n */\nJss.prototype.addData = function(attribute, value, options) {\n\n\n    // watchList[key] = fn;\n    var setterWatchFunction = JssService.getOption('setterWatchFunction', options); // Function\n    var getterWatchFunction = JssService.getOption('getterWatchFunction', options); // Function\n\n    if (typeof setterWatchFunction === \"function\") {\n        this.setterWatchList[attribute] = setterWatchFunction;\n    }\n\n    if (typeof getterWatchFunction === \"function\") {\n        this.getterWatchList[attribute] = getterWatchFunction;\n    }\n\n    // Set the default value\n    return this[attribute] = value;\n}\n\n\n\n\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- ajax {string} url\n */\nJss.prototype.setData = function(attribute, value, options) {\n\n    this[attribute] = value;\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n\n    if (Array.isArray(fallback)) {\n\n        for (var i = 0; i < fallback.length; i++) {\n            var type = fallback[i];\n\n            if (value && value.length > 0) {\n                this['setData' + JssService.toCamelCase(type)](attribute, value); // Call this.addDataAttribute(value) || this.addDataCookie(value) etc...\n                this[attribute] = value;\n            }\n        }\n    }\n\n    // Call the setter watch function, if defined;\n    if (typeof this.setterWatchList[attribute] === \"function\") { // Use the watchlist to add functionality whenever a data attribute is updated\n        this.setterWatchList[attribute]();\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get data\n * -----------------------------------------------------------------------------\n *\n * @param {string} attribute\n * @param {*} value\n * @param {object} options\n *        \t\t\t\t- dataDefault {boolean}\n *        \t\t\t\t- dataAttribute {boolean}\n *        \t\t\t\t- dataAjax {string} url\n */\nJss.prototype.getData = function(attribute, options) {\n    var fallback = JssService.getOption('fallback', options); // Returns an array\n    var value = false;\n\n\n    if (!fallback) {\n        fallback = ['attribute'];\n    }\n\n\n    for (var i = 0; i < fallback.length; i++) {\n        var type = JssService.toCamelCase(fallback[i]);\n        var customOptions = false;\n\n        if (typeof options == \"object\") {\n            customOptions = options[fallback[i].toLowerCase()];\n        }\n\n        if (!value || value.length < 0) {\n            if (typeof this['getData' + type] !== \"function\") {\n                console.error('this.getData' + type + ' is not a function. Probably ' + type + ' is not a available data option');\n                continue;\n            }\n            value = this['getData' + type]( attribute, customOptions ); // Call this.getDataAttribute(value) || this.getDataCookie(value) || this.getDataAjax(value) etc...\n        }\n    }\n    console.log(this.getterWatchList);\n    // Call the getter watch function, if defined;\n    if (typeof this.getterWatchList[attribute] == \"function\") {\n        this.getterWatchList[attribute]();\n    }\n\n    return this[attribute] = value;\n}\n/**\n * -----------------------------------------------------------------------------\n * Get data: Ajax\n * -----------------------------------------------------------------------------\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n *\n * @param {string} attribute                                                    The NAME of the inner variable (this.NAME), is also used as the key for the GET Request {NAME: value}\n * @param {object} options                                                      Object with parameters used to make a GET request\n * @return {string}                                                             The value of the given attribute, or false if an erro occured.\n */\nJss.prototype.getDataAjax = function(attribute, options) {\n    var url = JssService.getOption(\"url\", options);\n    var jsonKey = JssService.getOption(\"jsonKey\", options) || attribute;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('GET', url);\n\n        return ajaxReturn.success(function(result){\n            if (typeof result === \"object\") {\n                if (result[jsonKey]) {\n                    return result[jsonKey];\n                }\n            }\n        }).error(function(errorObject){\n            console.log(errorObject);\n        });\n    }\n\n    return false;\n};\n\n/**\n * -----------------------------------------------------------------------------\n * Set data: Ajax\n * -----------------------------------------------------------------------------\n * Makes a post request to the options.url in a object {attribute: value}\n *\n * \t\t| Options |\n * \t\t- url      {string}                                                     The request url\n * \t\t- jsonKey  {string}                                                     The target key, if nested use a dot notation. If not set the attribute parameter will be used.\n */\nJss.prototype.setDataAjax = function(attribute, value, options) {\n    var url = JssService.getOption(\"url\", options);\n    var requestObject = {}\n        requestObject[attribute] = value;\n\n\n    if (typeof url === \"string\" && url.length >= 0) {\n        var ajaxReturn = this.ajaxHelper.xhr('POST', url, requestObject);\n\n        return ajaxReturn.success(function(result){\n            return true;\n        }).error(function(errorObject){\n            console.log(errorObject);\n            return false;\n        });\n    }\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Ajax (helper function)\n * -----------------------------------------------------------------------------\n * Based on Atom.js by Todd Motto\n * http://toddmotto.com/writing-a-standalone-ajax-xhr-javascript-micro-library/\n */\nJss.prototype.ajaxHelper = {\n    // Parses json if possible, otherwise just return text\n    parse: function(req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return [result, req];\n    },\n\n    xhr: function(type, url, data) {\n        var ajaxHelper = this;\n\n        var methods = {\n            success: function() {},\n            error: function() {}\n        };\n        var XHR = XMLHttpRequest || ActiveXObject;\n        var request = new XHR('MSXML2.XMLHTTP.3.0');\n        request.open(type, url, true);\n        request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n\n        request.onreadystatechange = function() {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    methods.success.apply(methods, ajaxHelper.parse(request));\n                } else {\n                    methods.error.apply(methods, ajaxHelper.parse(request));\n                }\n            }\n        };\n        request.send(data);\n        return {\n            success: function(callback) {\n                methods.success = callback;\n                return methods;\n            },\n            error: function(callback) {\n                methods.error = callback;\n                return methods;\n            }\n        };\n    }\n};\n\nJss.prototype.ajax = {\n    // Get\n    get: function(src) {\n        console.log(this);\n    },\n\n    // Set\n    put: function(url, data) {\n        return this.ajaxHelper.xhr('PUT', url, data);\n    },\n\n    // Add\n    post: function(url, data) {\n        return this.ajaxHelper.xhr('POST', url, data);\n    }\n\n};\n/**\n * -----------------------------------------------------------------------------\n * Get data attribute value\n * -----------------------------------------------------------------------------\n * Returns the value of the requested attribute. Search first for a data-[ATTRIBUTE] value\n * If not found, it checks for the attribute in the default object. When that is not being\n * found neither, the normal this[attribute] value is being returned.\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME)\n * @return {string}                                                             The value of the given attribute\n */\nJss.prototype.getDataAttribute = function(attribute) {\n\n    return this.element.dataset[attribute];\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Update data attribute\n * -----------------------------------------------------------------------------\n * Set the value to the given attribute. And updates the data-[ATTRIBUTE] value\n *\n * @param {string} attribute                                                    The NAME of the data attribute (data-NAME=\"value\")\n * @param {string} value                                                        The VALUE of the data attribute (data-name=\"VALUE\")\n * @return {undefined}\n */\n\nJss.prototype.setDataAttribute = function(attribute, value) {\n\n    // Update data attribute\n    if (typeof value !== \"undefined\") {\n        this.element.dataset[attribute] = this[attribute];\n    } else {\n        delete this.element.dataset[attribute];\n    }\n\n    return true;\n}\nJss.prototype.dataDefaultsCookie = {\n    'expireData': undefined\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get cookie value\n * -----------------------------------------------------------------------------\n * Returns cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @return {string}                                                             The VALUE of the given attribute\n */\nJss.prototype.getDataCookie = function(attribute) {\n\n    if (!attribute) { return null; }\n    return decodeURIComponent(document.cookie.replace(new RegExp(\"(?:(?:^|.*;)\\\\s*\" + encodeURIComponent(attribute).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"), \"$1\")) || null;\n\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Set data cookie\n * -----------------------------------------------------------------------------\n * Updates the cookie value.\n * Original code is from MDN (https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\n *\n * @param {string} attribute                                                    The NAME of the cookie\n * @param {string} value                                                        The VALUE of the cookie\n * @return {undefined}\n */\n\nJss.prototype.setDataCookie = function(attribute, value, options) {\n    var endDate, path, domain, secureConnection;\n\n    if (typeof options === \"object\") {\n        endDate = JssService.getOption('endDate', options);\n        path    = JssService.getOption('path', options);\n        domain  = JssService.getOption('domain', options);\n        secureConnection = JssService.getOption('secureConnection', options);\n    }\n\n    if (!attribute || /^(?:expires|max\\-age|path|domain|secure)$/i.test(attribute)) { return false; }\n    var sExpires = \"\";\n    if (endDate) {\n      switch (endDate.constructor) {\n        case Number:\n          sExpires = endDate === Infinity ? \"; expires=Fri, 31 Dec 9999 23:59:59 GMT\" : \"; max-age=\" + endDate;\n          break;\n        case String:\n          sExpires = \"; expires=\" + endDate;\n          break;\n        case Date:\n          sExpires = \"; expires=\" + endDate.toUTCString();\n          break;\n      }\n    }\n\n    document.cookie = encodeURIComponent(attribute) + \"=\" + encodeURIComponent(value) + sExpires + (domain ? \"; domain=\" + domain : \"\") + (path ? \"; path=\" + path : \"\") + (secureConnection ? \"; secure\" : \"\");\n    return true;\n}\n/*******************************************************************************\n\n    Styles\n\n*******************************************************************************/\n\n/**\n * -----------------------------------------------------------------------------\n * Set height\n * -----------------------------------------------------------------------------\n * Sets the height of the `this.element` by the given input (height)\n *\n * @param  {number} height                                                      The height in pixels or percentage. Where numbers will be calculated to pixels so giving a height of 50 will result in a height of \"50px\". If you want percentages pass the variable with a percentage sign 50 + \"%\"\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setHeight = function(height) {\n    if (typeof height === \"number\") {\n        height += \"px\";\n    }\n\n    if (typeof height !== \"string\") {\n        throw(\"parameter height needs to be a string or integer\");\n    }\n\n    this.element.style.height = height;\n    return true;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Get height\n * -----------------------------------------------------------------------------\n * Returns the height of the `this.element`\n *\n * @return {number}                                                             The height of the element in pixels\n */\nJss.prototype.getHeight = function() {\n    return this.element.offsetHeight;\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Set width\n * -----------------------------------------------------------------------------\n * Sets the width of the `this.element` by the given input (width)\n *\n * @param  {number} width                                                       The width in pixels or percentage. Where numbers will be calculated to pixels so giving a width of 50 will result in a width of \"50px\". If you want to set a percentage, just pass the variable with a percentage sign (\"50%\")\n * @return {boolean}                                                            True if setting the height was succesfull, otherwise false.\n */\nJss.prototype.setWidth = function(width) {\n    if (typeof width == \"number\") {\n        width += \"px\";\n    }\n\n    if (typeof width !== \"string\") {\n        throw(\"parameter width needs to be a string or integer\");\n    }\n    this.element.style.width = width;\n    return true;\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Get width\n * -----------------------------------------------------------------------------\n * Returns the width of the `this.element`\n *\n * @return {number}                                                             The width of the element in pixels\n */\nJss.prototype.getWidth = function() {\n    return this.element.offsetWidth;\n}\n/**\n * -----------------------------------------------------------------------------\n * Set State\n * -----------------------------------------------------------------------------\n * This updates the state of the object. States are being added to the class name prefix with a double underscore.\n * If you would have the module `envelope` and give it the state `open`. The class name `envelope__open` will be added.\n * Whenever you remove the state `open`, the according class name will be removed as well.\n *\n * @param  {string} str                                                         The name of the state which should be set (this is transformed to CamelCase)\n * @return {boolean}                                                            True on success, otherwise false (might already have the state)\n */\nJss.prototype.setState = function(str) {\n    var element, verifiedState, state, className;\n\n    element         = this.element;\n    state           = JssService.toCamelCase(str);\n    className       = this.classNamePrefix() + \"__is\" + state;\n\n    // Check if this.state is an array, and make it one if not.\n    if (Array.isArray(this.state) == false ) {\n        this.state = [];\n    }\n\n    // This if statement prevents that the same state is being set multiple times\n    if ( !this.hasState(str) ) {\n        this.addClassName(className)\n        this.state.push(state);\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------\n * Has state\n * -----------------------------------------------------------------------------\n * Checks if the parameter is already a state and returns true if so. Otherwise false.\n *\n * @param  {string} str                                                         The state which will be checked for\n * @return {boolean}                                                            True if it has the given state, otherwise false\n */\nJss.prototype.hasState = function(str) {\n    if (typeof this.state == \"object\" && this.state.indexOf(str) >= 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * -----------------------------------------------------------------------------\n * Remove state\n * -----------------------------------------------------------------------------\n * Removes the state from the states array, and from the element.className\n *\n * @param  {string} str                                                         The name of the state which should be removed\n * @return {undefined}\n */\nJss.prototype.removeState = function(str) {\n\n    var state      = JssService.toCamelCase(str);\n    var stateIndex = this.state.indexOf(state);\n\n    if (str == \"all\" || typeof str == \"undefined\") {\n        this.removeClassName(\"states\");\n    } else {\n        this.state.splice(stateIndex, 1);\n        if (typeof this.moduleAction != \"undefined\" && this.moduleAction.length > -1) {\n            this.removeClassName(this.classNamePrefix() + \"\" + this.moduleAction + \"__is\" + state);\n        } else {\n            this.removeClassName(this.classNamePrefix() + \"__is\" + state);\n        }\n    }\n}\n\n\n// A simple way to watch variables\n\n// addVar(keyName, value, watch_function)\n// setVar(keyName, value)\n// getVar(keyName)\n// Add -> new\n// Set -> update\n// Get -> return\nvar JssModule = function(){};\n\nJssModule.prototype.type               = \"JssModule\";\nJssModule.prototype.init               = Jss.prototype.init;\nJssModule.prototype.setElement         = Jss.prototype.setElement;\n\n// Triggers\nJssModule.prototype.findTriggers       = Jss.prototype.findTriggers;\nJssModule.prototype.configureTrigger      = Jss.prototype.configureTrigger;\n\n// Actions\n//JssModule.prototype.actions            = Object.create(Jss.prototype.actions);\nJssModule.prototype.validateAction     = Jss.prototype.validateAction;\nJssModule.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssModule.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssModule.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssModule.prototype.setState           = Jss.prototype.setState;\nJssModule.prototype.hasState           = Jss.prototype.hasState;\nJssModule.prototype.removeState        = Jss.prototype.removeState;\n\n// Data attributes\nJssModule.prototype.addData            = Jss.prototype.addData;\nJssModule.prototype.getData            = Jss.prototype.getData;\nJssModule.prototype.setData            = Jss.prototype.setData;\nvar JssTrigger = function(element, options) {\n    this.setElement(element);\n\n    if (typeof options === \"object\") {\n        if (typeof options.module === \"object\") {\n            this.module = options.module;\n        }\n        if (typeof options.moduleName === \"string\") {\n            this.moduleName = options.moduleName;\n        }\n        if (typeof options.triggerName === \"string\") {\n            this.triggerName = options.triggerName;\n        }\n    }\n}\n\n\nJssTrigger.prototype                    = Object.create(Jss.prototype);\nJssTrigger.prototype.type               = \"JssTrigger\";\nJssTrigger.prototype.setElement         = Jss.prototype.setElement;\n\n// Actions\n//JssTrigger.prototype.actions            = Object.create(Jss.prototype.actions);\nJssTrigger.prototype.validateAction     = Jss.prototype.validateAction;\nJssTrigger.prototype.addAction          = Jss.prototype.addAction;\n\n// Class names\nJssTrigger.prototype.removeClassName    = Jss.prototype.removeClassName;\nJssTrigger.prototype.addClassName       = Jss.prototype.addClassName;\n\n// States\nJssTrigger.prototype.setState           = Jss.prototype.setState;\nJssTrigger.prototype.hasState           = Jss.prototype.hasState;\nJssTrigger.prototype.removeState        = Jss.prototype.removeState;\n\n\n\nvar  JssController = {};\nJssController.modules \t\t= []; // Result array with objects of all the found modules\nJssController.activeModules \t= JssService.activeModules;\n\nJssController.findModules = function() {\n    var allElements = document.getElementsByTagName(\"*\");                       // Array with all domElements\n    var test = [];\n    var self = this;\n    for (var i=0; i < allElements.length; i++) {\n\n        // Set default vars //\n        var element = allElements[i];                                           // Specific domElement\n        var tmp = false;\n\n        // Loop through the (active) modules array and add/instantiate them\n        self.activeModules.forEach(function(module){\n            if (JssService.isModule(element, module)) {\n                tmp = eval(\"new \" + JssService.toCamelCase(module) + \"(element)\"); // Dynamicly load modules\n\n                tmp.setElement(element);                                        // Add the domElement to the module\n                tmp.findTriggers();\t\t\t                                    // Search for module triggers\n\n                tmp.init();\t\t\t\t\t                                    // Executes everything within the init function\n                self.modules.push(tmp);\n\n            }\n        }); // End forEach\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    JssController.findModules();\n    console.log(JssController);\n});"
          },
          "params": [
            {
              "title": "param",
              "description": "domElement",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "element"
            },
            {
              "title": "param",
              "description": "Name of the module",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "moduleName"
            }
          ],
          "returns": [
            {
              "title": "returns",
              "description": "True if the triggername is allowed, otherwise false.",
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          ],
          "name": "triggerNameIsAllowed",
          "kind": "function",
          "memberof": "JssService",
          "scope": "static",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            "JssService",
            "triggerNameIsAllowed"
          ]
        }
      ]
    },
    "path": [
      "JssService"
    ]
  }
]